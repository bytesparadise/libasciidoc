// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"

	log "github.com/sirupsen/logrus"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DocumentFragment",
			pos:  position{line: 21, col: 1, offset: 424},
			expr: &actionExpr{
				pos: position{line: 22, col: 5, offset: 448},
				run: (*parser).callonDocumentFragment1,
				expr: &seqExpr{
					pos: position{line: 22, col: 5, offset: 448},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 22, col: 5, offset: 448},
							expr: &notExpr{
								pos: position{line: 2874, col: 8, offset: 95112},
								expr: &anyMatcher{
									line: 2874, col: 9, offset: 95113,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 23, col: 5, offset: 457},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 23, col: 16, offset: 468},
								expr: &ruleRefExpr{
									pos:  position{line: 23, col: 17, offset: 469},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 24, col: 5, offset: 491},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 25, col: 9, offset: 509},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 25, col: 9, offset: 509},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 26, col: 11, offset: 530},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 27, col: 11, offset: 555},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 28, col: 11, offset: 579},
										name: "ShortcutParagraph",
									},
									&actionExpr{
										pos: position{line: 110, col: 5, offset: 3111},
										run: (*parser).callonDocumentFragment15,
										expr: &seqExpr{
											pos: position{line: 110, col: 5, offset: 3111},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 110, col: 5, offset: 3111},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 110, col: 9, offset: 3115},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 120, col: 18, offset: 3502},
														run: (*parser).callonDocumentFragment19,
														expr: &seqExpr{
															pos: position{line: 120, col: 18, offset: 3502},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 120, col: 18, offset: 3502},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 120, col: 28, offset: 3512},
																	expr: &charClassMatcher{
																		pos:        position{line: 120, col: 29, offset: 3513},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 110, col: 30, offset: 3136},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 111, col: 5, offset: 3145},
													label: "value",
													expr: &zeroOrOneExpr{
														pos: position{line: 111, col: 11, offset: 3151},
														expr: &actionExpr{
															pos: position{line: 125, col: 5, offset: 3603},
															run: (*parser).callonDocumentFragment27,
															expr: &seqExpr{
																pos: position{line: 125, col: 5, offset: 3603},
																exprs: []interface{}{
																	&actionExpr{
																		pos: position{line: 2865, col: 11, offset: 94908},
																		run: (*parser).callonDocumentFragment29,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2865, col: 11, offset: 94908},
																			expr: &charClassMatcher{
																				pos:        position{line: 2865, col: 12, offset: 94909},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 125, col: 12, offset: 3610},
																		label: "elements",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 125, col: 21, offset: 3619},
																			expr: &actionExpr{
																				pos: position{line: 129, col: 37, offset: 3778},
																				run: (*parser).callonDocumentFragment34,
																				expr: &seqExpr{
																					pos: position{line: 129, col: 37, offset: 3778},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 129, col: 37, offset: 3778},
																							expr: &choiceExpr{
																								pos: position{line: 2877, col: 8, offset: 95162},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2870, col: 12, offset: 95022},
																										run: (*parser).callonDocumentFragment38,
																										expr: &choiceExpr{
																											pos: position{line: 2870, col: 13, offset: 95023},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2870, col: 13, offset: 95023},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 20, offset: 95030},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 29, offset: 95039},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2874, col: 8, offset: 95112},
																										expr: &anyMatcher{
																											line: 2874, col: 9, offset: 95113,
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 130, col: 5, offset: 3788},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 131, col: 9, offset: 3806},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 131, col: 10, offset: 3807},
																										run: (*parser).callonDocumentFragment47,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 131, col: 10, offset: 3807},
																											expr: &charClassMatcher{
																												pos:        position{line: 131, col: 10, offset: 3807},
																												val:        "[^\\r\\n{]",
																												chars:      []rune{'\r', '\n', '{'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 416, col: 5, offset: 13530},
																										run: (*parser).callonDocumentFragment50,
																										expr: &seqExpr{
																											pos: position{line: 416, col: 5, offset: 13530},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 416, col: 5, offset: 13530},
																													run: (*parser).callonDocumentFragment52,
																												},
																												&labeledExpr{
																													pos:   position{line: 419, col: 5, offset: 13594},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 419, col: 14, offset: 13603},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 430, col: 25, offset: 14065},
																																run: (*parser).callonDocumentFragment55,
																																expr: &seqExpr{
																																	pos: position{line: 430, col: 25, offset: 14065},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 430, col: 25, offset: 14065},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 430, col: 37, offset: 14077},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonDocumentFragment59,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 430, col: 56, offset: 14096},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 430, col: 62, offset: 14102},
																																				expr: &actionExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					run: (*parser).callonDocumentFragment66,
																																					expr: &seqExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 438, col: 17, offset: 14365},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 438, col: 21, offset: 14369},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 438, col: 28, offset: 14376},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 438, col: 28, offset: 14376},
																																											run: (*parser).callonDocumentFragment71,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 438, col: 28, offset: 14376},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											run: (*parser).callonDocumentFragment73,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 440, col: 9, offset: 14430},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 430, col: 78, offset: 14118},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 434, col: 25, offset: 14220},
																																run: (*parser).callonDocumentFragment77,
																																expr: &seqExpr{
																																	pos: position{line: 434, col: 25, offset: 14220},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 434, col: 25, offset: 14220},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 434, col: 38, offset: 14233},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonDocumentFragment81,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 434, col: 57, offset: 14252},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 434, col: 63, offset: 14258},
																																				expr: &actionExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					run: (*parser).callonDocumentFragment88,
																																					expr: &seqExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 438, col: 17, offset: 14365},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 438, col: 21, offset: 14369},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 438, col: 28, offset: 14376},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 438, col: 28, offset: 14376},
																																											run: (*parser).callonDocumentFragment93,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 438, col: 28, offset: 14376},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											run: (*parser).callonDocumentFragment95,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 440, col: 9, offset: 14430},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 434, col: 79, offset: 14274},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 423, col: 31, offset: 13720},
																																run: (*parser).callonDocumentFragment99,
																																expr: &seqExpr{
																																	pos: position{line: 423, col: 31, offset: 13720},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 423, col: 31, offset: 13720},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 423, col: 35, offset: 13724},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonDocumentFragment103,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 423, col: 54, offset: 13743},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 135, col: 12, offset: 3935},
																										run: (*parser).callonDocumentFragment109,
																										expr: &litMatcher{
																											pos:        position{line: 135, col: 12, offset: 3935},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonDocumentFragment112,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 142, col: 19, offset: 4090},
										run: (*parser).callonDocumentFragment119,
										expr: &seqExpr{
											pos: position{line: 142, col: 19, offset: 4090},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 142, col: 19, offset: 4090},
													val:        ":!",
													ignoreCase: false,
													want:       "\":!\"",
												},
												&labeledExpr{
													pos:   position{line: 142, col: 24, offset: 4095},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 120, col: 18, offset: 3502},
														run: (*parser).callonDocumentFragment123,
														expr: &seqExpr{
															pos: position{line: 120, col: 18, offset: 3502},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 120, col: 18, offset: 3502},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 120, col: 28, offset: 3512},
																	expr: &charClassMatcher{
																		pos:        position{line: 120, col: 29, offset: 3513},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 142, col: 45, offset: 4116},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 142, col: 49, offset: 4120},
													expr: &actionExpr{
														pos: position{line: 2860, col: 10, offset: 94799},
														run: (*parser).callonDocumentFragment130,
														expr: &charClassMatcher{
															pos:        position{line: 2860, col: 11, offset: 94800},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonDocumentFragment133,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 144, col: 5, offset: 4187},
										run: (*parser).callonDocumentFragment140,
										expr: &seqExpr{
											pos: position{line: 144, col: 5, offset: 4187},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 144, col: 5, offset: 4187},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 144, col: 9, offset: 4191},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 120, col: 18, offset: 3502},
														run: (*parser).callonDocumentFragment144,
														expr: &seqExpr{
															pos: position{line: 120, col: 18, offset: 3502},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 120, col: 18, offset: 3502},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 120, col: 28, offset: 3512},
																	expr: &charClassMatcher{
																		pos:        position{line: 120, col: 29, offset: 3513},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 144, col: 30, offset: 4212},
													val:        "!:",
													ignoreCase: false,
													want:       "\"!:\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 144, col: 35, offset: 4217},
													expr: &actionExpr{
														pos: position{line: 2860, col: 10, offset: 94799},
														run: (*parser).callonDocumentFragment151,
														expr: &charClassMatcher{
															pos:        position{line: 2860, col: 11, offset: 94800},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonDocumentFragment154,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 802, col: 5, offset: 25352},
										run: (*parser).callonDocumentFragment161,
										expr: &seqExpr{
											pos: position{line: 802, col: 5, offset: 25352},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 802, col: 5, offset: 25352},
													run: (*parser).callonDocumentFragment163,
												},
												&zeroOrMoreExpr{
													pos: position{line: 805, col: 5, offset: 25413},
													expr: &actionExpr{
														pos: position{line: 449, col: 14, offset: 14731},
														run: (*parser).callonDocumentFragment165,
														expr: &seqExpr{
															pos: position{line: 449, col: 14, offset: 14731},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 449, col: 14, offset: 14731},
																	expr: &notExpr{
																		pos: position{line: 2874, col: 8, offset: 95112},
																		expr: &anyMatcher{
																			line: 2874, col: 9, offset: 95113,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 449, col: 19, offset: 14736},
																	expr: &actionExpr{
																		pos: position{line: 2860, col: 10, offset: 94799},
																		run: (*parser).callonDocumentFragment171,
																		expr: &charClassMatcher{
																			pos:        position{line: 2860, col: 11, offset: 94800},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2877, col: 8, offset: 95162},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonDocumentFragment174,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 806, col: 5, offset: 25463},
													label: "title",
													expr: &actionExpr{
														pos: position{line: 820, col: 5, offset: 25996},
														run: (*parser).callonDocumentFragment182,
														expr: &seqExpr{
															pos: position{line: 820, col: 5, offset: 25996},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 820, col: 5, offset: 25996},
																	val:        "=",
																	ignoreCase: false,
																	want:       "\"=\"",
																},
																&actionExpr{
																	pos: position{line: 2865, col: 11, offset: 94908},
																	run: (*parser).callonDocumentFragment185,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2865, col: 11, offset: 94908},
																		expr: &charClassMatcher{
																			pos:        position{line: 2865, col: 12, offset: 94909},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 820, col: 16, offset: 26007},
																	label: "title",
																	expr: &actionExpr{
																		pos: position{line: 2355, col: 20, offset: 79549},
																		run: (*parser).callonDocumentFragment189,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2355, col: 20, offset: 79549},
																			expr: &charClassMatcher{
																				pos:        position{line: 2355, col: 20, offset: 79549},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2877, col: 8, offset: 95162},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonDocumentFragment193,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 807, col: 5, offset: 25487},
													label: "info",
													expr: &zeroOrOneExpr{
														pos: position{line: 807, col: 10, offset: 25492},
														expr: &actionExpr{
															pos: position{line: 825, col: 5, offset: 26104},
															run: (*parser).callonDocumentFragment202,
															expr: &seqExpr{
																pos: position{line: 825, col: 5, offset: 26104},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 825, col: 5, offset: 26104},
																		expr: &actionExpr{
																			pos: position{line: 449, col: 14, offset: 14731},
																			run: (*parser).callonDocumentFragment205,
																			expr: &seqExpr{
																				pos: position{line: 449, col: 14, offset: 14731},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 449, col: 14, offset: 14731},
																						expr: &notExpr{
																							pos: position{line: 2874, col: 8, offset: 95112},
																							expr: &anyMatcher{
																								line: 2874, col: 9, offset: 95113,
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 449, col: 19, offset: 14736},
																						expr: &actionExpr{
																							pos: position{line: 2860, col: 10, offset: 94799},
																							run: (*parser).callonDocumentFragment211,
																							expr: &charClassMatcher{
																								pos:        position{line: 2860, col: 11, offset: 94800},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2877, col: 8, offset: 95162},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2870, col: 12, offset: 95022},
																								run: (*parser).callonDocumentFragment214,
																								expr: &choiceExpr{
																									pos: position{line: 2870, col: 13, offset: 95023},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2870, col: 13, offset: 95023},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2870, col: 20, offset: 95030},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2870, col: 29, offset: 95039},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2874, col: 8, offset: 95112},
																								expr: &anyMatcher{
																									line: 2874, col: 9, offset: 95113,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 826, col: 5, offset: 26119},
																		expr: &choiceExpr{
																			pos: position{line: 826, col: 6, offset: 26120},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2593, col: 22, offset: 86639},
																					run: (*parser).callonDocumentFragment223,
																					expr: &seqExpr{
																						pos: position{line: 2593, col: 22, offset: 86639},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2598, col: 31, offset: 86860},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 2598, col: 36, offset: 86865},
																								expr: &litMatcher{
																									pos:        position{line: 2598, col: 37, offset: 86866},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2593, col: 49, offset: 86666},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 2600, col: 29, offset: 86901},
																									run: (*parser).callonDocumentFragment229,
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 2600, col: 29, offset: 86901},
																										expr: &charClassMatcher{
																											pos:        position{line: 2600, col: 29, offset: 86901},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2877, col: 8, offset: 95162},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2870, col: 12, offset: 95022},
																										run: (*parser).callonDocumentFragment233,
																										expr: &choiceExpr{
																											pos: position{line: 2870, col: 13, offset: 95023},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2870, col: 13, offset: 95023},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 20, offset: 95030},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 29, offset: 95039},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2874, col: 8, offset: 95112},
																										expr: &anyMatcher{
																											line: 2874, col: 9, offset: 95113,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 536, col: 5, offset: 17285},
																					run: (*parser).callonDocumentFragment240,
																					expr: &seqExpr{
																						pos: position{line: 536, col: 5, offset: 17285},
																						exprs: []interface{}{
																							&andCodeExpr{
																								pos: position{line: 536, col: 5, offset: 17285},
																								run: (*parser).callonDocumentFragment242,
																							},
																							&litMatcher{
																								pos:        position{line: 508, col: 26, offset: 16623},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 508, col: 33, offset: 16630},
																								expr: &actionExpr{
																									pos: position{line: 2860, col: 10, offset: 94799},
																									run: (*parser).callonDocumentFragment245,
																									expr: &charClassMatcher{
																										pos:        position{line: 2860, col: 11, offset: 94800},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2877, col: 8, offset: 95162},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2870, col: 12, offset: 95022},
																										run: (*parser).callonDocumentFragment248,
																										expr: &choiceExpr{
																											pos: position{line: 2870, col: 13, offset: 95023},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2870, col: 13, offset: 95023},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 20, offset: 95030},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 29, offset: 95039},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2874, col: 8, offset: 95112},
																										expr: &anyMatcher{
																											line: 2874, col: 9, offset: 95113,
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 541, col: 5, offset: 17468},
																								run: (*parser).callonDocumentFragment255,
																							},
																							&labeledExpr{
																								pos:   position{line: 546, col: 5, offset: 17669},
																								label: "content",
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 557, col: 5, offset: 17993},
																									expr: &actionExpr{
																										pos: position{line: 557, col: 6, offset: 17994},
																										run: (*parser).callonDocumentFragment258,
																										expr: &seqExpr{
																											pos: position{line: 557, col: 6, offset: 17994},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 557, col: 6, offset: 17994},
																													expr: &choiceExpr{
																														pos: position{line: 554, col: 29, offset: 17936},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 508, col: 26, offset: 16623},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 508, col: 26, offset: 16623},
																																		val:        "////",
																																		ignoreCase: false,
																																		want:       "\"////\"",
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 508, col: 33, offset: 16630},
																																		expr: &actionExpr{
																																			pos: position{line: 2860, col: 10, offset: 94799},
																																			run: (*parser).callonDocumentFragment265,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2860, col: 11, offset: 94800},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 2877, col: 8, offset: 95162},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 2870, col: 12, offset: 95022},
																																				run: (*parser).callonDocumentFragment268,
																																				expr: &choiceExpr{
																																					pos: position{line: 2870, col: 13, offset: 95023},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 2870, col: 13, offset: 95023},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2870, col: 20, offset: 95030},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2870, col: 29, offset: 95039},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2874, col: 8, offset: 95112},
																																				expr: &anyMatcher{
																																					line: 2874, col: 9, offset: 95113,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2874, col: 8, offset: 95112},
																																expr: &anyMatcher{
																																	line: 2874, col: 9, offset: 95113,
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 558, col: 5, offset: 18024},
																													label: "line",
																													expr: &actionExpr{
																														pos: position{line: 525, col: 5, offset: 16980},
																														run: (*parser).callonDocumentFragment278,
																														expr: &seqExpr{
																															pos: position{line: 525, col: 5, offset: 16980},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 525, col: 5, offset: 16980},
																																	expr: &notExpr{
																																		pos: position{line: 2874, col: 8, offset: 95112},
																																		expr: &anyMatcher{
																																			line: 2874, col: 9, offset: 95113,
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 526, col: 5, offset: 17053},
																																	label: "content",
																																	expr: &actionExpr{
																																		pos: position{line: 526, col: 14, offset: 17062},
																																		run: (*parser).callonDocumentFragment284,
																																		expr: &zeroOrMoreExpr{
																																			pos: position{line: 526, col: 14, offset: 17062},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 526, col: 14, offset: 17062},
																																				val:        "[^\\r\\n]",
																																				chars:      []rune{'\r', '\n'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2877, col: 8, offset: 95162},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2870, col: 12, offset: 95022},
																																			run: (*parser).callonDocumentFragment288,
																																			expr: &choiceExpr{
																																				pos: position{line: 2870, col: 13, offset: 95023},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 13, offset: 95023},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 20, offset: 95030},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 29, offset: 95039},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2874, col: 8, offset: 95112},
																																			expr: &anyMatcher{
																																				line: 2874, col: 9, offset: 95113,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 547, col: 5, offset: 17703},
																								expr: &choiceExpr{
																									pos: position{line: 554, col: 29, offset: 17936},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 508, col: 26, offset: 16623},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 508, col: 26, offset: 16623},
																													val:        "////",
																													ignoreCase: false,
																													want:       "\"////\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 508, col: 33, offset: 16630},
																													expr: &actionExpr{
																														pos: position{line: 2860, col: 10, offset: 94799},
																														run: (*parser).callonDocumentFragment300,
																														expr: &charClassMatcher{
																															pos:        position{line: 2860, col: 11, offset: 94800},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2877, col: 8, offset: 95162},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 2870, col: 12, offset: 95022},
																															run: (*parser).callonDocumentFragment303,
																															expr: &choiceExpr{
																																pos: position{line: 2870, col: 13, offset: 95023},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2870, col: 13, offset: 95023},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2870, col: 20, offset: 95030},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2870, col: 29, offset: 95039},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 2874, col: 8, offset: 95112},
																															expr: &anyMatcher{
																																line: 2874, col: 9, offset: 95113,
																															},
																														},
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2874, col: 8, offset: 95112},
																											expr: &anyMatcher{
																												line: 2874, col: 9, offset: 95113,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 827, col: 5, offset: 26194},
																		label: "authors",
																		expr: &actionExpr{
																			pos: position{line: 833, col: 20, offset: 26444},
																			run: (*parser).callonDocumentFragment313,
																			expr: &seqExpr{
																				pos: position{line: 833, col: 20, offset: 26444},
																				exprs: []interface{}{
																					&zeroOrMoreExpr{
																						pos: position{line: 833, col: 20, offset: 26444},
																						expr: &actionExpr{
																							pos: position{line: 2860, col: 10, offset: 94799},
																							run: (*parser).callonDocumentFragment316,
																							expr: &charClassMatcher{
																								pos:        position{line: 2860, col: 11, offset: 94800},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 833, col: 27, offset: 26451},
																						label: "authors",
																						expr: &choiceExpr{
																							pos: position{line: 833, col: 36, offset: 26460},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 837, col: 30, offset: 26580},
																									run: (*parser).callonDocumentFragment320,
																									expr: &seqExpr{
																										pos: position{line: 837, col: 30, offset: 26580},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 837, col: 30, offset: 26580},
																												expr: &litMatcher{
																													pos:        position{line: 837, col: 31, offset: 26581},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 837, col: 35, offset: 26585},
																												label: "authors",
																												expr: &oneOrMoreExpr{
																													pos: position{line: 837, col: 44, offset: 26594},
																													expr: &actionExpr{
																														pos: position{line: 846, col: 5, offset: 26826},
																														run: (*parser).callonDocumentFragment326,
																														expr: &seqExpr{
																															pos: position{line: 846, col: 5, offset: 26826},
																															exprs: []interface{}{
																																&labeledExpr{
																																	pos:   position{line: 846, col: 5, offset: 26826},
																																	label: "fullName",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 846, col: 14, offset: 26835},
																																		expr: &actionExpr{
																																			pos: position{line: 857, col: 5, offset: 27215},
																																			run: (*parser).callonDocumentFragment330,
																																			expr: &seqExpr{
																																				pos: position{line: 857, col: 5, offset: 27215},
																																				exprs: []interface{}{
																																					&labeledExpr{
																																						pos:   position{line: 857, col: 5, offset: 27215},
																																						label: "part1",
																																						expr: &actionExpr{
																																							pos: position{line: 857, col: 12, offset: 27222},
																																							run: (*parser).callonDocumentFragment333,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 857, col: 12, offset: 27222},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 857, col: 12, offset: 27222},
																																									val:        "[^<;\\r\\n ]",
																																									chars:      []rune{'<', ';', '\r', '\n', ' '},
																																									ignoreCase: false,
																																									inverted:   true,
																																								},
																																							},
																																						},
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 860, col: 5, offset: 27302},
																																						expr: &actionExpr{
																																							pos: position{line: 2860, col: 10, offset: 94799},
																																							run: (*parser).callonDocumentFragment337,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 2860, col: 11, offset: 94800},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 861, col: 5, offset: 27313},
																																						label: "part2",
																																						expr: &zeroOrOneExpr{
																																							pos: position{line: 861, col: 11, offset: 27319},
																																							expr: &actionExpr{
																																								pos: position{line: 861, col: 12, offset: 27320},
																																								run: (*parser).callonDocumentFragment341,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 861, col: 12, offset: 27320},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 861, col: 12, offset: 27320},
																																										val:        "[^<;\\r\\n ]",
																																										chars:      []rune{'<', ';', '\r', '\n', ' '},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 864, col: 5, offset: 27401},
																																						expr: &actionExpr{
																																							pos: position{line: 2860, col: 10, offset: 94799},
																																							run: (*parser).callonDocumentFragment345,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 2860, col: 11, offset: 94800},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 865, col: 5, offset: 27412},
																																						label: "part3",
																																						expr: &zeroOrOneExpr{
																																							pos: position{line: 865, col: 11, offset: 27418},
																																							expr: &actionExpr{
																																								pos: position{line: 865, col: 12, offset: 27419},
																																								run: (*parser).callonDocumentFragment349,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 865, col: 12, offset: 27419},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 865, col: 12, offset: 27419},
																																										val:        "[^<;\\r\\n]",
																																										chars:      []rune{'<', ';', '\r', '\n'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 868, col: 5, offset: 27498},
																																						expr: &actionExpr{
																																							pos: position{line: 2860, col: 10, offset: 94799},
																																							run: (*parser).callonDocumentFragment353,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 2860, col: 11, offset: 94800},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 846, col: 40, offset: 26861},
																																	label: "email",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 846, col: 46, offset: 26867},
																																		expr: &actionExpr{
																																			pos: position{line: 874, col: 5, offset: 27620},
																																			run: (*parser).callonDocumentFragment357,
																																			expr: &seqExpr{
																																				pos: position{line: 874, col: 5, offset: 27620},
																																				exprs: []interface{}{
																																					&notExpr{
																																						pos: position{line: 874, col: 5, offset: 27620},
																																						expr: &notExpr{
																																							pos: position{line: 2874, col: 8, offset: 95112},
																																							expr: &anyMatcher{
																																								line: 2874, col: 9, offset: 95113,
																																							},
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 875, col: 5, offset: 27630},
																																						val:        "<",
																																						ignoreCase: false,
																																						want:       "\"<\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 876, col: 5, offset: 27639},
																																						label: "email",
																																						expr: &actionExpr{
																																							pos: position{line: 876, col: 12, offset: 27646},
																																							run: (*parser).callonDocumentFragment364,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 876, col: 13, offset: 27647},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 876, col: 13, offset: 27647},
																																									val:        "[^>\\r\\n]",
																																									chars:      []rune{'>', '\r', '\n'},
																																									ignoreCase: false,
																																									inverted:   true,
																																								},
																																							},
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 879, col: 5, offset: 27707},
																																						val:        ">",
																																						ignoreCase: false,
																																						want:       "\">\"",
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 846, col: 69, offset: 26890},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonDocumentFragment369,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&zeroOrOneExpr{
																																	pos: position{line: 846, col: 76, offset: 26897},
																																	expr: &litMatcher{
																																		pos:        position{line: 846, col: 76, offset: 26897},
																																		val:        ";",
																																		ignoreCase: false,
																																		want:       "\";\"",
																																	},
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 846, col: 81, offset: 26902},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonDocumentFragment374,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&andCodeExpr{
																																	pos: position{line: 847, col: 5, offset: 26914},
																																	run: (*parser).callonDocumentFragment376,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 841, col: 33, offset: 26712},
																									run: (*parser).callonDocumentFragment377,
																									expr: &seqExpr{
																										pos: position{line: 841, col: 33, offset: 26712},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 841, col: 33, offset: 26712},
																												val:        ":author:",
																												ignoreCase: false,
																												want:       "\":author:\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 841, col: 44, offset: 26723},
																												expr: &actionExpr{
																													pos: position{line: 2860, col: 10, offset: 94799},
																													run: (*parser).callonDocumentFragment381,
																													expr: &charClassMatcher{
																														pos:        position{line: 2860, col: 11, offset: 94800},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 841, col: 51, offset: 26730},
																												label: "author",
																												expr: &actionExpr{
																													pos: position{line: 846, col: 5, offset: 26826},
																													run: (*parser).callonDocumentFragment384,
																													expr: &seqExpr{
																														pos: position{line: 846, col: 5, offset: 26826},
																														exprs: []interface{}{
																															&labeledExpr{
																																pos:   position{line: 846, col: 5, offset: 26826},
																																label: "fullName",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 846, col: 14, offset: 26835},
																																	expr: &actionExpr{
																																		pos: position{line: 857, col: 5, offset: 27215},
																																		run: (*parser).callonDocumentFragment388,
																																		expr: &seqExpr{
																																			pos: position{line: 857, col: 5, offset: 27215},
																																			exprs: []interface{}{
																																				&labeledExpr{
																																					pos:   position{line: 857, col: 5, offset: 27215},
																																					label: "part1",
																																					expr: &actionExpr{
																																						pos: position{line: 857, col: 12, offset: 27222},
																																						run: (*parser).callonDocumentFragment391,
																																						expr: &oneOrMoreExpr{
																																							pos: position{line: 857, col: 12, offset: 27222},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 857, col: 12, offset: 27222},
																																								val:        "[^<;\\r\\n ]",
																																								chars:      []rune{'<', ';', '\r', '\n', ' '},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 860, col: 5, offset: 27302},
																																					expr: &actionExpr{
																																						pos: position{line: 2860, col: 10, offset: 94799},
																																						run: (*parser).callonDocumentFragment395,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2860, col: 11, offset: 94800},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 861, col: 5, offset: 27313},
																																					label: "part2",
																																					expr: &zeroOrOneExpr{
																																						pos: position{line: 861, col: 11, offset: 27319},
																																						expr: &actionExpr{
																																							pos: position{line: 861, col: 12, offset: 27320},
																																							run: (*parser).callonDocumentFragment399,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 861, col: 12, offset: 27320},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 861, col: 12, offset: 27320},
																																									val:        "[^<;\\r\\n ]",
																																									chars:      []rune{'<', ';', '\r', '\n', ' '},
																																									ignoreCase: false,
																																									inverted:   true,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 864, col: 5, offset: 27401},
																																					expr: &actionExpr{
																																						pos: position{line: 2860, col: 10, offset: 94799},
																																						run: (*parser).callonDocumentFragment403,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2860, col: 11, offset: 94800},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 865, col: 5, offset: 27412},
																																					label: "part3",
																																					expr: &zeroOrOneExpr{
																																						pos: position{line: 865, col: 11, offset: 27418},
																																						expr: &actionExpr{
																																							pos: position{line: 865, col: 12, offset: 27419},
																																							run: (*parser).callonDocumentFragment407,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 865, col: 12, offset: 27419},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 865, col: 12, offset: 27419},
																																									val:        "[^<;\\r\\n]",
																																									chars:      []rune{'<', ';', '\r', '\n'},
																																									ignoreCase: false,
																																									inverted:   true,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 868, col: 5, offset: 27498},
																																					expr: &actionExpr{
																																						pos: position{line: 2860, col: 10, offset: 94799},
																																						run: (*parser).callonDocumentFragment411,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2860, col: 11, offset: 94800},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 846, col: 40, offset: 26861},
																																label: "email",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 846, col: 46, offset: 26867},
																																	expr: &actionExpr{
																																		pos: position{line: 874, col: 5, offset: 27620},
																																		run: (*parser).callonDocumentFragment415,
																																		expr: &seqExpr{
																																			pos: position{line: 874, col: 5, offset: 27620},
																																			exprs: []interface{}{
																																				&notExpr{
																																					pos: position{line: 874, col: 5, offset: 27620},
																																					expr: &notExpr{
																																						pos: position{line: 2874, col: 8, offset: 95112},
																																						expr: &anyMatcher{
																																							line: 2874, col: 9, offset: 95113,
																																						},
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 875, col: 5, offset: 27630},
																																					val:        "<",
																																					ignoreCase: false,
																																					want:       "\"<\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 876, col: 5, offset: 27639},
																																					label: "email",
																																					expr: &actionExpr{
																																						pos: position{line: 876, col: 12, offset: 27646},
																																						run: (*parser).callonDocumentFragment422,
																																						expr: &oneOrMoreExpr{
																																							pos: position{line: 876, col: 13, offset: 27647},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 876, col: 13, offset: 27647},
																																								val:        "[^>\\r\\n]",
																																								chars:      []rune{'>', '\r', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 879, col: 5, offset: 27707},
																																					val:        ">",
																																					ignoreCase: false,
																																					want:       "\">\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 846, col: 69, offset: 26890},
																																expr: &actionExpr{
																																	pos: position{line: 2860, col: 10, offset: 94799},
																																	run: (*parser).callonDocumentFragment427,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2860, col: 11, offset: 94800},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&zeroOrOneExpr{
																																pos: position{line: 846, col: 76, offset: 26897},
																																expr: &litMatcher{
																																	pos:        position{line: 846, col: 76, offset: 26897},
																																	val:        ";",
																																	ignoreCase: false,
																																	want:       "\";\"",
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 846, col: 81, offset: 26902},
																																expr: &actionExpr{
																																	pos: position{line: 2860, col: 10, offset: 94799},
																																	run: (*parser).callonDocumentFragment432,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2860, col: 11, offset: 94800},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&andCodeExpr{
																																pos: position{line: 847, col: 5, offset: 26914},
																																run: (*parser).callonDocumentFragment434,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2877, col: 8, offset: 95162},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2870, col: 12, offset: 95022},
																								run: (*parser).callonDocumentFragment436,
																								expr: &choiceExpr{
																									pos: position{line: 2870, col: 13, offset: 95023},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2870, col: 13, offset: 95023},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2870, col: 20, offset: 95030},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2870, col: 29, offset: 95039},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2874, col: 8, offset: 95112},
																								expr: &anyMatcher{
																									line: 2874, col: 9, offset: 95113,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 828, col: 5, offset: 26225},
																		expr: &choiceExpr{
																			pos: position{line: 828, col: 6, offset: 26226},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2593, col: 22, offset: 86639},
																					run: (*parser).callonDocumentFragment445,
																					expr: &seqExpr{
																						pos: position{line: 2593, col: 22, offset: 86639},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2598, col: 31, offset: 86860},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 2598, col: 36, offset: 86865},
																								expr: &litMatcher{
																									pos:        position{line: 2598, col: 37, offset: 86866},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2593, col: 49, offset: 86666},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 2600, col: 29, offset: 86901},
																									run: (*parser).callonDocumentFragment451,
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 2600, col: 29, offset: 86901},
																										expr: &charClassMatcher{
																											pos:        position{line: 2600, col: 29, offset: 86901},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2877, col: 8, offset: 95162},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2870, col: 12, offset: 95022},
																										run: (*parser).callonDocumentFragment455,
																										expr: &choiceExpr{
																											pos: position{line: 2870, col: 13, offset: 95023},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2870, col: 13, offset: 95023},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 20, offset: 95030},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 29, offset: 95039},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2874, col: 8, offset: 95112},
																										expr: &anyMatcher{
																											line: 2874, col: 9, offset: 95113,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 536, col: 5, offset: 17285},
																					run: (*parser).callonDocumentFragment462,
																					expr: &seqExpr{
																						pos: position{line: 536, col: 5, offset: 17285},
																						exprs: []interface{}{
																							&andCodeExpr{
																								pos: position{line: 536, col: 5, offset: 17285},
																								run: (*parser).callonDocumentFragment464,
																							},
																							&litMatcher{
																								pos:        position{line: 508, col: 26, offset: 16623},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 508, col: 33, offset: 16630},
																								expr: &actionExpr{
																									pos: position{line: 2860, col: 10, offset: 94799},
																									run: (*parser).callonDocumentFragment467,
																									expr: &charClassMatcher{
																										pos:        position{line: 2860, col: 11, offset: 94800},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2877, col: 8, offset: 95162},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2870, col: 12, offset: 95022},
																										run: (*parser).callonDocumentFragment470,
																										expr: &choiceExpr{
																											pos: position{line: 2870, col: 13, offset: 95023},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2870, col: 13, offset: 95023},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 20, offset: 95030},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 29, offset: 95039},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2874, col: 8, offset: 95112},
																										expr: &anyMatcher{
																											line: 2874, col: 9, offset: 95113,
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 541, col: 5, offset: 17468},
																								run: (*parser).callonDocumentFragment477,
																							},
																							&labeledExpr{
																								pos:   position{line: 546, col: 5, offset: 17669},
																								label: "content",
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 557, col: 5, offset: 17993},
																									expr: &actionExpr{
																										pos: position{line: 557, col: 6, offset: 17994},
																										run: (*parser).callonDocumentFragment480,
																										expr: &seqExpr{
																											pos: position{line: 557, col: 6, offset: 17994},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 557, col: 6, offset: 17994},
																													expr: &choiceExpr{
																														pos: position{line: 554, col: 29, offset: 17936},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 508, col: 26, offset: 16623},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 508, col: 26, offset: 16623},
																																		val:        "////",
																																		ignoreCase: false,
																																		want:       "\"////\"",
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 508, col: 33, offset: 16630},
																																		expr: &actionExpr{
																																			pos: position{line: 2860, col: 10, offset: 94799},
																																			run: (*parser).callonDocumentFragment487,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2860, col: 11, offset: 94800},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 2877, col: 8, offset: 95162},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 2870, col: 12, offset: 95022},
																																				run: (*parser).callonDocumentFragment490,
																																				expr: &choiceExpr{
																																					pos: position{line: 2870, col: 13, offset: 95023},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 2870, col: 13, offset: 95023},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2870, col: 20, offset: 95030},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2870, col: 29, offset: 95039},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2874, col: 8, offset: 95112},
																																				expr: &anyMatcher{
																																					line: 2874, col: 9, offset: 95113,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2874, col: 8, offset: 95112},
																																expr: &anyMatcher{
																																	line: 2874, col: 9, offset: 95113,
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 558, col: 5, offset: 18024},
																													label: "line",
																													expr: &actionExpr{
																														pos: position{line: 525, col: 5, offset: 16980},
																														run: (*parser).callonDocumentFragment500,
																														expr: &seqExpr{
																															pos: position{line: 525, col: 5, offset: 16980},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 525, col: 5, offset: 16980},
																																	expr: &notExpr{
																																		pos: position{line: 2874, col: 8, offset: 95112},
																																		expr: &anyMatcher{
																																			line: 2874, col: 9, offset: 95113,
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 526, col: 5, offset: 17053},
																																	label: "content",
																																	expr: &actionExpr{
																																		pos: position{line: 526, col: 14, offset: 17062},
																																		run: (*parser).callonDocumentFragment506,
																																		expr: &zeroOrMoreExpr{
																																			pos: position{line: 526, col: 14, offset: 17062},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 526, col: 14, offset: 17062},
																																				val:        "[^\\r\\n]",
																																				chars:      []rune{'\r', '\n'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2877, col: 8, offset: 95162},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2870, col: 12, offset: 95022},
																																			run: (*parser).callonDocumentFragment510,
																																			expr: &choiceExpr{
																																				pos: position{line: 2870, col: 13, offset: 95023},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 13, offset: 95023},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 20, offset: 95030},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 29, offset: 95039},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2874, col: 8, offset: 95112},
																																			expr: &anyMatcher{
																																				line: 2874, col: 9, offset: 95113,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 547, col: 5, offset: 17703},
																								expr: &choiceExpr{
																									pos: position{line: 554, col: 29, offset: 17936},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 508, col: 26, offset: 16623},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 508, col: 26, offset: 16623},
																													val:        "////",
																													ignoreCase: false,
																													want:       "\"////\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 508, col: 33, offset: 16630},
																													expr: &actionExpr{
																														pos: position{line: 2860, col: 10, offset: 94799},
																														run: (*parser).callonDocumentFragment522,
																														expr: &charClassMatcher{
																															pos:        position{line: 2860, col: 11, offset: 94800},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2877, col: 8, offset: 95162},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 2870, col: 12, offset: 95022},
																															run: (*parser).callonDocumentFragment525,
																															expr: &choiceExpr{
																																pos: position{line: 2870, col: 13, offset: 95023},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2870, col: 13, offset: 95023},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2870, col: 20, offset: 95030},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2870, col: 29, offset: 95039},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 2874, col: 8, offset: 95112},
																															expr: &anyMatcher{
																																line: 2874, col: 9, offset: 95113,
																															},
																														},
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2874, col: 8, offset: 95112},
																											expr: &anyMatcher{
																												line: 2874, col: 9, offset: 95113,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 829, col: 5, offset: 26300},
																		label: "revision",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 829, col: 14, offset: 26309},
																			expr: &actionExpr{
																				pos: position{line: 885, col: 21, offset: 27896},
																				run: (*parser).callonDocumentFragment536,
																				expr: &seqExpr{
																					pos: position{line: 885, col: 21, offset: 27896},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 885, col: 21, offset: 27896},
																							expr: &actionExpr{
																								pos: position{line: 2860, col: 10, offset: 94799},
																								run: (*parser).callonDocumentFragment539,
																								expr: &charClassMatcher{
																									pos:        position{line: 2860, col: 11, offset: 94800},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 885, col: 28, offset: 27903},
																							expr: &litMatcher{
																								pos:        position{line: 885, col: 29, offset: 27904},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 885, col: 33, offset: 27908},
																							label: "revision",
																							expr: &choiceExpr{
																								pos: position{line: 886, col: 9, offset: 27927},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 886, col: 10, offset: 27928},
																										run: (*parser).callonDocumentFragment545,
																										expr: &seqExpr{
																											pos: position{line: 886, col: 10, offset: 27928},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 886, col: 10, offset: 27928},
																													label: "revnumber",
																													expr: &choiceExpr{
																														pos: position{line: 895, col: 27, offset: 28445},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 895, col: 27, offset: 28445},
																																run: (*parser).callonDocumentFragment549,
																																expr: &seqExpr{
																																	pos: position{line: 895, col: 27, offset: 28445},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 895, col: 27, offset: 28445},
																																			val:        "v",
																																			ignoreCase: true,
																																			want:       "\"v\"i",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2852, col: 10, offset: 94663},
																																			run: (*parser).callonDocumentFragment552,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2852, col: 10, offset: 94663},
																																				val:        "[0-9]",
																																				ranges:     []rune{'0', '9'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&oneOrMoreExpr{
																																			pos: position{line: 895, col: 39, offset: 28457},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 895, col: 39, offset: 28457},
																																				val:        "[^:,\\r\\n]",
																																				chars:      []rune{':', ',', '\r', '\n'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 897, col: 5, offset: 28505},
																																run: (*parser).callonDocumentFragment556,
																																expr: &seqExpr{
																																	pos: position{line: 897, col: 5, offset: 28505},
																																	exprs: []interface{}{
																																		&zeroOrOneExpr{
																																			pos: position{line: 897, col: 5, offset: 28505},
																																			expr: &litMatcher{
																																				pos:        position{line: 897, col: 5, offset: 28505},
																																				val:        "v",
																																				ignoreCase: true,
																																				want:       "\"v\"i",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2852, col: 10, offset: 94663},
																																			run: (*parser).callonDocumentFragment560,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2852, col: 10, offset: 94663},
																																				val:        "[0-9]",
																																				ranges:     []rune{'0', '9'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&oneOrMoreExpr{
																																			pos: position{line: 897, col: 18, offset: 28518},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 897, col: 18, offset: 28518},
																																				val:        "[^:,\\r\\n]",
																																				chars:      []rune{':', ',', '\r', '\n'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 897, col: 29, offset: 28529},
																																			expr: &actionExpr{
																																				pos: position{line: 2860, col: 10, offset: 94799},
																																				run: (*parser).callonDocumentFragment565,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2860, col: 11, offset: 94800},
																																					val:        "[ \\t]",
																																					chars:      []rune{' ', '\t'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&andExpr{
																																			pos: position{line: 897, col: 36, offset: 28536},
																																			expr: &litMatcher{
																																				pos:        position{line: 897, col: 37, offset: 28537},
																																				val:        ",",
																																				ignoreCase: false,
																																				want:       "\",\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 886, col: 45, offset: 27963},
																													expr: &litMatcher{
																														pos:        position{line: 886, col: 45, offset: 27963},
																														val:        ",",
																														ignoreCase: false,
																														want:       "\",\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 886, col: 50, offset: 27968},
																													label: "revdate",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 886, col: 58, offset: 27976},
																														expr: &actionExpr{
																															pos: position{line: 901, col: 25, offset: 28601},
																															run: (*parser).callonDocumentFragment573,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 901, col: 25, offset: 28601},
																																expr: &charClassMatcher{
																																	pos:        position{line: 901, col: 25, offset: 28601},
																																	val:        "[^:\\r\\n]",
																																	chars:      []rune{':', '\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 886, col: 82, offset: 28000},
																													expr: &litMatcher{
																														pos:        position{line: 886, col: 82, offset: 28000},
																														val:        ":",
																														ignoreCase: false,
																														want:       "\":\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 886, col: 87, offset: 28005},
																													label: "revremark",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 886, col: 97, offset: 28015},
																														expr: &actionExpr{
																															pos: position{line: 905, col: 27, offset: 28673},
																															run: (*parser).callonDocumentFragment580,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 905, col: 27, offset: 28673},
																																expr: &charClassMatcher{
																																	pos:        position{line: 905, col: 27, offset: 28673},
																																	val:        "[^\\r\\n]",
																																	chars:      []rune{'\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 888, col: 15, offset: 28133},
																										run: (*parser).callonDocumentFragment583,
																										expr: &seqExpr{
																											pos: position{line: 888, col: 15, offset: 28133},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 888, col: 15, offset: 28133},
																													label: "revdate",
																													expr: &actionExpr{
																														pos: position{line: 901, col: 25, offset: 28601},
																														run: (*parser).callonDocumentFragment586,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 901, col: 25, offset: 28601},
																															expr: &charClassMatcher{
																																pos:        position{line: 901, col: 25, offset: 28601},
																																val:        "[^:\\r\\n]",
																																chars:      []rune{':', '\r', '\n'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 888, col: 46, offset: 28164},
																													expr: &litMatcher{
																														pos:        position{line: 888, col: 46, offset: 28164},
																														val:        ":",
																														ignoreCase: false,
																														want:       "\":\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 888, col: 51, offset: 28169},
																													label: "revremark",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 888, col: 61, offset: 28179},
																														expr: &actionExpr{
																															pos: position{line: 905, col: 27, offset: 28673},
																															run: (*parser).callonDocumentFragment593,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 905, col: 27, offset: 28673},
																																expr: &charClassMatcher{
																																	pos:        position{line: 905, col: 27, offset: 28673},
																																	val:        "[^\\r\\n]",
																																	chars:      []rune{'\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2877, col: 8, offset: 95162},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2870, col: 12, offset: 95022},
																									run: (*parser).callonDocumentFragment597,
																									expr: &choiceExpr{
																										pos: position{line: 2870, col: 13, offset: 95023},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2870, col: 13, offset: 95023},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2870, col: 20, offset: 95030},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2870, col: 29, offset: 95039},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2874, col: 8, offset: 95112},
																									expr: &anyMatcher{
																										line: 2874, col: 9, offset: 95113,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 808, col: 5, offset: 25517},
													label: "extraAttrs",
													expr: &zeroOrMoreExpr{
														pos: position{line: 808, col: 16, offset: 25528},
														expr: &choiceExpr{
															pos: position{line: 808, col: 17, offset: 25529},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 110, col: 5, offset: 3111},
																	run: (*parser).callonDocumentFragment607,
																	expr: &seqExpr{
																		pos: position{line: 110, col: 5, offset: 3111},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 110, col: 5, offset: 3111},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 110, col: 9, offset: 3115},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					run: (*parser).callonDocumentFragment611,
																					expr: &seqExpr{
																						pos: position{line: 120, col: 18, offset: 3502},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 120, col: 18, offset: 3502},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 120, col: 28, offset: 3512},
																								expr: &charClassMatcher{
																									pos:        position{line: 120, col: 29, offset: 3513},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 110, col: 30, offset: 3136},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 111, col: 5, offset: 3145},
																				label: "value",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 111, col: 11, offset: 3151},
																					expr: &actionExpr{
																						pos: position{line: 125, col: 5, offset: 3603},
																						run: (*parser).callonDocumentFragment619,
																						expr: &seqExpr{
																							pos: position{line: 125, col: 5, offset: 3603},
																							exprs: []interface{}{
																								&actionExpr{
																									pos: position{line: 2865, col: 11, offset: 94908},
																									run: (*parser).callonDocumentFragment621,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2865, col: 11, offset: 94908},
																										expr: &charClassMatcher{
																											pos:        position{line: 2865, col: 12, offset: 94909},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 125, col: 12, offset: 3610},
																									label: "elements",
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 125, col: 21, offset: 3619},
																										expr: &actionExpr{
																											pos: position{line: 129, col: 37, offset: 3778},
																											run: (*parser).callonDocumentFragment626,
																											expr: &seqExpr{
																												pos: position{line: 129, col: 37, offset: 3778},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 129, col: 37, offset: 3778},
																														expr: &choiceExpr{
																															pos: position{line: 2877, col: 8, offset: 95162},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 2870, col: 12, offset: 95022},
																																	run: (*parser).callonDocumentFragment630,
																																	expr: &choiceExpr{
																																		pos: position{line: 2870, col: 13, offset: 95023},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2870, col: 13, offset: 95023},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2870, col: 20, offset: 95030},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2870, col: 29, offset: 95039},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 2874, col: 8, offset: 95112},
																																	expr: &anyMatcher{
																																		line: 2874, col: 9, offset: 95113,
																																	},
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 130, col: 5, offset: 3788},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 131, col: 9, offset: 3806},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 131, col: 10, offset: 3807},
																																	run: (*parser).callonDocumentFragment639,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 131, col: 10, offset: 3807},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 131, col: 10, offset: 3807},
																																			val:        "[^\\r\\n{]",
																																			chars:      []rune{'\r', '\n', '{'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 416, col: 5, offset: 13530},
																																	run: (*parser).callonDocumentFragment642,
																																	expr: &seqExpr{
																																		pos: position{line: 416, col: 5, offset: 13530},
																																		exprs: []interface{}{
																																			&andCodeExpr{
																																				pos: position{line: 416, col: 5, offset: 13530},
																																				run: (*parser).callonDocumentFragment644,
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 419, col: 5, offset: 13594},
																																				label: "element",
																																				expr: &choiceExpr{
																																					pos: position{line: 419, col: 14, offset: 13603},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 430, col: 25, offset: 14065},
																																							run: (*parser).callonDocumentFragment647,
																																							expr: &seqExpr{
																																								pos: position{line: 430, col: 25, offset: 14065},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 430, col: 25, offset: 14065},
																																										val:        "{counter:",
																																										ignoreCase: false,
																																										want:       "\"{counter:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 430, col: 37, offset: 14077},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 120, col: 18, offset: 3502},
																																											run: (*parser).callonDocumentFragment651,
																																											expr: &seqExpr{
																																												pos: position{line: 120, col: 18, offset: 3502},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 120, col: 18, offset: 3502},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 120, col: 28, offset: 3512},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 120, col: 29, offset: 3513},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 430, col: 56, offset: 14096},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 430, col: 62, offset: 14102},
																																											expr: &actionExpr{
																																												pos: position{line: 438, col: 17, offset: 14365},
																																												run: (*parser).callonDocumentFragment658,
																																												expr: &seqExpr{
																																													pos: position{line: 438, col: 17, offset: 14365},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 438, col: 17, offset: 14365},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 438, col: 21, offset: 14369},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 438, col: 28, offset: 14376},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 438, col: 28, offset: 14376},
																																																		run: (*parser).callonDocumentFragment663,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 438, col: 28, offset: 14376},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 440, col: 9, offset: 14430},
																																																		run: (*parser).callonDocumentFragment665,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 440, col: 9, offset: 14430},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 440, col: 9, offset: 14430},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 430, col: 78, offset: 14118},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 434, col: 25, offset: 14220},
																																							run: (*parser).callonDocumentFragment669,
																																							expr: &seqExpr{
																																								pos: position{line: 434, col: 25, offset: 14220},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 434, col: 25, offset: 14220},
																																										val:        "{counter2:",
																																										ignoreCase: false,
																																										want:       "\"{counter2:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 434, col: 38, offset: 14233},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 120, col: 18, offset: 3502},
																																											run: (*parser).callonDocumentFragment673,
																																											expr: &seqExpr{
																																												pos: position{line: 120, col: 18, offset: 3502},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 120, col: 18, offset: 3502},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 120, col: 28, offset: 3512},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 120, col: 29, offset: 3513},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 434, col: 57, offset: 14252},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 434, col: 63, offset: 14258},
																																											expr: &actionExpr{
																																												pos: position{line: 438, col: 17, offset: 14365},
																																												run: (*parser).callonDocumentFragment680,
																																												expr: &seqExpr{
																																													pos: position{line: 438, col: 17, offset: 14365},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 438, col: 17, offset: 14365},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 438, col: 21, offset: 14369},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 438, col: 28, offset: 14376},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 438, col: 28, offset: 14376},
																																																		run: (*parser).callonDocumentFragment685,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 438, col: 28, offset: 14376},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 440, col: 9, offset: 14430},
																																																		run: (*parser).callonDocumentFragment687,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 440, col: 9, offset: 14430},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 440, col: 9, offset: 14430},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 434, col: 79, offset: 14274},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 423, col: 31, offset: 13720},
																																							run: (*parser).callonDocumentFragment691,
																																							expr: &seqExpr{
																																								pos: position{line: 423, col: 31, offset: 13720},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 423, col: 31, offset: 13720},
																																										val:        "{",
																																										ignoreCase: false,
																																										want:       "\"{\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 423, col: 35, offset: 13724},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 120, col: 18, offset: 3502},
																																											run: (*parser).callonDocumentFragment695,
																																											expr: &seqExpr{
																																												pos: position{line: 120, col: 18, offset: 3502},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 120, col: 18, offset: 3502},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 120, col: 28, offset: 3512},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 120, col: 29, offset: 3513},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 423, col: 54, offset: 13743},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 135, col: 12, offset: 3935},
																																	run: (*parser).callonDocumentFragment701,
																																	expr: &litMatcher{
																																		pos:        position{line: 135, col: 12, offset: 3935},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2877, col: 8, offset: 95162},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2870, col: 12, offset: 95022},
																						run: (*parser).callonDocumentFragment704,
																						expr: &choiceExpr{
																							pos: position{line: 2870, col: 13, offset: 95023},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2870, col: 13, offset: 95023},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2870, col: 20, offset: 95030},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2870, col: 29, offset: 95039},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2874, col: 8, offset: 95112},
																						expr: &anyMatcher{
																							line: 2874, col: 9, offset: 95113,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 142, col: 19, offset: 4090},
																	run: (*parser).callonDocumentFragment711,
																	expr: &seqExpr{
																		pos: position{line: 142, col: 19, offset: 4090},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 142, col: 19, offset: 4090},
																				val:        ":!",
																				ignoreCase: false,
																				want:       "\":!\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 142, col: 24, offset: 4095},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					run: (*parser).callonDocumentFragment715,
																					expr: &seqExpr{
																						pos: position{line: 120, col: 18, offset: 3502},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 120, col: 18, offset: 3502},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 120, col: 28, offset: 3512},
																								expr: &charClassMatcher{
																									pos:        position{line: 120, col: 29, offset: 3513},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 142, col: 45, offset: 4116},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 142, col: 49, offset: 4120},
																				expr: &actionExpr{
																					pos: position{line: 2860, col: 10, offset: 94799},
																					run: (*parser).callonDocumentFragment722,
																					expr: &charClassMatcher{
																						pos:        position{line: 2860, col: 11, offset: 94800},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2877, col: 8, offset: 95162},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2870, col: 12, offset: 95022},
																						run: (*parser).callonDocumentFragment725,
																						expr: &choiceExpr{
																							pos: position{line: 2870, col: 13, offset: 95023},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2870, col: 13, offset: 95023},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2870, col: 20, offset: 95030},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2870, col: 29, offset: 95039},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2874, col: 8, offset: 95112},
																						expr: &anyMatcher{
																							line: 2874, col: 9, offset: 95113,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 144, col: 5, offset: 4187},
																	run: (*parser).callonDocumentFragment732,
																	expr: &seqExpr{
																		pos: position{line: 144, col: 5, offset: 4187},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 144, col: 5, offset: 4187},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 144, col: 9, offset: 4191},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					run: (*parser).callonDocumentFragment736,
																					expr: &seqExpr{
																						pos: position{line: 120, col: 18, offset: 3502},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 120, col: 18, offset: 3502},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 120, col: 28, offset: 3512},
																								expr: &charClassMatcher{
																									pos:        position{line: 120, col: 29, offset: 3513},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 144, col: 30, offset: 4212},
																				val:        "!:",
																				ignoreCase: false,
																				want:       "\"!:\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 144, col: 35, offset: 4217},
																				expr: &actionExpr{
																					pos: position{line: 2860, col: 10, offset: 94799},
																					run: (*parser).callonDocumentFragment743,
																					expr: &charClassMatcher{
																						pos:        position{line: 2860, col: 11, offset: 94800},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2877, col: 8, offset: 95162},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2870, col: 12, offset: 95022},
																						run: (*parser).callonDocumentFragment746,
																						expr: &choiceExpr{
																							pos: position{line: 2870, col: 13, offset: 95023},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2870, col: 13, offset: 95023},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2870, col: 20, offset: 95030},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2870, col: 29, offset: 95039},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2874, col: 8, offset: 95112},
																						expr: &anyMatcher{
																							line: 2874, col: 9, offset: 95113,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 449, col: 14, offset: 14731},
										run: (*parser).callonDocumentFragment753,
										expr: &seqExpr{
											pos: position{line: 449, col: 14, offset: 14731},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 449, col: 14, offset: 14731},
													expr: &notExpr{
														pos: position{line: 2874, col: 8, offset: 95112},
														expr: &anyMatcher{
															line: 2874, col: 9, offset: 95113,
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 449, col: 19, offset: 14736},
													expr: &actionExpr{
														pos: position{line: 2860, col: 10, offset: 94799},
														run: (*parser).callonDocumentFragment759,
														expr: &charClassMatcher{
															pos:        position{line: 2860, col: 11, offset: 94800},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonDocumentFragment762,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2340, col: 5, offset: 79083},
										run: (*parser).callonDocumentFragment769,
										expr: &seqExpr{
											pos: position{line: 2340, col: 5, offset: 79083},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2340, col: 5, offset: 79083},
													run: (*parser).callonDocumentFragment771,
												},
												&labeledExpr{
													pos:   position{line: 2343, col: 5, offset: 79146},
													label: "level",
													expr: &actionExpr{
														pos: position{line: 2343, col: 12, offset: 79153},
														run: (*parser).callonDocumentFragment773,
														expr: &oneOrMoreExpr{
															pos: position{line: 2343, col: 12, offset: 79153},
															expr: &litMatcher{
																pos:        position{line: 2343, col: 13, offset: 79154},
																val:        "=",
																ignoreCase: false,
																want:       "\"=\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 2347, col: 5, offset: 79262},
													run: (*parser).callonDocumentFragment776,
												},
												&actionExpr{
													pos: position{line: 2865, col: 11, offset: 94908},
													run: (*parser).callonDocumentFragment777,
													expr: &oneOrMoreExpr{
														pos: position{line: 2865, col: 11, offset: 94908},
														expr: &charClassMatcher{
															pos:        position{line: 2865, col: 12, offset: 94909},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2351, col: 12, offset: 79421},
													label: "title",
													expr: &actionExpr{
														pos: position{line: 2355, col: 20, offset: 79549},
														run: (*parser).callonDocumentFragment781,
														expr: &oneOrMoreExpr{
															pos: position{line: 2355, col: 20, offset: 79549},
															expr: &charClassMatcher{
																pos:        position{line: 2355, col: 20, offset: 79549},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonDocumentFragment785,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 34, col: 11, offset: 860},
										name: "DelimitedBlock",
									},
									&actionExpr{
										pos: position{line: 2744, col: 18, offset: 91063},
										run: (*parser).callonDocumentFragment793,
										expr: &seqExpr{
											pos: position{line: 2744, col: 18, offset: 91063},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 2744, col: 19, offset: 91064},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2744, col: 19, offset: 91064},
															val:        "***",
															ignoreCase: false,
															want:       "\"***\"",
														},
														&litMatcher{
															pos:        position{line: 2744, col: 27, offset: 91072},
															val:        "* * *",
															ignoreCase: false,
															want:       "\"* * *\"",
														},
														&litMatcher{
															pos:        position{line: 2744, col: 37, offset: 91082},
															val:        "---",
															ignoreCase: false,
															want:       "\"---\"",
														},
														&litMatcher{
															pos:        position{line: 2744, col: 45, offset: 91090},
															val:        "- - -",
															ignoreCase: false,
															want:       "\"- - -\"",
														},
														&litMatcher{
															pos:        position{line: 2744, col: 55, offset: 91100},
															val:        "___",
															ignoreCase: false,
															want:       "\"___\"",
														},
														&litMatcher{
															pos:        position{line: 2744, col: 63, offset: 91108},
															val:        "_ _ _",
															ignoreCase: false,
															want:       "\"_ _ _\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2874, col: 8, offset: 95112},
													expr: &anyMatcher{
														line: 2874, col: 9, offset: 95113,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 36, col: 11, offset: 946},
										name: "ListElements",
									},
									&actionExpr{
										pos: position{line: 2643, col: 5, offset: 88195},
										run: (*parser).callonDocumentFragment805,
										expr: &seqExpr{
											pos: position{line: 2643, col: 5, offset: 88195},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2650, col: 19, offset: 88371},
													val:        "|===",
													ignoreCase: false,
													want:       "\"|===\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2650, col: 26, offset: 88378},
													expr: &actionExpr{
														pos: position{line: 2860, col: 10, offset: 94799},
														run: (*parser).callonDocumentFragment809,
														expr: &charClassMatcher{
															pos:        position{line: 2860, col: 11, offset: 94800},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonDocumentFragment812,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2644, col: 5, offset: 88219},
													label: "header",
													expr: &zeroOrOneExpr{
														pos: position{line: 2644, col: 12, offset: 88226},
														expr: &actionExpr{
															pos: position{line: 2658, col: 5, offset: 88538},
															run: (*parser).callonDocumentFragment821,
															expr: &seqExpr{
																pos: position{line: 2658, col: 5, offset: 88538},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 2658, col: 5, offset: 88538},
																		label: "cells",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2658, col: 11, offset: 88544},
																			expr: &actionExpr{
																				pos: position{line: 2664, col: 5, offset: 88661},
																				run: (*parser).callonDocumentFragment825,
																				expr: &seqExpr{
																					pos: position{line: 2664, col: 5, offset: 88661},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2664, col: 5, offset: 88661},
																							val:        "|",
																							ignoreCase: false,
																							want:       "\"|\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 2664, col: 9, offset: 88665},
																							expr: &actionExpr{
																								pos: position{line: 2860, col: 10, offset: 94799},
																								run: (*parser).callonDocumentFragment829,
																								expr: &charClassMatcher{
																									pos:        position{line: 2860, col: 11, offset: 94800},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 2665, col: 5, offset: 88677},
																							label: "content",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 2665, col: 14, offset: 88686},
																								expr: &actionExpr{
																									pos: position{line: 2697, col: 5, offset: 89474},
																									run: (*parser).callonDocumentFragment833,
																									expr: &labeledExpr{
																										pos:   position{line: 2697, col: 5, offset: 89474},
																										label: "content",
																										expr: &actionExpr{
																											pos: position{line: 2697, col: 14, offset: 89483},
																											run: (*parser).callonDocumentFragment835,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2697, col: 14, offset: 89483},
																												expr: &charClassMatcher{
																													pos:        position{line: 2697, col: 14, offset: 89483},
																													val:        "[^\\r\\n|]",
																													chars:      []rune{'\r', '\n', '|'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2877, col: 8, offset: 95162},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2870, col: 12, offset: 95022},
																				run: (*parser).callonDocumentFragment839,
																				expr: &choiceExpr{
																					pos: position{line: 2870, col: 13, offset: 95023},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2870, col: 13, offset: 95023},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2870, col: 20, offset: 95030},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2870, col: 29, offset: 95039},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2874, col: 8, offset: 95112},
																				expr: &anyMatcher{
																					line: 2874, col: 9, offset: 95113,
																				},
																			},
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 2659, col: 5, offset: 88566},
																		expr: &actionExpr{
																			pos: position{line: 449, col: 14, offset: 14731},
																			run: (*parser).callonDocumentFragment847,
																			expr: &seqExpr{
																				pos: position{line: 449, col: 14, offset: 14731},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 449, col: 14, offset: 14731},
																						expr: &notExpr{
																							pos: position{line: 2874, col: 8, offset: 95112},
																							expr: &anyMatcher{
																								line: 2874, col: 9, offset: 95113,
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 449, col: 19, offset: 14736},
																						expr: &actionExpr{
																							pos: position{line: 2860, col: 10, offset: 94799},
																							run: (*parser).callonDocumentFragment853,
																							expr: &charClassMatcher{
																								pos:        position{line: 2860, col: 11, offset: 94800},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2877, col: 8, offset: 95162},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2870, col: 12, offset: 95022},
																								run: (*parser).callonDocumentFragment856,
																								expr: &choiceExpr{
																									pos: position{line: 2870, col: 13, offset: 95023},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2870, col: 13, offset: 95023},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2870, col: 20, offset: 95030},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2870, col: 29, offset: 95039},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2874, col: 8, offset: 95112},
																								expr: &anyMatcher{
																									line: 2874, col: 9, offset: 95113,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2645, col: 5, offset: 88245},
													label: "rows",
													expr: &zeroOrMoreExpr{
														pos: position{line: 2645, col: 10, offset: 88250},
														expr: &choiceExpr{
															pos: position{line: 2669, col: 13, offset: 88783},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2679, col: 5, offset: 89002},
																	run: (*parser).callonDocumentFragment866,
																	expr: &seqExpr{
																		pos: position{line: 2679, col: 5, offset: 89002},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2679, col: 5, offset: 89002},
																				expr: &choiceExpr{
																					pos: position{line: 2654, col: 22, offset: 88451},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2650, col: 19, offset: 88371},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2650, col: 19, offset: 88371},
																									val:        "|===",
																									ignoreCase: false,
																									want:       "\"|===\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2650, col: 26, offset: 88378},
																									expr: &actionExpr{
																										pos: position{line: 2860, col: 10, offset: 94799},
																										run: (*parser).callonDocumentFragment873,
																										expr: &charClassMatcher{
																											pos:        position{line: 2860, col: 11, offset: 94800},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2877, col: 8, offset: 95162},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2870, col: 12, offset: 95022},
																											run: (*parser).callonDocumentFragment876,
																											expr: &choiceExpr{
																												pos: position{line: 2870, col: 13, offset: 95023},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2870, col: 13, offset: 95023},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2870, col: 20, offset: 95030},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2870, col: 29, offset: 95039},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2874, col: 8, offset: 95112},
																											expr: &anyMatcher{
																												line: 2874, col: 9, offset: 95113,
																											},
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2874, col: 8, offset: 95112},
																							expr: &anyMatcher{
																								line: 2874, col: 9, offset: 95113,
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2680, col: 5, offset: 89025},
																				label: "cells",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2680, col: 11, offset: 89031},
																					expr: &actionExpr{
																						pos: position{line: 2680, col: 12, offset: 89032},
																						run: (*parser).callonDocumentFragment887,
																						expr: &seqExpr{
																							pos: position{line: 2680, col: 12, offset: 89032},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 2680, col: 12, offset: 89032},
																									label: "cell",
																									expr: &actionExpr{
																										pos: position{line: 2689, col: 5, offset: 89273},
																										run: (*parser).callonDocumentFragment890,
																										expr: &seqExpr{
																											pos: position{line: 2689, col: 5, offset: 89273},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 2689, col: 5, offset: 89273},
																													expr: &choiceExpr{
																														pos: position{line: 2654, col: 22, offset: 88451},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 2650, col: 19, offset: 88371},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2650, col: 19, offset: 88371},
																																		val:        "|===",
																																		ignoreCase: false,
																																		want:       "\"|===\"",
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 2650, col: 26, offset: 88378},
																																		expr: &actionExpr{
																																			pos: position{line: 2860, col: 10, offset: 94799},
																																			run: (*parser).callonDocumentFragment897,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2860, col: 11, offset: 94800},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 2877, col: 8, offset: 95162},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 2870, col: 12, offset: 95022},
																																				run: (*parser).callonDocumentFragment900,
																																				expr: &choiceExpr{
																																					pos: position{line: 2870, col: 13, offset: 95023},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 2870, col: 13, offset: 95023},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2870, col: 20, offset: 95030},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2870, col: 29, offset: 95039},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2874, col: 8, offset: 95112},
																																				expr: &anyMatcher{
																																					line: 2874, col: 9, offset: 95113,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2874, col: 8, offset: 95112},
																																expr: &anyMatcher{
																																	line: 2874, col: 9, offset: 95113,
																																},
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2690, col: 5, offset: 89296},
																													expr: &actionExpr{
																														pos: position{line: 449, col: 14, offset: 14731},
																														run: (*parser).callonDocumentFragment910,
																														expr: &seqExpr{
																															pos: position{line: 449, col: 14, offset: 14731},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 449, col: 14, offset: 14731},
																																	expr: &notExpr{
																																		pos: position{line: 2874, col: 8, offset: 95112},
																																		expr: &anyMatcher{
																																			line: 2874, col: 9, offset: 95113,
																																		},
																																	},
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 449, col: 19, offset: 14736},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonDocumentFragment916,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2877, col: 8, offset: 95162},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2870, col: 12, offset: 95022},
																																			run: (*parser).callonDocumentFragment919,
																																			expr: &choiceExpr{
																																				pos: position{line: 2870, col: 13, offset: 95023},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 13, offset: 95023},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 20, offset: 95030},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 29, offset: 95039},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2874, col: 8, offset: 95112},
																																			expr: &anyMatcher{
																																				line: 2874, col: 9, offset: 95113,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 2691, col: 5, offset: 89311},
																													val:        "|",
																													ignoreCase: false,
																													want:       "\"|\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 2691, col: 9, offset: 89315},
																													expr: &actionExpr{
																														pos: position{line: 2860, col: 10, offset: 94799},
																														run: (*parser).callonDocumentFragment928,
																														expr: &charClassMatcher{
																															pos:        position{line: 2860, col: 11, offset: 94800},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 2691, col: 16, offset: 89322},
																													label: "content",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 2691, col: 25, offset: 89331},
																														expr: &actionExpr{
																															pos: position{line: 2697, col: 5, offset: 89474},
																															run: (*parser).callonDocumentFragment932,
																															expr: &labeledExpr{
																																pos:   position{line: 2697, col: 5, offset: 89474},
																																label: "content",
																																expr: &actionExpr{
																																	pos: position{line: 2697, col: 14, offset: 89483},
																																	run: (*parser).callonDocumentFragment934,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2697, col: 14, offset: 89483},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2697, col: 14, offset: 89483},
																																			val:        "[^\\r\\n|]",
																																			chars:      []rune{'\r', '\n', '|'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2877, col: 8, offset: 95162},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2870, col: 12, offset: 95022},
																											run: (*parser).callonDocumentFragment938,
																											expr: &choiceExpr{
																												pos: position{line: 2870, col: 13, offset: 95023},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2870, col: 13, offset: 95023},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2870, col: 20, offset: 95030},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2870, col: 29, offset: 95039},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2874, col: 8, offset: 95112},
																											expr: &anyMatcher{
																												line: 2874, col: 9, offset: 95113,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2683, col: 6, offset: 89094},
																				alternatives: []interface{}{
																					&oneOrMoreExpr{
																						pos: position{line: 2683, col: 6, offset: 89094},
																						expr: &actionExpr{
																							pos: position{line: 449, col: 14, offset: 14731},
																							run: (*parser).callonDocumentFragment947,
																							expr: &seqExpr{
																								pos: position{line: 449, col: 14, offset: 14731},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 449, col: 14, offset: 14731},
																										expr: &notExpr{
																											pos: position{line: 2874, col: 8, offset: 95112},
																											expr: &anyMatcher{
																												line: 2874, col: 9, offset: 95113,
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 449, col: 19, offset: 14736},
																										expr: &actionExpr{
																											pos: position{line: 2860, col: 10, offset: 94799},
																											run: (*parser).callonDocumentFragment953,
																											expr: &charClassMatcher{
																												pos:        position{line: 2860, col: 11, offset: 94800},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2877, col: 8, offset: 95162},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2870, col: 12, offset: 95022},
																												run: (*parser).callonDocumentFragment956,
																												expr: &choiceExpr{
																													pos: position{line: 2870, col: 13, offset: 95023},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2870, col: 13, offset: 95023},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2870, col: 20, offset: 95030},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2870, col: 29, offset: 95039},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2874, col: 8, offset: 95112},
																												expr: &anyMatcher{
																													line: 2874, col: 9, offset: 95113,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&andExpr{
																						pos: position{line: 2683, col: 19, offset: 89107},
																						expr: &choiceExpr{
																							pos: position{line: 2654, col: 22, offset: 88451},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 2650, col: 19, offset: 88371},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2650, col: 19, offset: 88371},
																											val:        "|===",
																											ignoreCase: false,
																											want:       "\"|===\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 2650, col: 26, offset: 88378},
																											expr: &actionExpr{
																												pos: position{line: 2860, col: 10, offset: 94799},
																												run: (*parser).callonDocumentFragment968,
																												expr: &charClassMatcher{
																													pos:        position{line: 2860, col: 11, offset: 94800},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2877, col: 8, offset: 95162},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2870, col: 12, offset: 95022},
																													run: (*parser).callonDocumentFragment971,
																													expr: &choiceExpr{
																														pos: position{line: 2870, col: 13, offset: 95023},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2870, col: 13, offset: 95023},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2870, col: 20, offset: 95030},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2870, col: 29, offset: 95039},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2874, col: 8, offset: 95112},
																													expr: &anyMatcher{
																														line: 2874, col: 9, offset: 95113,
																													},
																												},
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2874, col: 8, offset: 95112},
																									expr: &anyMatcher{
																										line: 2874, col: 9, offset: 95113,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2672, col: 5, offset: 88850},
																	run: (*parser).callonDocumentFragment980,
																	expr: &seqExpr{
																		pos: position{line: 2672, col: 5, offset: 88850},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2672, col: 5, offset: 88850},
																				expr: &choiceExpr{
																					pos: position{line: 2654, col: 22, offset: 88451},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2650, col: 19, offset: 88371},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2650, col: 19, offset: 88371},
																									val:        "|===",
																									ignoreCase: false,
																									want:       "\"|===\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2650, col: 26, offset: 88378},
																									expr: &actionExpr{
																										pos: position{line: 2860, col: 10, offset: 94799},
																										run: (*parser).callonDocumentFragment987,
																										expr: &charClassMatcher{
																											pos:        position{line: 2860, col: 11, offset: 94800},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2877, col: 8, offset: 95162},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2870, col: 12, offset: 95022},
																											run: (*parser).callonDocumentFragment990,
																											expr: &choiceExpr{
																												pos: position{line: 2870, col: 13, offset: 95023},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2870, col: 13, offset: 95023},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2870, col: 20, offset: 95030},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2870, col: 29, offset: 95039},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2874, col: 8, offset: 95112},
																											expr: &anyMatcher{
																												line: 2874, col: 9, offset: 95113,
																											},
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2874, col: 8, offset: 95112},
																							expr: &anyMatcher{
																								line: 2874, col: 9, offset: 95113,
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2673, col: 5, offset: 88873},
																				label: "cells",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2673, col: 11, offset: 88879},
																					expr: &actionExpr{
																						pos: position{line: 2689, col: 5, offset: 89273},
																						run: (*parser).callonDocumentFragment1001,
																						expr: &seqExpr{
																							pos: position{line: 2689, col: 5, offset: 89273},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 2689, col: 5, offset: 89273},
																									expr: &choiceExpr{
																										pos: position{line: 2654, col: 22, offset: 88451},
																										alternatives: []interface{}{
																											&seqExpr{
																												pos: position{line: 2650, col: 19, offset: 88371},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2650, col: 19, offset: 88371},
																														val:        "|===",
																														ignoreCase: false,
																														want:       "\"|===\"",
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 2650, col: 26, offset: 88378},
																														expr: &actionExpr{
																															pos: position{line: 2860, col: 10, offset: 94799},
																															run: (*parser).callonDocumentFragment1008,
																															expr: &charClassMatcher{
																																pos:        position{line: 2860, col: 11, offset: 94800},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 2877, col: 8, offset: 95162},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 2870, col: 12, offset: 95022},
																																run: (*parser).callonDocumentFragment1011,
																																expr: &choiceExpr{
																																	pos: position{line: 2870, col: 13, offset: 95023},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2870, col: 13, offset: 95023},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2870, col: 20, offset: 95030},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2870, col: 29, offset: 95039},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2874, col: 8, offset: 95112},
																																expr: &anyMatcher{
																																	line: 2874, col: 9, offset: 95113,
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2874, col: 8, offset: 95112},
																												expr: &anyMatcher{
																													line: 2874, col: 9, offset: 95113,
																												},
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2690, col: 5, offset: 89296},
																									expr: &actionExpr{
																										pos: position{line: 449, col: 14, offset: 14731},
																										run: (*parser).callonDocumentFragment1021,
																										expr: &seqExpr{
																											pos: position{line: 449, col: 14, offset: 14731},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 449, col: 14, offset: 14731},
																													expr: &notExpr{
																														pos: position{line: 2874, col: 8, offset: 95112},
																														expr: &anyMatcher{
																															line: 2874, col: 9, offset: 95113,
																														},
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 449, col: 19, offset: 14736},
																													expr: &actionExpr{
																														pos: position{line: 2860, col: 10, offset: 94799},
																														run: (*parser).callonDocumentFragment1027,
																														expr: &charClassMatcher{
																															pos:        position{line: 2860, col: 11, offset: 94800},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2877, col: 8, offset: 95162},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 2870, col: 12, offset: 95022},
																															run: (*parser).callonDocumentFragment1030,
																															expr: &choiceExpr{
																																pos: position{line: 2870, col: 13, offset: 95023},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2870, col: 13, offset: 95023},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2870, col: 20, offset: 95030},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2870, col: 29, offset: 95039},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 2874, col: 8, offset: 95112},
																															expr: &anyMatcher{
																																line: 2874, col: 9, offset: 95113,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2691, col: 5, offset: 89311},
																									val:        "|",
																									ignoreCase: false,
																									want:       "\"|\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2691, col: 9, offset: 89315},
																									expr: &actionExpr{
																										pos: position{line: 2860, col: 10, offset: 94799},
																										run: (*parser).callonDocumentFragment1039,
																										expr: &charClassMatcher{
																											pos:        position{line: 2860, col: 11, offset: 94800},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 2691, col: 16, offset: 89322},
																									label: "content",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 2691, col: 25, offset: 89331},
																										expr: &actionExpr{
																											pos: position{line: 2697, col: 5, offset: 89474},
																											run: (*parser).callonDocumentFragment1043,
																											expr: &labeledExpr{
																												pos:   position{line: 2697, col: 5, offset: 89474},
																												label: "content",
																												expr: &actionExpr{
																													pos: position{line: 2697, col: 14, offset: 89483},
																													run: (*parser).callonDocumentFragment1045,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 2697, col: 14, offset: 89483},
																														expr: &charClassMatcher{
																															pos:        position{line: 2697, col: 14, offset: 89483},
																															val:        "[^\\r\\n|]",
																															chars:      []rune{'\r', '\n', '|'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2877, col: 8, offset: 95162},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2870, col: 12, offset: 95022},
																						run: (*parser).callonDocumentFragment1049,
																						expr: &choiceExpr{
																							pos: position{line: 2870, col: 13, offset: 95023},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2870, col: 13, offset: 95023},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2870, col: 20, offset: 95030},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2870, col: 29, offset: 95039},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2874, col: 8, offset: 95112},
																						expr: &anyMatcher{
																							line: 2874, col: 9, offset: 95113,
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2674, col: 5, offset: 88900},
																				expr: &actionExpr{
																					pos: position{line: 449, col: 14, offset: 14731},
																					run: (*parser).callonDocumentFragment1057,
																					expr: &seqExpr{
																						pos: position{line: 449, col: 14, offset: 14731},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 449, col: 14, offset: 14731},
																								expr: &notExpr{
																									pos: position{line: 2874, col: 8, offset: 95112},
																									expr: &anyMatcher{
																										line: 2874, col: 9, offset: 95113,
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 449, col: 19, offset: 14736},
																								expr: &actionExpr{
																									pos: position{line: 2860, col: 10, offset: 94799},
																									run: (*parser).callonDocumentFragment1063,
																									expr: &charClassMatcher{
																										pos:        position{line: 2860, col: 11, offset: 94800},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2877, col: 8, offset: 95162},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2870, col: 12, offset: 95022},
																										run: (*parser).callonDocumentFragment1066,
																										expr: &choiceExpr{
																											pos: position{line: 2870, col: 13, offset: 95023},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2870, col: 13, offset: 95023},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 20, offset: 95030},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 29, offset: 95039},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2874, col: 8, offset: 95112},
																										expr: &anyMatcher{
																											line: 2874, col: 9, offset: 95113,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2654, col: 22, offset: 88451},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 2650, col: 19, offset: 88371},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2650, col: 19, offset: 88371},
																	val:        "|===",
																	ignoreCase: false,
																	want:       "\"|===\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2650, col: 26, offset: 88378},
																	expr: &actionExpr{
																		pos: position{line: 2860, col: 10, offset: 94799},
																		run: (*parser).callonDocumentFragment1077,
																		expr: &charClassMatcher{
																			pos:        position{line: 2860, col: 11, offset: 94800},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2877, col: 8, offset: 95162},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonDocumentFragment1080,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2593, col: 22, offset: 86639},
										run: (*parser).callonDocumentFragment1089,
										expr: &seqExpr{
											pos: position{line: 2593, col: 22, offset: 86639},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2598, col: 31, offset: 86860},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2598, col: 36, offset: 86865},
													expr: &litMatcher{
														pos:        position{line: 2598, col: 37, offset: 86866},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2593, col: 49, offset: 86666},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2600, col: 29, offset: 86901},
														run: (*parser).callonDocumentFragment1095,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2600, col: 29, offset: 86901},
															expr: &charClassMatcher{
																pos:        position{line: 2600, col: 29, offset: 86901},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonDocumentFragment1099,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1576, col: 5, offset: 52579},
										run: (*parser).callonDocumentFragment1106,
										expr: &seqExpr{
											pos: position{line: 1576, col: 5, offset: 52579},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1576, col: 5, offset: 52579},
													label: "kind",
													expr: &choiceExpr{
														pos: position{line: 94, col: 19, offset: 2648},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 94, col: 19, offset: 2648},
																run: (*parser).callonDocumentFragment1110,
																expr: &litMatcher{
																	pos:        position{line: 94, col: 19, offset: 2648},
																	val:        "TIP",
																	ignoreCase: false,
																	want:       "\"TIP\"",
																},
															},
															&actionExpr{
																pos: position{line: 96, col: 5, offset: 2686},
																run: (*parser).callonDocumentFragment1112,
																expr: &litMatcher{
																	pos:        position{line: 96, col: 5, offset: 2686},
																	val:        "NOTE",
																	ignoreCase: false,
																	want:       "\"NOTE\"",
																},
															},
															&actionExpr{
																pos: position{line: 98, col: 5, offset: 2726},
																run: (*parser).callonDocumentFragment1114,
																expr: &litMatcher{
																	pos:        position{line: 98, col: 5, offset: 2726},
																	val:        "IMPORTANT",
																	ignoreCase: false,
																	want:       "\"IMPORTANT\"",
																},
															},
															&actionExpr{
																pos: position{line: 100, col: 5, offset: 2776},
																run: (*parser).callonDocumentFragment1116,
																expr: &litMatcher{
																	pos:        position{line: 100, col: 5, offset: 2776},
																	val:        "WARNING",
																	ignoreCase: false,
																	want:       "\"WARNING\"",
																},
															},
															&actionExpr{
																pos: position{line: 102, col: 5, offset: 2822},
																run: (*parser).callonDocumentFragment1118,
																expr: &litMatcher{
																	pos:        position{line: 102, col: 5, offset: 2822},
																	val:        "CAUTION",
																	ignoreCase: false,
																	want:       "\"CAUTION\"",
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1576, col: 27, offset: 52601},
													val:        ": ",
													ignoreCase: false,
													want:       "\": \"",
												},
												&labeledExpr{
													pos:   position{line: 1577, col: 5, offset: 52611},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 1588, col: 5, offset: 52955},
														run: (*parser).callonDocumentFragment1122,
														expr: &seqExpr{
															pos: position{line: 1588, col: 5, offset: 52955},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1588, col: 5, offset: 52955},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1588, col: 14, offset: 52964},
																		run: (*parser).callonDocumentFragment1125,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1588, col: 14, offset: 52964},
																			expr: &charClassMatcher{
																				pos:        position{line: 1588, col: 14, offset: 52964},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1591, col: 5, offset: 53021},
																	run: (*parser).callonDocumentFragment1128,
																},
																&choiceExpr{
																	pos: position{line: 2877, col: 8, offset: 95162},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonDocumentFragment1130,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1578, col: 5, offset: 52645},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1578, col: 16, offset: 52656},
														expr: &actionExpr{
															pos: position{line: 1579, col: 9, offset: 52666},
															run: (*parser).callonDocumentFragment1139,
															expr: &seqExpr{
																pos: position{line: 1579, col: 9, offset: 52666},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1579, col: 9, offset: 52666},
																		expr: &seqExpr{
																			pos: position{line: 1315, col: 34, offset: 44000},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1315, col: 34, offset: 44000},
																					val:        "+",
																					ignoreCase: false,
																					want:       "\"+\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1315, col: 38, offset: 44004},
																					expr: &actionExpr{
																						pos: position{line: 2860, col: 10, offset: 94799},
																						run: (*parser).callonDocumentFragment1145,
																						expr: &charClassMatcher{
																							pos:        position{line: 2860, col: 11, offset: 94800},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2870, col: 12, offset: 95022},
																					run: (*parser).callonDocumentFragment1147,
																					expr: &choiceExpr{
																						pos: position{line: 2870, col: 13, offset: 95023},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2870, col: 13, offset: 95023},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 20, offset: 95030},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 29, offset: 95039},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1580, col: 9, offset: 52705},
																		label: "line",
																		expr: &choiceExpr{
																			pos: position{line: 1580, col: 15, offset: 52711},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2593, col: 22, offset: 86639},
																					run: (*parser).callonDocumentFragment1154,
																					expr: &seqExpr{
																						pos: position{line: 2593, col: 22, offset: 86639},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2598, col: 31, offset: 86860},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 2598, col: 36, offset: 86865},
																								expr: &litMatcher{
																									pos:        position{line: 2598, col: 37, offset: 86866},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2593, col: 49, offset: 86666},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 2600, col: 29, offset: 86901},
																									run: (*parser).callonDocumentFragment1160,
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 2600, col: 29, offset: 86901},
																										expr: &charClassMatcher{
																											pos:        position{line: 2600, col: 29, offset: 86901},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2877, col: 8, offset: 95162},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2870, col: 12, offset: 95022},
																										run: (*parser).callonDocumentFragment1164,
																										expr: &choiceExpr{
																											pos: position{line: 2870, col: 13, offset: 95023},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2870, col: 13, offset: 95023},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 20, offset: 95030},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 29, offset: 95039},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2874, col: 8, offset: 95112},
																										expr: &anyMatcher{
																											line: 2874, col: 9, offset: 95113,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1588, col: 5, offset: 52955},
																					run: (*parser).callonDocumentFragment1171,
																					expr: &seqExpr{
																						pos: position{line: 1588, col: 5, offset: 52955},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1588, col: 5, offset: 52955},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 1588, col: 14, offset: 52964},
																									run: (*parser).callonDocumentFragment1174,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1588, col: 14, offset: 52964},
																										expr: &charClassMatcher{
																											pos:        position{line: 1588, col: 14, offset: 52964},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1591, col: 5, offset: 53021},
																								run: (*parser).callonDocumentFragment1177,
																							},
																							&choiceExpr{
																								pos: position{line: 2877, col: 8, offset: 95162},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2870, col: 12, offset: 95022},
																										run: (*parser).callonDocumentFragment1179,
																										expr: &choiceExpr{
																											pos: position{line: 2870, col: 13, offset: 95023},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2870, col: 13, offset: 95023},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 20, offset: 95030},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 29, offset: 95039},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2874, col: 8, offset: 95112},
																										expr: &anyMatcher{
																											line: 2874, col: 9, offset: 95113,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1599, col: 5, offset: 53185},
										run: (*parser).callonDocumentFragment1186,
										expr: &seqExpr{
											pos: position{line: 1599, col: 5, offset: 53185},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1599, col: 5, offset: 53185},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 1606, col: 5, offset: 53470},
														run: (*parser).callonDocumentFragment1189,
														expr: &seqExpr{
															pos: position{line: 1606, col: 5, offset: 53470},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1606, col: 5, offset: 53470},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1606, col: 14, offset: 53479},
																		run: (*parser).callonDocumentFragment1192,
																		expr: &seqExpr{
																			pos: position{line: 1606, col: 14, offset: 53479},
																			exprs: []interface{}{
																				&actionExpr{
																					pos: position{line: 2865, col: 11, offset: 94908},
																					run: (*parser).callonDocumentFragment1194,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2865, col: 11, offset: 94908},
																						expr: &charClassMatcher{
																							pos:        position{line: 2865, col: 12, offset: 94909},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 1606, col: 21, offset: 53486},
																					expr: &charClassMatcher{
																						pos:        position{line: 1606, col: 21, offset: 53486},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1609, col: 5, offset: 53543},
																	run: (*parser).callonDocumentFragment1199,
																},
																&choiceExpr{
																	pos: position{line: 2877, col: 8, offset: 95162},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonDocumentFragment1201,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1600, col: 5, offset: 53226},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1600, col: 16, offset: 53237},
														expr: &choiceExpr{
															pos: position{line: 1600, col: 17, offset: 53238},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2593, col: 22, offset: 86639},
																	run: (*parser).callonDocumentFragment1211,
																	expr: &seqExpr{
																		pos: position{line: 2593, col: 22, offset: 86639},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2598, col: 31, offset: 86860},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																			&notExpr{
																				pos: position{line: 2598, col: 36, offset: 86865},
																				expr: &litMatcher{
																					pos:        position{line: 2598, col: 37, offset: 86866},
																					val:        "//",
																					ignoreCase: false,
																					want:       "\"//\"",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2593, col: 49, offset: 86666},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 2600, col: 29, offset: 86901},
																					run: (*parser).callonDocumentFragment1217,
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 2600, col: 29, offset: 86901},
																						expr: &charClassMatcher{
																							pos:        position{line: 2600, col: 29, offset: 86901},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2877, col: 8, offset: 95162},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2870, col: 12, offset: 95022},
																						run: (*parser).callonDocumentFragment1221,
																						expr: &choiceExpr{
																							pos: position{line: 2870, col: 13, offset: 95023},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2870, col: 13, offset: 95023},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2870, col: 20, offset: 95030},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2870, col: 29, offset: 95039},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2874, col: 8, offset: 95112},
																						expr: &anyMatcher{
																							line: 2874, col: 9, offset: 95113,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1588, col: 5, offset: 52955},
																	run: (*parser).callonDocumentFragment1228,
																	expr: &seqExpr{
																		pos: position{line: 1588, col: 5, offset: 52955},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1588, col: 5, offset: 52955},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 1588, col: 14, offset: 52964},
																					run: (*parser).callonDocumentFragment1231,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1588, col: 14, offset: 52964},
																						expr: &charClassMatcher{
																							pos:        position{line: 1588, col: 14, offset: 52964},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1591, col: 5, offset: 53021},
																				run: (*parser).callonDocumentFragment1234,
																			},
																			&choiceExpr{
																				pos: position{line: 2877, col: 8, offset: 95162},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2870, col: 12, offset: 95022},
																						run: (*parser).callonDocumentFragment1236,
																						expr: &choiceExpr{
																							pos: position{line: 2870, col: 13, offset: 95023},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2870, col: 13, offset: 95023},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2870, col: 20, offset: 95030},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2870, col: 29, offset: 95039},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2874, col: 8, offset: 95112},
																						expr: &anyMatcher{
																							line: 2874, col: 9, offset: 95113,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1026, col: 5, offset: 32836},
										run: (*parser).callonDocumentFragment1243,
										expr: &seqExpr{
											pos: position{line: 1026, col: 5, offset: 32836},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 1026, col: 5, offset: 32836},
													run: (*parser).callonDocumentFragment1245,
												},
												&labeledExpr{
													pos:   position{line: 1029, col: 5, offset: 32894},
													label: "frontmatter",
													expr: &actionExpr{
														pos: position{line: 1035, col: 20, offset: 33051},
														run: (*parser).callonDocumentFragment1247,
														expr: &seqExpr{
															pos: position{line: 1035, col: 20, offset: 33051},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1039, col: 30, offset: 33223},
																	val:        "---",
																	ignoreCase: false,
																	want:       "\"---\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1039, col: 36, offset: 33229},
																	expr: &actionExpr{
																		pos: position{line: 2860, col: 10, offset: 94799},
																		run: (*parser).callonDocumentFragment1251,
																		expr: &charClassMatcher{
																			pos:        position{line: 2860, col: 11, offset: 94800},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2877, col: 8, offset: 95162},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonDocumentFragment1254,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1035, col: 45, offset: 33076},
																	label: "content",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 1035, col: 53, offset: 33084},
																		expr: &actionExpr{
																			pos: position{line: 1041, col: 27, offset: 33267},
																			run: (*parser).callonDocumentFragment1263,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 1041, col: 27, offset: 33267},
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1041, col: 28, offset: 33268},
																					expr: &seqExpr{
																						pos: position{line: 1041, col: 29, offset: 33269},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 1041, col: 29, offset: 33269},
																								expr: &seqExpr{
																									pos: position{line: 1039, col: 30, offset: 33223},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 1039, col: 30, offset: 33223},
																											val:        "---",
																											ignoreCase: false,
																											want:       "\"---\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 1039, col: 36, offset: 33229},
																											expr: &actionExpr{
																												pos: position{line: 2860, col: 10, offset: 94799},
																												run: (*parser).callonDocumentFragment1271,
																												expr: &charClassMatcher{
																													pos:        position{line: 2860, col: 11, offset: 94800},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2877, col: 8, offset: 95162},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2870, col: 12, offset: 95022},
																													run: (*parser).callonDocumentFragment1274,
																													expr: &choiceExpr{
																														pos: position{line: 2870, col: 13, offset: 95023},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2870, col: 13, offset: 95023},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2870, col: 20, offset: 95030},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2870, col: 29, offset: 95039},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2874, col: 8, offset: 95112},
																													expr: &anyMatcher{
																														line: 2874, col: 9, offset: 95113,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&anyMatcher{
																								line: 1041, col: 55, offset: 33295,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1039, col: 30, offset: 33223},
																	val:        "---",
																	ignoreCase: false,
																	want:       "\"---\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1039, col: 36, offset: 33229},
																	expr: &actionExpr{
																		pos: position{line: 2860, col: 10, offset: 94799},
																		run: (*parser).callonDocumentFragment1284,
																		expr: &charClassMatcher{
																			pos:        position{line: 2860, col: 11, offset: 94800},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2877, col: 8, offset: 95162},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonDocumentFragment1287,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 42, col: 11, offset: 1092},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentFragmentWithinVerbatimBlock",
			pos:  position{line: 53, col: 1, offset: 1469},
			expr: &actionExpr{
				pos: position{line: 54, col: 5, offset: 1512},
				run: (*parser).callonDocumentFragmentWithinVerbatimBlock1,
				expr: &seqExpr{
					pos: position{line: 54, col: 5, offset: 1512},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 54, col: 5, offset: 1512},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 54, col: 14, offset: 1521},
								expr: &choiceExpr{
									pos: position{line: 55, col: 9, offset: 1531},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 55, col: 9, offset: 1531},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 62, col: 5, offset: 1628},
											run: (*parser).callonDocumentFragmentWithinVerbatimBlock7,
											expr: &seqExpr{
												pos: position{line: 62, col: 5, offset: 1628},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 62, col: 5, offset: 1628},
														expr: &notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 63, col: 5, offset: 1637},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 63, col: 14, offset: 1646},
															run: (*parser).callonDocumentFragmentWithinVerbatimBlock13,
															expr: &zeroOrMoreExpr{
																pos: position{line: 63, col: 14, offset: 1646},
																expr: &charClassMatcher{
																	pos:        position{line: 63, col: 14, offset: 1646},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2877, col: 8, offset: 95162},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2870, col: 12, offset: 95022},
																run: (*parser).callonDocumentFragmentWithinVerbatimBlock17,
																expr: &choiceExpr{
																	pos: position{line: 2870, col: 13, offset: 95023},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2870, col: 13, offset: 95023},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 20, offset: 95030},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 29, offset: 95039},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2874, col: 8, offset: 95112},
																expr: &anyMatcher{
																	line: 2874, col: 9, offset: 95113,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2874, col: 8, offset: 95112},
							expr: &anyMatcher{
								line: 2874, col: 9, offset: 95113,
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlockElements",
			pos:  position{line: 72, col: 1, offset: 1837},
			expr: &actionExpr{
				pos: position{line: 73, col: 5, offset: 1868},
				run: (*parser).callonDelimitedBlockElements1,
				expr: &seqExpr{
					pos: position{line: 73, col: 5, offset: 1868},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 73, col: 5, offset: 1868},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 73, col: 14, offset: 1877},
								expr: &choiceExpr{
									pos: position{line: 74, col: 9, offset: 1887},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 914, col: 23, offset: 28983},
											run: (*parser).callonDelimitedBlockElements6,
											expr: &seqExpr{
												pos: position{line: 914, col: 23, offset: 28983},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 912, col: 32, offset: 28951},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 914, col: 51, offset: 29011},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 914, col: 56, offset: 29016},
															run: (*parser).callonDelimitedBlockElements10,
															expr: &oneOrMoreExpr{
																pos: position{line: 914, col: 56, offset: 29016},
																expr: &charClassMatcher{
																	pos:        position{line: 914, col: 56, offset: 29016},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 912, col: 32, offset: 28951},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 75, col: 11, offset: 1949},
											name: "DocumentFragment",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2874, col: 8, offset: 95112},
							expr: &anyMatcher{
								line: 2874, col: 9, offset: 95113,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 151, col: 1, offset: 4492},
			expr: &actionExpr{
				pos: position{line: 152, col: 5, offset: 4515},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 152, col: 5, offset: 4515},
					label: "attributes",
					expr: &oneOrMoreExpr{
						pos: position{line: 152, col: 16, offset: 4526},
						expr: &choiceExpr{
							pos: position{line: 154, col: 9, offset: 4593},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 154, col: 10, offset: 4594},
									run: (*parser).callonBlockAttributes5,
									expr: &seqExpr{
										pos: position{line: 154, col: 10, offset: 4594},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 154, col: 10, offset: 4594},
												label: "anchor",
												expr: &actionExpr{
													pos: position{line: 186, col: 4, offset: 5437},
													run: (*parser).callonBlockAttributes8,
													expr: &seqExpr{
														pos: position{line: 186, col: 4, offset: 5437},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 186, col: 4, offset: 5437},
																val:        "[[",
																ignoreCase: false,
																want:       "\"[[\"",
															},
															&labeledExpr{
																pos:   position{line: 187, col: 5, offset: 5447},
																label: "id",
																expr: &actionExpr{
																	pos: position{line: 188, col: 9, offset: 5460},
																	run: (*parser).callonBlockAttributes12,
																	expr: &labeledExpr{
																		pos:   position{line: 188, col: 9, offset: 5460},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 188, col: 18, offset: 5469},
																			expr: &choiceExpr{
																				pos: position{line: 189, col: 13, offset: 5483},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 189, col: 14, offset: 5484},
																						run: (*parser).callonBlockAttributes16,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 189, col: 14, offset: 5484},
																							expr: &charClassMatcher{
																								pos:        position{line: 189, col: 14, offset: 5484},
																								val:        "[^=\\r\\n�{]]",
																								chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 914, col: 23, offset: 28983},
																						run: (*parser).callonBlockAttributes19,
																						expr: &seqExpr{
																							pos: position{line: 914, col: 23, offset: 28983},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 912, col: 32, offset: 28951},
																									val:        "�",
																									ignoreCase: false,
																									want:       "\"�\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 914, col: 51, offset: 29011},
																									label: "ref",
																									expr: &actionExpr{
																										pos: position{line: 914, col: 56, offset: 29016},
																										run: (*parser).callonBlockAttributes23,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 914, col: 56, offset: 29016},
																											expr: &charClassMatcher{
																												pos:        position{line: 914, col: 56, offset: 29016},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 912, col: 32, offset: 28951},
																									val:        "�",
																									ignoreCase: false,
																									want:       "\"�\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 416, col: 5, offset: 13530},
																						run: (*parser).callonBlockAttributes27,
																						expr: &seqExpr{
																							pos: position{line: 416, col: 5, offset: 13530},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 416, col: 5, offset: 13530},
																									run: (*parser).callonBlockAttributes29,
																								},
																								&labeledExpr{
																									pos:   position{line: 419, col: 5, offset: 13594},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 419, col: 14, offset: 13603},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 430, col: 25, offset: 14065},
																												run: (*parser).callonBlockAttributes32,
																												expr: &seqExpr{
																													pos: position{line: 430, col: 25, offset: 14065},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 430, col: 25, offset: 14065},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 430, col: 37, offset: 14077},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 120, col: 18, offset: 3502},
																																run: (*parser).callonBlockAttributes36,
																																expr: &seqExpr{
																																	pos: position{line: 120, col: 18, offset: 3502},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 120, col: 18, offset: 3502},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 120, col: 28, offset: 3512},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 120, col: 29, offset: 3513},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 430, col: 56, offset: 14096},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 430, col: 62, offset: 14102},
																																expr: &actionExpr{
																																	pos: position{line: 438, col: 17, offset: 14365},
																																	run: (*parser).callonBlockAttributes43,
																																	expr: &seqExpr{
																																		pos: position{line: 438, col: 17, offset: 14365},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 438, col: 17, offset: 14365},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 438, col: 21, offset: 14369},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 438, col: 28, offset: 14376},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 438, col: 28, offset: 14376},
																																							run: (*parser).callonBlockAttributes48,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 438, col: 28, offset: 14376},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 440, col: 9, offset: 14430},
																																							run: (*parser).callonBlockAttributes50,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 440, col: 9, offset: 14430},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 440, col: 9, offset: 14430},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 430, col: 78, offset: 14118},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 434, col: 25, offset: 14220},
																												run: (*parser).callonBlockAttributes54,
																												expr: &seqExpr{
																													pos: position{line: 434, col: 25, offset: 14220},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 434, col: 25, offset: 14220},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 434, col: 38, offset: 14233},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 120, col: 18, offset: 3502},
																																run: (*parser).callonBlockAttributes58,
																																expr: &seqExpr{
																																	pos: position{line: 120, col: 18, offset: 3502},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 120, col: 18, offset: 3502},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 120, col: 28, offset: 3512},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 120, col: 29, offset: 3513},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 434, col: 57, offset: 14252},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 434, col: 63, offset: 14258},
																																expr: &actionExpr{
																																	pos: position{line: 438, col: 17, offset: 14365},
																																	run: (*parser).callonBlockAttributes65,
																																	expr: &seqExpr{
																																		pos: position{line: 438, col: 17, offset: 14365},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 438, col: 17, offset: 14365},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 438, col: 21, offset: 14369},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 438, col: 28, offset: 14376},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 438, col: 28, offset: 14376},
																																							run: (*parser).callonBlockAttributes70,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 438, col: 28, offset: 14376},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 440, col: 9, offset: 14430},
																																							run: (*parser).callonBlockAttributes72,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 440, col: 9, offset: 14430},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 440, col: 9, offset: 14430},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 434, col: 79, offset: 14274},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 423, col: 31, offset: 13720},
																												run: (*parser).callonBlockAttributes76,
																												expr: &seqExpr{
																													pos: position{line: 423, col: 31, offset: 13720},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 423, col: 31, offset: 13720},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 423, col: 35, offset: 13724},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 120, col: 18, offset: 3502},
																																run: (*parser).callonBlockAttributes80,
																																expr: &seqExpr{
																																	pos: position{line: 120, col: 18, offset: 3502},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 120, col: 18, offset: 3502},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 120, col: 28, offset: 3512},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 120, col: 29, offset: 3513},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 423, col: 54, offset: 13743},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 194, col: 16, offset: 5720},
																						run: (*parser).callonBlockAttributes86,
																						expr: &litMatcher{
																							pos:        position{line: 194, col: 16, offset: 5720},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 200, col: 5, offset: 5906},
																val:        "]]",
																ignoreCase: false,
																want:       "\"]]\"",
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 154, col: 35, offset: 4619},
												expr: &actionExpr{
													pos: position{line: 2860, col: 10, offset: 94799},
													run: (*parser).callonBlockAttributes90,
													expr: &charClassMatcher{
														pos:        position{line: 2860, col: 11, offset: 94800},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2877, col: 8, offset: 95162},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2870, col: 12, offset: 95022},
														run: (*parser).callonBlockAttributes93,
														expr: &choiceExpr{
															pos: position{line: 2870, col: 13, offset: 95023},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2870, col: 13, offset: 95023},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2870, col: 20, offset: 95030},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2870, col: 29, offset: 95039},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2874, col: 8, offset: 95112},
														expr: &anyMatcher{
															line: 2874, col: 9, offset: 95113,
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 158, col: 12, offset: 4740},
									run: (*parser).callonBlockAttributes100,
									expr: &seqExpr{
										pos: position{line: 158, col: 12, offset: 4740},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 158, col: 12, offset: 4740},
												label: "title",
												expr: &actionExpr{
													pos: position{line: 205, col: 19, offset: 6025},
													run: (*parser).callonBlockAttributes103,
													expr: &seqExpr{
														pos: position{line: 205, col: 19, offset: 6025},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 205, col: 19, offset: 6025},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
															&labeledExpr{
																pos:   position{line: 205, col: 23, offset: 6029},
																label: "title",
																expr: &actionExpr{
																	pos: position{line: 206, col: 5, offset: 6041},
																	run: (*parser).callonBlockAttributes107,
																	expr: &seqExpr{
																		pos: position{line: 206, col: 5, offset: 6041},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 206, col: 5, offset: 6041},
																				expr: &charClassMatcher{
																					pos:        position{line: 206, col: 6, offset: 6042},
																					val:        "[. ]",
																					chars:      []rune{'.', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 207, col: 5, offset: 6154},
																				label: "elements",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 207, col: 14, offset: 6163},
																					expr: &choiceExpr{
																						pos: position{line: 208, col: 9, offset: 6173},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 208, col: 10, offset: 6174},
																								run: (*parser).callonBlockAttributes114,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 208, col: 10, offset: 6174},
																									expr: &charClassMatcher{
																										pos:        position{line: 208, col: 10, offset: 6174},
																										val:        "[^\\r\\n�{]",
																										chars:      []rune{'\r', '\n', '�', '{'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 914, col: 23, offset: 28983},
																								run: (*parser).callonBlockAttributes117,
																								expr: &seqExpr{
																									pos: position{line: 914, col: 23, offset: 28983},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 912, col: 32, offset: 28951},
																											val:        "�",
																											ignoreCase: false,
																											want:       "\"�\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 914, col: 51, offset: 29011},
																											label: "ref",
																											expr: &actionExpr{
																												pos: position{line: 914, col: 56, offset: 29016},
																												run: (*parser).callonBlockAttributes121,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 914, col: 56, offset: 29016},
																													expr: &charClassMatcher{
																														pos:        position{line: 914, col: 56, offset: 29016},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 912, col: 32, offset: 28951},
																											val:        "�",
																											ignoreCase: false,
																											want:       "\"�\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 416, col: 5, offset: 13530},
																								run: (*parser).callonBlockAttributes125,
																								expr: &seqExpr{
																									pos: position{line: 416, col: 5, offset: 13530},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 416, col: 5, offset: 13530},
																											run: (*parser).callonBlockAttributes127,
																										},
																										&labeledExpr{
																											pos:   position{line: 419, col: 5, offset: 13594},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 419, col: 14, offset: 13603},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 430, col: 25, offset: 14065},
																														run: (*parser).callonBlockAttributes130,
																														expr: &seqExpr{
																															pos: position{line: 430, col: 25, offset: 14065},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 430, col: 25, offset: 14065},
																																	val:        "{counter:",
																																	ignoreCase: false,
																																	want:       "\"{counter:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 430, col: 37, offset: 14077},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 120, col: 18, offset: 3502},
																																		run: (*parser).callonBlockAttributes134,
																																		expr: &seqExpr{
																																			pos: position{line: 120, col: 18, offset: 3502},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 120, col: 18, offset: 3502},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 120, col: 28, offset: 3512},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 120, col: 29, offset: 3513},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 430, col: 56, offset: 14096},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 430, col: 62, offset: 14102},
																																		expr: &actionExpr{
																																			pos: position{line: 438, col: 17, offset: 14365},
																																			run: (*parser).callonBlockAttributes141,
																																			expr: &seqExpr{
																																				pos: position{line: 438, col: 17, offset: 14365},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 438, col: 17, offset: 14365},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 438, col: 21, offset: 14369},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 438, col: 28, offset: 14376},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 438, col: 28, offset: 14376},
																																									run: (*parser).callonBlockAttributes146,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 438, col: 28, offset: 14376},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 440, col: 9, offset: 14430},
																																									run: (*parser).callonBlockAttributes148,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 440, col: 9, offset: 14430},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 440, col: 9, offset: 14430},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 430, col: 78, offset: 14118},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 434, col: 25, offset: 14220},
																														run: (*parser).callonBlockAttributes152,
																														expr: &seqExpr{
																															pos: position{line: 434, col: 25, offset: 14220},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 434, col: 25, offset: 14220},
																																	val:        "{counter2:",
																																	ignoreCase: false,
																																	want:       "\"{counter2:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 434, col: 38, offset: 14233},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 120, col: 18, offset: 3502},
																																		run: (*parser).callonBlockAttributes156,
																																		expr: &seqExpr{
																																			pos: position{line: 120, col: 18, offset: 3502},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 120, col: 18, offset: 3502},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 120, col: 28, offset: 3512},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 120, col: 29, offset: 3513},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 434, col: 57, offset: 14252},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 434, col: 63, offset: 14258},
																																		expr: &actionExpr{
																																			pos: position{line: 438, col: 17, offset: 14365},
																																			run: (*parser).callonBlockAttributes163,
																																			expr: &seqExpr{
																																				pos: position{line: 438, col: 17, offset: 14365},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 438, col: 17, offset: 14365},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 438, col: 21, offset: 14369},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 438, col: 28, offset: 14376},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 438, col: 28, offset: 14376},
																																									run: (*parser).callonBlockAttributes168,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 438, col: 28, offset: 14376},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 440, col: 9, offset: 14430},
																																									run: (*parser).callonBlockAttributes170,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 440, col: 9, offset: 14430},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 440, col: 9, offset: 14430},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 434, col: 79, offset: 14274},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 423, col: 31, offset: 13720},
																														run: (*parser).callonBlockAttributes174,
																														expr: &seqExpr{
																															pos: position{line: 423, col: 31, offset: 13720},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 423, col: 31, offset: 13720},
																																	val:        "{",
																																	ignoreCase: false,
																																	want:       "\"{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 423, col: 35, offset: 13724},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 120, col: 18, offset: 3502},
																																		run: (*parser).callonBlockAttributes178,
																																		expr: &seqExpr{
																																			pos: position{line: 120, col: 18, offset: 3502},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 120, col: 18, offset: 3502},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 120, col: 28, offset: 3512},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 120, col: 29, offset: 3513},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 423, col: 54, offset: 13743},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 213, col: 12, offset: 6333},
																								run: (*parser).callonBlockAttributes184,
																								expr: &litMatcher{
																									pos:        position{line: 213, col: 12, offset: 6333},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 158, col: 35, offset: 4763},
												expr: &actionExpr{
													pos: position{line: 2860, col: 10, offset: 94799},
													run: (*parser).callonBlockAttributes187,
													expr: &charClassMatcher{
														pos:        position{line: 2860, col: 11, offset: 94800},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2877, col: 8, offset: 95162},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2870, col: 12, offset: 95022},
														run: (*parser).callonBlockAttributes190,
														expr: &choiceExpr{
															pos: position{line: 2870, col: 13, offset: 95023},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2870, col: 13, offset: 95023},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2870, col: 20, offset: 95030},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2870, col: 29, offset: 95039},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2874, col: 8, offset: 95112},
														expr: &anyMatcher{
															line: 2874, col: 9, offset: 95113,
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 162, col: 12, offset: 4854},
									run: (*parser).callonBlockAttributes197,
									expr: &seqExpr{
										pos: position{line: 162, col: 12, offset: 4854},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 162, col: 12, offset: 4854},
												label: "attributes",
												expr: &ruleRefExpr{
													pos:  position{line: 162, col: 24, offset: 4866},
													name: "LongHandAttributes",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 162, col: 44, offset: 4886},
												expr: &actionExpr{
													pos: position{line: 2860, col: 10, offset: 94799},
													run: (*parser).callonBlockAttributes202,
													expr: &charClassMatcher{
														pos:        position{line: 2860, col: 11, offset: 94800},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2877, col: 8, offset: 95162},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2870, col: 12, offset: 95022},
														run: (*parser).callonBlockAttributes205,
														expr: &choiceExpr{
															pos: position{line: 2870, col: 13, offset: 95023},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2870, col: 13, offset: 95023},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2870, col: 20, offset: 95030},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2870, col: 29, offset: 95039},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2874, col: 8, offset: 95112},
														expr: &anyMatcher{
															line: 2874, col: 9, offset: 95113,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 170, col: 1, offset: 5071},
			expr: &actionExpr{
				pos: position{line: 171, col: 5, offset: 5095},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 171, col: 5, offset: 5095},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 171, col: 5, offset: 5095},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 172, col: 5, offset: 5103},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 172, col: 16, offset: 5114},
								expr: &actionExpr{
									pos: position{line: 173, col: 9, offset: 5124},
									run: (*parser).callonInlineAttributes6,
									expr: &seqExpr{
										pos: position{line: 174, col: 13, offset: 5138},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 174, col: 13, offset: 5138},
												expr: &litMatcher{
													pos:        position{line: 174, col: 14, offset: 5139},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 175, col: 13, offset: 5171},
												label: "attribute",
												expr: &choiceExpr{
													pos: position{line: 175, col: 24, offset: 5182},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 175, col: 24, offset: 5182},
															name: "PositionalAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 175, col: 46, offset: 5204},
															name: "NamedAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 180, col: 5, offset: 5287},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 224, col: 1, offset: 6733},
			expr: &actionExpr{
				pos: position{line: 225, col: 5, offset: 6759},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 225, col: 5, offset: 6759},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 225, col: 5, offset: 6759},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 225, col: 9, offset: 6763},
							expr: &litMatcher{
								pos:        position{line: 225, col: 10, offset: 6764},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 227, col: 5, offset: 6933},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 227, col: 31, offset: 6959},
								expr: &actionExpr{
									pos: position{line: 243, col: 5, offset: 7614},
									run: (*parser).callonLongHandAttributes8,
									expr: &seqExpr{
										pos: position{line: 243, col: 5, offset: 7614},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 243, col: 5, offset: 7614},
												label: "main",
												expr: &zeroOrOneExpr{
													pos: position{line: 243, col: 10, offset: 7619},
													expr: &actionExpr{
														pos: position{line: 275, col: 23, offset: 8429},
														run: (*parser).callonLongHandAttributes12,
														expr: &labeledExpr{
															pos:   position{line: 275, col: 23, offset: 8429},
															label: "value",
															expr: &choiceExpr{
																pos: position{line: 291, col: 5, offset: 8908},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 346, col: 5, offset: 10869},
																		run: (*parser).callonLongHandAttributes15,
																		expr: &seqExpr{
																			pos: position{line: 346, col: 5, offset: 10869},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 346, col: 5, offset: 10869},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&notExpr{
																					pos: position{line: 346, col: 9, offset: 10873},
																					expr: &litMatcher{
																						pos:        position{line: 346, col: 10, offset: 10874},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 347, col: 5, offset: 10953},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 353, col: 5, offset: 11090},
																						run: (*parser).callonLongHandAttributes21,
																						expr: &labeledExpr{
																							pos:   position{line: 353, col: 5, offset: 11090},
																							label: "elements",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 353, col: 14, offset: 11099},
																								expr: &choiceExpr{
																									pos: position{line: 354, col: 9, offset: 11109},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2790, col: 14, offset: 92611},
																											run: (*parser).callonLongHandAttributes25,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2790, col: 14, offset: 92611},
																												expr: &charClassMatcher{
																													pos:        position{line: 2790, col: 14, offset: 92611},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2860, col: 10, offset: 94799},
																											run: (*parser).callonLongHandAttributes28,
																											expr: &charClassMatcher{
																												pos:        position{line: 2860, col: 11, offset: 94800},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 416, col: 5, offset: 13530},
																											run: (*parser).callonLongHandAttributes30,
																											expr: &seqExpr{
																												pos: position{line: 416, col: 5, offset: 13530},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 416, col: 5, offset: 13530},
																														run: (*parser).callonLongHandAttributes32,
																													},
																													&labeledExpr{
																														pos:   position{line: 419, col: 5, offset: 13594},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 419, col: 14, offset: 13603},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 430, col: 25, offset: 14065},
																																	run: (*parser).callonLongHandAttributes35,
																																	expr: &seqExpr{
																																		pos: position{line: 430, col: 25, offset: 14065},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 430, col: 25, offset: 14065},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 430, col: 37, offset: 14077},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					run: (*parser).callonLongHandAttributes39,
																																					expr: &seqExpr{
																																						pos: position{line: 120, col: 18, offset: 3502},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 120, col: 18, offset: 3502},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 120, col: 28, offset: 3512},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 120, col: 29, offset: 3513},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 430, col: 56, offset: 14096},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 430, col: 62, offset: 14102},
																																					expr: &actionExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						run: (*parser).callonLongHandAttributes46,
																																						expr: &seqExpr{
																																							pos: position{line: 438, col: 17, offset: 14365},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 438, col: 17, offset: 14365},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 438, col: 21, offset: 14369},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 438, col: 28, offset: 14376},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 438, col: 28, offset: 14376},
																																												run: (*parser).callonLongHandAttributes51,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 438, col: 28, offset: 14376},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												run: (*parser).callonLongHandAttributes53,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 440, col: 9, offset: 14430},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 440, col: 9, offset: 14430},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 430, col: 78, offset: 14118},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 434, col: 25, offset: 14220},
																																	run: (*parser).callonLongHandAttributes57,
																																	expr: &seqExpr{
																																		pos: position{line: 434, col: 25, offset: 14220},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 434, col: 25, offset: 14220},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 434, col: 38, offset: 14233},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					run: (*parser).callonLongHandAttributes61,
																																					expr: &seqExpr{
																																						pos: position{line: 120, col: 18, offset: 3502},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 120, col: 18, offset: 3502},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 120, col: 28, offset: 3512},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 120, col: 29, offset: 3513},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 434, col: 57, offset: 14252},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 434, col: 63, offset: 14258},
																																					expr: &actionExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						run: (*parser).callonLongHandAttributes68,
																																						expr: &seqExpr{
																																							pos: position{line: 438, col: 17, offset: 14365},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 438, col: 17, offset: 14365},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 438, col: 21, offset: 14369},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 438, col: 28, offset: 14376},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 438, col: 28, offset: 14376},
																																												run: (*parser).callonLongHandAttributes73,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 438, col: 28, offset: 14376},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												run: (*parser).callonLongHandAttributes75,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 440, col: 9, offset: 14430},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 440, col: 9, offset: 14430},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 434, col: 79, offset: 14274},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 423, col: 31, offset: 13720},
																																	run: (*parser).callonLongHandAttributes79,
																																	expr: &seqExpr{
																																		pos: position{line: 423, col: 31, offset: 13720},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 423, col: 31, offset: 13720},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 423, col: 35, offset: 13724},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					run: (*parser).callonLongHandAttributes83,
																																					expr: &seqExpr{
																																						pos: position{line: 120, col: 18, offset: 3502},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 120, col: 18, offset: 3502},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 120, col: 28, offset: 3512},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 120, col: 29, offset: 3513},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 423, col: 54, offset: 13743},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 357, col: 12, offset: 11178},
																											run: (*parser).callonLongHandAttributes89,
																											expr: &litMatcher{
																												pos:        position{line: 357, col: 12, offset: 11178},
																												val:        "\\'",
																												ignoreCase: false,
																												want:       "\"\\\\'\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 360, col: 13, offset: 11280},
																											val:        "'`",
																											ignoreCase: false,
																											want:       "\"'`\"",
																										},
																										&litMatcher{
																											pos:        position{line: 360, col: 20, offset: 11287},
																											val:        "`'",
																											ignoreCase: false,
																											want:       "\"`'\"",
																										},
																										&actionExpr{
																											pos: position{line: 360, col: 27, offset: 11294},
																											run: (*parser).callonLongHandAttributes93,
																											expr: &litMatcher{
																												pos:        position{line: 360, col: 27, offset: 11294},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 363, col: 12, offset: 11454},
																											run: (*parser).callonLongHandAttributes95,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 363, col: 12, offset: 11454},
																												expr: &charClassMatcher{
																													pos:        position{line: 363, col: 12, offset: 11454},
																													val:        "[^\\r\\n\\\\\\ ]",
																													chars:      []rune{'\r', '\n', '\\', '\'', ' '},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 348, col: 5, offset: 11004},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 371, col: 5, offset: 11689},
																		run: (*parser).callonLongHandAttributes99,
																		expr: &seqExpr{
																			pos: position{line: 371, col: 5, offset: 11689},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 371, col: 5, offset: 11689},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&notExpr{
																					pos: position{line: 371, col: 10, offset: 11694},
																					expr: &litMatcher{
																						pos:        position{line: 371, col: 11, offset: 11695},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 372, col: 5, offset: 11774},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 377, col: 5, offset: 11928},
																						run: (*parser).callonLongHandAttributes105,
																						expr: &labeledExpr{
																							pos:   position{line: 377, col: 5, offset: 11928},
																							label: "elements",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 377, col: 14, offset: 11937},
																								expr: &choiceExpr{
																									pos: position{line: 378, col: 9, offset: 11947},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2790, col: 14, offset: 92611},
																											run: (*parser).callonLongHandAttributes109,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2790, col: 14, offset: 92611},
																												expr: &charClassMatcher{
																													pos:        position{line: 2790, col: 14, offset: 92611},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2860, col: 10, offset: 94799},
																											run: (*parser).callonLongHandAttributes112,
																											expr: &charClassMatcher{
																												pos:        position{line: 2860, col: 11, offset: 94800},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 416, col: 5, offset: 13530},
																											run: (*parser).callonLongHandAttributes114,
																											expr: &seqExpr{
																												pos: position{line: 416, col: 5, offset: 13530},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 416, col: 5, offset: 13530},
																														run: (*parser).callonLongHandAttributes116,
																													},
																													&labeledExpr{
																														pos:   position{line: 419, col: 5, offset: 13594},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 419, col: 14, offset: 13603},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 430, col: 25, offset: 14065},
																																	run: (*parser).callonLongHandAttributes119,
																																	expr: &seqExpr{
																																		pos: position{line: 430, col: 25, offset: 14065},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 430, col: 25, offset: 14065},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 430, col: 37, offset: 14077},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					run: (*parser).callonLongHandAttributes123,
																																					expr: &seqExpr{
																																						pos: position{line: 120, col: 18, offset: 3502},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 120, col: 18, offset: 3502},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 120, col: 28, offset: 3512},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 120, col: 29, offset: 3513},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 430, col: 56, offset: 14096},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 430, col: 62, offset: 14102},
																																					expr: &actionExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						run: (*parser).callonLongHandAttributes130,
																																						expr: &seqExpr{
																																							pos: position{line: 438, col: 17, offset: 14365},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 438, col: 17, offset: 14365},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 438, col: 21, offset: 14369},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 438, col: 28, offset: 14376},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 438, col: 28, offset: 14376},
																																												run: (*parser).callonLongHandAttributes135,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 438, col: 28, offset: 14376},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												run: (*parser).callonLongHandAttributes137,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 440, col: 9, offset: 14430},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 440, col: 9, offset: 14430},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 430, col: 78, offset: 14118},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 434, col: 25, offset: 14220},
																																	run: (*parser).callonLongHandAttributes141,
																																	expr: &seqExpr{
																																		pos: position{line: 434, col: 25, offset: 14220},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 434, col: 25, offset: 14220},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 434, col: 38, offset: 14233},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					run: (*parser).callonLongHandAttributes145,
																																					expr: &seqExpr{
																																						pos: position{line: 120, col: 18, offset: 3502},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 120, col: 18, offset: 3502},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 120, col: 28, offset: 3512},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 120, col: 29, offset: 3513},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 434, col: 57, offset: 14252},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 434, col: 63, offset: 14258},
																																					expr: &actionExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						run: (*parser).callonLongHandAttributes152,
																																						expr: &seqExpr{
																																							pos: position{line: 438, col: 17, offset: 14365},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 438, col: 17, offset: 14365},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 438, col: 21, offset: 14369},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 438, col: 28, offset: 14376},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 438, col: 28, offset: 14376},
																																												run: (*parser).callonLongHandAttributes157,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 438, col: 28, offset: 14376},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												run: (*parser).callonLongHandAttributes159,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 440, col: 9, offset: 14430},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 440, col: 9, offset: 14430},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 434, col: 79, offset: 14274},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 423, col: 31, offset: 13720},
																																	run: (*parser).callonLongHandAttributes163,
																																	expr: &seqExpr{
																																		pos: position{line: 423, col: 31, offset: 13720},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 423, col: 31, offset: 13720},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 423, col: 35, offset: 13724},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					run: (*parser).callonLongHandAttributes167,
																																					expr: &seqExpr{
																																						pos: position{line: 120, col: 18, offset: 3502},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 120, col: 18, offset: 3502},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 120, col: 28, offset: 3512},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 120, col: 29, offset: 3513},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 423, col: 54, offset: 13743},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 381, col: 12, offset: 12016},
																											run: (*parser).callonLongHandAttributes173,
																											expr: &litMatcher{
																												pos:        position{line: 381, col: 12, offset: 12016},
																												val:        "\\\"",
																												ignoreCase: false,
																												want:       "\"\\\\\\\"\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 384, col: 13, offset: 12118},
																											val:        "\"`",
																											ignoreCase: false,
																											want:       "\"\\\"`\"",
																										},
																										&litMatcher{
																											pos:        position{line: 384, col: 21, offset: 12126},
																											val:        "`\"",
																											ignoreCase: false,
																											want:       "\"`\\\"\"",
																										},
																										&litMatcher{
																											pos:        position{line: 384, col: 29, offset: 12134},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&actionExpr{
																											pos: position{line: 384, col: 35, offset: 12140},
																											run: (*parser).callonLongHandAttributes178,
																											expr: &litMatcher{
																												pos:        position{line: 384, col: 35, offset: 12140},
																												val:        "`",
																												ignoreCase: false,
																												want:       "\"`\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 387, col: 12, offset: 12323},
																											run: (*parser).callonLongHandAttributes180,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 387, col: 12, offset: 12323},
																												expr: &charClassMatcher{
																													pos:        position{line: 387, col: 12, offset: 12323},
																													val:        "[^\\r\\n\\\\\"` ]",
																													chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 373, col: 5, offset: 11825},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&andExpr{
																					pos: position{line: 373, col: 10, offset: 11830},
																					expr: &notExpr{
																						pos: position{line: 373, col: 12, offset: 11832},
																						expr: &seqExpr{
																							pos: position{line: 373, col: 14, offset: 11834},
																							exprs: []interface{}{
																								&zeroOrMoreExpr{
																									pos: position{line: 373, col: 14, offset: 11834},
																									expr: &actionExpr{
																										pos: position{line: 2860, col: 10, offset: 94799},
																										run: (*parser).callonLongHandAttributes188,
																										expr: &charClassMatcher{
																											pos:        position{line: 2860, col: 11, offset: 94800},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 373, col: 21, offset: 11841},
																									val:        "=",
																									ignoreCase: false,
																									want:       "\"=\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 293, col: 7, offset: 8982},
																		run: (*parser).callonLongHandAttributes191,
																		expr: &seqExpr{
																			pos: position{line: 293, col: 7, offset: 8982},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 293, col: 7, offset: 8982},
																					label: "elements",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 293, col: 16, offset: 8991},
																						expr: &choiceExpr{
																							pos: position{line: 296, col: 9, offset: 9173},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 296, col: 10, offset: 9174},
																									run: (*parser).callonLongHandAttributes196,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 296, col: 10, offset: 9174},
																										expr: &charClassMatcher{
																											pos:        position{line: 296, col: 10, offset: 9174},
																											val:        "[^,=.%# \\r\\n�{]]",
																											chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 914, col: 23, offset: 28983},
																									run: (*parser).callonLongHandAttributes199,
																									expr: &seqExpr{
																										pos: position{line: 914, col: 23, offset: 28983},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 912, col: 32, offset: 28951},
																												val:        "�",
																												ignoreCase: false,
																												want:       "\"�\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 914, col: 51, offset: 29011},
																												label: "ref",
																												expr: &actionExpr{
																													pos: position{line: 914, col: 56, offset: 29016},
																													run: (*parser).callonLongHandAttributes203,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 914, col: 56, offset: 29016},
																														expr: &charClassMatcher{
																															pos:        position{line: 914, col: 56, offset: 29016},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 912, col: 32, offset: 28951},
																												val:        "�",
																												ignoreCase: false,
																												want:       "\"�\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 416, col: 5, offset: 13530},
																									run: (*parser).callonLongHandAttributes207,
																									expr: &seqExpr{
																										pos: position{line: 416, col: 5, offset: 13530},
																										exprs: []interface{}{
																											&andCodeExpr{
																												pos: position{line: 416, col: 5, offset: 13530},
																												run: (*parser).callonLongHandAttributes209,
																											},
																											&labeledExpr{
																												pos:   position{line: 419, col: 5, offset: 13594},
																												label: "element",
																												expr: &choiceExpr{
																													pos: position{line: 419, col: 14, offset: 13603},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 430, col: 25, offset: 14065},
																															run: (*parser).callonLongHandAttributes212,
																															expr: &seqExpr{
																																pos: position{line: 430, col: 25, offset: 14065},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 430, col: 25, offset: 14065},
																																		val:        "{counter:",
																																		ignoreCase: false,
																																		want:       "\"{counter:\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 430, col: 37, offset: 14077},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 120, col: 18, offset: 3502},
																																			run: (*parser).callonLongHandAttributes216,
																																			expr: &seqExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 120, col: 18, offset: 3502},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 120, col: 28, offset: 3512},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 120, col: 29, offset: 3513},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 430, col: 56, offset: 14096},
																																		label: "start",
																																		expr: &zeroOrOneExpr{
																																			pos: position{line: 430, col: 62, offset: 14102},
																																			expr: &actionExpr{
																																				pos: position{line: 438, col: 17, offset: 14365},
																																				run: (*parser).callonLongHandAttributes223,
																																				expr: &seqExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 438, col: 17, offset: 14365},
																																							val:        ":",
																																							ignoreCase: false,
																																							want:       "\":\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 438, col: 21, offset: 14369},
																																							label: "start",
																																							expr: &choiceExpr{
																																								pos: position{line: 438, col: 28, offset: 14376},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 438, col: 28, offset: 14376},
																																										run: (*parser).callonLongHandAttributes228,
																																										expr: &charClassMatcher{
																																											pos:        position{line: 438, col: 28, offset: 14376},
																																											val:        "[A-Za-z]",
																																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 440, col: 9, offset: 14430},
																																										run: (*parser).callonLongHandAttributes230,
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 440, col: 9, offset: 14430},
																																												val:        "[0-9]",
																																												ranges:     []rune{'0', '9'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 430, col: 78, offset: 14118},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 434, col: 25, offset: 14220},
																															run: (*parser).callonLongHandAttributes234,
																															expr: &seqExpr{
																																pos: position{line: 434, col: 25, offset: 14220},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 434, col: 25, offset: 14220},
																																		val:        "{counter2:",
																																		ignoreCase: false,
																																		want:       "\"{counter2:\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 434, col: 38, offset: 14233},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 120, col: 18, offset: 3502},
																																			run: (*parser).callonLongHandAttributes238,
																																			expr: &seqExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 120, col: 18, offset: 3502},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 120, col: 28, offset: 3512},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 120, col: 29, offset: 3513},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 434, col: 57, offset: 14252},
																																		label: "start",
																																		expr: &zeroOrOneExpr{
																																			pos: position{line: 434, col: 63, offset: 14258},
																																			expr: &actionExpr{
																																				pos: position{line: 438, col: 17, offset: 14365},
																																				run: (*parser).callonLongHandAttributes245,
																																				expr: &seqExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 438, col: 17, offset: 14365},
																																							val:        ":",
																																							ignoreCase: false,
																																							want:       "\":\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 438, col: 21, offset: 14369},
																																							label: "start",
																																							expr: &choiceExpr{
																																								pos: position{line: 438, col: 28, offset: 14376},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 438, col: 28, offset: 14376},
																																										run: (*parser).callonLongHandAttributes250,
																																										expr: &charClassMatcher{
																																											pos:        position{line: 438, col: 28, offset: 14376},
																																											val:        "[A-Za-z]",
																																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 440, col: 9, offset: 14430},
																																										run: (*parser).callonLongHandAttributes252,
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 440, col: 9, offset: 14430},
																																												val:        "[0-9]",
																																												ranges:     []rune{'0', '9'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 434, col: 79, offset: 14274},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 423, col: 31, offset: 13720},
																															run: (*parser).callonLongHandAttributes256,
																															expr: &seqExpr{
																																pos: position{line: 423, col: 31, offset: 13720},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 423, col: 31, offset: 13720},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 423, col: 35, offset: 13724},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 120, col: 18, offset: 3502},
																																			run: (*parser).callonLongHandAttributes260,
																																			expr: &seqExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 120, col: 18, offset: 3502},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 120, col: 28, offset: 3512},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 120, col: 29, offset: 3513},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 423, col: 54, offset: 13743},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 302, col: 12, offset: 9362},
																									run: (*parser).callonLongHandAttributes266,
																									expr: &litMatcher{
																										pos:        position{line: 302, col: 12, offset: 9362},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&andExpr{
																					pos: position{line: 305, col: 8, offset: 9445},
																					expr: &notExpr{
																						pos: position{line: 305, col: 10, offset: 9447},
																						expr: &seqExpr{
																							pos: position{line: 305, col: 12, offset: 9449},
																							exprs: []interface{}{
																								&zeroOrMoreExpr{
																									pos: position{line: 305, col: 12, offset: 9449},
																									expr: &actionExpr{
																										pos: position{line: 2860, col: 10, offset: 94799},
																										run: (*parser).callonLongHandAttributes272,
																										expr: &charClassMatcher{
																											pos:        position{line: 2860, col: 11, offset: 94800},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 305, col: 19, offset: 9456},
																									val:        "=",
																									ignoreCase: false,
																									want:       "\"=\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 246, col: 5, offset: 7659},
												label: "extras",
												expr: &zeroOrMoreExpr{
													pos: position{line: 246, col: 12, offset: 7666},
													expr: &actionExpr{
														pos: position{line: 247, col: 9, offset: 7677},
														run: (*parser).callonLongHandAttributes277,
														expr: &seqExpr{
															pos: position{line: 247, col: 9, offset: 7677},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 247, col: 9, offset: 7677},
																	expr: &litMatcher{
																		pos:        position{line: 247, col: 10, offset: 7678},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																},
																&notExpr{
																	pos: position{line: 247, col: 14, offset: 7682},
																	expr: &litMatcher{
																		pos:        position{line: 247, col: 15, offset: 7683},
																		val:        "]",
																		ignoreCase: false,
																		want:       "\"]\"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 248, col: 9, offset: 7695},
																	label: "extra",
																	expr: &choiceExpr{
																		pos: position{line: 249, col: 13, offset: 7715},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 271, col: 25, offset: 8325},
																				run: (*parser).callonLongHandAttributes285,
																				expr: &seqExpr{
																					pos: position{line: 271, col: 25, offset: 8325},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 271, col: 25, offset: 8325},
																							val:        "#",
																							ignoreCase: false,
																							want:       "\"#\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 271, col: 29, offset: 8329},
																							label: "id",
																							expr: &choiceExpr{
																								pos: position{line: 291, col: 5, offset: 8908},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 346, col: 5, offset: 10869},
																										run: (*parser).callonLongHandAttributes290,
																										expr: &seqExpr{
																											pos: position{line: 346, col: 5, offset: 10869},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 346, col: 5, offset: 10869},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&notExpr{
																													pos: position{line: 346, col: 9, offset: 10873},
																													expr: &litMatcher{
																														pos:        position{line: 346, col: 10, offset: 10874},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 347, col: 5, offset: 10953},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 353, col: 5, offset: 11090},
																														run: (*parser).callonLongHandAttributes296,
																														expr: &labeledExpr{
																															pos:   position{line: 353, col: 5, offset: 11090},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 353, col: 14, offset: 11099},
																																expr: &choiceExpr{
																																	pos: position{line: 354, col: 9, offset: 11109},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2790, col: 14, offset: 92611},
																																			run: (*parser).callonLongHandAttributes300,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2790, col: 14, offset: 92611},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2790, col: 14, offset: 92611},
																																					val:        "[0-9\\pL]",
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2860, col: 10, offset: 94799},
																																			run: (*parser).callonLongHandAttributes303,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2860, col: 11, offset: 94800},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 416, col: 5, offset: 13530},
																																			run: (*parser).callonLongHandAttributes305,
																																			expr: &seqExpr{
																																				pos: position{line: 416, col: 5, offset: 13530},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 416, col: 5, offset: 13530},
																																						run: (*parser).callonLongHandAttributes307,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 419, col: 5, offset: 13594},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 419, col: 14, offset: 13603},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 430, col: 25, offset: 14065},
																																									run: (*parser).callonLongHandAttributes310,
																																									expr: &seqExpr{
																																										pos: position{line: 430, col: 25, offset: 14065},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 430, col: 25, offset: 14065},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 430, col: 37, offset: 14077},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 120, col: 18, offset: 3502},
																																													run: (*parser).callonLongHandAttributes314,
																																													expr: &seqExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 120, col: 18, offset: 3502},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 120, col: 28, offset: 3512},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 120, col: 29, offset: 3513},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 430, col: 56, offset: 14096},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 430, col: 62, offset: 14102},
																																													expr: &actionExpr{
																																														pos: position{line: 438, col: 17, offset: 14365},
																																														run: (*parser).callonLongHandAttributes321,
																																														expr: &seqExpr{
																																															pos: position{line: 438, col: 17, offset: 14365},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 438, col: 17, offset: 14365},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 438, col: 21, offset: 14369},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 438, col: 28, offset: 14376},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 438, col: 28, offset: 14376},
																																																				run: (*parser).callonLongHandAttributes326,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 438, col: 28, offset: 14376},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 440, col: 9, offset: 14430},
																																																				run: (*parser).callonLongHandAttributes328,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 440, col: 9, offset: 14430},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 440, col: 9, offset: 14430},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 430, col: 78, offset: 14118},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 434, col: 25, offset: 14220},
																																									run: (*parser).callonLongHandAttributes332,
																																									expr: &seqExpr{
																																										pos: position{line: 434, col: 25, offset: 14220},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 434, col: 25, offset: 14220},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 434, col: 38, offset: 14233},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 120, col: 18, offset: 3502},
																																													run: (*parser).callonLongHandAttributes336,
																																													expr: &seqExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 120, col: 18, offset: 3502},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 120, col: 28, offset: 3512},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 120, col: 29, offset: 3513},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 434, col: 57, offset: 14252},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 434, col: 63, offset: 14258},
																																													expr: &actionExpr{
																																														pos: position{line: 438, col: 17, offset: 14365},
																																														run: (*parser).callonLongHandAttributes343,
																																														expr: &seqExpr{
																																															pos: position{line: 438, col: 17, offset: 14365},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 438, col: 17, offset: 14365},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 438, col: 21, offset: 14369},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 438, col: 28, offset: 14376},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 438, col: 28, offset: 14376},
																																																				run: (*parser).callonLongHandAttributes348,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 438, col: 28, offset: 14376},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 440, col: 9, offset: 14430},
																																																				run: (*parser).callonLongHandAttributes350,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 440, col: 9, offset: 14430},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 440, col: 9, offset: 14430},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 434, col: 79, offset: 14274},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 423, col: 31, offset: 13720},
																																									run: (*parser).callonLongHandAttributes354,
																																									expr: &seqExpr{
																																										pos: position{line: 423, col: 31, offset: 13720},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 423, col: 31, offset: 13720},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 423, col: 35, offset: 13724},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 120, col: 18, offset: 3502},
																																													run: (*parser).callonLongHandAttributes358,
																																													expr: &seqExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 120, col: 18, offset: 3502},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 120, col: 28, offset: 3512},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 120, col: 29, offset: 3513},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 423, col: 54, offset: 13743},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 357, col: 12, offset: 11178},
																																			run: (*parser).callonLongHandAttributes364,
																																			expr: &litMatcher{
																																				pos:        position{line: 357, col: 12, offset: 11178},
																																				val:        "\\'",
																																				ignoreCase: false,
																																				want:       "\"\\\\'\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 360, col: 13, offset: 11280},
																																			val:        "'`",
																																			ignoreCase: false,
																																			want:       "\"'`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 360, col: 20, offset: 11287},
																																			val:        "`'",
																																			ignoreCase: false,
																																			want:       "\"`'\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 360, col: 27, offset: 11294},
																																			run: (*parser).callonLongHandAttributes368,
																																			expr: &litMatcher{
																																				pos:        position{line: 360, col: 27, offset: 11294},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 363, col: 12, offset: 11454},
																																			run: (*parser).callonLongHandAttributes370,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 363, col: 12, offset: 11454},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 363, col: 12, offset: 11454},
																																					val:        "[^\\r\\n\\\\\\ ]",
																																					chars:      []rune{'\r', '\n', '\\', '\'', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 348, col: 5, offset: 11004},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 371, col: 5, offset: 11689},
																										run: (*parser).callonLongHandAttributes374,
																										expr: &seqExpr{
																											pos: position{line: 371, col: 5, offset: 11689},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 371, col: 5, offset: 11689},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&notExpr{
																													pos: position{line: 371, col: 10, offset: 11694},
																													expr: &litMatcher{
																														pos:        position{line: 371, col: 11, offset: 11695},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 372, col: 5, offset: 11774},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 377, col: 5, offset: 11928},
																														run: (*parser).callonLongHandAttributes380,
																														expr: &labeledExpr{
																															pos:   position{line: 377, col: 5, offset: 11928},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 377, col: 14, offset: 11937},
																																expr: &choiceExpr{
																																	pos: position{line: 378, col: 9, offset: 11947},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2790, col: 14, offset: 92611},
																																			run: (*parser).callonLongHandAttributes384,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2790, col: 14, offset: 92611},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2790, col: 14, offset: 92611},
																																					val:        "[0-9\\pL]",
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2860, col: 10, offset: 94799},
																																			run: (*parser).callonLongHandAttributes387,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2860, col: 11, offset: 94800},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 416, col: 5, offset: 13530},
																																			run: (*parser).callonLongHandAttributes389,
																																			expr: &seqExpr{
																																				pos: position{line: 416, col: 5, offset: 13530},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 416, col: 5, offset: 13530},
																																						run: (*parser).callonLongHandAttributes391,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 419, col: 5, offset: 13594},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 419, col: 14, offset: 13603},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 430, col: 25, offset: 14065},
																																									run: (*parser).callonLongHandAttributes394,
																																									expr: &seqExpr{
																																										pos: position{line: 430, col: 25, offset: 14065},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 430, col: 25, offset: 14065},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 430, col: 37, offset: 14077},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 120, col: 18, offset: 3502},
																																													run: (*parser).callonLongHandAttributes398,
																																													expr: &seqExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 120, col: 18, offset: 3502},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 120, col: 28, offset: 3512},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 120, col: 29, offset: 3513},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 430, col: 56, offset: 14096},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 430, col: 62, offset: 14102},
																																													expr: &actionExpr{
																																														pos: position{line: 438, col: 17, offset: 14365},
																																														run: (*parser).callonLongHandAttributes405,
																																														expr: &seqExpr{
																																															pos: position{line: 438, col: 17, offset: 14365},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 438, col: 17, offset: 14365},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 438, col: 21, offset: 14369},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 438, col: 28, offset: 14376},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 438, col: 28, offset: 14376},
																																																				run: (*parser).callonLongHandAttributes410,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 438, col: 28, offset: 14376},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 440, col: 9, offset: 14430},
																																																				run: (*parser).callonLongHandAttributes412,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 440, col: 9, offset: 14430},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 440, col: 9, offset: 14430},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 430, col: 78, offset: 14118},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 434, col: 25, offset: 14220},
																																									run: (*parser).callonLongHandAttributes416,
																																									expr: &seqExpr{
																																										pos: position{line: 434, col: 25, offset: 14220},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 434, col: 25, offset: 14220},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 434, col: 38, offset: 14233},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 120, col: 18, offset: 3502},
																																													run: (*parser).callonLongHandAttributes420,
																																													expr: &seqExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 120, col: 18, offset: 3502},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 120, col: 28, offset: 3512},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 120, col: 29, offset: 3513},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 434, col: 57, offset: 14252},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 434, col: 63, offset: 14258},
																																													expr: &actionExpr{
																																														pos: position{line: 438, col: 17, offset: 14365},
																																														run: (*parser).callonLongHandAttributes427,
																																														expr: &seqExpr{
																																															pos: position{line: 438, col: 17, offset: 14365},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 438, col: 17, offset: 14365},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 438, col: 21, offset: 14369},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 438, col: 28, offset: 14376},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 438, col: 28, offset: 14376},
																																																				run: (*parser).callonLongHandAttributes432,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 438, col: 28, offset: 14376},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 440, col: 9, offset: 14430},
																																																				run: (*parser).callonLongHandAttributes434,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 440, col: 9, offset: 14430},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 440, col: 9, offset: 14430},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 434, col: 79, offset: 14274},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 423, col: 31, offset: 13720},
																																									run: (*parser).callonLongHandAttributes438,
																																									expr: &seqExpr{
																																										pos: position{line: 423, col: 31, offset: 13720},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 423, col: 31, offset: 13720},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 423, col: 35, offset: 13724},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 120, col: 18, offset: 3502},
																																													run: (*parser).callonLongHandAttributes442,
																																													expr: &seqExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 120, col: 18, offset: 3502},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 120, col: 28, offset: 3512},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 120, col: 29, offset: 3513},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 423, col: 54, offset: 13743},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 381, col: 12, offset: 12016},
																																			run: (*parser).callonLongHandAttributes448,
																																			expr: &litMatcher{
																																				pos:        position{line: 381, col: 12, offset: 12016},
																																				val:        "\\\"",
																																				ignoreCase: false,
																																				want:       "\"\\\\\\\"\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 384, col: 13, offset: 12118},
																																			val:        "\"`",
																																			ignoreCase: false,
																																			want:       "\"\\\"`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 384, col: 21, offset: 12126},
																																			val:        "`\"",
																																			ignoreCase: false,
																																			want:       "\"`\\\"\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 384, col: 29, offset: 12134},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 384, col: 35, offset: 12140},
																																			run: (*parser).callonLongHandAttributes453,
																																			expr: &litMatcher{
																																				pos:        position{line: 384, col: 35, offset: 12140},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 387, col: 12, offset: 12323},
																																			run: (*parser).callonLongHandAttributes455,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 387, col: 12, offset: 12323},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 387, col: 12, offset: 12323},
																																					val:        "[^\\r\\n\\\\\"` ]",
																																					chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 373, col: 5, offset: 11825},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&andExpr{
																													pos: position{line: 373, col: 10, offset: 11830},
																													expr: &notExpr{
																														pos: position{line: 373, col: 12, offset: 11832},
																														expr: &seqExpr{
																															pos: position{line: 373, col: 14, offset: 11834},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 373, col: 14, offset: 11834},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonLongHandAttributes463,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 373, col: 21, offset: 11841},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 293, col: 7, offset: 8982},
																										run: (*parser).callonLongHandAttributes466,
																										expr: &seqExpr{
																											pos: position{line: 293, col: 7, offset: 8982},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 293, col: 7, offset: 8982},
																													label: "elements",
																													expr: &oneOrMoreExpr{
																														pos: position{line: 293, col: 16, offset: 8991},
																														expr: &choiceExpr{
																															pos: position{line: 296, col: 9, offset: 9173},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 296, col: 10, offset: 9174},
																																	run: (*parser).callonLongHandAttributes471,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 296, col: 10, offset: 9174},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 296, col: 10, offset: 9174},
																																			val:        "[^,=.%# \\r\\n�{]]",
																																			chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 914, col: 23, offset: 28983},
																																	run: (*parser).callonLongHandAttributes474,
																																	expr: &seqExpr{
																																		pos: position{line: 914, col: 23, offset: 28983},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 912, col: 32, offset: 28951},
																																				val:        "�",
																																				ignoreCase: false,
																																				want:       "\"�\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 914, col: 51, offset: 29011},
																																				label: "ref",
																																				expr: &actionExpr{
																																					pos: position{line: 914, col: 56, offset: 29016},
																																					run: (*parser).callonLongHandAttributes478,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 914, col: 56, offset: 29016},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 914, col: 56, offset: 29016},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 912, col: 32, offset: 28951},
																																				val:        "�",
																																				ignoreCase: false,
																																				want:       "\"�\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 416, col: 5, offset: 13530},
																																	run: (*parser).callonLongHandAttributes482,
																																	expr: &seqExpr{
																																		pos: position{line: 416, col: 5, offset: 13530},
																																		exprs: []interface{}{
																																			&andCodeExpr{
																																				pos: position{line: 416, col: 5, offset: 13530},
																																				run: (*parser).callonLongHandAttributes484,
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 419, col: 5, offset: 13594},
																																				label: "element",
																																				expr: &choiceExpr{
																																					pos: position{line: 419, col: 14, offset: 13603},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 430, col: 25, offset: 14065},
																																							run: (*parser).callonLongHandAttributes487,
																																							expr: &seqExpr{
																																								pos: position{line: 430, col: 25, offset: 14065},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 430, col: 25, offset: 14065},
																																										val:        "{counter:",
																																										ignoreCase: false,
																																										want:       "\"{counter:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 430, col: 37, offset: 14077},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 120, col: 18, offset: 3502},
																																											run: (*parser).callonLongHandAttributes491,
																																											expr: &seqExpr{
																																												pos: position{line: 120, col: 18, offset: 3502},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 120, col: 18, offset: 3502},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 120, col: 28, offset: 3512},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 120, col: 29, offset: 3513},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 430, col: 56, offset: 14096},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 430, col: 62, offset: 14102},
																																											expr: &actionExpr{
																																												pos: position{line: 438, col: 17, offset: 14365},
																																												run: (*parser).callonLongHandAttributes498,
																																												expr: &seqExpr{
																																													pos: position{line: 438, col: 17, offset: 14365},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 438, col: 17, offset: 14365},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 438, col: 21, offset: 14369},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 438, col: 28, offset: 14376},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 438, col: 28, offset: 14376},
																																																		run: (*parser).callonLongHandAttributes503,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 438, col: 28, offset: 14376},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 440, col: 9, offset: 14430},
																																																		run: (*parser).callonLongHandAttributes505,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 440, col: 9, offset: 14430},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 440, col: 9, offset: 14430},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 430, col: 78, offset: 14118},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 434, col: 25, offset: 14220},
																																							run: (*parser).callonLongHandAttributes509,
																																							expr: &seqExpr{
																																								pos: position{line: 434, col: 25, offset: 14220},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 434, col: 25, offset: 14220},
																																										val:        "{counter2:",
																																										ignoreCase: false,
																																										want:       "\"{counter2:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 434, col: 38, offset: 14233},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 120, col: 18, offset: 3502},
																																											run: (*parser).callonLongHandAttributes513,
																																											expr: &seqExpr{
																																												pos: position{line: 120, col: 18, offset: 3502},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 120, col: 18, offset: 3502},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 120, col: 28, offset: 3512},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 120, col: 29, offset: 3513},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 434, col: 57, offset: 14252},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 434, col: 63, offset: 14258},
																																											expr: &actionExpr{
																																												pos: position{line: 438, col: 17, offset: 14365},
																																												run: (*parser).callonLongHandAttributes520,
																																												expr: &seqExpr{
																																													pos: position{line: 438, col: 17, offset: 14365},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 438, col: 17, offset: 14365},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 438, col: 21, offset: 14369},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 438, col: 28, offset: 14376},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 438, col: 28, offset: 14376},
																																																		run: (*parser).callonLongHandAttributes525,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 438, col: 28, offset: 14376},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 440, col: 9, offset: 14430},
																																																		run: (*parser).callonLongHandAttributes527,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 440, col: 9, offset: 14430},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 440, col: 9, offset: 14430},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 434, col: 79, offset: 14274},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 423, col: 31, offset: 13720},
																																							run: (*parser).callonLongHandAttributes531,
																																							expr: &seqExpr{
																																								pos: position{line: 423, col: 31, offset: 13720},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 423, col: 31, offset: 13720},
																																										val:        "{",
																																										ignoreCase: false,
																																										want:       "\"{\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 423, col: 35, offset: 13724},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 120, col: 18, offset: 3502},
																																											run: (*parser).callonLongHandAttributes535,
																																											expr: &seqExpr{
																																												pos: position{line: 120, col: 18, offset: 3502},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 120, col: 18, offset: 3502},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 120, col: 28, offset: 3512},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 120, col: 29, offset: 3513},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 423, col: 54, offset: 13743},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 302, col: 12, offset: 9362},
																																	run: (*parser).callonLongHandAttributes541,
																																	expr: &litMatcher{
																																		pos:        position{line: 302, col: 12, offset: 9362},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 305, col: 8, offset: 9445},
																													expr: &notExpr{
																														pos: position{line: 305, col: 10, offset: 9447},
																														expr: &seqExpr{
																															pos: position{line: 305, col: 12, offset: 9449},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 305, col: 12, offset: 9449},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonLongHandAttributes547,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 305, col: 19, offset: 9456},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 285, col: 29, offset: 8751},
																				run: (*parser).callonLongHandAttributes550,
																				expr: &seqExpr{
																					pos: position{line: 285, col: 29, offset: 8751},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 285, col: 29, offset: 8751},
																							val:        "%",
																							ignoreCase: false,
																							want:       "\"%\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 285, col: 33, offset: 8755},
																							label: "option",
																							expr: &choiceExpr{
																								pos: position{line: 291, col: 5, offset: 8908},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 346, col: 5, offset: 10869},
																										run: (*parser).callonLongHandAttributes555,
																										expr: &seqExpr{
																											pos: position{line: 346, col: 5, offset: 10869},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 346, col: 5, offset: 10869},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&notExpr{
																													pos: position{line: 346, col: 9, offset: 10873},
																													expr: &litMatcher{
																														pos:        position{line: 346, col: 10, offset: 10874},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 347, col: 5, offset: 10953},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 353, col: 5, offset: 11090},
																														run: (*parser).callonLongHandAttributes561,
																														expr: &labeledExpr{
																															pos:   position{line: 353, col: 5, offset: 11090},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 353, col: 14, offset: 11099},
																																expr: &choiceExpr{
																																	pos: position{line: 354, col: 9, offset: 11109},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2790, col: 14, offset: 92611},
																																			run: (*parser).callonLongHandAttributes565,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2790, col: 14, offset: 92611},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2790, col: 14, offset: 92611},
																																					val:        "[0-9\\pL]",
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2860, col: 10, offset: 94799},
																																			run: (*parser).callonLongHandAttributes568,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2860, col: 11, offset: 94800},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 416, col: 5, offset: 13530},
																																			run: (*parser).callonLongHandAttributes570,
																																			expr: &seqExpr{
																																				pos: position{line: 416, col: 5, offset: 13530},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 416, col: 5, offset: 13530},
																																						run: (*parser).callonLongHandAttributes572,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 419, col: 5, offset: 13594},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 419, col: 14, offset: 13603},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 430, col: 25, offset: 14065},
																																									run: (*parser).callonLongHandAttributes575,
																																									expr: &seqExpr{
																																										pos: position{line: 430, col: 25, offset: 14065},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 430, col: 25, offset: 14065},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 430, col: 37, offset: 14077},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 120, col: 18, offset: 3502},
																																													run: (*parser).callonLongHandAttributes579,
																																													expr: &seqExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 120, col: 18, offset: 3502},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 120, col: 28, offset: 3512},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 120, col: 29, offset: 3513},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 430, col: 56, offset: 14096},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 430, col: 62, offset: 14102},
																																													expr: &actionExpr{
																																														pos: position{line: 438, col: 17, offset: 14365},
																																														run: (*parser).callonLongHandAttributes586,
																																														expr: &seqExpr{
																																															pos: position{line: 438, col: 17, offset: 14365},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 438, col: 17, offset: 14365},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 438, col: 21, offset: 14369},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 438, col: 28, offset: 14376},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 438, col: 28, offset: 14376},
																																																				run: (*parser).callonLongHandAttributes591,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 438, col: 28, offset: 14376},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 440, col: 9, offset: 14430},
																																																				run: (*parser).callonLongHandAttributes593,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 440, col: 9, offset: 14430},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 440, col: 9, offset: 14430},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 430, col: 78, offset: 14118},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 434, col: 25, offset: 14220},
																																									run: (*parser).callonLongHandAttributes597,
																																									expr: &seqExpr{
																																										pos: position{line: 434, col: 25, offset: 14220},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 434, col: 25, offset: 14220},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 434, col: 38, offset: 14233},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 120, col: 18, offset: 3502},
																																													run: (*parser).callonLongHandAttributes601,
																																													expr: &seqExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 120, col: 18, offset: 3502},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 120, col: 28, offset: 3512},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 120, col: 29, offset: 3513},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 434, col: 57, offset: 14252},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 434, col: 63, offset: 14258},
																																													expr: &actionExpr{
																																														pos: position{line: 438, col: 17, offset: 14365},
																																														run: (*parser).callonLongHandAttributes608,
																																														expr: &seqExpr{
																																															pos: position{line: 438, col: 17, offset: 14365},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 438, col: 17, offset: 14365},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 438, col: 21, offset: 14369},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 438, col: 28, offset: 14376},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 438, col: 28, offset: 14376},
																																																				run: (*parser).callonLongHandAttributes613,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 438, col: 28, offset: 14376},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 440, col: 9, offset: 14430},
																																																				run: (*parser).callonLongHandAttributes615,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 440, col: 9, offset: 14430},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 440, col: 9, offset: 14430},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 434, col: 79, offset: 14274},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 423, col: 31, offset: 13720},
																																									run: (*parser).callonLongHandAttributes619,
																																									expr: &seqExpr{
																																										pos: position{line: 423, col: 31, offset: 13720},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 423, col: 31, offset: 13720},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 423, col: 35, offset: 13724},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 120, col: 18, offset: 3502},
																																													run: (*parser).callonLongHandAttributes623,
																																													expr: &seqExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 120, col: 18, offset: 3502},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 120, col: 28, offset: 3512},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 120, col: 29, offset: 3513},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 423, col: 54, offset: 13743},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 357, col: 12, offset: 11178},
																																			run: (*parser).callonLongHandAttributes629,
																																			expr: &litMatcher{
																																				pos:        position{line: 357, col: 12, offset: 11178},
																																				val:        "\\'",
																																				ignoreCase: false,
																																				want:       "\"\\\\'\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 360, col: 13, offset: 11280},
																																			val:        "'`",
																																			ignoreCase: false,
																																			want:       "\"'`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 360, col: 20, offset: 11287},
																																			val:        "`'",
																																			ignoreCase: false,
																																			want:       "\"`'\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 360, col: 27, offset: 11294},
																																			run: (*parser).callonLongHandAttributes633,
																																			expr: &litMatcher{
																																				pos:        position{line: 360, col: 27, offset: 11294},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 363, col: 12, offset: 11454},
																																			run: (*parser).callonLongHandAttributes635,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 363, col: 12, offset: 11454},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 363, col: 12, offset: 11454},
																																					val:        "[^\\r\\n\\\\\\ ]",
																																					chars:      []rune{'\r', '\n', '\\', '\'', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 348, col: 5, offset: 11004},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 371, col: 5, offset: 11689},
																										run: (*parser).callonLongHandAttributes639,
																										expr: &seqExpr{
																											pos: position{line: 371, col: 5, offset: 11689},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 371, col: 5, offset: 11689},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&notExpr{
																													pos: position{line: 371, col: 10, offset: 11694},
																													expr: &litMatcher{
																														pos:        position{line: 371, col: 11, offset: 11695},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 372, col: 5, offset: 11774},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 377, col: 5, offset: 11928},
																														run: (*parser).callonLongHandAttributes645,
																														expr: &labeledExpr{
																															pos:   position{line: 377, col: 5, offset: 11928},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 377, col: 14, offset: 11937},
																																expr: &choiceExpr{
																																	pos: position{line: 378, col: 9, offset: 11947},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2790, col: 14, offset: 92611},
																																			run: (*parser).callonLongHandAttributes649,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2790, col: 14, offset: 92611},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2790, col: 14, offset: 92611},
																																					val:        "[0-9\\pL]",
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2860, col: 10, offset: 94799},
																																			run: (*parser).callonLongHandAttributes652,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2860, col: 11, offset: 94800},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 416, col: 5, offset: 13530},
																																			run: (*parser).callonLongHandAttributes654,
																																			expr: &seqExpr{
																																				pos: position{line: 416, col: 5, offset: 13530},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 416, col: 5, offset: 13530},
																																						run: (*parser).callonLongHandAttributes656,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 419, col: 5, offset: 13594},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 419, col: 14, offset: 13603},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 430, col: 25, offset: 14065},
																																									run: (*parser).callonLongHandAttributes659,
																																									expr: &seqExpr{
																																										pos: position{line: 430, col: 25, offset: 14065},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 430, col: 25, offset: 14065},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 430, col: 37, offset: 14077},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 120, col: 18, offset: 3502},
																																													run: (*parser).callonLongHandAttributes663,
																																													expr: &seqExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 120, col: 18, offset: 3502},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 120, col: 28, offset: 3512},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 120, col: 29, offset: 3513},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 430, col: 56, offset: 14096},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 430, col: 62, offset: 14102},
																																													expr: &actionExpr{
																																														pos: position{line: 438, col: 17, offset: 14365},
																																														run: (*parser).callonLongHandAttributes670,
																																														expr: &seqExpr{
																																															pos: position{line: 438, col: 17, offset: 14365},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 438, col: 17, offset: 14365},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 438, col: 21, offset: 14369},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 438, col: 28, offset: 14376},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 438, col: 28, offset: 14376},
																																																				run: (*parser).callonLongHandAttributes675,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 438, col: 28, offset: 14376},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 440, col: 9, offset: 14430},
																																																				run: (*parser).callonLongHandAttributes677,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 440, col: 9, offset: 14430},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 440, col: 9, offset: 14430},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 430, col: 78, offset: 14118},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 434, col: 25, offset: 14220},
																																									run: (*parser).callonLongHandAttributes681,
																																									expr: &seqExpr{
																																										pos: position{line: 434, col: 25, offset: 14220},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 434, col: 25, offset: 14220},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 434, col: 38, offset: 14233},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 120, col: 18, offset: 3502},
																																													run: (*parser).callonLongHandAttributes685,
																																													expr: &seqExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 120, col: 18, offset: 3502},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 120, col: 28, offset: 3512},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 120, col: 29, offset: 3513},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 434, col: 57, offset: 14252},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 434, col: 63, offset: 14258},
																																													expr: &actionExpr{
																																														pos: position{line: 438, col: 17, offset: 14365},
																																														run: (*parser).callonLongHandAttributes692,
																																														expr: &seqExpr{
																																															pos: position{line: 438, col: 17, offset: 14365},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 438, col: 17, offset: 14365},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 438, col: 21, offset: 14369},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 438, col: 28, offset: 14376},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 438, col: 28, offset: 14376},
																																																				run: (*parser).callonLongHandAttributes697,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 438, col: 28, offset: 14376},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 440, col: 9, offset: 14430},
																																																				run: (*parser).callonLongHandAttributes699,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 440, col: 9, offset: 14430},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 440, col: 9, offset: 14430},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 434, col: 79, offset: 14274},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 423, col: 31, offset: 13720},
																																									run: (*parser).callonLongHandAttributes703,
																																									expr: &seqExpr{
																																										pos: position{line: 423, col: 31, offset: 13720},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 423, col: 31, offset: 13720},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 423, col: 35, offset: 13724},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 120, col: 18, offset: 3502},
																																													run: (*parser).callonLongHandAttributes707,
																																													expr: &seqExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 120, col: 18, offset: 3502},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 120, col: 28, offset: 3512},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 120, col: 29, offset: 3513},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 423, col: 54, offset: 13743},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 381, col: 12, offset: 12016},
																																			run: (*parser).callonLongHandAttributes713,
																																			expr: &litMatcher{
																																				pos:        position{line: 381, col: 12, offset: 12016},
																																				val:        "\\\"",
																																				ignoreCase: false,
																																				want:       "\"\\\\\\\"\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 384, col: 13, offset: 12118},
																																			val:        "\"`",
																																			ignoreCase: false,
																																			want:       "\"\\\"`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 384, col: 21, offset: 12126},
																																			val:        "`\"",
																																			ignoreCase: false,
																																			want:       "\"`\\\"\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 384, col: 29, offset: 12134},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 384, col: 35, offset: 12140},
																																			run: (*parser).callonLongHandAttributes718,
																																			expr: &litMatcher{
																																				pos:        position{line: 384, col: 35, offset: 12140},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 387, col: 12, offset: 12323},
																																			run: (*parser).callonLongHandAttributes720,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 387, col: 12, offset: 12323},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 387, col: 12, offset: 12323},
																																					val:        "[^\\r\\n\\\\\"` ]",
																																					chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 373, col: 5, offset: 11825},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&andExpr{
																													pos: position{line: 373, col: 10, offset: 11830},
																													expr: &notExpr{
																														pos: position{line: 373, col: 12, offset: 11832},
																														expr: &seqExpr{
																															pos: position{line: 373, col: 14, offset: 11834},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 373, col: 14, offset: 11834},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonLongHandAttributes728,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 373, col: 21, offset: 11841},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 293, col: 7, offset: 8982},
																										run: (*parser).callonLongHandAttributes731,
																										expr: &seqExpr{
																											pos: position{line: 293, col: 7, offset: 8982},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 293, col: 7, offset: 8982},
																													label: "elements",
																													expr: &oneOrMoreExpr{
																														pos: position{line: 293, col: 16, offset: 8991},
																														expr: &choiceExpr{
																															pos: position{line: 296, col: 9, offset: 9173},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 296, col: 10, offset: 9174},
																																	run: (*parser).callonLongHandAttributes736,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 296, col: 10, offset: 9174},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 296, col: 10, offset: 9174},
																																			val:        "[^,=.%# \\r\\n�{]]",
																																			chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 914, col: 23, offset: 28983},
																																	run: (*parser).callonLongHandAttributes739,
																																	expr: &seqExpr{
																																		pos: position{line: 914, col: 23, offset: 28983},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 912, col: 32, offset: 28951},
																																				val:        "�",
																																				ignoreCase: false,
																																				want:       "\"�\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 914, col: 51, offset: 29011},
																																				label: "ref",
																																				expr: &actionExpr{
																																					pos: position{line: 914, col: 56, offset: 29016},
																																					run: (*parser).callonLongHandAttributes743,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 914, col: 56, offset: 29016},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 914, col: 56, offset: 29016},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 912, col: 32, offset: 28951},
																																				val:        "�",
																																				ignoreCase: false,
																																				want:       "\"�\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 416, col: 5, offset: 13530},
																																	run: (*parser).callonLongHandAttributes747,
																																	expr: &seqExpr{
																																		pos: position{line: 416, col: 5, offset: 13530},
																																		exprs: []interface{}{
																																			&andCodeExpr{
																																				pos: position{line: 416, col: 5, offset: 13530},
																																				run: (*parser).callonLongHandAttributes749,
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 419, col: 5, offset: 13594},
																																				label: "element",
																																				expr: &choiceExpr{
																																					pos: position{line: 419, col: 14, offset: 13603},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 430, col: 25, offset: 14065},
																																							run: (*parser).callonLongHandAttributes752,
																																							expr: &seqExpr{
																																								pos: position{line: 430, col: 25, offset: 14065},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 430, col: 25, offset: 14065},
																																										val:        "{counter:",
																																										ignoreCase: false,
																																										want:       "\"{counter:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 430, col: 37, offset: 14077},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 120, col: 18, offset: 3502},
																																											run: (*parser).callonLongHandAttributes756,
																																											expr: &seqExpr{
																																												pos: position{line: 120, col: 18, offset: 3502},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 120, col: 18, offset: 3502},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 120, col: 28, offset: 3512},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 120, col: 29, offset: 3513},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 430, col: 56, offset: 14096},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 430, col: 62, offset: 14102},
																																											expr: &actionExpr{
																																												pos: position{line: 438, col: 17, offset: 14365},
																																												run: (*parser).callonLongHandAttributes763,
																																												expr: &seqExpr{
																																													pos: position{line: 438, col: 17, offset: 14365},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 438, col: 17, offset: 14365},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 438, col: 21, offset: 14369},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 438, col: 28, offset: 14376},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 438, col: 28, offset: 14376},
																																																		run: (*parser).callonLongHandAttributes768,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 438, col: 28, offset: 14376},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 440, col: 9, offset: 14430},
																																																		run: (*parser).callonLongHandAttributes770,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 440, col: 9, offset: 14430},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 440, col: 9, offset: 14430},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 430, col: 78, offset: 14118},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 434, col: 25, offset: 14220},
																																							run: (*parser).callonLongHandAttributes774,
																																							expr: &seqExpr{
																																								pos: position{line: 434, col: 25, offset: 14220},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 434, col: 25, offset: 14220},
																																										val:        "{counter2:",
																																										ignoreCase: false,
																																										want:       "\"{counter2:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 434, col: 38, offset: 14233},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 120, col: 18, offset: 3502},
																																											run: (*parser).callonLongHandAttributes778,
																																											expr: &seqExpr{
																																												pos: position{line: 120, col: 18, offset: 3502},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 120, col: 18, offset: 3502},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 120, col: 28, offset: 3512},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 120, col: 29, offset: 3513},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 434, col: 57, offset: 14252},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 434, col: 63, offset: 14258},
																																											expr: &actionExpr{
																																												pos: position{line: 438, col: 17, offset: 14365},
																																												run: (*parser).callonLongHandAttributes785,
																																												expr: &seqExpr{
																																													pos: position{line: 438, col: 17, offset: 14365},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 438, col: 17, offset: 14365},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 438, col: 21, offset: 14369},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 438, col: 28, offset: 14376},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 438, col: 28, offset: 14376},
																																																		run: (*parser).callonLongHandAttributes790,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 438, col: 28, offset: 14376},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 440, col: 9, offset: 14430},
																																																		run: (*parser).callonLongHandAttributes792,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 440, col: 9, offset: 14430},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 440, col: 9, offset: 14430},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 434, col: 79, offset: 14274},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 423, col: 31, offset: 13720},
																																							run: (*parser).callonLongHandAttributes796,
																																							expr: &seqExpr{
																																								pos: position{line: 423, col: 31, offset: 13720},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 423, col: 31, offset: 13720},
																																										val:        "{",
																																										ignoreCase: false,
																																										want:       "\"{\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 423, col: 35, offset: 13724},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 120, col: 18, offset: 3502},
																																											run: (*parser).callonLongHandAttributes800,
																																											expr: &seqExpr{
																																												pos: position{line: 120, col: 18, offset: 3502},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 120, col: 18, offset: 3502},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 120, col: 28, offset: 3512},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 120, col: 29, offset: 3513},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 423, col: 54, offset: 13743},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 302, col: 12, offset: 9362},
																																	run: (*parser).callonLongHandAttributes806,
																																	expr: &litMatcher{
																																		pos:        position{line: 302, col: 12, offset: 9362},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 305, col: 8, offset: 9445},
																													expr: &notExpr{
																														pos: position{line: 305, col: 10, offset: 9447},
																														expr: &seqExpr{
																															pos: position{line: 305, col: 12, offset: 9449},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 305, col: 12, offset: 9449},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonLongHandAttributes812,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 305, col: 19, offset: 9456},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 280, col: 30, offset: 8591},
																				run: (*parser).callonLongHandAttributes815,
																				expr: &seqExpr{
																					pos: position{line: 280, col: 30, offset: 8591},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 280, col: 30, offset: 8591},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 280, col: 34, offset: 8595},
																							label: "role",
																							expr: &choiceExpr{
																								pos: position{line: 291, col: 5, offset: 8908},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 346, col: 5, offset: 10869},
																										run: (*parser).callonLongHandAttributes820,
																										expr: &seqExpr{
																											pos: position{line: 346, col: 5, offset: 10869},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 346, col: 5, offset: 10869},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&notExpr{
																													pos: position{line: 346, col: 9, offset: 10873},
																													expr: &litMatcher{
																														pos:        position{line: 346, col: 10, offset: 10874},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 347, col: 5, offset: 10953},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 353, col: 5, offset: 11090},
																														run: (*parser).callonLongHandAttributes826,
																														expr: &labeledExpr{
																															pos:   position{line: 353, col: 5, offset: 11090},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 353, col: 14, offset: 11099},
																																expr: &choiceExpr{
																																	pos: position{line: 354, col: 9, offset: 11109},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2790, col: 14, offset: 92611},
																																			run: (*parser).callonLongHandAttributes830,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2790, col: 14, offset: 92611},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2790, col: 14, offset: 92611},
																																					val:        "[0-9\\pL]",
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2860, col: 10, offset: 94799},
																																			run: (*parser).callonLongHandAttributes833,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2860, col: 11, offset: 94800},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 416, col: 5, offset: 13530},
																																			run: (*parser).callonLongHandAttributes835,
																																			expr: &seqExpr{
																																				pos: position{line: 416, col: 5, offset: 13530},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 416, col: 5, offset: 13530},
																																						run: (*parser).callonLongHandAttributes837,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 419, col: 5, offset: 13594},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 419, col: 14, offset: 13603},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 430, col: 25, offset: 14065},
																																									run: (*parser).callonLongHandAttributes840,
																																									expr: &seqExpr{
																																										pos: position{line: 430, col: 25, offset: 14065},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 430, col: 25, offset: 14065},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 430, col: 37, offset: 14077},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 120, col: 18, offset: 3502},
																																													run: (*parser).callonLongHandAttributes844,
																																													expr: &seqExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 120, col: 18, offset: 3502},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 120, col: 28, offset: 3512},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 120, col: 29, offset: 3513},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 430, col: 56, offset: 14096},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 430, col: 62, offset: 14102},
																																													expr: &actionExpr{
																																														pos: position{line: 438, col: 17, offset: 14365},
																																														run: (*parser).callonLongHandAttributes851,
																																														expr: &seqExpr{
																																															pos: position{line: 438, col: 17, offset: 14365},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 438, col: 17, offset: 14365},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 438, col: 21, offset: 14369},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 438, col: 28, offset: 14376},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 438, col: 28, offset: 14376},
																																																				run: (*parser).callonLongHandAttributes856,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 438, col: 28, offset: 14376},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 440, col: 9, offset: 14430},
																																																				run: (*parser).callonLongHandAttributes858,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 440, col: 9, offset: 14430},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 440, col: 9, offset: 14430},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 430, col: 78, offset: 14118},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 434, col: 25, offset: 14220},
																																									run: (*parser).callonLongHandAttributes862,
																																									expr: &seqExpr{
																																										pos: position{line: 434, col: 25, offset: 14220},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 434, col: 25, offset: 14220},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 434, col: 38, offset: 14233},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 120, col: 18, offset: 3502},
																																													run: (*parser).callonLongHandAttributes866,
																																													expr: &seqExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 120, col: 18, offset: 3502},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 120, col: 28, offset: 3512},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 120, col: 29, offset: 3513},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 434, col: 57, offset: 14252},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 434, col: 63, offset: 14258},
																																													expr: &actionExpr{
																																														pos: position{line: 438, col: 17, offset: 14365},
																																														run: (*parser).callonLongHandAttributes873,
																																														expr: &seqExpr{
																																															pos: position{line: 438, col: 17, offset: 14365},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 438, col: 17, offset: 14365},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 438, col: 21, offset: 14369},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 438, col: 28, offset: 14376},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 438, col: 28, offset: 14376},
																																																				run: (*parser).callonLongHandAttributes878,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 438, col: 28, offset: 14376},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 440, col: 9, offset: 14430},
																																																				run: (*parser).callonLongHandAttributes880,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 440, col: 9, offset: 14430},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 440, col: 9, offset: 14430},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 434, col: 79, offset: 14274},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 423, col: 31, offset: 13720},
																																									run: (*parser).callonLongHandAttributes884,
																																									expr: &seqExpr{
																																										pos: position{line: 423, col: 31, offset: 13720},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 423, col: 31, offset: 13720},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 423, col: 35, offset: 13724},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 120, col: 18, offset: 3502},
																																													run: (*parser).callonLongHandAttributes888,
																																													expr: &seqExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 120, col: 18, offset: 3502},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 120, col: 28, offset: 3512},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 120, col: 29, offset: 3513},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 423, col: 54, offset: 13743},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 357, col: 12, offset: 11178},
																																			run: (*parser).callonLongHandAttributes894,
																																			expr: &litMatcher{
																																				pos:        position{line: 357, col: 12, offset: 11178},
																																				val:        "\\'",
																																				ignoreCase: false,
																																				want:       "\"\\\\'\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 360, col: 13, offset: 11280},
																																			val:        "'`",
																																			ignoreCase: false,
																																			want:       "\"'`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 360, col: 20, offset: 11287},
																																			val:        "`'",
																																			ignoreCase: false,
																																			want:       "\"`'\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 360, col: 27, offset: 11294},
																																			run: (*parser).callonLongHandAttributes898,
																																			expr: &litMatcher{
																																				pos:        position{line: 360, col: 27, offset: 11294},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 363, col: 12, offset: 11454},
																																			run: (*parser).callonLongHandAttributes900,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 363, col: 12, offset: 11454},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 363, col: 12, offset: 11454},
																																					val:        "[^\\r\\n\\\\\\ ]",
																																					chars:      []rune{'\r', '\n', '\\', '\'', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 348, col: 5, offset: 11004},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 371, col: 5, offset: 11689},
																										run: (*parser).callonLongHandAttributes904,
																										expr: &seqExpr{
																											pos: position{line: 371, col: 5, offset: 11689},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 371, col: 5, offset: 11689},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&notExpr{
																													pos: position{line: 371, col: 10, offset: 11694},
																													expr: &litMatcher{
																														pos:        position{line: 371, col: 11, offset: 11695},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 372, col: 5, offset: 11774},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 377, col: 5, offset: 11928},
																														run: (*parser).callonLongHandAttributes910,
																														expr: &labeledExpr{
																															pos:   position{line: 377, col: 5, offset: 11928},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 377, col: 14, offset: 11937},
																																expr: &choiceExpr{
																																	pos: position{line: 378, col: 9, offset: 11947},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2790, col: 14, offset: 92611},
																																			run: (*parser).callonLongHandAttributes914,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2790, col: 14, offset: 92611},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2790, col: 14, offset: 92611},
																																					val:        "[0-9\\pL]",
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2860, col: 10, offset: 94799},
																																			run: (*parser).callonLongHandAttributes917,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2860, col: 11, offset: 94800},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 416, col: 5, offset: 13530},
																																			run: (*parser).callonLongHandAttributes919,
																																			expr: &seqExpr{
																																				pos: position{line: 416, col: 5, offset: 13530},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 416, col: 5, offset: 13530},
																																						run: (*parser).callonLongHandAttributes921,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 419, col: 5, offset: 13594},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 419, col: 14, offset: 13603},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 430, col: 25, offset: 14065},
																																									run: (*parser).callonLongHandAttributes924,
																																									expr: &seqExpr{
																																										pos: position{line: 430, col: 25, offset: 14065},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 430, col: 25, offset: 14065},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 430, col: 37, offset: 14077},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 120, col: 18, offset: 3502},
																																													run: (*parser).callonLongHandAttributes928,
																																													expr: &seqExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 120, col: 18, offset: 3502},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 120, col: 28, offset: 3512},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 120, col: 29, offset: 3513},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 430, col: 56, offset: 14096},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 430, col: 62, offset: 14102},
																																													expr: &actionExpr{
																																														pos: position{line: 438, col: 17, offset: 14365},
																																														run: (*parser).callonLongHandAttributes935,
																																														expr: &seqExpr{
																																															pos: position{line: 438, col: 17, offset: 14365},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 438, col: 17, offset: 14365},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 438, col: 21, offset: 14369},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 438, col: 28, offset: 14376},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 438, col: 28, offset: 14376},
																																																				run: (*parser).callonLongHandAttributes940,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 438, col: 28, offset: 14376},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 440, col: 9, offset: 14430},
																																																				run: (*parser).callonLongHandAttributes942,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 440, col: 9, offset: 14430},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 440, col: 9, offset: 14430},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 430, col: 78, offset: 14118},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 434, col: 25, offset: 14220},
																																									run: (*parser).callonLongHandAttributes946,
																																									expr: &seqExpr{
																																										pos: position{line: 434, col: 25, offset: 14220},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 434, col: 25, offset: 14220},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 434, col: 38, offset: 14233},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 120, col: 18, offset: 3502},
																																													run: (*parser).callonLongHandAttributes950,
																																													expr: &seqExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 120, col: 18, offset: 3502},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 120, col: 28, offset: 3512},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 120, col: 29, offset: 3513},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 434, col: 57, offset: 14252},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 434, col: 63, offset: 14258},
																																													expr: &actionExpr{
																																														pos: position{line: 438, col: 17, offset: 14365},
																																														run: (*parser).callonLongHandAttributes957,
																																														expr: &seqExpr{
																																															pos: position{line: 438, col: 17, offset: 14365},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 438, col: 17, offset: 14365},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 438, col: 21, offset: 14369},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 438, col: 28, offset: 14376},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 438, col: 28, offset: 14376},
																																																				run: (*parser).callonLongHandAttributes962,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 438, col: 28, offset: 14376},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 440, col: 9, offset: 14430},
																																																				run: (*parser).callonLongHandAttributes964,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 440, col: 9, offset: 14430},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 440, col: 9, offset: 14430},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 434, col: 79, offset: 14274},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 423, col: 31, offset: 13720},
																																									run: (*parser).callonLongHandAttributes968,
																																									expr: &seqExpr{
																																										pos: position{line: 423, col: 31, offset: 13720},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 423, col: 31, offset: 13720},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 423, col: 35, offset: 13724},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 120, col: 18, offset: 3502},
																																													run: (*parser).callonLongHandAttributes972,
																																													expr: &seqExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 120, col: 18, offset: 3502},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 120, col: 28, offset: 3512},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 120, col: 29, offset: 3513},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 423, col: 54, offset: 13743},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 381, col: 12, offset: 12016},
																																			run: (*parser).callonLongHandAttributes978,
																																			expr: &litMatcher{
																																				pos:        position{line: 381, col: 12, offset: 12016},
																																				val:        "\\\"",
																																				ignoreCase: false,
																																				want:       "\"\\\\\\\"\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 384, col: 13, offset: 12118},
																																			val:        "\"`",
																																			ignoreCase: false,
																																			want:       "\"\\\"`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 384, col: 21, offset: 12126},
																																			val:        "`\"",
																																			ignoreCase: false,
																																			want:       "\"`\\\"\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 384, col: 29, offset: 12134},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 384, col: 35, offset: 12140},
																																			run: (*parser).callonLongHandAttributes983,
																																			expr: &litMatcher{
																																				pos:        position{line: 384, col: 35, offset: 12140},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 387, col: 12, offset: 12323},
																																			run: (*parser).callonLongHandAttributes985,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 387, col: 12, offset: 12323},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 387, col: 12, offset: 12323},
																																					val:        "[^\\r\\n\\\\\"` ]",
																																					chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 373, col: 5, offset: 11825},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&andExpr{
																													pos: position{line: 373, col: 10, offset: 11830},
																													expr: &notExpr{
																														pos: position{line: 373, col: 12, offset: 11832},
																														expr: &seqExpr{
																															pos: position{line: 373, col: 14, offset: 11834},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 373, col: 14, offset: 11834},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonLongHandAttributes993,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 373, col: 21, offset: 11841},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 293, col: 7, offset: 8982},
																										run: (*parser).callonLongHandAttributes996,
																										expr: &seqExpr{
																											pos: position{line: 293, col: 7, offset: 8982},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 293, col: 7, offset: 8982},
																													label: "elements",
																													expr: &oneOrMoreExpr{
																														pos: position{line: 293, col: 16, offset: 8991},
																														expr: &choiceExpr{
																															pos: position{line: 296, col: 9, offset: 9173},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 296, col: 10, offset: 9174},
																																	run: (*parser).callonLongHandAttributes1001,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 296, col: 10, offset: 9174},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 296, col: 10, offset: 9174},
																																			val:        "[^,=.%# \\r\\n�{]]",
																																			chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 914, col: 23, offset: 28983},
																																	run: (*parser).callonLongHandAttributes1004,
																																	expr: &seqExpr{
																																		pos: position{line: 914, col: 23, offset: 28983},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 912, col: 32, offset: 28951},
																																				val:        "�",
																																				ignoreCase: false,
																																				want:       "\"�\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 914, col: 51, offset: 29011},
																																				label: "ref",
																																				expr: &actionExpr{
																																					pos: position{line: 914, col: 56, offset: 29016},
																																					run: (*parser).callonLongHandAttributes1008,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 914, col: 56, offset: 29016},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 914, col: 56, offset: 29016},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 912, col: 32, offset: 28951},
																																				val:        "�",
																																				ignoreCase: false,
																																				want:       "\"�\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 416, col: 5, offset: 13530},
																																	run: (*parser).callonLongHandAttributes1012,
																																	expr: &seqExpr{
																																		pos: position{line: 416, col: 5, offset: 13530},
																																		exprs: []interface{}{
																																			&andCodeExpr{
																																				pos: position{line: 416, col: 5, offset: 13530},
																																				run: (*parser).callonLongHandAttributes1014,
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 419, col: 5, offset: 13594},
																																				label: "element",
																																				expr: &choiceExpr{
																																					pos: position{line: 419, col: 14, offset: 13603},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 430, col: 25, offset: 14065},
																																							run: (*parser).callonLongHandAttributes1017,
																																							expr: &seqExpr{
																																								pos: position{line: 430, col: 25, offset: 14065},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 430, col: 25, offset: 14065},
																																										val:        "{counter:",
																																										ignoreCase: false,
																																										want:       "\"{counter:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 430, col: 37, offset: 14077},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 120, col: 18, offset: 3502},
																																											run: (*parser).callonLongHandAttributes1021,
																																											expr: &seqExpr{
																																												pos: position{line: 120, col: 18, offset: 3502},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 120, col: 18, offset: 3502},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 120, col: 28, offset: 3512},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 120, col: 29, offset: 3513},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 430, col: 56, offset: 14096},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 430, col: 62, offset: 14102},
																																											expr: &actionExpr{
																																												pos: position{line: 438, col: 17, offset: 14365},
																																												run: (*parser).callonLongHandAttributes1028,
																																												expr: &seqExpr{
																																													pos: position{line: 438, col: 17, offset: 14365},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 438, col: 17, offset: 14365},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 438, col: 21, offset: 14369},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 438, col: 28, offset: 14376},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 438, col: 28, offset: 14376},
																																																		run: (*parser).callonLongHandAttributes1033,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 438, col: 28, offset: 14376},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 440, col: 9, offset: 14430},
																																																		run: (*parser).callonLongHandAttributes1035,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 440, col: 9, offset: 14430},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 440, col: 9, offset: 14430},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 430, col: 78, offset: 14118},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 434, col: 25, offset: 14220},
																																							run: (*parser).callonLongHandAttributes1039,
																																							expr: &seqExpr{
																																								pos: position{line: 434, col: 25, offset: 14220},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 434, col: 25, offset: 14220},
																																										val:        "{counter2:",
																																										ignoreCase: false,
																																										want:       "\"{counter2:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 434, col: 38, offset: 14233},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 120, col: 18, offset: 3502},
																																											run: (*parser).callonLongHandAttributes1043,
																																											expr: &seqExpr{
																																												pos: position{line: 120, col: 18, offset: 3502},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 120, col: 18, offset: 3502},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 120, col: 28, offset: 3512},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 120, col: 29, offset: 3513},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 434, col: 57, offset: 14252},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 434, col: 63, offset: 14258},
																																											expr: &actionExpr{
																																												pos: position{line: 438, col: 17, offset: 14365},
																																												run: (*parser).callonLongHandAttributes1050,
																																												expr: &seqExpr{
																																													pos: position{line: 438, col: 17, offset: 14365},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 438, col: 17, offset: 14365},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 438, col: 21, offset: 14369},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 438, col: 28, offset: 14376},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 438, col: 28, offset: 14376},
																																																		run: (*parser).callonLongHandAttributes1055,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 438, col: 28, offset: 14376},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 440, col: 9, offset: 14430},
																																																		run: (*parser).callonLongHandAttributes1057,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 440, col: 9, offset: 14430},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 440, col: 9, offset: 14430},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 434, col: 79, offset: 14274},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 423, col: 31, offset: 13720},
																																							run: (*parser).callonLongHandAttributes1061,
																																							expr: &seqExpr{
																																								pos: position{line: 423, col: 31, offset: 13720},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 423, col: 31, offset: 13720},
																																										val:        "{",
																																										ignoreCase: false,
																																										want:       "\"{\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 423, col: 35, offset: 13724},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 120, col: 18, offset: 3502},
																																											run: (*parser).callonLongHandAttributes1065,
																																											expr: &seqExpr{
																																												pos: position{line: 120, col: 18, offset: 3502},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 120, col: 18, offset: 3502},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 120, col: 28, offset: 3512},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 120, col: 29, offset: 3513},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 423, col: 54, offset: 13743},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 302, col: 12, offset: 9362},
																																	run: (*parser).callonLongHandAttributes1071,
																																	expr: &litMatcher{
																																		pos:        position{line: 302, col: 12, offset: 9362},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 305, col: 8, offset: 9445},
																													expr: &notExpr{
																														pos: position{line: 305, col: 10, offset: 9447},
																														expr: &seqExpr{
																															pos: position{line: 305, col: 12, offset: 9449},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 305, col: 12, offset: 9449},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonLongHandAttributes1077,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 305, col: 19, offset: 9456},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 254, col: 8, offset: 7866},
												expr: &seqExpr{
													pos: position{line: 254, col: 9, offset: 7867},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 254, col: 9, offset: 7867},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 254, col: 13, offset: 7871},
															expr: &actionExpr{
																pos: position{line: 2860, col: 10, offset: 94799},
																run: (*parser).callonLongHandAttributes1084,
																expr: &charClassMatcher{
																	pos:        position{line: 2860, col: 11, offset: 94800},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&andCodeExpr{
												pos: position{line: 255, col: 5, offset: 7885},
												run: (*parser).callonLongHandAttributes1086,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 228, col: 5, offset: 6992},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 228, col: 21, offset: 7008},
								expr: &choiceExpr{
									pos: position{line: 228, col: 22, offset: 7009},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 228, col: 22, offset: 7009},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 228, col: 44, offset: 7031},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 229, col: 5, offset: 7052},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 309, col: 1, offset: 9533},
			expr: &choiceExpr{
				pos: position{line: 309, col: 24, offset: 9556},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 310, col: 5, offset: 9562},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 310, col: 5, offset: 9562},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 310, col: 5, offset: 9562},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 310, col: 12, offset: 9569},
										name: "AttributeRawValue",
									},
								},
								&choiceExpr{
									pos: position{line: 310, col: 32, offset: 9589},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 310, col: 32, offset: 9589},
											expr: &seqExpr{
												pos: position{line: 310, col: 33, offset: 9590},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 310, col: 33, offset: 9590},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 310, col: 37, offset: 9594},
														expr: &actionExpr{
															pos: position{line: 2860, col: 10, offset: 94799},
															run: (*parser).callonPositionalAttribute11,
															expr: &charClassMatcher{
																pos:        position{line: 2860, col: 11, offset: 94800},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 310, col: 48, offset: 9605},
											expr: &litMatcher{
												pos:        position{line: 310, col: 49, offset: 9606},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 315, col: 6, offset: 9843},
						run: (*parser).callonPositionalAttribute15,
						expr: &seqExpr{
							pos: position{line: 315, col: 6, offset: 9843},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 315, col: 6, offset: 9843},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 315, col: 13, offset: 9850},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 315, col: 13, offset: 9850},
												expr: &actionExpr{
													pos: position{line: 2860, col: 10, offset: 94799},
													run: (*parser).callonPositionalAttribute20,
													expr: &charClassMatcher{
														pos:        position{line: 2860, col: 11, offset: 94800},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 315, col: 21, offset: 9858},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 315, col: 22, offset: 9859},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 315, col: 22, offset: 9859},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 315, col: 26, offset: 9863},
																expr: &actionExpr{
																	pos: position{line: 2860, col: 10, offset: 94799},
																	run: (*parser).callonPositionalAttribute26,
																	expr: &charClassMatcher{
																		pos:        position{line: 2860, col: 11, offset: 94800},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 315, col: 36, offset: 9873},
														expr: &litMatcher{
															pos:        position{line: 315, col: 37, offset: 9874},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 316, col: 5, offset: 9884},
									run: (*parser).callonPositionalAttribute30,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 326, col: 1, offset: 10199},
			expr: &actionExpr{
				pos: position{line: 326, col: 19, offset: 10217},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 326, col: 19, offset: 10217},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 326, col: 19, offset: 10217},
							label: "key",
							expr: &actionExpr{
								pos: position{line: 331, col: 22, offset: 10528},
								run: (*parser).callonNamedAttribute4,
								expr: &seqExpr{
									pos: position{line: 331, col: 22, offset: 10528},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 331, col: 22, offset: 10528},
											expr: &actionExpr{
												pos: position{line: 2860, col: 10, offset: 94799},
												run: (*parser).callonNamedAttribute7,
												expr: &charClassMatcher{
													pos:        position{line: 2860, col: 11, offset: 94800},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 331, col: 29, offset: 10535},
											expr: &charClassMatcher{
												pos:        position{line: 331, col: 29, offset: 10535},
												val:        "[^\\r\\n=,]]",
												chars:      []rune{'\r', '\n', '=', ',', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 331, col: 42, offset: 10548},
											expr: &actionExpr{
												pos: position{line: 2860, col: 10, offset: 94799},
												run: (*parser).callonNamedAttribute12,
												expr: &charClassMatcher{
													pos:        position{line: 2860, col: 11, offset: 94800},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 326, col: 43, offset: 10241},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 326, col: 47, offset: 10245},
							expr: &actionExpr{
								pos: position{line: 2860, col: 10, offset: 94799},
								run: (*parser).callonNamedAttribute16,
								expr: &charClassMatcher{
									pos:        position{line: 2860, col: 11, offset: 94800},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 326, col: 54, offset: 10252},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 326, col: 61, offset: 10259},
								name: "AttributeRawValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 326, col: 80, offset: 10278},
							expr: &seqExpr{
								pos: position{line: 326, col: 81, offset: 10279},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 326, col: 81, offset: 10279},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 326, col: 85, offset: 10283},
										expr: &actionExpr{
											pos: position{line: 2860, col: 10, offset: 94799},
											run: (*parser).callonNamedAttribute24,
											expr: &charClassMatcher{
												pos:        position{line: 2860, col: 11, offset: 94800},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeRawValue",
			pos:  position{line: 335, col: 1, offset: 10618},
			expr: &actionExpr{
				pos: position{line: 336, col: 5, offset: 10644},
				run: (*parser).callonAttributeRawValue1,
				expr: &seqExpr{
					pos: position{line: 336, col: 5, offset: 10644},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 336, col: 5, offset: 10644},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 337, col: 9, offset: 10660},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 346, col: 5, offset: 10869},
										run: (*parser).callonAttributeRawValue5,
										expr: &seqExpr{
											pos: position{line: 346, col: 5, offset: 10869},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 346, col: 5, offset: 10869},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&notExpr{
													pos: position{line: 346, col: 9, offset: 10873},
													expr: &litMatcher{
														pos:        position{line: 346, col: 10, offset: 10874},
														val:        "`",
														ignoreCase: false,
														want:       "\"`\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 347, col: 5, offset: 10953},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 353, col: 5, offset: 11090},
														run: (*parser).callonAttributeRawValue11,
														expr: &labeledExpr{
															pos:   position{line: 353, col: 5, offset: 11090},
															label: "elements",
															expr: &oneOrMoreExpr{
																pos: position{line: 353, col: 14, offset: 11099},
																expr: &choiceExpr{
																	pos: position{line: 354, col: 9, offset: 11109},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2790, col: 14, offset: 92611},
																			run: (*parser).callonAttributeRawValue15,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2790, col: 14, offset: 92611},
																				expr: &charClassMatcher{
																					pos:        position{line: 2790, col: 14, offset: 92611},
																					val:        "[0-9\\pL]",
																					ranges:     []rune{'0', '9'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2860, col: 10, offset: 94799},
																			run: (*parser).callonAttributeRawValue18,
																			expr: &charClassMatcher{
																				pos:        position{line: 2860, col: 11, offset: 94800},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&actionExpr{
																			pos: position{line: 416, col: 5, offset: 13530},
																			run: (*parser).callonAttributeRawValue20,
																			expr: &seqExpr{
																				pos: position{line: 416, col: 5, offset: 13530},
																				exprs: []interface{}{
																					&andCodeExpr{
																						pos: position{line: 416, col: 5, offset: 13530},
																						run: (*parser).callonAttributeRawValue22,
																					},
																					&labeledExpr{
																						pos:   position{line: 419, col: 5, offset: 13594},
																						label: "element",
																						expr: &choiceExpr{
																							pos: position{line: 419, col: 14, offset: 13603},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 430, col: 25, offset: 14065},
																									run: (*parser).callonAttributeRawValue25,
																									expr: &seqExpr{
																										pos: position{line: 430, col: 25, offset: 14065},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 430, col: 25, offset: 14065},
																												val:        "{counter:",
																												ignoreCase: false,
																												want:       "\"{counter:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 430, col: 37, offset: 14077},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 120, col: 18, offset: 3502},
																													run: (*parser).callonAttributeRawValue29,
																													expr: &seqExpr{
																														pos: position{line: 120, col: 18, offset: 3502},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 120, col: 18, offset: 3502},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 120, col: 28, offset: 3512},
																																expr: &charClassMatcher{
																																	pos:        position{line: 120, col: 29, offset: 3513},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 430, col: 56, offset: 14096},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 430, col: 62, offset: 14102},
																													expr: &actionExpr{
																														pos: position{line: 438, col: 17, offset: 14365},
																														run: (*parser).callonAttributeRawValue36,
																														expr: &seqExpr{
																															pos: position{line: 438, col: 17, offset: 14365},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 438, col: 17, offset: 14365},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 438, col: 21, offset: 14369},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 438, col: 28, offset: 14376},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 438, col: 28, offset: 14376},
																																				run: (*parser).callonAttributeRawValue41,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 438, col: 28, offset: 14376},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 440, col: 9, offset: 14430},
																																				run: (*parser).callonAttributeRawValue43,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 440, col: 9, offset: 14430},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 440, col: 9, offset: 14430},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 430, col: 78, offset: 14118},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 434, col: 25, offset: 14220},
																									run: (*parser).callonAttributeRawValue47,
																									expr: &seqExpr{
																										pos: position{line: 434, col: 25, offset: 14220},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 434, col: 25, offset: 14220},
																												val:        "{counter2:",
																												ignoreCase: false,
																												want:       "\"{counter2:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 434, col: 38, offset: 14233},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 120, col: 18, offset: 3502},
																													run: (*parser).callonAttributeRawValue51,
																													expr: &seqExpr{
																														pos: position{line: 120, col: 18, offset: 3502},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 120, col: 18, offset: 3502},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 120, col: 28, offset: 3512},
																																expr: &charClassMatcher{
																																	pos:        position{line: 120, col: 29, offset: 3513},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 434, col: 57, offset: 14252},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 434, col: 63, offset: 14258},
																													expr: &actionExpr{
																														pos: position{line: 438, col: 17, offset: 14365},
																														run: (*parser).callonAttributeRawValue58,
																														expr: &seqExpr{
																															pos: position{line: 438, col: 17, offset: 14365},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 438, col: 17, offset: 14365},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 438, col: 21, offset: 14369},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 438, col: 28, offset: 14376},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 438, col: 28, offset: 14376},
																																				run: (*parser).callonAttributeRawValue63,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 438, col: 28, offset: 14376},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 440, col: 9, offset: 14430},
																																				run: (*parser).callonAttributeRawValue65,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 440, col: 9, offset: 14430},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 440, col: 9, offset: 14430},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 434, col: 79, offset: 14274},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 423, col: 31, offset: 13720},
																									run: (*parser).callonAttributeRawValue69,
																									expr: &seqExpr{
																										pos: position{line: 423, col: 31, offset: 13720},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 423, col: 31, offset: 13720},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 423, col: 35, offset: 13724},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 120, col: 18, offset: 3502},
																													run: (*parser).callonAttributeRawValue73,
																													expr: &seqExpr{
																														pos: position{line: 120, col: 18, offset: 3502},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 120, col: 18, offset: 3502},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 120, col: 28, offset: 3512},
																																expr: &charClassMatcher{
																																	pos:        position{line: 120, col: 29, offset: 3513},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 423, col: 54, offset: 13743},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 357, col: 12, offset: 11178},
																			run: (*parser).callonAttributeRawValue79,
																			expr: &litMatcher{
																				pos:        position{line: 357, col: 12, offset: 11178},
																				val:        "\\'",
																				ignoreCase: false,
																				want:       "\"\\\\'\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 360, col: 13, offset: 11280},
																			val:        "'`",
																			ignoreCase: false,
																			want:       "\"'`\"",
																		},
																		&litMatcher{
																			pos:        position{line: 360, col: 20, offset: 11287},
																			val:        "`'",
																			ignoreCase: false,
																			want:       "\"`'\"",
																		},
																		&actionExpr{
																			pos: position{line: 360, col: 27, offset: 11294},
																			run: (*parser).callonAttributeRawValue83,
																			expr: &litMatcher{
																				pos:        position{line: 360, col: 27, offset: 11294},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 363, col: 12, offset: 11454},
																			run: (*parser).callonAttributeRawValue85,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 363, col: 12, offset: 11454},
																				expr: &charClassMatcher{
																					pos:        position{line: 363, col: 12, offset: 11454},
																					val:        "[^\\r\\n\\\\\\ ]",
																					chars:      []rune{'\r', '\n', '\\', '\'', ' '},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 348, col: 5, offset: 11004},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 371, col: 5, offset: 11689},
										run: (*parser).callonAttributeRawValue89,
										expr: &seqExpr{
											pos: position{line: 371, col: 5, offset: 11689},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 371, col: 5, offset: 11689},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
												&notExpr{
													pos: position{line: 371, col: 10, offset: 11694},
													expr: &litMatcher{
														pos:        position{line: 371, col: 11, offset: 11695},
														val:        "`",
														ignoreCase: false,
														want:       "\"`\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 372, col: 5, offset: 11774},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 377, col: 5, offset: 11928},
														run: (*parser).callonAttributeRawValue95,
														expr: &labeledExpr{
															pos:   position{line: 377, col: 5, offset: 11928},
															label: "elements",
															expr: &oneOrMoreExpr{
																pos: position{line: 377, col: 14, offset: 11937},
																expr: &choiceExpr{
																	pos: position{line: 378, col: 9, offset: 11947},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2790, col: 14, offset: 92611},
																			run: (*parser).callonAttributeRawValue99,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2790, col: 14, offset: 92611},
																				expr: &charClassMatcher{
																					pos:        position{line: 2790, col: 14, offset: 92611},
																					val:        "[0-9\\pL]",
																					ranges:     []rune{'0', '9'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2860, col: 10, offset: 94799},
																			run: (*parser).callonAttributeRawValue102,
																			expr: &charClassMatcher{
																				pos:        position{line: 2860, col: 11, offset: 94800},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&actionExpr{
																			pos: position{line: 416, col: 5, offset: 13530},
																			run: (*parser).callonAttributeRawValue104,
																			expr: &seqExpr{
																				pos: position{line: 416, col: 5, offset: 13530},
																				exprs: []interface{}{
																					&andCodeExpr{
																						pos: position{line: 416, col: 5, offset: 13530},
																						run: (*parser).callonAttributeRawValue106,
																					},
																					&labeledExpr{
																						pos:   position{line: 419, col: 5, offset: 13594},
																						label: "element",
																						expr: &choiceExpr{
																							pos: position{line: 419, col: 14, offset: 13603},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 430, col: 25, offset: 14065},
																									run: (*parser).callonAttributeRawValue109,
																									expr: &seqExpr{
																										pos: position{line: 430, col: 25, offset: 14065},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 430, col: 25, offset: 14065},
																												val:        "{counter:",
																												ignoreCase: false,
																												want:       "\"{counter:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 430, col: 37, offset: 14077},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 120, col: 18, offset: 3502},
																													run: (*parser).callonAttributeRawValue113,
																													expr: &seqExpr{
																														pos: position{line: 120, col: 18, offset: 3502},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 120, col: 18, offset: 3502},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 120, col: 28, offset: 3512},
																																expr: &charClassMatcher{
																																	pos:        position{line: 120, col: 29, offset: 3513},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 430, col: 56, offset: 14096},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 430, col: 62, offset: 14102},
																													expr: &actionExpr{
																														pos: position{line: 438, col: 17, offset: 14365},
																														run: (*parser).callonAttributeRawValue120,
																														expr: &seqExpr{
																															pos: position{line: 438, col: 17, offset: 14365},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 438, col: 17, offset: 14365},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 438, col: 21, offset: 14369},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 438, col: 28, offset: 14376},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 438, col: 28, offset: 14376},
																																				run: (*parser).callonAttributeRawValue125,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 438, col: 28, offset: 14376},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 440, col: 9, offset: 14430},
																																				run: (*parser).callonAttributeRawValue127,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 440, col: 9, offset: 14430},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 440, col: 9, offset: 14430},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 430, col: 78, offset: 14118},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 434, col: 25, offset: 14220},
																									run: (*parser).callonAttributeRawValue131,
																									expr: &seqExpr{
																										pos: position{line: 434, col: 25, offset: 14220},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 434, col: 25, offset: 14220},
																												val:        "{counter2:",
																												ignoreCase: false,
																												want:       "\"{counter2:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 434, col: 38, offset: 14233},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 120, col: 18, offset: 3502},
																													run: (*parser).callonAttributeRawValue135,
																													expr: &seqExpr{
																														pos: position{line: 120, col: 18, offset: 3502},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 120, col: 18, offset: 3502},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 120, col: 28, offset: 3512},
																																expr: &charClassMatcher{
																																	pos:        position{line: 120, col: 29, offset: 3513},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 434, col: 57, offset: 14252},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 434, col: 63, offset: 14258},
																													expr: &actionExpr{
																														pos: position{line: 438, col: 17, offset: 14365},
																														run: (*parser).callonAttributeRawValue142,
																														expr: &seqExpr{
																															pos: position{line: 438, col: 17, offset: 14365},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 438, col: 17, offset: 14365},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 438, col: 21, offset: 14369},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 438, col: 28, offset: 14376},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 438, col: 28, offset: 14376},
																																				run: (*parser).callonAttributeRawValue147,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 438, col: 28, offset: 14376},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 440, col: 9, offset: 14430},
																																				run: (*parser).callonAttributeRawValue149,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 440, col: 9, offset: 14430},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 440, col: 9, offset: 14430},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 434, col: 79, offset: 14274},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 423, col: 31, offset: 13720},
																									run: (*parser).callonAttributeRawValue153,
																									expr: &seqExpr{
																										pos: position{line: 423, col: 31, offset: 13720},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 423, col: 31, offset: 13720},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 423, col: 35, offset: 13724},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 120, col: 18, offset: 3502},
																													run: (*parser).callonAttributeRawValue157,
																													expr: &seqExpr{
																														pos: position{line: 120, col: 18, offset: 3502},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 120, col: 18, offset: 3502},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 120, col: 28, offset: 3512},
																																expr: &charClassMatcher{
																																	pos:        position{line: 120, col: 29, offset: 3513},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 423, col: 54, offset: 13743},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 381, col: 12, offset: 12016},
																			run: (*parser).callonAttributeRawValue163,
																			expr: &litMatcher{
																				pos:        position{line: 381, col: 12, offset: 12016},
																				val:        "\\\"",
																				ignoreCase: false,
																				want:       "\"\\\\\\\"\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 384, col: 13, offset: 12118},
																			val:        "\"`",
																			ignoreCase: false,
																			want:       "\"\\\"`\"",
																		},
																		&litMatcher{
																			pos:        position{line: 384, col: 21, offset: 12126},
																			val:        "`\"",
																			ignoreCase: false,
																			want:       "\"`\\\"\"",
																		},
																		&litMatcher{
																			pos:        position{line: 384, col: 29, offset: 12134},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&actionExpr{
																			pos: position{line: 384, col: 35, offset: 12140},
																			run: (*parser).callonAttributeRawValue168,
																			expr: &litMatcher{
																				pos:        position{line: 384, col: 35, offset: 12140},
																				val:        "`",
																				ignoreCase: false,
																				want:       "\"`\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 387, col: 12, offset: 12323},
																			run: (*parser).callonAttributeRawValue170,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 387, col: 12, offset: 12323},
																				expr: &charClassMatcher{
																					pos:        position{line: 387, col: 12, offset: 12323},
																					val:        "[^\\r\\n\\\\\"` ]",
																					chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 373, col: 5, offset: 11825},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
												&andExpr{
													pos: position{line: 373, col: 10, offset: 11830},
													expr: &notExpr{
														pos: position{line: 373, col: 12, offset: 11832},
														expr: &seqExpr{
															pos: position{line: 373, col: 14, offset: 11834},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 373, col: 14, offset: 11834},
																	expr: &actionExpr{
																		pos: position{line: 2860, col: 10, offset: 94799},
																		run: (*parser).callonAttributeRawValue178,
																		expr: &charClassMatcher{
																			pos:        position{line: 2860, col: 11, offset: 94800},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 373, col: 21, offset: 11841},
																	val:        "=",
																	ignoreCase: false,
																	want:       "\"=\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 339, col: 11, offset: 10742},
										name: "UnquotedAttributeRawValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 341, col: 5, offset: 10779},
							expr: &notExpr{
								pos: position{line: 341, col: 7, offset: 10781},
								expr: &seqExpr{
									pos: position{line: 341, col: 9, offset: 10783},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 341, col: 9, offset: 10783},
											expr: &actionExpr{
												pos: position{line: 2860, col: 10, offset: 94799},
												run: (*parser).callonAttributeRawValue186,
												expr: &charClassMatcher{
													pos:        position{line: 2860, col: 11, offset: 94800},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&litMatcher{
											pos:        position{line: 341, col: 16, offset: 10790},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeRawValue",
			pos:  position{line: 395, col: 1, offset: 12597},
			expr: &actionExpr{
				pos: position{line: 398, col: 5, offset: 12784},
				run: (*parser).callonUnquotedAttributeRawValue1,
				expr: &seqExpr{
					pos: position{line: 398, col: 5, offset: 12784},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 398, col: 5, offset: 12784},
							expr: &actionExpr{
								pos: position{line: 2860, col: 10, offset: 94799},
								run: (*parser).callonUnquotedAttributeRawValue4,
								expr: &charClassMatcher{
									pos:        position{line: 2860, col: 11, offset: 94800},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 399, col: 5, offset: 12853},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 399, col: 14, offset: 12862},
								expr: &choiceExpr{
									pos: position{line: 400, col: 9, offset: 12872},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 400, col: 10, offset: 12873},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 400, col: 10, offset: 12873},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&ruleRefExpr{
													pos:  position{line: 400, col: 14, offset: 12877},
													name: "UnquotedAttributeRawValue",
												},
												&litMatcher{
													pos:        position{line: 400, col: 40, offset: 12903},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
										},
										&actionExpr{
											pos: position{line: 914, col: 23, offset: 28983},
											run: (*parser).callonUnquotedAttributeRawValue13,
											expr: &seqExpr{
												pos: position{line: 914, col: 23, offset: 28983},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 912, col: 32, offset: 28951},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 914, col: 51, offset: 29011},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 914, col: 56, offset: 29016},
															run: (*parser).callonUnquotedAttributeRawValue17,
															expr: &oneOrMoreExpr{
																pos: position{line: 914, col: 56, offset: 29016},
																expr: &charClassMatcher{
																	pos:        position{line: 914, col: 56, offset: 29016},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 912, col: 32, offset: 28951},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 416, col: 5, offset: 13530},
											run: (*parser).callonUnquotedAttributeRawValue21,
											expr: &seqExpr{
												pos: position{line: 416, col: 5, offset: 13530},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 416, col: 5, offset: 13530},
														run: (*parser).callonUnquotedAttributeRawValue23,
													},
													&labeledExpr{
														pos:   position{line: 419, col: 5, offset: 13594},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 419, col: 14, offset: 13603},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 430, col: 25, offset: 14065},
																	run: (*parser).callonUnquotedAttributeRawValue26,
																	expr: &seqExpr{
																		pos: position{line: 430, col: 25, offset: 14065},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 430, col: 25, offset: 14065},
																				val:        "{counter:",
																				ignoreCase: false,
																				want:       "\"{counter:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 430, col: 37, offset: 14077},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					run: (*parser).callonUnquotedAttributeRawValue30,
																					expr: &seqExpr{
																						pos: position{line: 120, col: 18, offset: 3502},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 120, col: 18, offset: 3502},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 120, col: 28, offset: 3512},
																								expr: &charClassMatcher{
																									pos:        position{line: 120, col: 29, offset: 3513},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 430, col: 56, offset: 14096},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 430, col: 62, offset: 14102},
																					expr: &actionExpr{
																						pos: position{line: 438, col: 17, offset: 14365},
																						run: (*parser).callonUnquotedAttributeRawValue37,
																						expr: &seqExpr{
																							pos: position{line: 438, col: 17, offset: 14365},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 438, col: 17, offset: 14365},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 438, col: 21, offset: 14369},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 438, col: 28, offset: 14376},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 438, col: 28, offset: 14376},
																												run: (*parser).callonUnquotedAttributeRawValue42,
																												expr: &charClassMatcher{
																													pos:        position{line: 438, col: 28, offset: 14376},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 440, col: 9, offset: 14430},
																												run: (*parser).callonUnquotedAttributeRawValue44,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 440, col: 9, offset: 14430},
																													expr: &charClassMatcher{
																														pos:        position{line: 440, col: 9, offset: 14430},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 430, col: 78, offset: 14118},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 434, col: 25, offset: 14220},
																	run: (*parser).callonUnquotedAttributeRawValue48,
																	expr: &seqExpr{
																		pos: position{line: 434, col: 25, offset: 14220},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 434, col: 25, offset: 14220},
																				val:        "{counter2:",
																				ignoreCase: false,
																				want:       "\"{counter2:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 434, col: 38, offset: 14233},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					run: (*parser).callonUnquotedAttributeRawValue52,
																					expr: &seqExpr{
																						pos: position{line: 120, col: 18, offset: 3502},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 120, col: 18, offset: 3502},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 120, col: 28, offset: 3512},
																								expr: &charClassMatcher{
																									pos:        position{line: 120, col: 29, offset: 3513},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 434, col: 57, offset: 14252},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 434, col: 63, offset: 14258},
																					expr: &actionExpr{
																						pos: position{line: 438, col: 17, offset: 14365},
																						run: (*parser).callonUnquotedAttributeRawValue59,
																						expr: &seqExpr{
																							pos: position{line: 438, col: 17, offset: 14365},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 438, col: 17, offset: 14365},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 438, col: 21, offset: 14369},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 438, col: 28, offset: 14376},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 438, col: 28, offset: 14376},
																												run: (*parser).callonUnquotedAttributeRawValue64,
																												expr: &charClassMatcher{
																													pos:        position{line: 438, col: 28, offset: 14376},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 440, col: 9, offset: 14430},
																												run: (*parser).callonUnquotedAttributeRawValue66,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 440, col: 9, offset: 14430},
																													expr: &charClassMatcher{
																														pos:        position{line: 440, col: 9, offset: 14430},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 434, col: 79, offset: 14274},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 423, col: 31, offset: 13720},
																	run: (*parser).callonUnquotedAttributeRawValue70,
																	expr: &seqExpr{
																		pos: position{line: 423, col: 31, offset: 13720},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 423, col: 31, offset: 13720},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 423, col: 35, offset: 13724},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					run: (*parser).callonUnquotedAttributeRawValue74,
																					expr: &seqExpr{
																						pos: position{line: 120, col: 18, offset: 3502},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 120, col: 18, offset: 3502},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 120, col: 28, offset: 3512},
																								expr: &charClassMatcher{
																									pos:        position{line: 120, col: 29, offset: 3513},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 423, col: 54, offset: 13743},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 403, col: 12, offset: 13031},
											run: (*parser).callonUnquotedAttributeRawValue80,
											expr: &oneOrMoreExpr{
												pos: position{line: 403, col: 12, offset: 13031},
												expr: &charClassMatcher{
													pos:        position{line: 403, col: 12, offset: 13031},
													val:        "[^=,�] ]",
													chars:      []rune{'=', ',', '�', ']', ' '},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&actionExpr{
											pos: position{line: 2860, col: 10, offset: 94799},
											run: (*parser).callonUnquotedAttributeRawValue83,
											expr: &charClassMatcher{
												pos:        position{line: 2860, col: 11, offset: 94800},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 456, col: 1, offset: 14990},
			expr: &choiceExpr{
				pos: position{line: 456, col: 19, offset: 15008},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 458, col: 27, offset: 15084},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 458, col: 27, offset: 15084},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 458, col: 27, offset: 15084},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 458, col: 32, offset: 15089},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 2848, col: 7, offset: 94521},
										run: (*parser).callonCrossReference6,
										expr: &oneOrMoreExpr{
											pos: position{line: 2848, col: 7, offset: 94521},
											expr: &charClassMatcher{
												pos:        position{line: 2848, col: 7, offset: 94521},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 458, col: 40, offset: 15097},
									expr: &actionExpr{
										pos: position{line: 2860, col: 10, offset: 94799},
										run: (*parser).callonCrossReference10,
										expr: &charClassMatcher{
											pos:        position{line: 2860, col: 11, offset: 94800},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&litMatcher{
									pos:        position{line: 458, col: 47, offset: 15104},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 458, col: 51, offset: 15108},
									label: "label",
									expr: &oneOrMoreExpr{
										pos: position{line: 468, col: 24, offset: 15521},
										expr: &choiceExpr{
											pos: position{line: 469, col: 5, offset: 15527},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 469, col: 6, offset: 15528},
													run: (*parser).callonCrossReference16,
													expr: &seqExpr{
														pos: position{line: 469, col: 6, offset: 15528},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 469, col: 6, offset: 15528},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 469, col: 14, offset: 15536},
																expr: &charClassMatcher{
																	pos:        position{line: 469, col: 14, offset: 15536},
																	val:        "[^\\r\\n{<>]",
																	chars:      []rune{'\r', '\n', '{', '<', '>'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 416, col: 5, offset: 13530},
													run: (*parser).callonCrossReference21,
													expr: &seqExpr{
														pos: position{line: 416, col: 5, offset: 13530},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 416, col: 5, offset: 13530},
																run: (*parser).callonCrossReference23,
															},
															&labeledExpr{
																pos:   position{line: 419, col: 5, offset: 13594},
																label: "element",
																expr: &choiceExpr{
																	pos: position{line: 419, col: 14, offset: 13603},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 430, col: 25, offset: 14065},
																			run: (*parser).callonCrossReference26,
																			expr: &seqExpr{
																				pos: position{line: 430, col: 25, offset: 14065},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 430, col: 25, offset: 14065},
																						val:        "{counter:",
																						ignoreCase: false,
																						want:       "\"{counter:\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 430, col: 37, offset: 14077},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 120, col: 18, offset: 3502},
																							run: (*parser).callonCrossReference30,
																							expr: &seqExpr{
																								pos: position{line: 120, col: 18, offset: 3502},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 120, col: 18, offset: 3502},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 120, col: 28, offset: 3512},
																										expr: &charClassMatcher{
																											pos:        position{line: 120, col: 29, offset: 3513},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 430, col: 56, offset: 14096},
																						label: "start",
																						expr: &zeroOrOneExpr{
																							pos: position{line: 430, col: 62, offset: 14102},
																							expr: &actionExpr{
																								pos: position{line: 438, col: 17, offset: 14365},
																								run: (*parser).callonCrossReference37,
																								expr: &seqExpr{
																									pos: position{line: 438, col: 17, offset: 14365},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 438, col: 17, offset: 14365},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 438, col: 21, offset: 14369},
																											label: "start",
																											expr: &choiceExpr{
																												pos: position{line: 438, col: 28, offset: 14376},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 438, col: 28, offset: 14376},
																														run: (*parser).callonCrossReference42,
																														expr: &charClassMatcher{
																															pos:        position{line: 438, col: 28, offset: 14376},
																															val:        "[A-Za-z]",
																															ranges:     []rune{'A', 'Z', 'a', 'z'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 440, col: 9, offset: 14430},
																														run: (*parser).callonCrossReference44,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 440, col: 9, offset: 14430},
																															expr: &charClassMatcher{
																																pos:        position{line: 440, col: 9, offset: 14430},
																																val:        "[0-9]",
																																ranges:     []rune{'0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 430, col: 78, offset: 14118},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 434, col: 25, offset: 14220},
																			run: (*parser).callonCrossReference48,
																			expr: &seqExpr{
																				pos: position{line: 434, col: 25, offset: 14220},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 434, col: 25, offset: 14220},
																						val:        "{counter2:",
																						ignoreCase: false,
																						want:       "\"{counter2:\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 434, col: 38, offset: 14233},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 120, col: 18, offset: 3502},
																							run: (*parser).callonCrossReference52,
																							expr: &seqExpr{
																								pos: position{line: 120, col: 18, offset: 3502},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 120, col: 18, offset: 3502},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 120, col: 28, offset: 3512},
																										expr: &charClassMatcher{
																											pos:        position{line: 120, col: 29, offset: 3513},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 434, col: 57, offset: 14252},
																						label: "start",
																						expr: &zeroOrOneExpr{
																							pos: position{line: 434, col: 63, offset: 14258},
																							expr: &actionExpr{
																								pos: position{line: 438, col: 17, offset: 14365},
																								run: (*parser).callonCrossReference59,
																								expr: &seqExpr{
																									pos: position{line: 438, col: 17, offset: 14365},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 438, col: 17, offset: 14365},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 438, col: 21, offset: 14369},
																											label: "start",
																											expr: &choiceExpr{
																												pos: position{line: 438, col: 28, offset: 14376},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 438, col: 28, offset: 14376},
																														run: (*parser).callonCrossReference64,
																														expr: &charClassMatcher{
																															pos:        position{line: 438, col: 28, offset: 14376},
																															val:        "[A-Za-z]",
																															ranges:     []rune{'A', 'Z', 'a', 'z'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 440, col: 9, offset: 14430},
																														run: (*parser).callonCrossReference66,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 440, col: 9, offset: 14430},
																															expr: &charClassMatcher{
																																pos:        position{line: 440, col: 9, offset: 14430},
																																val:        "[0-9]",
																																ranges:     []rune{'0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 434, col: 79, offset: 14274},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 423, col: 31, offset: 13720},
																			run: (*parser).callonCrossReference70,
																			expr: &seqExpr{
																				pos: position{line: 423, col: 31, offset: 13720},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 423, col: 31, offset: 13720},
																						val:        "{",
																						ignoreCase: false,
																						want:       "\"{\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 423, col: 35, offset: 13724},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 120, col: 18, offset: 3502},
																							run: (*parser).callonCrossReference74,
																							expr: &seqExpr{
																								pos: position{line: 120, col: 18, offset: 3502},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 120, col: 18, offset: 3502},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 120, col: 28, offset: 3512},
																										expr: &charClassMatcher{
																											pos:        position{line: 120, col: 29, offset: 3513},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 423, col: 54, offset: 13743},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 473, col: 8, offset: 15760},
													run: (*parser).callonCrossReference80,
													expr: &litMatcher{
														pos:        position{line: 473, col: 8, offset: 15760},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 458, col: 79, offset: 15136},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 460, col: 9, offset: 15209},
						run: (*parser).callonCrossReference83,
						expr: &seqExpr{
							pos: position{line: 460, col: 9, offset: 15209},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 460, col: 9, offset: 15209},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 460, col: 14, offset: 15214},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 2848, col: 7, offset: 94521},
										run: (*parser).callonCrossReference87,
										expr: &oneOrMoreExpr{
											pos: position{line: 2848, col: 7, offset: 94521},
											expr: &charClassMatcher{
												pos:        position{line: 2848, col: 7, offset: 94521},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 460, col: 22, offset: 15222},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 456, col: 44, offset: 15033},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 464, col: 1, offset: 15293},
			expr: &actionExpr{
				pos: position{line: 464, col: 27, offset: 15319},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 464, col: 27, offset: 15319},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 464, col: 27, offset: 15319},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 464, col: 35, offset: 15327},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 2821, col: 17, offset: 93655},
								run: (*parser).callonExternalCrossReference5,
								expr: &labeledExpr{
									pos:   position{line: 2821, col: 17, offset: 93655},
									label: "path",
									expr: &oneOrMoreExpr{
										pos: position{line: 2821, col: 22, offset: 93660},
										expr: &choiceExpr{
											pos: position{line: 2821, col: 23, offset: 93661},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2833, col: 13, offset: 94065},
													run: (*parser).callonExternalCrossReference9,
													expr: &labeledExpr{
														pos:   position{line: 2833, col: 13, offset: 94065},
														label: "elements",
														expr: &oneOrMoreExpr{
															pos: position{line: 2833, col: 22, offset: 94074},
															expr: &choiceExpr{
																pos: position{line: 2834, col: 5, offset: 94080},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2834, col: 5, offset: 94080},
																		run: (*parser).callonExternalCrossReference13,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2834, col: 5, offset: 94080},
																			expr: &charClassMatcher{
																				pos:        position{line: 2834, col: 6, offset: 94081},
																				val:        "[^\\r\\n[]�&<>{ ]",
																				chars:      []rune{'\r', '\n', '[', ']', '�', '&', '<', '>', '{', ' '},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 416, col: 5, offset: 13530},
																		run: (*parser).callonExternalCrossReference16,
																		expr: &seqExpr{
																			pos: position{line: 416, col: 5, offset: 13530},
																			exprs: []interface{}{
																				&andCodeExpr{
																					pos: position{line: 416, col: 5, offset: 13530},
																					run: (*parser).callonExternalCrossReference18,
																				},
																				&labeledExpr{
																					pos:   position{line: 419, col: 5, offset: 13594},
																					label: "element",
																					expr: &choiceExpr{
																						pos: position{line: 419, col: 14, offset: 13603},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 430, col: 25, offset: 14065},
																								run: (*parser).callonExternalCrossReference21,
																								expr: &seqExpr{
																									pos: position{line: 430, col: 25, offset: 14065},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 430, col: 25, offset: 14065},
																											val:        "{counter:",
																											ignoreCase: false,
																											want:       "\"{counter:\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 430, col: 37, offset: 14077},
																											label: "name",
																											expr: &actionExpr{
																												pos: position{line: 120, col: 18, offset: 3502},
																												run: (*parser).callonExternalCrossReference25,
																												expr: &seqExpr{
																													pos: position{line: 120, col: 18, offset: 3502},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 120, col: 18, offset: 3502},
																															val:        "[_0-9\\pL]",
																															chars:      []rune{'_'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 120, col: 28, offset: 3512},
																															expr: &charClassMatcher{
																																pos:        position{line: 120, col: 29, offset: 3513},
																																val:        "[-0-9\\pL]",
																																chars:      []rune{'-'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 430, col: 56, offset: 14096},
																											label: "start",
																											expr: &zeroOrOneExpr{
																												pos: position{line: 430, col: 62, offset: 14102},
																												expr: &actionExpr{
																													pos: position{line: 438, col: 17, offset: 14365},
																													run: (*parser).callonExternalCrossReference32,
																													expr: &seqExpr{
																														pos: position{line: 438, col: 17, offset: 14365},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 438, col: 17, offset: 14365},
																																val:        ":",
																																ignoreCase: false,
																																want:       "\":\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 438, col: 21, offset: 14369},
																																label: "start",
																																expr: &choiceExpr{
																																	pos: position{line: 438, col: 28, offset: 14376},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 438, col: 28, offset: 14376},
																																			run: (*parser).callonExternalCrossReference37,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 438, col: 28, offset: 14376},
																																				val:        "[A-Za-z]",
																																				ranges:     []rune{'A', 'Z', 'a', 'z'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 440, col: 9, offset: 14430},
																																			run: (*parser).callonExternalCrossReference39,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 440, col: 9, offset: 14430},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 440, col: 9, offset: 14430},
																																					val:        "[0-9]",
																																					ranges:     []rune{'0', '9'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 430, col: 78, offset: 14118},
																											val:        "}",
																											ignoreCase: false,
																											want:       "\"}\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 434, col: 25, offset: 14220},
																								run: (*parser).callonExternalCrossReference43,
																								expr: &seqExpr{
																									pos: position{line: 434, col: 25, offset: 14220},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 434, col: 25, offset: 14220},
																											val:        "{counter2:",
																											ignoreCase: false,
																											want:       "\"{counter2:\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 434, col: 38, offset: 14233},
																											label: "name",
																											expr: &actionExpr{
																												pos: position{line: 120, col: 18, offset: 3502},
																												run: (*parser).callonExternalCrossReference47,
																												expr: &seqExpr{
																													pos: position{line: 120, col: 18, offset: 3502},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 120, col: 18, offset: 3502},
																															val:        "[_0-9\\pL]",
																															chars:      []rune{'_'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 120, col: 28, offset: 3512},
																															expr: &charClassMatcher{
																																pos:        position{line: 120, col: 29, offset: 3513},
																																val:        "[-0-9\\pL]",
																																chars:      []rune{'-'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 434, col: 57, offset: 14252},
																											label: "start",
																											expr: &zeroOrOneExpr{
																												pos: position{line: 434, col: 63, offset: 14258},
																												expr: &actionExpr{
																													pos: position{line: 438, col: 17, offset: 14365},
																													run: (*parser).callonExternalCrossReference54,
																													expr: &seqExpr{
																														pos: position{line: 438, col: 17, offset: 14365},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 438, col: 17, offset: 14365},
																																val:        ":",
																																ignoreCase: false,
																																want:       "\":\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 438, col: 21, offset: 14369},
																																label: "start",
																																expr: &choiceExpr{
																																	pos: position{line: 438, col: 28, offset: 14376},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 438, col: 28, offset: 14376},
																																			run: (*parser).callonExternalCrossReference59,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 438, col: 28, offset: 14376},
																																				val:        "[A-Za-z]",
																																				ranges:     []rune{'A', 'Z', 'a', 'z'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 440, col: 9, offset: 14430},
																																			run: (*parser).callonExternalCrossReference61,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 440, col: 9, offset: 14430},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 440, col: 9, offset: 14430},
																																					val:        "[0-9]",
																																					ranges:     []rune{'0', '9'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 434, col: 79, offset: 14274},
																											val:        "}",
																											ignoreCase: false,
																											want:       "\"}\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 423, col: 31, offset: 13720},
																								run: (*parser).callonExternalCrossReference65,
																								expr: &seqExpr{
																									pos: position{line: 423, col: 31, offset: 13720},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 423, col: 31, offset: 13720},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 423, col: 35, offset: 13724},
																											label: "name",
																											expr: &actionExpr{
																												pos: position{line: 120, col: 18, offset: 3502},
																												run: (*parser).callonExternalCrossReference69,
																												expr: &seqExpr{
																													pos: position{line: 120, col: 18, offset: 3502},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 120, col: 18, offset: 3502},
																															val:        "[_0-9\\pL]",
																															chars:      []rune{'_'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 120, col: 28, offset: 3512},
																															expr: &charClassMatcher{
																																pos:        position{line: 120, col: 29, offset: 3513},
																																val:        "[-0-9\\pL]",
																																chars:      []rune{'-'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 423, col: 54, offset: 13743},
																											val:        "}",
																											ignoreCase: false,
																											want:       "\"}\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2576, col: 5, offset: 86006},
																		run: (*parser).callonExternalCrossReference75,
																		expr: &seqExpr{
																			pos: position{line: 2576, col: 5, offset: 86006},
																			exprs: []interface{}{
																				&andCodeExpr{
																					pos: position{line: 2576, col: 5, offset: 86006},
																					run: (*parser).callonExternalCrossReference77,
																				},
																				&labeledExpr{
																					pos:   position{line: 2579, col: 5, offset: 86077},
																					label: "element",
																					expr: &choiceExpr{
																						pos: position{line: 2581, col: 9, offset: 86175},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2581, col: 9, offset: 86175},
																								run: (*parser).callonExternalCrossReference80,
																								expr: &choiceExpr{
																									pos: position{line: 458, col: 27, offset: 15084},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 458, col: 27, offset: 15084},
																											run: (*parser).callonExternalCrossReference82,
																											expr: &seqExpr{
																												pos: position{line: 458, col: 27, offset: 15084},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 458, col: 27, offset: 15084},
																														val:        "<<",
																														ignoreCase: false,
																														want:       "\"<<\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 458, col: 32, offset: 15089},
																														label: "id",
																														expr: &actionExpr{
																															pos: position{line: 2848, col: 7, offset: 94521},
																															run: (*parser).callonExternalCrossReference86,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 2848, col: 7, offset: 94521},
																																expr: &charClassMatcher{
																																	pos:        position{line: 2848, col: 7, offset: 94521},
																																	val:        "[^[]<>,]",
																																	chars:      []rune{'[', ']', '<', '>', ','},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 458, col: 40, offset: 15097},
																														expr: &actionExpr{
																															pos: position{line: 2860, col: 10, offset: 94799},
																															run: (*parser).callonExternalCrossReference90,
																															expr: &charClassMatcher{
																																pos:        position{line: 2860, col: 11, offset: 94800},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 458, col: 47, offset: 15104},
																														val:        ",",
																														ignoreCase: false,
																														want:       "\",\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 458, col: 51, offset: 15108},
																														label: "label",
																														expr: &oneOrMoreExpr{
																															pos: position{line: 468, col: 24, offset: 15521},
																															expr: &choiceExpr{
																																pos: position{line: 469, col: 5, offset: 15527},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 469, col: 6, offset: 15528},
																																		run: (*parser).callonExternalCrossReference96,
																																		expr: &seqExpr{
																																			pos: position{line: 469, col: 6, offset: 15528},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 469, col: 6, offset: 15528},
																																					val:        "[0-9\\pL]",
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&oneOrMoreExpr{
																																					pos: position{line: 469, col: 14, offset: 15536},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 469, col: 14, offset: 15536},
																																						val:        "[^\\r\\n{<>]",
																																						chars:      []rune{'\r', '\n', '{', '<', '>'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 416, col: 5, offset: 13530},
																																		run: (*parser).callonExternalCrossReference101,
																																		expr: &seqExpr{
																																			pos: position{line: 416, col: 5, offset: 13530},
																																			exprs: []interface{}{
																																				&andCodeExpr{
																																					pos: position{line: 416, col: 5, offset: 13530},
																																					run: (*parser).callonExternalCrossReference103,
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 419, col: 5, offset: 13594},
																																					label: "element",
																																					expr: &choiceExpr{
																																						pos: position{line: 419, col: 14, offset: 13603},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 430, col: 25, offset: 14065},
																																								run: (*parser).callonExternalCrossReference106,
																																								expr: &seqExpr{
																																									pos: position{line: 430, col: 25, offset: 14065},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 430, col: 25, offset: 14065},
																																											val:        "{counter:",
																																											ignoreCase: false,
																																											want:       "\"{counter:\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 430, col: 37, offset: 14077},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 120, col: 18, offset: 3502},
																																												run: (*parser).callonExternalCrossReference110,
																																												expr: &seqExpr{
																																													pos: position{line: 120, col: 18, offset: 3502},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 120, col: 18, offset: 3502},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 120, col: 28, offset: 3512},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 120, col: 29, offset: 3513},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 430, col: 56, offset: 14096},
																																											label: "start",
																																											expr: &zeroOrOneExpr{
																																												pos: position{line: 430, col: 62, offset: 14102},
																																												expr: &actionExpr{
																																													pos: position{line: 438, col: 17, offset: 14365},
																																													run: (*parser).callonExternalCrossReference117,
																																													expr: &seqExpr{
																																														pos: position{line: 438, col: 17, offset: 14365},
																																														exprs: []interface{}{
																																															&litMatcher{
																																																pos:        position{line: 438, col: 17, offset: 14365},
																																																val:        ":",
																																																ignoreCase: false,
																																																want:       "\":\"",
																																															},
																																															&labeledExpr{
																																																pos:   position{line: 438, col: 21, offset: 14369},
																																																label: "start",
																																																expr: &choiceExpr{
																																																	pos: position{line: 438, col: 28, offset: 14376},
																																																	alternatives: []interface{}{
																																																		&actionExpr{
																																																			pos: position{line: 438, col: 28, offset: 14376},
																																																			run: (*parser).callonExternalCrossReference122,
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 438, col: 28, offset: 14376},
																																																				val:        "[A-Za-z]",
																																																				ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																		&actionExpr{
																																																			pos: position{line: 440, col: 9, offset: 14430},
																																																			run: (*parser).callonExternalCrossReference124,
																																																			expr: &oneOrMoreExpr{
																																																				pos: position{line: 440, col: 9, offset: 14430},
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 440, col: 9, offset: 14430},
																																																					val:        "[0-9]",
																																																					ranges:     []rune{'0', '9'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 430, col: 78, offset: 14118},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 434, col: 25, offset: 14220},
																																								run: (*parser).callonExternalCrossReference128,
																																								expr: &seqExpr{
																																									pos: position{line: 434, col: 25, offset: 14220},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 434, col: 25, offset: 14220},
																																											val:        "{counter2:",
																																											ignoreCase: false,
																																											want:       "\"{counter2:\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 434, col: 38, offset: 14233},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 120, col: 18, offset: 3502},
																																												run: (*parser).callonExternalCrossReference132,
																																												expr: &seqExpr{
																																													pos: position{line: 120, col: 18, offset: 3502},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 120, col: 18, offset: 3502},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 120, col: 28, offset: 3512},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 120, col: 29, offset: 3513},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 434, col: 57, offset: 14252},
																																											label: "start",
																																											expr: &zeroOrOneExpr{
																																												pos: position{line: 434, col: 63, offset: 14258},
																																												expr: &actionExpr{
																																													pos: position{line: 438, col: 17, offset: 14365},
																																													run: (*parser).callonExternalCrossReference139,
																																													expr: &seqExpr{
																																														pos: position{line: 438, col: 17, offset: 14365},
																																														exprs: []interface{}{
																																															&litMatcher{
																																																pos:        position{line: 438, col: 17, offset: 14365},
																																																val:        ":",
																																																ignoreCase: false,
																																																want:       "\":\"",
																																															},
																																															&labeledExpr{
																																																pos:   position{line: 438, col: 21, offset: 14369},
																																																label: "start",
																																																expr: &choiceExpr{
																																																	pos: position{line: 438, col: 28, offset: 14376},
																																																	alternatives: []interface{}{
																																																		&actionExpr{
																																																			pos: position{line: 438, col: 28, offset: 14376},
																																																			run: (*parser).callonExternalCrossReference144,
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 438, col: 28, offset: 14376},
																																																				val:        "[A-Za-z]",
																																																				ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																		&actionExpr{
																																																			pos: position{line: 440, col: 9, offset: 14430},
																																																			run: (*parser).callonExternalCrossReference146,
																																																			expr: &oneOrMoreExpr{
																																																				pos: position{line: 440, col: 9, offset: 14430},
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 440, col: 9, offset: 14430},
																																																					val:        "[0-9]",
																																																					ranges:     []rune{'0', '9'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 434, col: 79, offset: 14274},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 423, col: 31, offset: 13720},
																																								run: (*parser).callonExternalCrossReference150,
																																								expr: &seqExpr{
																																									pos: position{line: 423, col: 31, offset: 13720},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 423, col: 31, offset: 13720},
																																											val:        "{",
																																											ignoreCase: false,
																																											want:       "\"{\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 423, col: 35, offset: 13724},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 120, col: 18, offset: 3502},
																																												run: (*parser).callonExternalCrossReference154,
																																												expr: &seqExpr{
																																													pos: position{line: 120, col: 18, offset: 3502},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 120, col: 18, offset: 3502},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 120, col: 28, offset: 3512},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 120, col: 29, offset: 3513},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 423, col: 54, offset: 13743},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 473, col: 8, offset: 15760},
																																		run: (*parser).callonExternalCrossReference160,
																																		expr: &litMatcher{
																																			pos:        position{line: 473, col: 8, offset: 15760},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 458, col: 79, offset: 15136},
																														val:        ">>",
																														ignoreCase: false,
																														want:       "\">>\"",
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 460, col: 9, offset: 15209},
																											run: (*parser).callonExternalCrossReference163,
																											expr: &seqExpr{
																												pos: position{line: 460, col: 9, offset: 15209},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 460, col: 9, offset: 15209},
																														val:        "<<",
																														ignoreCase: false,
																														want:       "\"<<\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 460, col: 14, offset: 15214},
																														label: "id",
																														expr: &actionExpr{
																															pos: position{line: 2848, col: 7, offset: 94521},
																															run: (*parser).callonExternalCrossReference167,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 2848, col: 7, offset: 94521},
																																expr: &charClassMatcher{
																																	pos:        position{line: 2848, col: 7, offset: 94521},
																																	val:        "[^[]<>,]",
																																	chars:      []rune{'[', ']', '<', '>', ','},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 460, col: 22, offset: 15222},
																														val:        ">>",
																														ignoreCase: false,
																														want:       "\">>\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2584, col: 11, offset: 86279},
																								run: (*parser).callonExternalCrossReference171,
																								expr: &charClassMatcher{
																									pos:        position{line: 2584, col: 12, offset: 86280},
																									val:        "[<>&]",
																									chars:      []rune{'<', '>', '&'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2840, col: 7, offset: 94305},
																		run: (*parser).callonExternalCrossReference173,
																		expr: &litMatcher{
																			pos:        position{line: 2840, col: 7, offset: 94305},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 914, col: 23, offset: 28983},
													run: (*parser).callonExternalCrossReference175,
													expr: &seqExpr{
														pos: position{line: 914, col: 23, offset: 28983},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 912, col: 32, offset: 28951},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
															&labeledExpr{
																pos:   position{line: 914, col: 51, offset: 29011},
																label: "ref",
																expr: &actionExpr{
																	pos: position{line: 914, col: 56, offset: 29016},
																	run: (*parser).callonExternalCrossReference179,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 914, col: 56, offset: 29016},
																		expr: &charClassMatcher{
																			pos:        position{line: 914, col: 56, offset: 29016},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 912, col: 32, offset: 28951},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 464, col: 54, offset: 15346},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 464, col: 72, offset: 15364},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 482, col: 1, offset: 16035},
			expr: &choiceExpr{
				pos: position{line: 483, col: 5, offset: 16057},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 536, col: 5, offset: 17285},
						run: (*parser).callonDelimitedBlock2,
						expr: &seqExpr{
							pos: position{line: 536, col: 5, offset: 17285},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 536, col: 5, offset: 17285},
									run: (*parser).callonDelimitedBlock4,
								},
								&litMatcher{
									pos:        position{line: 508, col: 26, offset: 16623},
									val:        "////",
									ignoreCase: false,
									want:       "\"////\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 508, col: 33, offset: 16630},
									expr: &actionExpr{
										pos: position{line: 2860, col: 10, offset: 94799},
										run: (*parser).callonDelimitedBlock7,
										expr: &charClassMatcher{
											pos:        position{line: 2860, col: 11, offset: 94800},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&choiceExpr{
									pos: position{line: 2877, col: 8, offset: 95162},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2870, col: 12, offset: 95022},
											run: (*parser).callonDelimitedBlock10,
											expr: &choiceExpr{
												pos: position{line: 2870, col: 13, offset: 95023},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2870, col: 13, offset: 95023},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2870, col: 20, offset: 95030},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2870, col: 29, offset: 95039},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2874, col: 8, offset: 95112},
											expr: &anyMatcher{
												line: 2874, col: 9, offset: 95113,
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 541, col: 5, offset: 17468},
									run: (*parser).callonDelimitedBlock17,
								},
								&labeledExpr{
									pos:   position{line: 546, col: 5, offset: 17669},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 557, col: 5, offset: 17993},
										expr: &actionExpr{
											pos: position{line: 557, col: 6, offset: 17994},
											run: (*parser).callonDelimitedBlock20,
											expr: &seqExpr{
												pos: position{line: 557, col: 6, offset: 17994},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 557, col: 6, offset: 17994},
														expr: &choiceExpr{
															pos: position{line: 554, col: 29, offset: 17936},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 508, col: 26, offset: 16623},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 508, col: 26, offset: 16623},
																			val:        "////",
																			ignoreCase: false,
																			want:       "\"////\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 508, col: 33, offset: 16630},
																			expr: &actionExpr{
																				pos: position{line: 2860, col: 10, offset: 94799},
																				run: (*parser).callonDelimitedBlock27,
																				expr: &charClassMatcher{
																					pos:        position{line: 2860, col: 11, offset: 94800},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2877, col: 8, offset: 95162},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2870, col: 12, offset: 95022},
																					run: (*parser).callonDelimitedBlock30,
																					expr: &choiceExpr{
																						pos: position{line: 2870, col: 13, offset: 95023},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2870, col: 13, offset: 95023},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 20, offset: 95030},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 29, offset: 95039},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2874, col: 8, offset: 95112},
																					expr: &anyMatcher{
																						line: 2874, col: 9, offset: 95113,
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2874, col: 8, offset: 95112},
																	expr: &anyMatcher{
																		line: 2874, col: 9, offset: 95113,
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 558, col: 5, offset: 18024},
														label: "line",
														expr: &actionExpr{
															pos: position{line: 525, col: 5, offset: 16980},
															run: (*parser).callonDelimitedBlock40,
															expr: &seqExpr{
																pos: position{line: 525, col: 5, offset: 16980},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 525, col: 5, offset: 16980},
																		expr: &notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 526, col: 5, offset: 17053},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 526, col: 14, offset: 17062},
																			run: (*parser).callonDelimitedBlock46,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 526, col: 14, offset: 17062},
																				expr: &charClassMatcher{
																					pos:        position{line: 526, col: 14, offset: 17062},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2877, col: 8, offset: 95162},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2870, col: 12, offset: 95022},
																				run: (*parser).callonDelimitedBlock50,
																				expr: &choiceExpr{
																					pos: position{line: 2870, col: 13, offset: 95023},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2870, col: 13, offset: 95023},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2870, col: 20, offset: 95030},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2870, col: 29, offset: 95039},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2874, col: 8, offset: 95112},
																				expr: &anyMatcher{
																					line: 2874, col: 9, offset: 95113,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 547, col: 5, offset: 17703},
									expr: &choiceExpr{
										pos: position{line: 554, col: 29, offset: 17936},
										alternatives: []interface{}{
											&seqExpr{
												pos: position{line: 508, col: 26, offset: 16623},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 508, col: 26, offset: 16623},
														val:        "////",
														ignoreCase: false,
														want:       "\"////\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 508, col: 33, offset: 16630},
														expr: &actionExpr{
															pos: position{line: 2860, col: 10, offset: 94799},
															run: (*parser).callonDelimitedBlock62,
															expr: &charClassMatcher{
																pos:        position{line: 2860, col: 11, offset: 94800},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2877, col: 8, offset: 95162},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2870, col: 12, offset: 95022},
																run: (*parser).callonDelimitedBlock65,
																expr: &choiceExpr{
																	pos: position{line: 2870, col: 13, offset: 95023},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2870, col: 13, offset: 95023},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 20, offset: 95030},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 29, offset: 95039},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2874, col: 8, offset: 95112},
																expr: &anyMatcher{
																	line: 2874, col: 9, offset: 95113,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2874, col: 8, offset: 95112},
												expr: &anyMatcher{
													line: 2874, col: 9, offset: 95113,
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 484, col: 7, offset: 16076},
						name: "ExampleBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 485, col: 7, offset: 16095},
						name: "FencedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 486, col: 7, offset: 16113},
						name: "ListingBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 487, col: 7, offset: 16132},
						name: "LiteralBlock",
					},
					&actionExpr{
						pos: position{line: 686, col: 5, offset: 21815},
						run: (*parser).callonDelimitedBlock78,
						expr: &seqExpr{
							pos: position{line: 686, col: 5, offset: 21815},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 686, col: 5, offset: 21815},
									label: "firstLine",
									expr: &actionExpr{
										pos: position{line: 693, col: 5, offset: 22074},
										run: (*parser).callonDelimitedBlock81,
										expr: &seqExpr{
											pos: position{line: 693, col: 5, offset: 22074},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 693, col: 5, offset: 22074},
													expr: &actionExpr{
														pos: position{line: 449, col: 14, offset: 14731},
														run: (*parser).callonDelimitedBlock84,
														expr: &seqExpr{
															pos: position{line: 449, col: 14, offset: 14731},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 449, col: 14, offset: 14731},
																	expr: &notExpr{
																		pos: position{line: 2874, col: 8, offset: 95112},
																		expr: &anyMatcher{
																			line: 2874, col: 9, offset: 95113,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 449, col: 19, offset: 14736},
																	expr: &actionExpr{
																		pos: position{line: 2860, col: 10, offset: 94799},
																		run: (*parser).callonDelimitedBlock90,
																		expr: &charClassMatcher{
																			pos:        position{line: 2860, col: 11, offset: 94800},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2877, col: 8, offset: 95162},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonDelimitedBlock93,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 694, col: 5, offset: 22089},
													val:        "> ",
													ignoreCase: false,
													want:       "\"> \"",
												},
												&labeledExpr{
													pos:   position{line: 695, col: 5, offset: 22099},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 695, col: 14, offset: 22108},
														run: (*parser).callonDelimitedBlock102,
														expr: &oneOrMoreExpr{
															pos: position{line: 695, col: 15, offset: 22109},
															expr: &charClassMatcher{
																pos:        position{line: 695, col: 15, offset: 22109},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonDelimitedBlock106,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 687, col: 5, offset: 21852},
									label: "otherLines",
									expr: &zeroOrMoreExpr{
										pos: position{line: 687, col: 16, offset: 21863},
										expr: &choiceExpr{
											pos: position{line: 687, col: 17, offset: 21864},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 693, col: 5, offset: 22074},
													run: (*parser).callonDelimitedBlock116,
													expr: &seqExpr{
														pos: position{line: 693, col: 5, offset: 22074},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 693, col: 5, offset: 22074},
																expr: &actionExpr{
																	pos: position{line: 449, col: 14, offset: 14731},
																	run: (*parser).callonDelimitedBlock119,
																	expr: &seqExpr{
																		pos: position{line: 449, col: 14, offset: 14731},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 449, col: 14, offset: 14731},
																				expr: &notExpr{
																					pos: position{line: 2874, col: 8, offset: 95112},
																					expr: &anyMatcher{
																						line: 2874, col: 9, offset: 95113,
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 449, col: 19, offset: 14736},
																				expr: &actionExpr{
																					pos: position{line: 2860, col: 10, offset: 94799},
																					run: (*parser).callonDelimitedBlock125,
																					expr: &charClassMatcher{
																						pos:        position{line: 2860, col: 11, offset: 94800},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2877, col: 8, offset: 95162},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2870, col: 12, offset: 95022},
																						run: (*parser).callonDelimitedBlock128,
																						expr: &choiceExpr{
																							pos: position{line: 2870, col: 13, offset: 95023},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2870, col: 13, offset: 95023},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2870, col: 20, offset: 95030},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2870, col: 29, offset: 95039},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2874, col: 8, offset: 95112},
																						expr: &anyMatcher{
																							line: 2874, col: 9, offset: 95113,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 694, col: 5, offset: 22089},
																val:        "> ",
																ignoreCase: false,
																want:       "\"> \"",
															},
															&labeledExpr{
																pos:   position{line: 695, col: 5, offset: 22099},
																label: "content",
																expr: &actionExpr{
																	pos: position{line: 695, col: 14, offset: 22108},
																	run: (*parser).callonDelimitedBlock137,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 695, col: 15, offset: 22109},
																		expr: &charClassMatcher{
																			pos:        position{line: 695, col: 15, offset: 22109},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2877, col: 8, offset: 95162},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2870, col: 12, offset: 95022},
																		run: (*parser).callonDelimitedBlock141,
																		expr: &choiceExpr{
																			pos: position{line: 2870, col: 13, offset: 95023},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2870, col: 13, offset: 95023},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2870, col: 20, offset: 95030},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2870, col: 29, offset: 95039},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2874, col: 8, offset: 95112},
																		expr: &anyMatcher{
																			line: 2874, col: 9, offset: 95113,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1588, col: 5, offset: 52955},
													run: (*parser).callonDelimitedBlock148,
													expr: &seqExpr{
														pos: position{line: 1588, col: 5, offset: 52955},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 1588, col: 5, offset: 52955},
																label: "content",
																expr: &actionExpr{
																	pos: position{line: 1588, col: 14, offset: 52964},
																	run: (*parser).callonDelimitedBlock151,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1588, col: 14, offset: 52964},
																		expr: &charClassMatcher{
																			pos:        position{line: 1588, col: 14, offset: 52964},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
															},
															&andCodeExpr{
																pos: position{line: 1591, col: 5, offset: 53021},
																run: (*parser).callonDelimitedBlock154,
															},
															&choiceExpr{
																pos: position{line: 2877, col: 8, offset: 95162},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2870, col: 12, offset: 95022},
																		run: (*parser).callonDelimitedBlock156,
																		expr: &choiceExpr{
																			pos: position{line: 2870, col: 13, offset: 95023},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2870, col: 13, offset: 95023},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2870, col: 20, offset: 95030},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2870, col: 29, offset: 95039},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2874, col: 8, offset: 95112},
																		expr: &anyMatcher{
																			line: 2874, col: 9, offset: 95113,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 489, col: 7, offset: 16176},
						name: "PassthroughBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 490, col: 7, offset: 16199},
						name: "QuoteBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 491, col: 7, offset: 16216},
						name: "SidebarBlock",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 565, col: 1, offset: 18157},
			expr: &actionExpr{
				pos: position{line: 566, col: 5, offset: 18177},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 566, col: 5, offset: 18177},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 566, col: 5, offset: 18177},
							run: (*parser).callonExampleBlock3,
						},
						&litMatcher{
							pos:        position{line: 510, col: 26, offset: 16667},
							val:        "====",
							ignoreCase: false,
							want:       "\"====\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 510, col: 33, offset: 16674},
							expr: &actionExpr{
								pos: position{line: 2860, col: 10, offset: 94799},
								run: (*parser).callonExampleBlock6,
								expr: &charClassMatcher{
									pos:        position{line: 2860, col: 11, offset: 94800},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2877, col: 8, offset: 95162},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2870, col: 12, offset: 95022},
									run: (*parser).callonExampleBlock9,
									expr: &choiceExpr{
										pos: position{line: 2870, col: 13, offset: 95023},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2870, col: 13, offset: 95023},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 20, offset: 95030},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 29, offset: 95039},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2874, col: 8, offset: 95112},
									expr: &anyMatcher{
										line: 2874, col: 9, offset: 95113,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 571, col: 5, offset: 18360},
							run: (*parser).callonExampleBlock16,
						},
						&labeledExpr{
							pos:   position{line: 576, col: 5, offset: 18561},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 576, col: 14, offset: 18570},
								name: "ExampleBlockContent",
							},
						},
						&choiceExpr{
							pos: position{line: 584, col: 29, offset: 18827},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 510, col: 26, offset: 16667},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 510, col: 26, offset: 16667},
											val:        "====",
											ignoreCase: false,
											want:       "\"====\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 510, col: 33, offset: 16674},
											expr: &actionExpr{
												pos: position{line: 2860, col: 10, offset: 94799},
												run: (*parser).callonExampleBlock23,
												expr: &charClassMatcher{
													pos:        position{line: 2860, col: 11, offset: 94800},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2877, col: 8, offset: 95162},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2870, col: 12, offset: 95022},
													run: (*parser).callonExampleBlock26,
													expr: &choiceExpr{
														pos: position{line: 2870, col: 13, offset: 95023},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2870, col: 13, offset: 95023},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 20, offset: 95030},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 29, offset: 95039},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2874, col: 8, offset: 95112},
													expr: &anyMatcher{
														line: 2874, col: 9, offset: 95113,
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2874, col: 8, offset: 95112},
									expr: &anyMatcher{
										line: 2874, col: 9, offset: 95113,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockContent",
			pos:  position{line: 586, col: 1, offset: 18856},
			expr: &zeroOrMoreExpr{
				pos: position{line: 587, col: 4, offset: 18883},
				expr: &actionExpr{
					pos: position{line: 587, col: 5, offset: 18884},
					run: (*parser).callonExampleBlockContent2,
					expr: &seqExpr{
						pos: position{line: 587, col: 5, offset: 18884},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 587, col: 5, offset: 18884},
								expr: &choiceExpr{
									pos: position{line: 584, col: 29, offset: 18827},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 510, col: 26, offset: 16667},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 510, col: 26, offset: 16667},
													val:        "====",
													ignoreCase: false,
													want:       "\"====\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 510, col: 33, offset: 16674},
													expr: &actionExpr{
														pos: position{line: 2860, col: 10, offset: 94799},
														run: (*parser).callonExampleBlockContent9,
														expr: &charClassMatcher{
															pos:        position{line: 2860, col: 11, offset: 94800},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonExampleBlockContent12,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2874, col: 8, offset: 95112},
											expr: &anyMatcher{
												line: 2874, col: 9, offset: 95113,
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 588, col: 5, offset: 18914},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 588, col: 11, offset: 18920},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 588, col: 11, offset: 18920},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 525, col: 5, offset: 16980},
											run: (*parser).callonExampleBlockContent24,
											expr: &seqExpr{
												pos: position{line: 525, col: 5, offset: 16980},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 525, col: 5, offset: 16980},
														expr: &notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 526, col: 5, offset: 17053},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 526, col: 14, offset: 17062},
															run: (*parser).callonExampleBlockContent30,
															expr: &zeroOrMoreExpr{
																pos: position{line: 526, col: 14, offset: 17062},
																expr: &charClassMatcher{
																	pos:        position{line: 526, col: 14, offset: 17062},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2877, col: 8, offset: 95162},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2870, col: 12, offset: 95022},
																run: (*parser).callonExampleBlockContent34,
																expr: &choiceExpr{
																	pos: position{line: 2870, col: 13, offset: 95023},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2870, col: 13, offset: 95023},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 20, offset: 95030},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 29, offset: 95039},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2874, col: 8, offset: 95112},
																expr: &anyMatcher{
																	line: 2874, col: 9, offset: 95113,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 595, col: 1, offset: 19062},
			expr: &actionExpr{
				pos: position{line: 596, col: 5, offset: 19081},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 596, col: 5, offset: 19081},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 596, col: 5, offset: 19081},
							run: (*parser).callonFencedBlock3,
						},
						&litMatcher{
							pos:        position{line: 512, col: 25, offset: 16710},
							val:        "```",
							ignoreCase: false,
							want:       "\"```\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 512, col: 31, offset: 16716},
							expr: &actionExpr{
								pos: position{line: 2860, col: 10, offset: 94799},
								run: (*parser).callonFencedBlock6,
								expr: &charClassMatcher{
									pos:        position{line: 2860, col: 11, offset: 94800},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2877, col: 8, offset: 95162},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2870, col: 12, offset: 95022},
									run: (*parser).callonFencedBlock9,
									expr: &choiceExpr{
										pos: position{line: 2870, col: 13, offset: 95023},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2870, col: 13, offset: 95023},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 20, offset: 95030},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 29, offset: 95039},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2874, col: 8, offset: 95112},
									expr: &anyMatcher{
										line: 2874, col: 9, offset: 95113,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 601, col: 5, offset: 19262},
							run: (*parser).callonFencedBlock16,
						},
						&labeledExpr{
							pos:   position{line: 606, col: 5, offset: 19462},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 14, offset: 19471},
								name: "FencedBlockContent",
							},
						},
						&choiceExpr{
							pos: position{line: 614, col: 28, offset: 19727},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 512, col: 25, offset: 16710},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 512, col: 25, offset: 16710},
											val:        "```",
											ignoreCase: false,
											want:       "\"```\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 512, col: 31, offset: 16716},
											expr: &actionExpr{
												pos: position{line: 2860, col: 10, offset: 94799},
												run: (*parser).callonFencedBlock23,
												expr: &charClassMatcher{
													pos:        position{line: 2860, col: 11, offset: 94800},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2877, col: 8, offset: 95162},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2870, col: 12, offset: 95022},
													run: (*parser).callonFencedBlock26,
													expr: &choiceExpr{
														pos: position{line: 2870, col: 13, offset: 95023},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2870, col: 13, offset: 95023},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 20, offset: 95030},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 29, offset: 95039},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2874, col: 8, offset: 95112},
													expr: &anyMatcher{
														line: 2874, col: 9, offset: 95113,
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2874, col: 8, offset: 95112},
									expr: &anyMatcher{
										line: 2874, col: 9, offset: 95113,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 616, col: 1, offset: 19755},
			expr: &zeroOrMoreExpr{
				pos: position{line: 617, col: 5, offset: 19782},
				expr: &actionExpr{
					pos: position{line: 617, col: 6, offset: 19783},
					run: (*parser).callonFencedBlockContent2,
					expr: &seqExpr{
						pos: position{line: 617, col: 6, offset: 19783},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 617, col: 6, offset: 19783},
								expr: &choiceExpr{
									pos: position{line: 614, col: 28, offset: 19727},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 512, col: 25, offset: 16710},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 512, col: 25, offset: 16710},
													val:        "```",
													ignoreCase: false,
													want:       "\"```\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 512, col: 31, offset: 16716},
													expr: &actionExpr{
														pos: position{line: 2860, col: 10, offset: 94799},
														run: (*parser).callonFencedBlockContent9,
														expr: &charClassMatcher{
															pos:        position{line: 2860, col: 11, offset: 94800},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonFencedBlockContent12,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2874, col: 8, offset: 95112},
											expr: &anyMatcher{
												line: 2874, col: 9, offset: 95113,
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 618, col: 5, offset: 19812},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 618, col: 11, offset: 19818},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 618, col: 11, offset: 19818},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 525, col: 5, offset: 16980},
											run: (*parser).callonFencedBlockContent24,
											expr: &seqExpr{
												pos: position{line: 525, col: 5, offset: 16980},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 525, col: 5, offset: 16980},
														expr: &notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 526, col: 5, offset: 17053},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 526, col: 14, offset: 17062},
															run: (*parser).callonFencedBlockContent30,
															expr: &zeroOrMoreExpr{
																pos: position{line: 526, col: 14, offset: 17062},
																expr: &charClassMatcher{
																	pos:        position{line: 526, col: 14, offset: 17062},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2877, col: 8, offset: 95162},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2870, col: 12, offset: 95022},
																run: (*parser).callonFencedBlockContent34,
																expr: &choiceExpr{
																	pos: position{line: 2870, col: 13, offset: 95023},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2870, col: 13, offset: 95023},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 20, offset: 95030},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 29, offset: 95039},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2874, col: 8, offset: 95112},
																expr: &anyMatcher{
																	line: 2874, col: 9, offset: 95113,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 625, col: 1, offset: 19961},
			expr: &actionExpr{
				pos: position{line: 626, col: 5, offset: 19981},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 626, col: 5, offset: 19981},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 626, col: 5, offset: 19981},
							run: (*parser).callonListingBlock3,
						},
						&litMatcher{
							pos:        position{line: 514, col: 26, offset: 16753},
							val:        "----",
							ignoreCase: false,
							want:       "\"----\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 514, col: 33, offset: 16760},
							expr: &actionExpr{
								pos: position{line: 2860, col: 10, offset: 94799},
								run: (*parser).callonListingBlock6,
								expr: &charClassMatcher{
									pos:        position{line: 2860, col: 11, offset: 94800},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2877, col: 8, offset: 95162},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2870, col: 12, offset: 95022},
									run: (*parser).callonListingBlock9,
									expr: &choiceExpr{
										pos: position{line: 2870, col: 13, offset: 95023},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2870, col: 13, offset: 95023},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 20, offset: 95030},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 29, offset: 95039},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2874, col: 8, offset: 95112},
									expr: &anyMatcher{
										line: 2874, col: 9, offset: 95113,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 631, col: 5, offset: 20164},
							run: (*parser).callonListingBlock16,
						},
						&labeledExpr{
							pos:   position{line: 636, col: 5, offset: 20365},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 14, offset: 20374},
								name: "ListingBlockContent",
							},
						},
						&choiceExpr{
							pos: position{line: 644, col: 29, offset: 20636},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 514, col: 26, offset: 16753},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 514, col: 26, offset: 16753},
											val:        "----",
											ignoreCase: false,
											want:       "\"----\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 514, col: 33, offset: 16760},
											expr: &actionExpr{
												pos: position{line: 2860, col: 10, offset: 94799},
												run: (*parser).callonListingBlock23,
												expr: &charClassMatcher{
													pos:        position{line: 2860, col: 11, offset: 94800},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2877, col: 8, offset: 95162},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2870, col: 12, offset: 95022},
													run: (*parser).callonListingBlock26,
													expr: &choiceExpr{
														pos: position{line: 2870, col: 13, offset: 95023},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2870, col: 13, offset: 95023},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 20, offset: 95030},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 29, offset: 95039},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2874, col: 8, offset: 95112},
													expr: &anyMatcher{
														line: 2874, col: 9, offset: 95113,
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2874, col: 8, offset: 95112},
									expr: &anyMatcher{
										line: 2874, col: 9, offset: 95113,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockContent",
			pos:  position{line: 646, col: 1, offset: 20665},
			expr: &zeroOrMoreExpr{
				pos: position{line: 647, col: 5, offset: 20693},
				expr: &actionExpr{
					pos: position{line: 647, col: 6, offset: 20694},
					run: (*parser).callonListingBlockContent2,
					expr: &seqExpr{
						pos: position{line: 647, col: 6, offset: 20694},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 647, col: 6, offset: 20694},
								expr: &choiceExpr{
									pos: position{line: 644, col: 29, offset: 20636},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 514, col: 26, offset: 16753},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 514, col: 26, offset: 16753},
													val:        "----",
													ignoreCase: false,
													want:       "\"----\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 514, col: 33, offset: 16760},
													expr: &actionExpr{
														pos: position{line: 2860, col: 10, offset: 94799},
														run: (*parser).callonListingBlockContent9,
														expr: &charClassMatcher{
															pos:        position{line: 2860, col: 11, offset: 94800},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonListingBlockContent12,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2874, col: 8, offset: 95112},
											expr: &anyMatcher{
												line: 2874, col: 9, offset: 95113,
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 648, col: 5, offset: 20724},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 648, col: 11, offset: 20730},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 648, col: 11, offset: 20730},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 525, col: 5, offset: 16980},
											run: (*parser).callonListingBlockContent24,
											expr: &seqExpr{
												pos: position{line: 525, col: 5, offset: 16980},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 525, col: 5, offset: 16980},
														expr: &notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 526, col: 5, offset: 17053},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 526, col: 14, offset: 17062},
															run: (*parser).callonListingBlockContent30,
															expr: &zeroOrMoreExpr{
																pos: position{line: 526, col: 14, offset: 17062},
																expr: &charClassMatcher{
																	pos:        position{line: 526, col: 14, offset: 17062},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2877, col: 8, offset: 95162},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2870, col: 12, offset: 95022},
																run: (*parser).callonListingBlockContent34,
																expr: &choiceExpr{
																	pos: position{line: 2870, col: 13, offset: 95023},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2870, col: 13, offset: 95023},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 20, offset: 95030},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 29, offset: 95039},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2874, col: 8, offset: 95112},
																expr: &anyMatcher{
																	line: 2874, col: 9, offset: 95113,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 655, col: 1, offset: 20873},
			expr: &actionExpr{
				pos: position{line: 656, col: 5, offset: 20893},
				run: (*parser).callonLiteralBlock1,
				expr: &seqExpr{
					pos: position{line: 656, col: 5, offset: 20893},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 516, col: 26, offset: 16797},
							val:        "....",
							ignoreCase: false,
							want:       "\"....\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 516, col: 33, offset: 16804},
							expr: &actionExpr{
								pos: position{line: 2860, col: 10, offset: 94799},
								run: (*parser).callonLiteralBlock5,
								expr: &charClassMatcher{
									pos:        position{line: 2860, col: 11, offset: 94800},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2877, col: 8, offset: 95162},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2870, col: 12, offset: 95022},
									run: (*parser).callonLiteralBlock8,
									expr: &choiceExpr{
										pos: position{line: 2870, col: 13, offset: 95023},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2870, col: 13, offset: 95023},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 20, offset: 95030},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 29, offset: 95039},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2874, col: 8, offset: 95112},
									expr: &anyMatcher{
										line: 2874, col: 9, offset: 95113,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 657, col: 5, offset: 20924},
							run: (*parser).callonLiteralBlock15,
						},
						&labeledExpr{
							pos:   position{line: 661, col: 5, offset: 21076},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 14, offset: 21085},
								name: "LiteralBlockContent",
							},
						},
						&andCodeExpr{
							pos: position{line: 662, col: 5, offset: 21110},
							run: (*parser).callonLiteralBlock18,
						},
						&zeroOrOneExpr{
							pos: position{line: 667, col: 5, offset: 21311},
							expr: &choiceExpr{
								pos: position{line: 674, col: 29, offset: 21544},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 516, col: 26, offset: 16797},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 516, col: 26, offset: 16797},
												val:        "....",
												ignoreCase: false,
												want:       "\"....\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 516, col: 33, offset: 16804},
												expr: &actionExpr{
													pos: position{line: 2860, col: 10, offset: 94799},
													run: (*parser).callonLiteralBlock24,
													expr: &charClassMatcher{
														pos:        position{line: 2860, col: 11, offset: 94800},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2877, col: 8, offset: 95162},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2870, col: 12, offset: 95022},
														run: (*parser).callonLiteralBlock27,
														expr: &choiceExpr{
															pos: position{line: 2870, col: 13, offset: 95023},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2870, col: 13, offset: 95023},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2870, col: 20, offset: 95030},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2870, col: 29, offset: 95039},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2874, col: 8, offset: 95112},
														expr: &anyMatcher{
															line: 2874, col: 9, offset: 95113,
														},
													},
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 2874, col: 8, offset: 95112},
										expr: &anyMatcher{
											line: 2874, col: 9, offset: 95113,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockContent",
			pos:  position{line: 676, col: 1, offset: 21573},
			expr: &zeroOrMoreExpr{
				pos: position{line: 677, col: 5, offset: 21601},
				expr: &actionExpr{
					pos: position{line: 677, col: 6, offset: 21602},
					run: (*parser).callonLiteralBlockContent2,
					expr: &seqExpr{
						pos: position{line: 677, col: 6, offset: 21602},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 677, col: 6, offset: 21602},
								expr: &choiceExpr{
									pos: position{line: 674, col: 29, offset: 21544},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 516, col: 26, offset: 16797},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 516, col: 26, offset: 16797},
													val:        "....",
													ignoreCase: false,
													want:       "\"....\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 516, col: 33, offset: 16804},
													expr: &actionExpr{
														pos: position{line: 2860, col: 10, offset: 94799},
														run: (*parser).callonLiteralBlockContent9,
														expr: &charClassMatcher{
															pos:        position{line: 2860, col: 11, offset: 94800},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonLiteralBlockContent12,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2874, col: 8, offset: 95112},
											expr: &anyMatcher{
												line: 2874, col: 9, offset: 95113,
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 678, col: 5, offset: 21632},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 678, col: 11, offset: 21638},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 678, col: 11, offset: 21638},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 525, col: 5, offset: 16980},
											run: (*parser).callonLiteralBlockContent24,
											expr: &seqExpr{
												pos: position{line: 525, col: 5, offset: 16980},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 525, col: 5, offset: 16980},
														expr: &notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 526, col: 5, offset: 17053},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 526, col: 14, offset: 17062},
															run: (*parser).callonLiteralBlockContent30,
															expr: &zeroOrMoreExpr{
																pos: position{line: 526, col: 14, offset: 17062},
																expr: &charClassMatcher{
																	pos:        position{line: 526, col: 14, offset: 17062},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2877, col: 8, offset: 95162},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2870, col: 12, offset: 95022},
																run: (*parser).callonLiteralBlockContent34,
																expr: &choiceExpr{
																	pos: position{line: 2870, col: 13, offset: 95023},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2870, col: 13, offset: 95023},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 20, offset: 95030},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 29, offset: 95039},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2874, col: 8, offset: 95112},
																expr: &anyMatcher{
																	line: 2874, col: 9, offset: 95113,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 701, col: 1, offset: 22227},
			expr: &actionExpr{
				pos: position{line: 702, col: 5, offset: 22260},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 702, col: 5, offset: 22260},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 702, col: 5, offset: 22260},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 702, col: 11, offset: 22266},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 702, col: 19, offset: 22274},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 702, col: 20, offset: 22275},
									expr: &charClassMatcher{
										pos:        position{line: 702, col: 20, offset: 22275},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2877, col: 8, offset: 95162},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2870, col: 12, offset: 95022},
									run: (*parser).callonMarkdownQuoteAttribution9,
									expr: &choiceExpr{
										pos: position{line: 2870, col: 13, offset: 95023},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2870, col: 13, offset: 95023},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 20, offset: 95030},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 29, offset: 95039},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2874, col: 8, offset: 95112},
									expr: &anyMatcher{
										line: 2874, col: 9, offset: 95113,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 711, col: 1, offset: 22443},
			expr: &actionExpr{
				pos: position{line: 712, col: 5, offset: 22467},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 712, col: 5, offset: 22467},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 712, col: 5, offset: 22467},
							run: (*parser).callonPassthroughBlock3,
						},
						&litMatcher{
							pos:        position{line: 518, col: 30, offset: 16845},
							val:        "++++",
							ignoreCase: false,
							want:       "\"++++\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 518, col: 37, offset: 16852},
							expr: &actionExpr{
								pos: position{line: 2860, col: 10, offset: 94799},
								run: (*parser).callonPassthroughBlock6,
								expr: &charClassMatcher{
									pos:        position{line: 2860, col: 11, offset: 94800},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2877, col: 8, offset: 95162},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2870, col: 12, offset: 95022},
									run: (*parser).callonPassthroughBlock9,
									expr: &choiceExpr{
										pos: position{line: 2870, col: 13, offset: 95023},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2870, col: 13, offset: 95023},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 20, offset: 95030},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 29, offset: 95039},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2874, col: 8, offset: 95112},
									expr: &anyMatcher{
										line: 2874, col: 9, offset: 95113,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 717, col: 5, offset: 22658},
							run: (*parser).callonPassthroughBlock16,
						},
						&labeledExpr{
							pos:   position{line: 722, col: 5, offset: 22863},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 722, col: 14, offset: 22872},
								name: "PassthroughBlockContent",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 723, col: 5, offset: 22901},
							expr: &choiceExpr{
								pos: position{line: 730, col: 33, offset: 23154},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 518, col: 30, offset: 16845},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 518, col: 30, offset: 16845},
												val:        "++++",
												ignoreCase: false,
												want:       "\"++++\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 518, col: 37, offset: 16852},
												expr: &actionExpr{
													pos: position{line: 2860, col: 10, offset: 94799},
													run: (*parser).callonPassthroughBlock24,
													expr: &charClassMatcher{
														pos:        position{line: 2860, col: 11, offset: 94800},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2877, col: 8, offset: 95162},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2870, col: 12, offset: 95022},
														run: (*parser).callonPassthroughBlock27,
														expr: &choiceExpr{
															pos: position{line: 2870, col: 13, offset: 95023},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2870, col: 13, offset: 95023},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2870, col: 20, offset: 95030},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2870, col: 29, offset: 95039},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2874, col: 8, offset: 95112},
														expr: &anyMatcher{
															line: 2874, col: 9, offset: 95113,
														},
													},
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 2874, col: 8, offset: 95112},
										expr: &anyMatcher{
											line: 2874, col: 9, offset: 95113,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockContent",
			pos:  position{line: 732, col: 1, offset: 23187},
			expr: &zeroOrMoreExpr{
				pos: position{line: 733, col: 5, offset: 23219},
				expr: &actionExpr{
					pos: position{line: 733, col: 6, offset: 23220},
					run: (*parser).callonPassthroughBlockContent2,
					expr: &seqExpr{
						pos: position{line: 733, col: 6, offset: 23220},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 733, col: 6, offset: 23220},
								expr: &choiceExpr{
									pos: position{line: 730, col: 33, offset: 23154},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 518, col: 30, offset: 16845},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 518, col: 30, offset: 16845},
													val:        "++++",
													ignoreCase: false,
													want:       "\"++++\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 518, col: 37, offset: 16852},
													expr: &actionExpr{
														pos: position{line: 2860, col: 10, offset: 94799},
														run: (*parser).callonPassthroughBlockContent9,
														expr: &charClassMatcher{
															pos:        position{line: 2860, col: 11, offset: 94800},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonPassthroughBlockContent12,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2874, col: 8, offset: 95112},
											expr: &anyMatcher{
												line: 2874, col: 9, offset: 95113,
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 734, col: 5, offset: 23254},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 734, col: 11, offset: 23260},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 734, col: 11, offset: 23260},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 525, col: 5, offset: 16980},
											run: (*parser).callonPassthroughBlockContent24,
											expr: &seqExpr{
												pos: position{line: 525, col: 5, offset: 16980},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 525, col: 5, offset: 16980},
														expr: &notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 526, col: 5, offset: 17053},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 526, col: 14, offset: 17062},
															run: (*parser).callonPassthroughBlockContent30,
															expr: &zeroOrMoreExpr{
																pos: position{line: 526, col: 14, offset: 17062},
																expr: &charClassMatcher{
																	pos:        position{line: 526, col: 14, offset: 17062},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2877, col: 8, offset: 95162},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2870, col: 12, offset: 95022},
																run: (*parser).callonPassthroughBlockContent34,
																expr: &choiceExpr{
																	pos: position{line: 2870, col: 13, offset: 95023},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2870, col: 13, offset: 95023},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 20, offset: 95030},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 29, offset: 95039},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2874, col: 8, offset: 95112},
																expr: &anyMatcher{
																	line: 2874, col: 9, offset: 95113,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 741, col: 1, offset: 23401},
			expr: &actionExpr{
				pos: position{line: 742, col: 5, offset: 23419},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 742, col: 5, offset: 23419},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 742, col: 5, offset: 23419},
							run: (*parser).callonQuoteBlock3,
						},
						&litMatcher{
							pos:        position{line: 520, col: 24, offset: 16887},
							val:        "____",
							ignoreCase: false,
							want:       "\"____\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 520, col: 31, offset: 16894},
							expr: &actionExpr{
								pos: position{line: 2860, col: 10, offset: 94799},
								run: (*parser).callonQuoteBlock6,
								expr: &charClassMatcher{
									pos:        position{line: 2860, col: 11, offset: 94800},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2877, col: 8, offset: 95162},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2870, col: 12, offset: 95022},
									run: (*parser).callonQuoteBlock9,
									expr: &choiceExpr{
										pos: position{line: 2870, col: 13, offset: 95023},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2870, col: 13, offset: 95023},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 20, offset: 95030},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 29, offset: 95039},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2874, col: 8, offset: 95112},
									expr: &anyMatcher{
										line: 2874, col: 9, offset: 95113,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 747, col: 5, offset: 23598},
							run: (*parser).callonQuoteBlock16,
						},
						&labeledExpr{
							pos:   position{line: 752, col: 5, offset: 23797},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 752, col: 14, offset: 23806},
								name: "QuoteBlockContent",
							},
						},
						&choiceExpr{
							pos: position{line: 760, col: 27, offset: 24051},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 520, col: 24, offset: 16887},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 520, col: 24, offset: 16887},
											val:        "____",
											ignoreCase: false,
											want:       "\"____\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 520, col: 31, offset: 16894},
											expr: &actionExpr{
												pos: position{line: 2860, col: 10, offset: 94799},
												run: (*parser).callonQuoteBlock23,
												expr: &charClassMatcher{
													pos:        position{line: 2860, col: 11, offset: 94800},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2877, col: 8, offset: 95162},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2870, col: 12, offset: 95022},
													run: (*parser).callonQuoteBlock26,
													expr: &choiceExpr{
														pos: position{line: 2870, col: 13, offset: 95023},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2870, col: 13, offset: 95023},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 20, offset: 95030},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 29, offset: 95039},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2874, col: 8, offset: 95112},
													expr: &anyMatcher{
														line: 2874, col: 9, offset: 95113,
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2874, col: 8, offset: 95112},
									expr: &anyMatcher{
										line: 2874, col: 9, offset: 95113,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockContent",
			pos:  position{line: 762, col: 1, offset: 24078},
			expr: &zeroOrMoreExpr{
				pos: position{line: 763, col: 4, offset: 24103},
				expr: &actionExpr{
					pos: position{line: 763, col: 5, offset: 24104},
					run: (*parser).callonQuoteBlockContent2,
					expr: &seqExpr{
						pos: position{line: 763, col: 5, offset: 24104},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 763, col: 5, offset: 24104},
								expr: &choiceExpr{
									pos: position{line: 760, col: 27, offset: 24051},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 520, col: 24, offset: 16887},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 520, col: 24, offset: 16887},
													val:        "____",
													ignoreCase: false,
													want:       "\"____\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 520, col: 31, offset: 16894},
													expr: &actionExpr{
														pos: position{line: 2860, col: 10, offset: 94799},
														run: (*parser).callonQuoteBlockContent9,
														expr: &charClassMatcher{
															pos:        position{line: 2860, col: 11, offset: 94800},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonQuoteBlockContent12,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2874, col: 8, offset: 95112},
											expr: &anyMatcher{
												line: 2874, col: 9, offset: 95113,
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 764, col: 5, offset: 24132},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 764, col: 11, offset: 24138},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 764, col: 11, offset: 24138},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 525, col: 5, offset: 16980},
											run: (*parser).callonQuoteBlockContent24,
											expr: &seqExpr{
												pos: position{line: 525, col: 5, offset: 16980},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 525, col: 5, offset: 16980},
														expr: &notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 526, col: 5, offset: 17053},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 526, col: 14, offset: 17062},
															run: (*parser).callonQuoteBlockContent30,
															expr: &zeroOrMoreExpr{
																pos: position{line: 526, col: 14, offset: 17062},
																expr: &charClassMatcher{
																	pos:        position{line: 526, col: 14, offset: 17062},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2877, col: 8, offset: 95162},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2870, col: 12, offset: 95022},
																run: (*parser).callonQuoteBlockContent34,
																expr: &choiceExpr{
																	pos: position{line: 2870, col: 13, offset: 95023},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2870, col: 13, offset: 95023},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 20, offset: 95030},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 29, offset: 95039},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2874, col: 8, offset: 95112},
																expr: &anyMatcher{
																	line: 2874, col: 9, offset: 95113,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 771, col: 1, offset: 24281},
			expr: &actionExpr{
				pos: position{line: 772, col: 5, offset: 24301},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 772, col: 5, offset: 24301},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 772, col: 5, offset: 24301},
							run: (*parser).callonSidebarBlock3,
						},
						&litMatcher{
							pos:        position{line: 522, col: 26, offset: 16931},
							val:        "****",
							ignoreCase: false,
							want:       "\"****\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 522, col: 33, offset: 16938},
							expr: &actionExpr{
								pos: position{line: 2860, col: 10, offset: 94799},
								run: (*parser).callonSidebarBlock6,
								expr: &charClassMatcher{
									pos:        position{line: 2860, col: 11, offset: 94800},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2877, col: 8, offset: 95162},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2870, col: 12, offset: 95022},
									run: (*parser).callonSidebarBlock9,
									expr: &choiceExpr{
										pos: position{line: 2870, col: 13, offset: 95023},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2870, col: 13, offset: 95023},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 20, offset: 95030},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 29, offset: 95039},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2874, col: 8, offset: 95112},
									expr: &anyMatcher{
										line: 2874, col: 9, offset: 95113,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 777, col: 5, offset: 24484},
							run: (*parser).callonSidebarBlock16,
						},
						&labeledExpr{
							pos:   position{line: 782, col: 5, offset: 24685},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 782, col: 14, offset: 24694},
								name: "SidebarBlockContent",
							},
						},
						&choiceExpr{
							pos: position{line: 790, col: 29, offset: 24952},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 522, col: 26, offset: 16931},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 522, col: 26, offset: 16931},
											val:        "****",
											ignoreCase: false,
											want:       "\"****\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 522, col: 33, offset: 16938},
											expr: &actionExpr{
												pos: position{line: 2860, col: 10, offset: 94799},
												run: (*parser).callonSidebarBlock23,
												expr: &charClassMatcher{
													pos:        position{line: 2860, col: 11, offset: 94800},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2877, col: 8, offset: 95162},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2870, col: 12, offset: 95022},
													run: (*parser).callonSidebarBlock26,
													expr: &choiceExpr{
														pos: position{line: 2870, col: 13, offset: 95023},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2870, col: 13, offset: 95023},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 20, offset: 95030},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 29, offset: 95039},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2874, col: 8, offset: 95112},
													expr: &anyMatcher{
														line: 2874, col: 9, offset: 95113,
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2874, col: 8, offset: 95112},
									expr: &anyMatcher{
										line: 2874, col: 9, offset: 95113,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 792, col: 1, offset: 24982},
			expr: &zeroOrMoreExpr{
				pos: position{line: 793, col: 4, offset: 25009},
				expr: &actionExpr{
					pos: position{line: 793, col: 5, offset: 25010},
					run: (*parser).callonSidebarBlockContent2,
					expr: &seqExpr{
						pos: position{line: 793, col: 5, offset: 25010},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 793, col: 5, offset: 25010},
								expr: &choiceExpr{
									pos: position{line: 790, col: 29, offset: 24952},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 522, col: 26, offset: 16931},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 522, col: 26, offset: 16931},
													val:        "****",
													ignoreCase: false,
													want:       "\"****\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 522, col: 33, offset: 16938},
													expr: &actionExpr{
														pos: position{line: 2860, col: 10, offset: 94799},
														run: (*parser).callonSidebarBlockContent9,
														expr: &charClassMatcher{
															pos:        position{line: 2860, col: 11, offset: 94800},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonSidebarBlockContent12,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2874, col: 8, offset: 95112},
											expr: &anyMatcher{
												line: 2874, col: 9, offset: 95113,
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 794, col: 5, offset: 25040},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 794, col: 11, offset: 25046},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 794, col: 11, offset: 25046},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 525, col: 5, offset: 16980},
											run: (*parser).callonSidebarBlockContent24,
											expr: &seqExpr{
												pos: position{line: 525, col: 5, offset: 16980},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 525, col: 5, offset: 16980},
														expr: &notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 526, col: 5, offset: 17053},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 526, col: 14, offset: 17062},
															run: (*parser).callonSidebarBlockContent30,
															expr: &zeroOrMoreExpr{
																pos: position{line: 526, col: 14, offset: 17062},
																expr: &charClassMatcher{
																	pos:        position{line: 526, col: 14, offset: 17062},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2877, col: 8, offset: 95162},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2870, col: 12, offset: 95022},
																run: (*parser).callonSidebarBlockContent34,
																expr: &choiceExpr{
																	pos: position{line: 2870, col: 13, offset: 95023},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2870, col: 13, offset: 95023},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 20, offset: 95030},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 29, offset: 95039},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2874, col: 8, offset: 95112},
																expr: &anyMatcher{
																	line: 2874, col: 9, offset: 95113,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 932, col: 1, offset: 29750},
			expr: &actionExpr{
				pos: position{line: 933, col: 5, offset: 29772},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 933, col: 5, offset: 29772},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 933, col: 5, offset: 29772},
							run: (*parser).callonFileInclusion3,
						},
						&stateCodeExpr{
							pos: position{line: 937, col: 5, offset: 29859},
							run: (*parser).callonFileInclusion4,
						},
						&labeledExpr{
							pos:   position{line: 942, col: 5, offset: 30026},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 943, col: 9, offset: 30041},
								run: (*parser).callonFileInclusion6,
								expr: &seqExpr{
									pos: position{line: 943, col: 9, offset: 30041},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 943, col: 9, offset: 30041},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 944, col: 9, offset: 30062},
											label: "path",
											expr: &actionExpr{
												pos: position{line: 2821, col: 17, offset: 93655},
												run: (*parser).callonFileInclusion10,
												expr: &labeledExpr{
													pos:   position{line: 2821, col: 17, offset: 93655},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 2821, col: 22, offset: 93660},
														expr: &choiceExpr{
															pos: position{line: 2821, col: 23, offset: 93661},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2833, col: 13, offset: 94065},
																	run: (*parser).callonFileInclusion14,
																	expr: &labeledExpr{
																		pos:   position{line: 2833, col: 13, offset: 94065},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2833, col: 22, offset: 94074},
																			expr: &choiceExpr{
																				pos: position{line: 2834, col: 5, offset: 94080},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2834, col: 5, offset: 94080},
																						run: (*parser).callonFileInclusion18,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2834, col: 5, offset: 94080},
																							expr: &charClassMatcher{
																								pos:        position{line: 2834, col: 6, offset: 94081},
																								val:        "[^\\r\\n[]�&<>{ ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '&', '<', '>', '{', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 416, col: 5, offset: 13530},
																						run: (*parser).callonFileInclusion21,
																						expr: &seqExpr{
																							pos: position{line: 416, col: 5, offset: 13530},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 416, col: 5, offset: 13530},
																									run: (*parser).callonFileInclusion23,
																								},
																								&labeledExpr{
																									pos:   position{line: 419, col: 5, offset: 13594},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 419, col: 14, offset: 13603},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 430, col: 25, offset: 14065},
																												run: (*parser).callonFileInclusion26,
																												expr: &seqExpr{
																													pos: position{line: 430, col: 25, offset: 14065},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 430, col: 25, offset: 14065},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 430, col: 37, offset: 14077},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 120, col: 18, offset: 3502},
																																run: (*parser).callonFileInclusion30,
																																expr: &seqExpr{
																																	pos: position{line: 120, col: 18, offset: 3502},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 120, col: 18, offset: 3502},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 120, col: 28, offset: 3512},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 120, col: 29, offset: 3513},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 430, col: 56, offset: 14096},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 430, col: 62, offset: 14102},
																																expr: &actionExpr{
																																	pos: position{line: 438, col: 17, offset: 14365},
																																	run: (*parser).callonFileInclusion37,
																																	expr: &seqExpr{
																																		pos: position{line: 438, col: 17, offset: 14365},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 438, col: 17, offset: 14365},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 438, col: 21, offset: 14369},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 438, col: 28, offset: 14376},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 438, col: 28, offset: 14376},
																																							run: (*parser).callonFileInclusion42,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 438, col: 28, offset: 14376},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 440, col: 9, offset: 14430},
																																							run: (*parser).callonFileInclusion44,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 440, col: 9, offset: 14430},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 440, col: 9, offset: 14430},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 430, col: 78, offset: 14118},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 434, col: 25, offset: 14220},
																												run: (*parser).callonFileInclusion48,
																												expr: &seqExpr{
																													pos: position{line: 434, col: 25, offset: 14220},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 434, col: 25, offset: 14220},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 434, col: 38, offset: 14233},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 120, col: 18, offset: 3502},
																																run: (*parser).callonFileInclusion52,
																																expr: &seqExpr{
																																	pos: position{line: 120, col: 18, offset: 3502},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 120, col: 18, offset: 3502},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 120, col: 28, offset: 3512},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 120, col: 29, offset: 3513},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 434, col: 57, offset: 14252},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 434, col: 63, offset: 14258},
																																expr: &actionExpr{
																																	pos: position{line: 438, col: 17, offset: 14365},
																																	run: (*parser).callonFileInclusion59,
																																	expr: &seqExpr{
																																		pos: position{line: 438, col: 17, offset: 14365},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 438, col: 17, offset: 14365},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 438, col: 21, offset: 14369},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 438, col: 28, offset: 14376},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 438, col: 28, offset: 14376},
																																							run: (*parser).callonFileInclusion64,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 438, col: 28, offset: 14376},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 440, col: 9, offset: 14430},
																																							run: (*parser).callonFileInclusion66,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 440, col: 9, offset: 14430},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 440, col: 9, offset: 14430},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 434, col: 79, offset: 14274},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 423, col: 31, offset: 13720},
																												run: (*parser).callonFileInclusion70,
																												expr: &seqExpr{
																													pos: position{line: 423, col: 31, offset: 13720},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 423, col: 31, offset: 13720},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 423, col: 35, offset: 13724},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 120, col: 18, offset: 3502},
																																run: (*parser).callonFileInclusion74,
																																expr: &seqExpr{
																																	pos: position{line: 120, col: 18, offset: 3502},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 120, col: 18, offset: 3502},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 120, col: 28, offset: 3512},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 120, col: 29, offset: 3513},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 423, col: 54, offset: 13743},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2576, col: 5, offset: 86006},
																						run: (*parser).callonFileInclusion80,
																						expr: &seqExpr{
																							pos: position{line: 2576, col: 5, offset: 86006},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 2576, col: 5, offset: 86006},
																									run: (*parser).callonFileInclusion82,
																								},
																								&labeledExpr{
																									pos:   position{line: 2579, col: 5, offset: 86077},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 2581, col: 9, offset: 86175},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2581, col: 9, offset: 86175},
																												run: (*parser).callonFileInclusion85,
																												expr: &choiceExpr{
																													pos: position{line: 458, col: 27, offset: 15084},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 458, col: 27, offset: 15084},
																															run: (*parser).callonFileInclusion87,
																															expr: &seqExpr{
																																pos: position{line: 458, col: 27, offset: 15084},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 458, col: 27, offset: 15084},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 458, col: 32, offset: 15089},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 2848, col: 7, offset: 94521},
																																			run: (*parser).callonFileInclusion91,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2848, col: 7, offset: 94521},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2848, col: 7, offset: 94521},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 458, col: 40, offset: 15097},
																																		expr: &actionExpr{
																																			pos: position{line: 2860, col: 10, offset: 94799},
																																			run: (*parser).callonFileInclusion95,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2860, col: 11, offset: 94800},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 458, col: 47, offset: 15104},
																																		val:        ",",
																																		ignoreCase: false,
																																		want:       "\",\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 458, col: 51, offset: 15108},
																																		label: "label",
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 468, col: 24, offset: 15521},
																																			expr: &choiceExpr{
																																				pos: position{line: 469, col: 5, offset: 15527},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 469, col: 6, offset: 15528},
																																						run: (*parser).callonFileInclusion101,
																																						expr: &seqExpr{
																																							pos: position{line: 469, col: 6, offset: 15528},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 469, col: 6, offset: 15528},
																																									val:        "[0-9\\pL]",
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&oneOrMoreExpr{
																																									pos: position{line: 469, col: 14, offset: 15536},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 469, col: 14, offset: 15536},
																																										val:        "[^\\r\\n{<>]",
																																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 416, col: 5, offset: 13530},
																																						run: (*parser).callonFileInclusion106,
																																						expr: &seqExpr{
																																							pos: position{line: 416, col: 5, offset: 13530},
																																							exprs: []interface{}{
																																								&andCodeExpr{
																																									pos: position{line: 416, col: 5, offset: 13530},
																																									run: (*parser).callonFileInclusion108,
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 419, col: 5, offset: 13594},
																																									label: "element",
																																									expr: &choiceExpr{
																																										pos: position{line: 419, col: 14, offset: 13603},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 430, col: 25, offset: 14065},
																																												run: (*parser).callonFileInclusion111,
																																												expr: &seqExpr{
																																													pos: position{line: 430, col: 25, offset: 14065},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 430, col: 25, offset: 14065},
																																															val:        "{counter:",
																																															ignoreCase: false,
																																															want:       "\"{counter:\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 430, col: 37, offset: 14077},
																																															label: "name",
																																															expr: &actionExpr{
																																																pos: position{line: 120, col: 18, offset: 3502},
																																																run: (*parser).callonFileInclusion115,
																																																expr: &seqExpr{
																																																	pos: position{line: 120, col: 18, offset: 3502},
																																																	exprs: []interface{}{
																																																		&charClassMatcher{
																																																			pos:        position{line: 120, col: 18, offset: 3502},
																																																			val:        "[_0-9\\pL]",
																																																			chars:      []rune{'_'},
																																																			ranges:     []rune{'0', '9'},
																																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																		&zeroOrMoreExpr{
																																																			pos: position{line: 120, col: 28, offset: 3512},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 120, col: 29, offset: 3513},
																																																				val:        "[-0-9\\pL]",
																																																				chars:      []rune{'-'},
																																																				ranges:     []rune{'0', '9'},
																																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 430, col: 56, offset: 14096},
																																															label: "start",
																																															expr: &zeroOrOneExpr{
																																																pos: position{line: 430, col: 62, offset: 14102},
																																																expr: &actionExpr{
																																																	pos: position{line: 438, col: 17, offset: 14365},
																																																	run: (*parser).callonFileInclusion122,
																																																	expr: &seqExpr{
																																																		pos: position{line: 438, col: 17, offset: 14365},
																																																		exprs: []interface{}{
																																																			&litMatcher{
																																																				pos:        position{line: 438, col: 17, offset: 14365},
																																																				val:        ":",
																																																				ignoreCase: false,
																																																				want:       "\":\"",
																																																			},
																																																			&labeledExpr{
																																																				pos:   position{line: 438, col: 21, offset: 14369},
																																																				label: "start",
																																																				expr: &choiceExpr{
																																																					pos: position{line: 438, col: 28, offset: 14376},
																																																					alternatives: []interface{}{
																																																						&actionExpr{
																																																							pos: position{line: 438, col: 28, offset: 14376},
																																																							run: (*parser).callonFileInclusion127,
																																																							expr: &charClassMatcher{
																																																								pos:        position{line: 438, col: 28, offset: 14376},
																																																								val:        "[A-Za-z]",
																																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																								ignoreCase: false,
																																																								inverted:   false,
																																																							},
																																																						},
																																																						&actionExpr{
																																																							pos: position{line: 440, col: 9, offset: 14430},
																																																							run: (*parser).callonFileInclusion129,
																																																							expr: &oneOrMoreExpr{
																																																								pos: position{line: 440, col: 9, offset: 14430},
																																																								expr: &charClassMatcher{
																																																									pos:        position{line: 440, col: 9, offset: 14430},
																																																									val:        "[0-9]",
																																																									ranges:     []rune{'0', '9'},
																																																									ignoreCase: false,
																																																									inverted:   false,
																																																								},
																																																							},
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&litMatcher{
																																															pos:        position{line: 430, col: 78, offset: 14118},
																																															val:        "}",
																																															ignoreCase: false,
																																															want:       "\"}\"",
																																														},
																																													},
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 434, col: 25, offset: 14220},
																																												run: (*parser).callonFileInclusion133,
																																												expr: &seqExpr{
																																													pos: position{line: 434, col: 25, offset: 14220},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 434, col: 25, offset: 14220},
																																															val:        "{counter2:",
																																															ignoreCase: false,
																																															want:       "\"{counter2:\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 434, col: 38, offset: 14233},
																																															label: "name",
																																															expr: &actionExpr{
																																																pos: position{line: 120, col: 18, offset: 3502},
																																																run: (*parser).callonFileInclusion137,
																																																expr: &seqExpr{
																																																	pos: position{line: 120, col: 18, offset: 3502},
																																																	exprs: []interface{}{
																																																		&charClassMatcher{
																																																			pos:        position{line: 120, col: 18, offset: 3502},
																																																			val:        "[_0-9\\pL]",
																																																			chars:      []rune{'_'},
																																																			ranges:     []rune{'0', '9'},
																																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																		&zeroOrMoreExpr{
																																																			pos: position{line: 120, col: 28, offset: 3512},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 120, col: 29, offset: 3513},
																																																				val:        "[-0-9\\pL]",
																																																				chars:      []rune{'-'},
																																																				ranges:     []rune{'0', '9'},
																																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 434, col: 57, offset: 14252},
																																															label: "start",
																																															expr: &zeroOrOneExpr{
																																																pos: position{line: 434, col: 63, offset: 14258},
																																																expr: &actionExpr{
																																																	pos: position{line: 438, col: 17, offset: 14365},
																																																	run: (*parser).callonFileInclusion144,
																																																	expr: &seqExpr{
																																																		pos: position{line: 438, col: 17, offset: 14365},
																																																		exprs: []interface{}{
																																																			&litMatcher{
																																																				pos:        position{line: 438, col: 17, offset: 14365},
																																																				val:        ":",
																																																				ignoreCase: false,
																																																				want:       "\":\"",
																																																			},
																																																			&labeledExpr{
																																																				pos:   position{line: 438, col: 21, offset: 14369},
																																																				label: "start",
																																																				expr: &choiceExpr{
																																																					pos: position{line: 438, col: 28, offset: 14376},
																																																					alternatives: []interface{}{
																																																						&actionExpr{
																																																							pos: position{line: 438, col: 28, offset: 14376},
																																																							run: (*parser).callonFileInclusion149,
																																																							expr: &charClassMatcher{
																																																								pos:        position{line: 438, col: 28, offset: 14376},
																																																								val:        "[A-Za-z]",
																																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																								ignoreCase: false,
																																																								inverted:   false,
																																																							},
																																																						},
																																																						&actionExpr{
																																																							pos: position{line: 440, col: 9, offset: 14430},
																																																							run: (*parser).callonFileInclusion151,
																																																							expr: &oneOrMoreExpr{
																																																								pos: position{line: 440, col: 9, offset: 14430},
																																																								expr: &charClassMatcher{
																																																									pos:        position{line: 440, col: 9, offset: 14430},
																																																									val:        "[0-9]",
																																																									ranges:     []rune{'0', '9'},
																																																									ignoreCase: false,
																																																									inverted:   false,
																																																								},
																																																							},
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&litMatcher{
																																															pos:        position{line: 434, col: 79, offset: 14274},
																																															val:        "}",
																																															ignoreCase: false,
																																															want:       "\"}\"",
																																														},
																																													},
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 423, col: 31, offset: 13720},
																																												run: (*parser).callonFileInclusion155,
																																												expr: &seqExpr{
																																													pos: position{line: 423, col: 31, offset: 13720},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 423, col: 31, offset: 13720},
																																															val:        "{",
																																															ignoreCase: false,
																																															want:       "\"{\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 423, col: 35, offset: 13724},
																																															label: "name",
																																															expr: &actionExpr{
																																																pos: position{line: 120, col: 18, offset: 3502},
																																																run: (*parser).callonFileInclusion159,
																																																expr: &seqExpr{
																																																	pos: position{line: 120, col: 18, offset: 3502},
																																																	exprs: []interface{}{
																																																		&charClassMatcher{
																																																			pos:        position{line: 120, col: 18, offset: 3502},
																																																			val:        "[_0-9\\pL]",
																																																			chars:      []rune{'_'},
																																																			ranges:     []rune{'0', '9'},
																																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																		&zeroOrMoreExpr{
																																																			pos: position{line: 120, col: 28, offset: 3512},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 120, col: 29, offset: 3513},
																																																				val:        "[-0-9\\pL]",
																																																				chars:      []rune{'-'},
																																																				ranges:     []rune{'0', '9'},
																																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&litMatcher{
																																															pos:        position{line: 423, col: 54, offset: 13743},
																																															val:        "}",
																																															ignoreCase: false,
																																															want:       "\"}\"",
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 473, col: 8, offset: 15760},
																																						run: (*parser).callonFileInclusion165,
																																						expr: &litMatcher{
																																							pos:        position{line: 473, col: 8, offset: 15760},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 458, col: 79, offset: 15136},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 460, col: 9, offset: 15209},
																															run: (*parser).callonFileInclusion168,
																															expr: &seqExpr{
																																pos: position{line: 460, col: 9, offset: 15209},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 460, col: 9, offset: 15209},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 460, col: 14, offset: 15214},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 2848, col: 7, offset: 94521},
																																			run: (*parser).callonFileInclusion172,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2848, col: 7, offset: 94521},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2848, col: 7, offset: 94521},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 460, col: 22, offset: 15222},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2584, col: 11, offset: 86279},
																												run: (*parser).callonFileInclusion176,
																												expr: &charClassMatcher{
																													pos:        position{line: 2584, col: 12, offset: 86280},
																													val:        "[<>&]",
																													chars:      []rune{'<', '>', '&'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2840, col: 7, offset: 94305},
																						run: (*parser).callonFileInclusion178,
																						expr: &litMatcher{
																							pos:        position{line: 2840, col: 7, offset: 94305},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 914, col: 23, offset: 28983},
																	run: (*parser).callonFileInclusion180,
																	expr: &seqExpr{
																		pos: position{line: 914, col: 23, offset: 28983},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 912, col: 32, offset: 28951},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 914, col: 51, offset: 29011},
																				label: "ref",
																				expr: &actionExpr{
																					pos: position{line: 914, col: 56, offset: 29016},
																					run: (*parser).callonFileInclusion184,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 914, col: 56, offset: 29016},
																						expr: &charClassMatcher{
																							pos:        position{line: 914, col: 56, offset: 29016},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 912, col: 32, offset: 28951},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 945, col: 9, offset: 30091},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 945, col: 27, offset: 30109},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 949, col: 5, offset: 30270},
							expr: &actionExpr{
								pos: position{line: 2860, col: 10, offset: 94799},
								run: (*parser).callonFileInclusion191,
								expr: &charClassMatcher{
									pos:        position{line: 2860, col: 11, offset: 94800},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2877, col: 8, offset: 95162},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2870, col: 12, offset: 95022},
									run: (*parser).callonFileInclusion194,
									expr: &choiceExpr{
										pos: position{line: 2870, col: 13, offset: 95023},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2870, col: 13, offset: 95023},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 20, offset: 95030},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 29, offset: 95039},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2874, col: 8, offset: 95112},
									expr: &anyMatcher{
										line: 2874, col: 9, offset: 95113,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 956, col: 1, offset: 30403},
			expr: &actionExpr{
				pos: position{line: 956, col: 15, offset: 30417},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 956, col: 15, offset: 30417},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 956, col: 15, offset: 30417},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 956, col: 22, offset: 30424},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 963, col: 23, offset: 30607},
										run: (*parser).callonLineRanges5,
										expr: &seqExpr{
											pos: position{line: 963, col: 23, offset: 30607},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 963, col: 23, offset: 30607},
													label: "first",
													expr: &choiceExpr{
														pos: position{line: 963, col: 30, offset: 30614},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 972, col: 19, offset: 30972},
																run: (*parser).callonLineRanges9,
																expr: &seqExpr{
																	pos: position{line: 972, col: 19, offset: 30972},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 972, col: 19, offset: 30972},
																			label: "start",
																			expr: &actionExpr{
																				pos: position{line: 2856, col: 11, offset: 94723},
																				run: (*parser).callonLineRanges12,
																				expr: &seqExpr{
																					pos: position{line: 2856, col: 12, offset: 94724},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 2856, col: 12, offset: 94724},
																							expr: &litMatcher{
																								pos:        position{line: 2856, col: 12, offset: 94724},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 2856, col: 17, offset: 94729},
																							expr: &actionExpr{
																								pos: position{line: 2852, col: 10, offset: 94663},
																								run: (*parser).callonLineRanges17,
																								expr: &charClassMatcher{
																									pos:        position{line: 2852, col: 10, offset: 94663},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 972, col: 34, offset: 30987},
																			val:        "..",
																			ignoreCase: false,
																			want:       "\"..\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 972, col: 39, offset: 30992},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 2856, col: 11, offset: 94723},
																				run: (*parser).callonLineRanges21,
																				expr: &seqExpr{
																					pos: position{line: 2856, col: 12, offset: 94724},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 2856, col: 12, offset: 94724},
																							expr: &litMatcher{
																								pos:        position{line: 2856, col: 12, offset: 94724},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 2856, col: 17, offset: 94729},
																							expr: &actionExpr{
																								pos: position{line: 2852, col: 10, offset: 94663},
																								run: (*parser).callonLineRanges26,
																								expr: &charClassMatcher{
																									pos:        position{line: 2852, col: 10, offset: 94663},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 976, col: 20, offset: 31112},
																run: (*parser).callonLineRanges28,
																expr: &labeledExpr{
																	pos:   position{line: 976, col: 20, offset: 31112},
																	label: "singleline",
																	expr: &actionExpr{
																		pos: position{line: 2856, col: 11, offset: 94723},
																		run: (*parser).callonLineRanges30,
																		expr: &seqExpr{
																			pos: position{line: 2856, col: 12, offset: 94724},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 2856, col: 12, offset: 94724},
																					expr: &litMatcher{
																						pos:        position{line: 2856, col: 12, offset: 94724},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 2856, col: 17, offset: 94729},
																					expr: &actionExpr{
																						pos: position{line: 2852, col: 10, offset: 94663},
																						run: (*parser).callonLineRanges35,
																						expr: &charClassMatcher{
																							pos:        position{line: 2852, col: 10, offset: 94663},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 964, col: 5, offset: 30653},
													label: "others",
													expr: &oneOrMoreExpr{
														pos: position{line: 964, col: 12, offset: 30660},
														expr: &actionExpr{
															pos: position{line: 965, col: 9, offset: 30670},
															run: (*parser).callonLineRanges39,
															expr: &seqExpr{
																pos: position{line: 965, col: 9, offset: 30670},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 965, col: 10, offset: 30671},
																		val:        "[,;]",
																		chars:      []rune{',', ';'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&labeledExpr{
																		pos:   position{line: 966, col: 9, offset: 30788},
																		label: "other",
																		expr: &choiceExpr{
																			pos: position{line: 966, col: 16, offset: 30795},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 972, col: 19, offset: 30972},
																					run: (*parser).callonLineRanges44,
																					expr: &seqExpr{
																						pos: position{line: 972, col: 19, offset: 30972},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 972, col: 19, offset: 30972},
																								label: "start",
																								expr: &actionExpr{
																									pos: position{line: 2856, col: 11, offset: 94723},
																									run: (*parser).callonLineRanges47,
																									expr: &seqExpr{
																										pos: position{line: 2856, col: 12, offset: 94724},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 2856, col: 12, offset: 94724},
																												expr: &litMatcher{
																													pos:        position{line: 2856, col: 12, offset: 94724},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 2856, col: 17, offset: 94729},
																												expr: &actionExpr{
																													pos: position{line: 2852, col: 10, offset: 94663},
																													run: (*parser).callonLineRanges52,
																													expr: &charClassMatcher{
																														pos:        position{line: 2852, col: 10, offset: 94663},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 972, col: 34, offset: 30987},
																								val:        "..",
																								ignoreCase: false,
																								want:       "\"..\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 972, col: 39, offset: 30992},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 2856, col: 11, offset: 94723},
																									run: (*parser).callonLineRanges56,
																									expr: &seqExpr{
																										pos: position{line: 2856, col: 12, offset: 94724},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 2856, col: 12, offset: 94724},
																												expr: &litMatcher{
																													pos:        position{line: 2856, col: 12, offset: 94724},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 2856, col: 17, offset: 94729},
																												expr: &actionExpr{
																													pos: position{line: 2852, col: 10, offset: 94663},
																													run: (*parser).callonLineRanges61,
																													expr: &charClassMatcher{
																														pos:        position{line: 2852, col: 10, offset: 94663},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 976, col: 20, offset: 31112},
																					run: (*parser).callonLineRanges63,
																					expr: &labeledExpr{
																						pos:   position{line: 976, col: 20, offset: 31112},
																						label: "singleline",
																						expr: &actionExpr{
																							pos: position{line: 2856, col: 11, offset: 94723},
																							run: (*parser).callonLineRanges65,
																							expr: &seqExpr{
																								pos: position{line: 2856, col: 12, offset: 94724},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 2856, col: 12, offset: 94724},
																										expr: &litMatcher{
																											pos:        position{line: 2856, col: 12, offset: 94724},
																											val:        "-",
																											ignoreCase: false,
																											want:       "\"-\"",
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 2856, col: 17, offset: 94729},
																										expr: &actionExpr{
																											pos: position{line: 2852, col: 10, offset: 94663},
																											run: (*parser).callonLineRanges70,
																											expr: &charClassMatcher{
																												pos:        position{line: 2852, col: 10, offset: 94663},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 972, col: 19, offset: 30972},
										run: (*parser).callonLineRanges72,
										expr: &seqExpr{
											pos: position{line: 972, col: 19, offset: 30972},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 972, col: 19, offset: 30972},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 2856, col: 11, offset: 94723},
														run: (*parser).callonLineRanges75,
														expr: &seqExpr{
															pos: position{line: 2856, col: 12, offset: 94724},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 2856, col: 12, offset: 94724},
																	expr: &litMatcher{
																		pos:        position{line: 2856, col: 12, offset: 94724},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 2856, col: 17, offset: 94729},
																	expr: &actionExpr{
																		pos: position{line: 2852, col: 10, offset: 94663},
																		run: (*parser).callonLineRanges80,
																		expr: &charClassMatcher{
																			pos:        position{line: 2852, col: 10, offset: 94663},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 972, col: 34, offset: 30987},
													val:        "..",
													ignoreCase: false,
													want:       "\"..\"",
												},
												&labeledExpr{
													pos:   position{line: 972, col: 39, offset: 30992},
													label: "end",
													expr: &actionExpr{
														pos: position{line: 2856, col: 11, offset: 94723},
														run: (*parser).callonLineRanges84,
														expr: &seqExpr{
															pos: position{line: 2856, col: 12, offset: 94724},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 2856, col: 12, offset: 94724},
																	expr: &litMatcher{
																		pos:        position{line: 2856, col: 12, offset: 94724},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 2856, col: 17, offset: 94729},
																	expr: &actionExpr{
																		pos: position{line: 2852, col: 10, offset: 94663},
																		run: (*parser).callonLineRanges89,
																		expr: &charClassMatcher{
																			pos:        position{line: 2852, col: 10, offset: 94663},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 976, col: 20, offset: 31112},
										run: (*parser).callonLineRanges91,
										expr: &labeledExpr{
											pos:   position{line: 976, col: 20, offset: 31112},
											label: "singleline",
											expr: &actionExpr{
												pos: position{line: 2856, col: 11, offset: 94723},
												run: (*parser).callonLineRanges93,
												expr: &seqExpr{
													pos: position{line: 2856, col: 12, offset: 94724},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 2856, col: 12, offset: 94724},
															expr: &litMatcher{
																pos:        position{line: 2856, col: 12, offset: 94724},
																val:        "-",
																ignoreCase: false,
																want:       "\"-\"",
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 2856, col: 17, offset: 94729},
															expr: &actionExpr{
																pos: position{line: 2852, col: 10, offset: 94663},
																run: (*parser).callonLineRanges98,
																expr: &charClassMatcher{
																	pos:        position{line: 2852, col: 10, offset: 94663},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2874, col: 8, offset: 95112},
							expr: &anyMatcher{
								line: 2874, col: 9, offset: 95113,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 981, col: 1, offset: 31247},
			expr: &actionExpr{
				pos: position{line: 981, col: 14, offset: 31260},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 981, col: 14, offset: 31260},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 981, col: 14, offset: 31260},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 985, col: 22, offset: 31397},
								run: (*parser).callonTagRanges4,
								expr: &seqExpr{
									pos: position{line: 985, col: 22, offset: 31397},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 985, col: 22, offset: 31397},
											label: "first",
											expr: &choiceExpr{
												pos: position{line: 994, col: 13, offset: 31707},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 994, col: 13, offset: 31707},
														run: (*parser).callonTagRanges8,
														expr: &labeledExpr{
															pos:   position{line: 994, col: 13, offset: 31707},
															label: "tag",
															expr: &choiceExpr{
																pos: position{line: 994, col: 18, offset: 31712},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2790, col: 14, offset: 92611},
																		run: (*parser).callonTagRanges11,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2790, col: 14, offset: 92611},
																			expr: &charClassMatcher{
																				pos:        position{line: 2790, col: 14, offset: 92611},
																				val:        "[0-9\\pL]",
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1000, col: 16, offset: 31912},
																		run: (*parser).callonTagRanges14,
																		expr: &seqExpr{
																			pos: position{line: 1000, col: 16, offset: 31912},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1000, col: 16, offset: 31912},
																					label: "stars",
																					expr: &actionExpr{
																						pos: position{line: 1000, col: 23, offset: 31919},
																						run: (*parser).callonTagRanges17,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1000, col: 23, offset: 31919},
																							expr: &litMatcher{
																								pos:        position{line: 1000, col: 24, offset: 31920},
																								val:        "*",
																								ignoreCase: false,
																								want:       "\"*\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1003, col: 5, offset: 31974},
																					run: (*parser).callonTagRanges20,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 996, col: 9, offset: 31800},
														run: (*parser).callonTagRanges21,
														expr: &seqExpr{
															pos: position{line: 996, col: 9, offset: 31800},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 996, col: 9, offset: 31800},
																	val:        "!",
																	ignoreCase: false,
																	want:       "\"!\"",
																},
																&labeledExpr{
																	pos:   position{line: 996, col: 13, offset: 31804},
																	label: "tag",
																	expr: &choiceExpr{
																		pos: position{line: 996, col: 18, offset: 31809},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2790, col: 14, offset: 92611},
																				run: (*parser).callonTagRanges26,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2790, col: 14, offset: 92611},
																					expr: &charClassMatcher{
																						pos:        position{line: 2790, col: 14, offset: 92611},
																						val:        "[0-9\\pL]",
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1000, col: 16, offset: 31912},
																				run: (*parser).callonTagRanges29,
																				expr: &seqExpr{
																					pos: position{line: 1000, col: 16, offset: 31912},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1000, col: 16, offset: 31912},
																							label: "stars",
																							expr: &actionExpr{
																								pos: position{line: 1000, col: 23, offset: 31919},
																								run: (*parser).callonTagRanges32,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1000, col: 23, offset: 31919},
																									expr: &litMatcher{
																										pos:        position{line: 1000, col: 24, offset: 31920},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1003, col: 5, offset: 31974},
																							run: (*parser).callonTagRanges35,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 986, col: 5, offset: 31418},
											label: "others",
											expr: &zeroOrMoreExpr{
												pos: position{line: 986, col: 12, offset: 31425},
												expr: &actionExpr{
													pos: position{line: 987, col: 9, offset: 31435},
													run: (*parser).callonTagRanges38,
													expr: &seqExpr{
														pos: position{line: 987, col: 9, offset: 31435},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 987, col: 10, offset: 31436},
																val:        "[,;]",
																chars:      []rune{',', ';'},
																ignoreCase: false,
																inverted:   false,
															},
															&labeledExpr{
																pos:   position{line: 988, col: 9, offset: 31553},
																label: "other",
																expr: &choiceExpr{
																	pos: position{line: 994, col: 13, offset: 31707},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 994, col: 13, offset: 31707},
																			run: (*parser).callonTagRanges43,
																			expr: &labeledExpr{
																				pos:   position{line: 994, col: 13, offset: 31707},
																				label: "tag",
																				expr: &choiceExpr{
																					pos: position{line: 994, col: 18, offset: 31712},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2790, col: 14, offset: 92611},
																							run: (*parser).callonTagRanges46,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2790, col: 14, offset: 92611},
																								expr: &charClassMatcher{
																									pos:        position{line: 2790, col: 14, offset: 92611},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 1000, col: 16, offset: 31912},
																							run: (*parser).callonTagRanges49,
																							expr: &seqExpr{
																								pos: position{line: 1000, col: 16, offset: 31912},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 1000, col: 16, offset: 31912},
																										label: "stars",
																										expr: &actionExpr{
																											pos: position{line: 1000, col: 23, offset: 31919},
																											run: (*parser).callonTagRanges52,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1000, col: 23, offset: 31919},
																												expr: &litMatcher{
																													pos:        position{line: 1000, col: 24, offset: 31920},
																													val:        "*",
																													ignoreCase: false,
																													want:       "\"*\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 1003, col: 5, offset: 31974},
																										run: (*parser).callonTagRanges55,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 996, col: 9, offset: 31800},
																			run: (*parser).callonTagRanges56,
																			expr: &seqExpr{
																				pos: position{line: 996, col: 9, offset: 31800},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 996, col: 9, offset: 31800},
																						val:        "!",
																						ignoreCase: false,
																						want:       "\"!\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 996, col: 13, offset: 31804},
																						label: "tag",
																						expr: &choiceExpr{
																							pos: position{line: 996, col: 18, offset: 31809},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2790, col: 14, offset: 92611},
																									run: (*parser).callonTagRanges61,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2790, col: 14, offset: 92611},
																										expr: &charClassMatcher{
																											pos:        position{line: 2790, col: 14, offset: 92611},
																											val:        "[0-9\\pL]",
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1000, col: 16, offset: 31912},
																									run: (*parser).callonTagRanges64,
																									expr: &seqExpr{
																										pos: position{line: 1000, col: 16, offset: 31912},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 1000, col: 16, offset: 31912},
																												label: "stars",
																												expr: &actionExpr{
																													pos: position{line: 1000, col: 23, offset: 31919},
																													run: (*parser).callonTagRanges67,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1000, col: 23, offset: 31919},
																														expr: &litMatcher{
																															pos:        position{line: 1000, col: 24, offset: 31920},
																															val:        "*",
																															ignoreCase: false,
																															want:       "\"*\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 1003, col: 5, offset: 31974},
																												run: (*parser).callonTagRanges70,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2874, col: 8, offset: 95112},
							expr: &anyMatcher{
								line: 2874, col: 9, offset: 95113,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 1010, col: 1, offset: 32141},
			expr: &actionExpr{
				pos: position{line: 1010, col: 21, offset: 32161},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 1010, col: 21, offset: 32161},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1010, col: 21, offset: 32161},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1010, col: 29, offset: 32169},
								expr: &choiceExpr{
									pos: position{line: 1010, col: 30, offset: 32170},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 1014, col: 25, offset: 32350},
											run: (*parser).callonIncludedFileLine6,
											expr: &seqExpr{
												pos: position{line: 1014, col: 25, offset: 32350},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1014, col: 25, offset: 32350},
														val:        "tag::",
														ignoreCase: false,
														want:       "\"tag::\"",
													},
													&labeledExpr{
														pos:   position{line: 1014, col: 33, offset: 32358},
														label: "tag",
														expr: &actionExpr{
															pos: position{line: 1014, col: 38, offset: 32363},
															run: (*parser).callonIncludedFileLine10,
															expr: &actionExpr{
																pos: position{line: 2790, col: 14, offset: 92611},
																run: (*parser).callonIncludedFileLine11,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2790, col: 14, offset: 92611},
																	expr: &charClassMatcher{
																		pos:        position{line: 2790, col: 14, offset: 92611},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1014, col: 78, offset: 32403},
														val:        "[]",
														ignoreCase: false,
														want:       "\"[]\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1018, col: 23, offset: 32498},
											run: (*parser).callonIncludedFileLine15,
											expr: &seqExpr{
												pos: position{line: 1018, col: 23, offset: 32498},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1018, col: 23, offset: 32498},
														val:        "end::",
														ignoreCase: false,
														want:       "\"end::\"",
													},
													&labeledExpr{
														pos:   position{line: 1018, col: 31, offset: 32506},
														label: "tag",
														expr: &actionExpr{
															pos: position{line: 1018, col: 36, offset: 32511},
															run: (*parser).callonIncludedFileLine19,
															expr: &actionExpr{
																pos: position{line: 2790, col: 14, offset: 92611},
																run: (*parser).callonIncludedFileLine20,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2790, col: 14, offset: 92611},
																	expr: &charClassMatcher{
																		pos:        position{line: 2790, col: 14, offset: 92611},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1018, col: 76, offset: 32551},
														val:        "[]",
														ignoreCase: false,
														want:       "\"[]\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1010, col: 74, offset: 32214},
											run: (*parser).callonIncludedFileLine24,
											expr: &anyMatcher{
												line: 1010, col: 74, offset: 32214,
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2877, col: 8, offset: 95162},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2870, col: 12, offset: 95022},
									run: (*parser).callonIncludedFileLine27,
									expr: &choiceExpr{
										pos: position{line: 2870, col: 13, offset: 95023},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2870, col: 13, offset: 95023},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 20, offset: 95030},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 29, offset: 95039},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2874, col: 8, offset: 95112},
									expr: &anyMatcher{
										line: 2874, col: 9, offset: 95113,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1076, col: 1, offset: 34243},
			expr: &actionExpr{
				pos: position{line: 1077, col: 5, offset: 34266},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1077, col: 5, offset: 34266},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1078, col: 9, offset: 34284},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 2805, col: 5, offset: 93210},
								run: (*parser).callonInlineElement4,
								expr: &seqExpr{
									pos: position{line: 2805, col: 5, offset: 93210},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2805, col: 5, offset: 93210},
											expr: &charClassMatcher{
												pos:        position{line: 2805, col: 5, offset: 93210},
												val:        "[,;!?0-9\\pL]",
												chars:      []rune{',', ';', '!', '?'},
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2806, col: 6, offset: 93230},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2860, col: 10, offset: 94799},
													run: (*parser).callonInlineElement9,
													expr: &charClassMatcher{
														pos:        position{line: 2860, col: 11, offset: 94800},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2806, col: 14, offset: 93238},
													expr: &choiceExpr{
														pos: position{line: 2806, col: 16, offset: 93240},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2806, col: 16, offset: 93240},
																val:        "[.�]",
																chars:      []rune{'.', '�'},
																ignoreCase: false,
																inverted:   false,
															},
															&actionExpr{
																pos: position{line: 2870, col: 12, offset: 95022},
																run: (*parser).callonInlineElement14,
																expr: &choiceExpr{
																	pos: position{line: 2870, col: 13, offset: 95023},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2870, col: 13, offset: 95023},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 20, offset: 95030},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 29, offset: 95039},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2874, col: 8, offset: 95112},
																expr: &anyMatcher{
																	line: 2874, col: 9, offset: 95113,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 2865, col: 11, offset: 94908},
								run: (*parser).callonInlineElement21,
								expr: &oneOrMoreExpr{
									pos: position{line: 2865, col: 11, offset: 94908},
									expr: &charClassMatcher{
										pos:        position{line: 2865, col: 12, offset: 94909},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
							&actionExpr{
								pos: position{line: 922, col: 5, offset: 29429},
								run: (*parser).callonInlineElement24,
								expr: &seqExpr{
									pos: position{line: 922, col: 5, offset: 29429},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 922, col: 5, offset: 29429},
											run: (*parser).callonInlineElement26,
										},
										&litMatcher{
											pos:        position{line: 925, col: 5, offset: 29486},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 925, col: 9, offset: 29490},
											expr: &actionExpr{
												pos: position{line: 2860, col: 10, offset: 94799},
												run: (*parser).callonInlineElement29,
												expr: &charClassMatcher{
													pos:        position{line: 2860, col: 11, offset: 94800},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&andExpr{
											pos: position{line: 925, col: 16, offset: 29497},
											expr: &choiceExpr{
												pos: position{line: 2877, col: 8, offset: 95162},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2870, col: 12, offset: 95022},
														run: (*parser).callonInlineElement33,
														expr: &choiceExpr{
															pos: position{line: 2870, col: 13, offset: 95023},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2870, col: 13, offset: 95023},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2870, col: 20, offset: 95030},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2870, col: 29, offset: 95039},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2874, col: 8, offset: 95112},
														expr: &anyMatcher{
															line: 2874, col: 9, offset: 95113,
														},
													},
												},
											},
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1081, col: 11, offset: 34383},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1081, col: 11, offset: 34383},
										expr: &choiceExpr{
											pos: position{line: 2877, col: 8, offset: 95162},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2870, col: 12, offset: 95022},
													run: (*parser).callonInlineElement43,
													expr: &choiceExpr{
														pos: position{line: 2870, col: 13, offset: 95023},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2870, col: 13, offset: 95023},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 20, offset: 95030},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 29, offset: 95039},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2874, col: 8, offset: 95112},
													expr: &anyMatcher{
														line: 2874, col: 9, offset: 95113,
													},
												},
											},
										},
									},
									&choiceExpr{
										pos: position{line: 1082, col: 13, offset: 34402},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2576, col: 5, offset: 86006},
												run: (*parser).callonInlineElement51,
												expr: &seqExpr{
													pos: position{line: 2576, col: 5, offset: 86006},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 2576, col: 5, offset: 86006},
															run: (*parser).callonInlineElement53,
														},
														&labeledExpr{
															pos:   position{line: 2579, col: 5, offset: 86077},
															label: "element",
															expr: &choiceExpr{
																pos: position{line: 2581, col: 9, offset: 86175},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2581, col: 9, offset: 86175},
																		run: (*parser).callonInlineElement56,
																		expr: &choiceExpr{
																			pos: position{line: 458, col: 27, offset: 15084},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 458, col: 27, offset: 15084},
																					run: (*parser).callonInlineElement58,
																					expr: &seqExpr{
																						pos: position{line: 458, col: 27, offset: 15084},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 458, col: 27, offset: 15084},
																								val:        "<<",
																								ignoreCase: false,
																								want:       "\"<<\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 458, col: 32, offset: 15089},
																								label: "id",
																								expr: &actionExpr{
																									pos: position{line: 2848, col: 7, offset: 94521},
																									run: (*parser).callonInlineElement62,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2848, col: 7, offset: 94521},
																										expr: &charClassMatcher{
																											pos:        position{line: 2848, col: 7, offset: 94521},
																											val:        "[^[]<>,]",
																											chars:      []rune{'[', ']', '<', '>', ','},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 458, col: 40, offset: 15097},
																								expr: &actionExpr{
																									pos: position{line: 2860, col: 10, offset: 94799},
																									run: (*parser).callonInlineElement66,
																									expr: &charClassMatcher{
																										pos:        position{line: 2860, col: 11, offset: 94800},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 458, col: 47, offset: 15104},
																								val:        ",",
																								ignoreCase: false,
																								want:       "\",\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 458, col: 51, offset: 15108},
																								label: "label",
																								expr: &oneOrMoreExpr{
																									pos: position{line: 468, col: 24, offset: 15521},
																									expr: &choiceExpr{
																										pos: position{line: 469, col: 5, offset: 15527},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 469, col: 6, offset: 15528},
																												run: (*parser).callonInlineElement72,
																												expr: &seqExpr{
																													pos: position{line: 469, col: 6, offset: 15528},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 469, col: 6, offset: 15528},
																															val:        "[0-9\\pL]",
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&oneOrMoreExpr{
																															pos: position{line: 469, col: 14, offset: 15536},
																															expr: &charClassMatcher{
																																pos:        position{line: 469, col: 14, offset: 15536},
																																val:        "[^\\r\\n{<>]",
																																chars:      []rune{'\r', '\n', '{', '<', '>'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 416, col: 5, offset: 13530},
																												run: (*parser).callonInlineElement77,
																												expr: &seqExpr{
																													pos: position{line: 416, col: 5, offset: 13530},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 416, col: 5, offset: 13530},
																															run: (*parser).callonInlineElement79,
																														},
																														&labeledExpr{
																															pos:   position{line: 419, col: 5, offset: 13594},
																															label: "element",
																															expr: &choiceExpr{
																																pos: position{line: 419, col: 14, offset: 13603},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 430, col: 25, offset: 14065},
																																		run: (*parser).callonInlineElement82,
																																		expr: &seqExpr{
																																			pos: position{line: 430, col: 25, offset: 14065},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 430, col: 25, offset: 14065},
																																					val:        "{counter:",
																																					ignoreCase: false,
																																					want:       "\"{counter:\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 430, col: 37, offset: 14077},
																																					label: "name",
																																					expr: &actionExpr{
																																						pos: position{line: 120, col: 18, offset: 3502},
																																						run: (*parser).callonInlineElement86,
																																						expr: &seqExpr{
																																							pos: position{line: 120, col: 18, offset: 3502},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 120, col: 18, offset: 3502},
																																									val:        "[_0-9\\pL]",
																																									chars:      []rune{'_'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&zeroOrMoreExpr{
																																									pos: position{line: 120, col: 28, offset: 3512},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 120, col: 29, offset: 3513},
																																										val:        "[-0-9\\pL]",
																																										chars:      []rune{'-'},
																																										ranges:     []rune{'0', '9'},
																																										classes:    []*unicode.RangeTable{rangeTable("L")},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 430, col: 56, offset: 14096},
																																					label: "start",
																																					expr: &zeroOrOneExpr{
																																						pos: position{line: 430, col: 62, offset: 14102},
																																						expr: &actionExpr{
																																							pos: position{line: 438, col: 17, offset: 14365},
																																							run: (*parser).callonInlineElement93,
																																							expr: &seqExpr{
																																								pos: position{line: 438, col: 17, offset: 14365},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 438, col: 17, offset: 14365},
																																										val:        ":",
																																										ignoreCase: false,
																																										want:       "\":\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 438, col: 21, offset: 14369},
																																										label: "start",
																																										expr: &choiceExpr{
																																											pos: position{line: 438, col: 28, offset: 14376},
																																											alternatives: []interface{}{
																																												&actionExpr{
																																													pos: position{line: 438, col: 28, offset: 14376},
																																													run: (*parser).callonInlineElement98,
																																													expr: &charClassMatcher{
																																														pos:        position{line: 438, col: 28, offset: 14376},
																																														val:        "[A-Za-z]",
																																														ranges:     []rune{'A', 'Z', 'a', 'z'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																												&actionExpr{
																																													pos: position{line: 440, col: 9, offset: 14430},
																																													run: (*parser).callonInlineElement100,
																																													expr: &oneOrMoreExpr{
																																														pos: position{line: 440, col: 9, offset: 14430},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 440, col: 9, offset: 14430},
																																															val:        "[0-9]",
																																															ranges:     []rune{'0', '9'},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 430, col: 78, offset: 14118},
																																					val:        "}",
																																					ignoreCase: false,
																																					want:       "\"}\"",
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 434, col: 25, offset: 14220},
																																		run: (*parser).callonInlineElement104,
																																		expr: &seqExpr{
																																			pos: position{line: 434, col: 25, offset: 14220},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 434, col: 25, offset: 14220},
																																					val:        "{counter2:",
																																					ignoreCase: false,
																																					want:       "\"{counter2:\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 434, col: 38, offset: 14233},
																																					label: "name",
																																					expr: &actionExpr{
																																						pos: position{line: 120, col: 18, offset: 3502},
																																						run: (*parser).callonInlineElement108,
																																						expr: &seqExpr{
																																							pos: position{line: 120, col: 18, offset: 3502},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 120, col: 18, offset: 3502},
																																									val:        "[_0-9\\pL]",
																																									chars:      []rune{'_'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&zeroOrMoreExpr{
																																									pos: position{line: 120, col: 28, offset: 3512},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 120, col: 29, offset: 3513},
																																										val:        "[-0-9\\pL]",
																																										chars:      []rune{'-'},
																																										ranges:     []rune{'0', '9'},
																																										classes:    []*unicode.RangeTable{rangeTable("L")},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 434, col: 57, offset: 14252},
																																					label: "start",
																																					expr: &zeroOrOneExpr{
																																						pos: position{line: 434, col: 63, offset: 14258},
																																						expr: &actionExpr{
																																							pos: position{line: 438, col: 17, offset: 14365},
																																							run: (*parser).callonInlineElement115,
																																							expr: &seqExpr{
																																								pos: position{line: 438, col: 17, offset: 14365},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 438, col: 17, offset: 14365},
																																										val:        ":",
																																										ignoreCase: false,
																																										want:       "\":\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 438, col: 21, offset: 14369},
																																										label: "start",
																																										expr: &choiceExpr{
																																											pos: position{line: 438, col: 28, offset: 14376},
																																											alternatives: []interface{}{
																																												&actionExpr{
																																													pos: position{line: 438, col: 28, offset: 14376},
																																													run: (*parser).callonInlineElement120,
																																													expr: &charClassMatcher{
																																														pos:        position{line: 438, col: 28, offset: 14376},
																																														val:        "[A-Za-z]",
																																														ranges:     []rune{'A', 'Z', 'a', 'z'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																												&actionExpr{
																																													pos: position{line: 440, col: 9, offset: 14430},
																																													run: (*parser).callonInlineElement122,
																																													expr: &oneOrMoreExpr{
																																														pos: position{line: 440, col: 9, offset: 14430},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 440, col: 9, offset: 14430},
																																															val:        "[0-9]",
																																															ranges:     []rune{'0', '9'},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 434, col: 79, offset: 14274},
																																					val:        "}",
																																					ignoreCase: false,
																																					want:       "\"}\"",
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 423, col: 31, offset: 13720},
																																		run: (*parser).callonInlineElement126,
																																		expr: &seqExpr{
																																			pos: position{line: 423, col: 31, offset: 13720},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 423, col: 31, offset: 13720},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 423, col: 35, offset: 13724},
																																					label: "name",
																																					expr: &actionExpr{
																																						pos: position{line: 120, col: 18, offset: 3502},
																																						run: (*parser).callonInlineElement130,
																																						expr: &seqExpr{
																																							pos: position{line: 120, col: 18, offset: 3502},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 120, col: 18, offset: 3502},
																																									val:        "[_0-9\\pL]",
																																									chars:      []rune{'_'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&zeroOrMoreExpr{
																																									pos: position{line: 120, col: 28, offset: 3512},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 120, col: 29, offset: 3513},
																																										val:        "[-0-9\\pL]",
																																										chars:      []rune{'-'},
																																										ranges:     []rune{'0', '9'},
																																										classes:    []*unicode.RangeTable{rangeTable("L")},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 423, col: 54, offset: 13743},
																																					val:        "}",
																																					ignoreCase: false,
																																					want:       "\"}\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 473, col: 8, offset: 15760},
																												run: (*parser).callonInlineElement136,
																												expr: &litMatcher{
																													pos:        position{line: 473, col: 8, offset: 15760},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 458, col: 79, offset: 15136},
																								val:        ">>",
																								ignoreCase: false,
																								want:       "\">>\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 460, col: 9, offset: 15209},
																					run: (*parser).callonInlineElement139,
																					expr: &seqExpr{
																						pos: position{line: 460, col: 9, offset: 15209},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 460, col: 9, offset: 15209},
																								val:        "<<",
																								ignoreCase: false,
																								want:       "\"<<\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 460, col: 14, offset: 15214},
																								label: "id",
																								expr: &actionExpr{
																									pos: position{line: 2848, col: 7, offset: 94521},
																									run: (*parser).callonInlineElement143,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2848, col: 7, offset: 94521},
																										expr: &charClassMatcher{
																											pos:        position{line: 2848, col: 7, offset: 94521},
																											val:        "[^[]<>,]",
																											chars:      []rune{'[', ']', '<', '>', ','},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 460, col: 22, offset: 15222},
																								val:        ">>",
																								ignoreCase: false,
																								want:       "\">>\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2584, col: 11, offset: 86279},
																		run: (*parser).callonInlineElement147,
																		expr: &charClassMatcher{
																			pos:        position{line: 2584, col: 12, offset: 86280},
																			val:        "[<>&]",
																			chars:      []rune{'<', '>', '&'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1083, col: 15, offset: 34433},
												name: "Quote",
											},
											&actionExpr{
												pos: position{line: 416, col: 5, offset: 13530},
												run: (*parser).callonInlineElement150,
												expr: &seqExpr{
													pos: position{line: 416, col: 5, offset: 13530},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 416, col: 5, offset: 13530},
															run: (*parser).callonInlineElement152,
														},
														&labeledExpr{
															pos:   position{line: 419, col: 5, offset: 13594},
															label: "element",
															expr: &choiceExpr{
																pos: position{line: 419, col: 14, offset: 13603},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 430, col: 25, offset: 14065},
																		run: (*parser).callonInlineElement155,
																		expr: &seqExpr{
																			pos: position{line: 430, col: 25, offset: 14065},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 430, col: 25, offset: 14065},
																					val:        "{counter:",
																					ignoreCase: false,
																					want:       "\"{counter:\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 430, col: 37, offset: 14077},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 120, col: 18, offset: 3502},
																						run: (*parser).callonInlineElement159,
																						expr: &seqExpr{
																							pos: position{line: 120, col: 18, offset: 3502},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 120, col: 18, offset: 3502},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 120, col: 28, offset: 3512},
																									expr: &charClassMatcher{
																										pos:        position{line: 120, col: 29, offset: 3513},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 430, col: 56, offset: 14096},
																					label: "start",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 430, col: 62, offset: 14102},
																						expr: &actionExpr{
																							pos: position{line: 438, col: 17, offset: 14365},
																							run: (*parser).callonInlineElement166,
																							expr: &seqExpr{
																								pos: position{line: 438, col: 17, offset: 14365},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 438, col: 17, offset: 14365},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 438, col: 21, offset: 14369},
																										label: "start",
																										expr: &choiceExpr{
																											pos: position{line: 438, col: 28, offset: 14376},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 438, col: 28, offset: 14376},
																													run: (*parser).callonInlineElement171,
																													expr: &charClassMatcher{
																														pos:        position{line: 438, col: 28, offset: 14376},
																														val:        "[A-Za-z]",
																														ranges:     []rune{'A', 'Z', 'a', 'z'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&actionExpr{
																													pos: position{line: 440, col: 9, offset: 14430},
																													run: (*parser).callonInlineElement173,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 440, col: 9, offset: 14430},
																														expr: &charClassMatcher{
																															pos:        position{line: 440, col: 9, offset: 14430},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 430, col: 78, offset: 14118},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 434, col: 25, offset: 14220},
																		run: (*parser).callonInlineElement177,
																		expr: &seqExpr{
																			pos: position{line: 434, col: 25, offset: 14220},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 434, col: 25, offset: 14220},
																					val:        "{counter2:",
																					ignoreCase: false,
																					want:       "\"{counter2:\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 434, col: 38, offset: 14233},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 120, col: 18, offset: 3502},
																						run: (*parser).callonInlineElement181,
																						expr: &seqExpr{
																							pos: position{line: 120, col: 18, offset: 3502},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 120, col: 18, offset: 3502},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 120, col: 28, offset: 3512},
																									expr: &charClassMatcher{
																										pos:        position{line: 120, col: 29, offset: 3513},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 434, col: 57, offset: 14252},
																					label: "start",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 434, col: 63, offset: 14258},
																						expr: &actionExpr{
																							pos: position{line: 438, col: 17, offset: 14365},
																							run: (*parser).callonInlineElement188,
																							expr: &seqExpr{
																								pos: position{line: 438, col: 17, offset: 14365},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 438, col: 17, offset: 14365},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 438, col: 21, offset: 14369},
																										label: "start",
																										expr: &choiceExpr{
																											pos: position{line: 438, col: 28, offset: 14376},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 438, col: 28, offset: 14376},
																													run: (*parser).callonInlineElement193,
																													expr: &charClassMatcher{
																														pos:        position{line: 438, col: 28, offset: 14376},
																														val:        "[A-Za-z]",
																														ranges:     []rune{'A', 'Z', 'a', 'z'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&actionExpr{
																													pos: position{line: 440, col: 9, offset: 14430},
																													run: (*parser).callonInlineElement195,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 440, col: 9, offset: 14430},
																														expr: &charClassMatcher{
																															pos:        position{line: 440, col: 9, offset: 14430},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 434, col: 79, offset: 14274},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 423, col: 31, offset: 13720},
																		run: (*parser).callonInlineElement199,
																		expr: &seqExpr{
																			pos: position{line: 423, col: 31, offset: 13720},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 423, col: 31, offset: 13720},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 423, col: 35, offset: 13724},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 120, col: 18, offset: 3502},
																						run: (*parser).callonInlineElement203,
																						expr: &seqExpr{
																							pos: position{line: 120, col: 18, offset: 3502},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 120, col: 18, offset: 3502},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 120, col: 28, offset: 3512},
																									expr: &charClassMatcher{
																										pos:        position{line: 120, col: 29, offset: 3513},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 423, col: 54, offset: 13743},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1085, col: 15, offset: 34490},
												name: "InlineMacro",
											},
											&actionExpr{
												pos: position{line: 2609, col: 15, offset: 87247},
												run: (*parser).callonInlineElement210,
												expr: &litMatcher{
													pos:        position{line: 2609, col: 15, offset: 87247},
													val:        "`'",
													ignoreCase: false,
													want:       "\"`'\"",
												},
											},
											&actionExpr{
												pos: position{line: 2615, col: 14, offset: 87362},
												run: (*parser).callonInlineElement212,
												expr: &litMatcher{
													pos:        position{line: 2615, col: 14, offset: 87362},
													val:        "(C)",
													ignoreCase: false,
													want:       "\"(C)\"",
												},
											},
											&actionExpr{
												pos: position{line: 2619, col: 14, offset: 87438},
												run: (*parser).callonInlineElement214,
												expr: &litMatcher{
													pos:        position{line: 2619, col: 14, offset: 87438},
													val:        "(TM)",
													ignoreCase: false,
													want:       "\"(TM)\"",
												},
											},
											&actionExpr{
												pos: position{line: 2623, col: 15, offset: 87516},
												run: (*parser).callonInlineElement216,
												expr: &litMatcher{
													pos:        position{line: 2623, col: 15, offset: 87516},
													val:        "(R)",
													ignoreCase: false,
													want:       "\"(R)\"",
												},
											},
											&actionExpr{
												pos: position{line: 2627, col: 13, offset: 87591},
												run: (*parser).callonInlineElement218,
												expr: &litMatcher{
													pos:        position{line: 2627, col: 13, offset: 87591},
													val:        "...",
													ignoreCase: false,
													want:       "\"...\"",
												},
											},
											&actionExpr{
												pos: position{line: 2635, col: 22, offset: 87897},
												run: (*parser).callonInlineElement220,
												expr: &seqExpr{
													pos: position{line: 2635, col: 22, offset: 87897},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2786, col: 13, offset: 92537},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
														&litMatcher{
															pos:        position{line: 2635, col: 31, offset: 87906},
															val:        "'",
															ignoreCase: false,
															want:       "\"'\"",
														},
														&andExpr{
															pos: position{line: 2635, col: 35, offset: 87910},
															expr: &charClassMatcher{
																pos:        position{line: 2635, col: 36, offset: 87911},
																val:        "[\\pL]",
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 914, col: 23, offset: 28983},
												run: (*parser).callonInlineElement226,
												expr: &seqExpr{
													pos: position{line: 914, col: 23, offset: 28983},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 912, col: 32, offset: 28951},
															val:        "�",
															ignoreCase: false,
															want:       "\"�\"",
														},
														&labeledExpr{
															pos:   position{line: 914, col: 51, offset: 29011},
															label: "ref",
															expr: &actionExpr{
																pos: position{line: 914, col: 56, offset: 29016},
																run: (*parser).callonInlineElement230,
																expr: &oneOrMoreExpr{
																	pos: position{line: 914, col: 56, offset: 29016},
																	expr: &charClassMatcher{
																		pos:        position{line: 914, col: 56, offset: 29016},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 912, col: 32, offset: 28951},
															val:        "�",
															ignoreCase: false,
															want:       "\"�\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2817, col: 12, offset: 93572},
												run: (*parser).callonInlineElement234,
												expr: &anyMatcher{
													line: 2817, col: 12, offset: 93572,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1104, col: 1, offset: 35275},
			expr: &actionExpr{
				pos: position{line: 1104, col: 14, offset: 35288},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1104, col: 14, offset: 35288},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1104, col: 14, offset: 35288},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1104, col: 19, offset: 35293},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1104, col: 25, offset: 35299},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1104, col: 43, offset: 35317},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1108, col: 1, offset: 35386},
			expr: &actionExpr{
				pos: position{line: 1108, col: 21, offset: 35406},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1108, col: 21, offset: 35406},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1108, col: 30, offset: 35415},
						expr: &choiceExpr{
							pos: position{line: 1108, col: 31, offset: 35416},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2798, col: 5, offset: 92992},
									run: (*parser).callonIndexTermContent5,
									expr: &seqExpr{
										pos: position{line: 2798, col: 5, offset: 92992},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2798, col: 5, offset: 92992},
												expr: &charClassMatcher{
													pos:        position{line: 2798, col: 5, offset: 92992},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2798, col: 15, offset: 93002},
												expr: &choiceExpr{
													pos: position{line: 2798, col: 17, offset: 93004},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2798, col: 17, offset: 93004},
															val:        "[\\r\\n ,]]",
															chars:      []rune{'\r', '\n', ' ', ',', ']'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2800, col: 9, offset: 93086},
									run: (*parser).callonIndexTermContent14,
									expr: &seqExpr{
										pos: position{line: 2800, col: 9, offset: 93086},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2800, col: 9, offset: 93086},
												expr: &charClassMatcher{
													pos:        position{line: 2800, col: 9, offset: 93086},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 2800, col: 19, offset: 93096},
												expr: &seqExpr{
													pos: position{line: 2800, col: 20, offset: 93097},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2800, col: 20, offset: 93097},
															val:        "[=*_`]",
															chars:      []rune{'=', '*', '_', '`'},
															ignoreCase: false,
															inverted:   false,
														},
														&oneOrMoreExpr{
															pos: position{line: 2800, col: 27, offset: 93104},
															expr: &charClassMatcher{
																pos:        position{line: 2800, col: 27, offset: 93104},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1108, col: 38, offset: 35423},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1108, col: 53, offset: 35438},
									name: "QuotedText",
								},
								&actionExpr{
									pos: position{line: 2860, col: 10, offset: 94799},
									run: (*parser).callonIndexTermContent25,
									expr: &charClassMatcher{
										pos:        position{line: 2860, col: 11, offset: 94800},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&actionExpr{
									pos: position{line: 2576, col: 5, offset: 86006},
									run: (*parser).callonIndexTermContent27,
									expr: &seqExpr{
										pos: position{line: 2576, col: 5, offset: 86006},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 2576, col: 5, offset: 86006},
												run: (*parser).callonIndexTermContent29,
											},
											&labeledExpr{
												pos:   position{line: 2579, col: 5, offset: 86077},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 2581, col: 9, offset: 86175},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2581, col: 9, offset: 86175},
															run: (*parser).callonIndexTermContent32,
															expr: &choiceExpr{
																pos: position{line: 458, col: 27, offset: 15084},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 458, col: 27, offset: 15084},
																		run: (*parser).callonIndexTermContent34,
																		expr: &seqExpr{
																			pos: position{line: 458, col: 27, offset: 15084},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 458, col: 27, offset: 15084},
																					val:        "<<",
																					ignoreCase: false,
																					want:       "\"<<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 458, col: 32, offset: 15089},
																					label: "id",
																					expr: &actionExpr{
																						pos: position{line: 2848, col: 7, offset: 94521},
																						run: (*parser).callonIndexTermContent38,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2848, col: 7, offset: 94521},
																							expr: &charClassMatcher{
																								pos:        position{line: 2848, col: 7, offset: 94521},
																								val:        "[^[]<>,]",
																								chars:      []rune{'[', ']', '<', '>', ','},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 458, col: 40, offset: 15097},
																					expr: &actionExpr{
																						pos: position{line: 2860, col: 10, offset: 94799},
																						run: (*parser).callonIndexTermContent42,
																						expr: &charClassMatcher{
																							pos:        position{line: 2860, col: 11, offset: 94800},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 458, col: 47, offset: 15104},
																					val:        ",",
																					ignoreCase: false,
																					want:       "\",\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 458, col: 51, offset: 15108},
																					label: "label",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 468, col: 24, offset: 15521},
																						expr: &choiceExpr{
																							pos: position{line: 469, col: 5, offset: 15527},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 469, col: 6, offset: 15528},
																									run: (*parser).callonIndexTermContent48,
																									expr: &seqExpr{
																										pos: position{line: 469, col: 6, offset: 15528},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 469, col: 6, offset: 15528},
																												val:        "[0-9\\pL]",
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 469, col: 14, offset: 15536},
																												expr: &charClassMatcher{
																													pos:        position{line: 469, col: 14, offset: 15536},
																													val:        "[^\\r\\n{<>]",
																													chars:      []rune{'\r', '\n', '{', '<', '>'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 416, col: 5, offset: 13530},
																									run: (*parser).callonIndexTermContent53,
																									expr: &seqExpr{
																										pos: position{line: 416, col: 5, offset: 13530},
																										exprs: []interface{}{
																											&andCodeExpr{
																												pos: position{line: 416, col: 5, offset: 13530},
																												run: (*parser).callonIndexTermContent55,
																											},
																											&labeledExpr{
																												pos:   position{line: 419, col: 5, offset: 13594},
																												label: "element",
																												expr: &choiceExpr{
																													pos: position{line: 419, col: 14, offset: 13603},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 430, col: 25, offset: 14065},
																															run: (*parser).callonIndexTermContent58,
																															expr: &seqExpr{
																																pos: position{line: 430, col: 25, offset: 14065},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 430, col: 25, offset: 14065},
																																		val:        "{counter:",
																																		ignoreCase: false,
																																		want:       "\"{counter:\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 430, col: 37, offset: 14077},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 120, col: 18, offset: 3502},
																																			run: (*parser).callonIndexTermContent62,
																																			expr: &seqExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 120, col: 18, offset: 3502},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 120, col: 28, offset: 3512},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 120, col: 29, offset: 3513},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 430, col: 56, offset: 14096},
																																		label: "start",
																																		expr: &zeroOrOneExpr{
																																			pos: position{line: 430, col: 62, offset: 14102},
																																			expr: &actionExpr{
																																				pos: position{line: 438, col: 17, offset: 14365},
																																				run: (*parser).callonIndexTermContent69,
																																				expr: &seqExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 438, col: 17, offset: 14365},
																																							val:        ":",
																																							ignoreCase: false,
																																							want:       "\":\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 438, col: 21, offset: 14369},
																																							label: "start",
																																							expr: &choiceExpr{
																																								pos: position{line: 438, col: 28, offset: 14376},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 438, col: 28, offset: 14376},
																																										run: (*parser).callonIndexTermContent74,
																																										expr: &charClassMatcher{
																																											pos:        position{line: 438, col: 28, offset: 14376},
																																											val:        "[A-Za-z]",
																																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 440, col: 9, offset: 14430},
																																										run: (*parser).callonIndexTermContent76,
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 440, col: 9, offset: 14430},
																																												val:        "[0-9]",
																																												ranges:     []rune{'0', '9'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 430, col: 78, offset: 14118},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 434, col: 25, offset: 14220},
																															run: (*parser).callonIndexTermContent80,
																															expr: &seqExpr{
																																pos: position{line: 434, col: 25, offset: 14220},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 434, col: 25, offset: 14220},
																																		val:        "{counter2:",
																																		ignoreCase: false,
																																		want:       "\"{counter2:\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 434, col: 38, offset: 14233},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 120, col: 18, offset: 3502},
																																			run: (*parser).callonIndexTermContent84,
																																			expr: &seqExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 120, col: 18, offset: 3502},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 120, col: 28, offset: 3512},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 120, col: 29, offset: 3513},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 434, col: 57, offset: 14252},
																																		label: "start",
																																		expr: &zeroOrOneExpr{
																																			pos: position{line: 434, col: 63, offset: 14258},
																																			expr: &actionExpr{
																																				pos: position{line: 438, col: 17, offset: 14365},
																																				run: (*parser).callonIndexTermContent91,
																																				expr: &seqExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 438, col: 17, offset: 14365},
																																							val:        ":",
																																							ignoreCase: false,
																																							want:       "\":\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 438, col: 21, offset: 14369},
																																							label: "start",
																																							expr: &choiceExpr{
																																								pos: position{line: 438, col: 28, offset: 14376},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 438, col: 28, offset: 14376},
																																										run: (*parser).callonIndexTermContent96,
																																										expr: &charClassMatcher{
																																											pos:        position{line: 438, col: 28, offset: 14376},
																																											val:        "[A-Za-z]",
																																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 440, col: 9, offset: 14430},
																																										run: (*parser).callonIndexTermContent98,
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 440, col: 9, offset: 14430},
																																												val:        "[0-9]",
																																												ranges:     []rune{'0', '9'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 434, col: 79, offset: 14274},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 423, col: 31, offset: 13720},
																															run: (*parser).callonIndexTermContent102,
																															expr: &seqExpr{
																																pos: position{line: 423, col: 31, offset: 13720},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 423, col: 31, offset: 13720},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 423, col: 35, offset: 13724},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 120, col: 18, offset: 3502},
																																			run: (*parser).callonIndexTermContent106,
																																			expr: &seqExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 120, col: 18, offset: 3502},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 120, col: 28, offset: 3512},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 120, col: 29, offset: 3513},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 423, col: 54, offset: 13743},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 473, col: 8, offset: 15760},
																									run: (*parser).callonIndexTermContent112,
																									expr: &litMatcher{
																										pos:        position{line: 473, col: 8, offset: 15760},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 458, col: 79, offset: 15136},
																					val:        ">>",
																					ignoreCase: false,
																					want:       "\">>\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 460, col: 9, offset: 15209},
																		run: (*parser).callonIndexTermContent115,
																		expr: &seqExpr{
																			pos: position{line: 460, col: 9, offset: 15209},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 460, col: 9, offset: 15209},
																					val:        "<<",
																					ignoreCase: false,
																					want:       "\"<<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 460, col: 14, offset: 15214},
																					label: "id",
																					expr: &actionExpr{
																						pos: position{line: 2848, col: 7, offset: 94521},
																						run: (*parser).callonIndexTermContent119,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2848, col: 7, offset: 94521},
																							expr: &charClassMatcher{
																								pos:        position{line: 2848, col: 7, offset: 94521},
																								val:        "[^[]<>,]",
																								chars:      []rune{'[', ']', '<', '>', ','},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 460, col: 22, offset: 15222},
																					val:        ">>",
																					ignoreCase: false,
																					want:       "\">>\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2584, col: 11, offset: 86279},
															run: (*parser).callonIndexTermContent123,
															expr: &charClassMatcher{
																pos:        position{line: 2584, col: 12, offset: 86280},
																val:        "[<>&]",
																chars:      []rune{'<', '>', '&'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 914, col: 23, offset: 28983},
									run: (*parser).callonIndexTermContent125,
									expr: &seqExpr{
										pos: position{line: 914, col: 23, offset: 28983},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 912, col: 32, offset: 28951},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 914, col: 51, offset: 29011},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 914, col: 56, offset: 29016},
													run: (*parser).callonIndexTermContent129,
													expr: &oneOrMoreExpr{
														pos: position{line: 914, col: 56, offset: 29016},
														expr: &charClassMatcher{
															pos:        position{line: 914, col: 56, offset: 29016},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 912, col: 32, offset: 28951},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1108, col: 114, offset: 35499},
									run: (*parser).callonIndexTermContent133,
									expr: &seqExpr{
										pos: position{line: 1108, col: 115, offset: 35500},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1108, col: 115, offset: 35500},
												expr: &litMatcher{
													pos:        position{line: 1108, col: 116, offset: 35501},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1108, col: 121, offset: 35506,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1128, col: 1, offset: 36215},
			expr: &actionExpr{
				pos: position{line: 1129, col: 5, offset: 36234},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1129, col: 5, offset: 36234},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1129, col: 5, offset: 36234},
							run: (*parser).callonImageBlock3,
						},
						&litMatcher{
							pos:        position{line: 1133, col: 5, offset: 36386},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1133, col: 15, offset: 36396},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 2825, col: 13, offset: 93773},
								run: (*parser).callonImageBlock6,
								expr: &seqExpr{
									pos: position{line: 2825, col: 13, offset: 93773},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2825, col: 13, offset: 93773},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2825, col: 20, offset: 93780},
												expr: &choiceExpr{
													pos: position{line: 2846, col: 11, offset: 94457},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2846, col: 11, offset: 94457},
															val:        "http://",
															ignoreCase: false,
															want:       "\"http://\"",
														},
														&litMatcher{
															pos:        position{line: 2846, col: 23, offset: 94469},
															val:        "https://",
															ignoreCase: false,
															want:       "\"https://\"",
														},
														&litMatcher{
															pos:        position{line: 2846, col: 36, offset: 94482},
															val:        "ftp://",
															ignoreCase: false,
															want:       "\"ftp://\"",
														},
														&litMatcher{
															pos:        position{line: 2846, col: 47, offset: 94493},
															val:        "irc://",
															ignoreCase: false,
															want:       "\"irc://\"",
														},
														&litMatcher{
															pos:        position{line: 2846, col: 58, offset: 94504},
															val:        "mailto:",
															ignoreCase: false,
															want:       "\"mailto:\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2825, col: 30, offset: 93790},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2825, col: 35, offset: 93795},
												expr: &choiceExpr{
													pos: position{line: 2825, col: 36, offset: 93796},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2833, col: 13, offset: 94065},
															run: (*parser).callonImageBlock19,
															expr: &labeledExpr{
																pos:   position{line: 2833, col: 13, offset: 94065},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2833, col: 22, offset: 94074},
																	expr: &choiceExpr{
																		pos: position{line: 2834, col: 5, offset: 94080},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2834, col: 5, offset: 94080},
																				run: (*parser).callonImageBlock23,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2834, col: 5, offset: 94080},
																					expr: &charClassMatcher{
																						pos:        position{line: 2834, col: 6, offset: 94081},
																						val:        "[^\\r\\n[]�&<>{ ]",
																						chars:      []rune{'\r', '\n', '[', ']', '�', '&', '<', '>', '{', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 416, col: 5, offset: 13530},
																				run: (*parser).callonImageBlock26,
																				expr: &seqExpr{
																					pos: position{line: 416, col: 5, offset: 13530},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 416, col: 5, offset: 13530},
																							run: (*parser).callonImageBlock28,
																						},
																						&labeledExpr{
																							pos:   position{line: 419, col: 5, offset: 13594},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 419, col: 14, offset: 13603},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 430, col: 25, offset: 14065},
																										run: (*parser).callonImageBlock31,
																										expr: &seqExpr{
																											pos: position{line: 430, col: 25, offset: 14065},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 430, col: 25, offset: 14065},
																													val:        "{counter:",
																													ignoreCase: false,
																													want:       "\"{counter:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 430, col: 37, offset: 14077},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 120, col: 18, offset: 3502},
																														run: (*parser).callonImageBlock35,
																														expr: &seqExpr{
																															pos: position{line: 120, col: 18, offset: 3502},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 120, col: 18, offset: 3502},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 120, col: 28, offset: 3512},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 120, col: 29, offset: 3513},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 430, col: 56, offset: 14096},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 430, col: 62, offset: 14102},
																														expr: &actionExpr{
																															pos: position{line: 438, col: 17, offset: 14365},
																															run: (*parser).callonImageBlock42,
																															expr: &seqExpr{
																																pos: position{line: 438, col: 17, offset: 14365},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 438, col: 17, offset: 14365},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 438, col: 21, offset: 14369},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 438, col: 28, offset: 14376},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 438, col: 28, offset: 14376},
																																					run: (*parser).callonImageBlock47,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 438, col: 28, offset: 14376},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 440, col: 9, offset: 14430},
																																					run: (*parser).callonImageBlock49,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 440, col: 9, offset: 14430},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 440, col: 9, offset: 14430},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 430, col: 78, offset: 14118},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 434, col: 25, offset: 14220},
																										run: (*parser).callonImageBlock53,
																										expr: &seqExpr{
																											pos: position{line: 434, col: 25, offset: 14220},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 434, col: 25, offset: 14220},
																													val:        "{counter2:",
																													ignoreCase: false,
																													want:       "\"{counter2:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 434, col: 38, offset: 14233},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 120, col: 18, offset: 3502},
																														run: (*parser).callonImageBlock57,
																														expr: &seqExpr{
																															pos: position{line: 120, col: 18, offset: 3502},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 120, col: 18, offset: 3502},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 120, col: 28, offset: 3512},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 120, col: 29, offset: 3513},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 434, col: 57, offset: 14252},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 434, col: 63, offset: 14258},
																														expr: &actionExpr{
																															pos: position{line: 438, col: 17, offset: 14365},
																															run: (*parser).callonImageBlock64,
																															expr: &seqExpr{
																																pos: position{line: 438, col: 17, offset: 14365},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 438, col: 17, offset: 14365},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 438, col: 21, offset: 14369},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 438, col: 28, offset: 14376},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 438, col: 28, offset: 14376},
																																					run: (*parser).callonImageBlock69,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 438, col: 28, offset: 14376},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 440, col: 9, offset: 14430},
																																					run: (*parser).callonImageBlock71,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 440, col: 9, offset: 14430},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 440, col: 9, offset: 14430},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 434, col: 79, offset: 14274},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 423, col: 31, offset: 13720},
																										run: (*parser).callonImageBlock75,
																										expr: &seqExpr{
																											pos: position{line: 423, col: 31, offset: 13720},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 423, col: 31, offset: 13720},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 423, col: 35, offset: 13724},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 120, col: 18, offset: 3502},
																														run: (*parser).callonImageBlock79,
																														expr: &seqExpr{
																															pos: position{line: 120, col: 18, offset: 3502},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 120, col: 18, offset: 3502},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 120, col: 28, offset: 3512},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 120, col: 29, offset: 3513},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 423, col: 54, offset: 13743},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2576, col: 5, offset: 86006},
																				run: (*parser).callonImageBlock85,
																				expr: &seqExpr{
																					pos: position{line: 2576, col: 5, offset: 86006},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 2576, col: 5, offset: 86006},
																							run: (*parser).callonImageBlock87,
																						},
																						&labeledExpr{
																							pos:   position{line: 2579, col: 5, offset: 86077},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 2581, col: 9, offset: 86175},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2581, col: 9, offset: 86175},
																										run: (*parser).callonImageBlock90,
																										expr: &choiceExpr{
																											pos: position{line: 458, col: 27, offset: 15084},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 458, col: 27, offset: 15084},
																													run: (*parser).callonImageBlock92,
																													expr: &seqExpr{
																														pos: position{line: 458, col: 27, offset: 15084},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 458, col: 27, offset: 15084},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 458, col: 32, offset: 15089},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2848, col: 7, offset: 94521},
																																	run: (*parser).callonImageBlock96,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2848, col: 7, offset: 94521},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2848, col: 7, offset: 94521},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 458, col: 40, offset: 15097},
																																expr: &actionExpr{
																																	pos: position{line: 2860, col: 10, offset: 94799},
																																	run: (*parser).callonImageBlock100,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2860, col: 11, offset: 94800},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 458, col: 47, offset: 15104},
																																val:        ",",
																																ignoreCase: false,
																																want:       "\",\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 458, col: 51, offset: 15108},
																																label: "label",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 468, col: 24, offset: 15521},
																																	expr: &choiceExpr{
																																		pos: position{line: 469, col: 5, offset: 15527},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 469, col: 6, offset: 15528},
																																				run: (*parser).callonImageBlock106,
																																				expr: &seqExpr{
																																					pos: position{line: 469, col: 6, offset: 15528},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 469, col: 6, offset: 15528},
																																							val:        "[0-9\\pL]",
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 469, col: 14, offset: 15536},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 469, col: 14, offset: 15536},
																																								val:        "[^\\r\\n{<>]",
																																								chars:      []rune{'\r', '\n', '{', '<', '>'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 416, col: 5, offset: 13530},
																																				run: (*parser).callonImageBlock111,
																																				expr: &seqExpr{
																																					pos: position{line: 416, col: 5, offset: 13530},
																																					exprs: []interface{}{
																																						&andCodeExpr{
																																							pos: position{line: 416, col: 5, offset: 13530},
																																							run: (*parser).callonImageBlock113,
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 419, col: 5, offset: 13594},
																																							label: "element",
																																							expr: &choiceExpr{
																																								pos: position{line: 419, col: 14, offset: 13603},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 430, col: 25, offset: 14065},
																																										run: (*parser).callonImageBlock116,
																																										expr: &seqExpr{
																																											pos: position{line: 430, col: 25, offset: 14065},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 430, col: 25, offset: 14065},
																																													val:        "{counter:",
																																													ignoreCase: false,
																																													want:       "\"{counter:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 430, col: 37, offset: 14077},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														run: (*parser).callonImageBlock120,
																																														expr: &seqExpr{
																																															pos: position{line: 120, col: 18, offset: 3502},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 120, col: 18, offset: 3502},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 120, col: 28, offset: 3512},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 120, col: 29, offset: 3513},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 430, col: 56, offset: 14096},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 430, col: 62, offset: 14102},
																																														expr: &actionExpr{
																																															pos: position{line: 438, col: 17, offset: 14365},
																																															run: (*parser).callonImageBlock127,
																																															expr: &seqExpr{
																																																pos: position{line: 438, col: 17, offset: 14365},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 438, col: 17, offset: 14365},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 438, col: 21, offset: 14369},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 438, col: 28, offset: 14376},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 438, col: 28, offset: 14376},
																																																					run: (*parser).callonImageBlock132,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 438, col: 28, offset: 14376},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 440, col: 9, offset: 14430},
																																																					run: (*parser).callonImageBlock134,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 440, col: 9, offset: 14430},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 440, col: 9, offset: 14430},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 430, col: 78, offset: 14118},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 434, col: 25, offset: 14220},
																																										run: (*parser).callonImageBlock138,
																																										expr: &seqExpr{
																																											pos: position{line: 434, col: 25, offset: 14220},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 434, col: 25, offset: 14220},
																																													val:        "{counter2:",
																																													ignoreCase: false,
																																													want:       "\"{counter2:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 434, col: 38, offset: 14233},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														run: (*parser).callonImageBlock142,
																																														expr: &seqExpr{
																																															pos: position{line: 120, col: 18, offset: 3502},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 120, col: 18, offset: 3502},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 120, col: 28, offset: 3512},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 120, col: 29, offset: 3513},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 434, col: 57, offset: 14252},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 434, col: 63, offset: 14258},
																																														expr: &actionExpr{
																																															pos: position{line: 438, col: 17, offset: 14365},
																																															run: (*parser).callonImageBlock149,
																																															expr: &seqExpr{
																																																pos: position{line: 438, col: 17, offset: 14365},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 438, col: 17, offset: 14365},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 438, col: 21, offset: 14369},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 438, col: 28, offset: 14376},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 438, col: 28, offset: 14376},
																																																					run: (*parser).callonImageBlock154,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 438, col: 28, offset: 14376},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 440, col: 9, offset: 14430},
																																																					run: (*parser).callonImageBlock156,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 440, col: 9, offset: 14430},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 440, col: 9, offset: 14430},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 434, col: 79, offset: 14274},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 423, col: 31, offset: 13720},
																																										run: (*parser).callonImageBlock160,
																																										expr: &seqExpr{
																																											pos: position{line: 423, col: 31, offset: 13720},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 423, col: 31, offset: 13720},
																																													val:        "{",
																																													ignoreCase: false,
																																													want:       "\"{\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 423, col: 35, offset: 13724},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														run: (*parser).callonImageBlock164,
																																														expr: &seqExpr{
																																															pos: position{line: 120, col: 18, offset: 3502},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 120, col: 18, offset: 3502},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 120, col: 28, offset: 3512},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 120, col: 29, offset: 3513},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 423, col: 54, offset: 13743},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 473, col: 8, offset: 15760},
																																				run: (*parser).callonImageBlock170,
																																				expr: &litMatcher{
																																					pos:        position{line: 473, col: 8, offset: 15760},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 458, col: 79, offset: 15136},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 460, col: 9, offset: 15209},
																													run: (*parser).callonImageBlock173,
																													expr: &seqExpr{
																														pos: position{line: 460, col: 9, offset: 15209},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 460, col: 9, offset: 15209},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 460, col: 14, offset: 15214},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2848, col: 7, offset: 94521},
																																	run: (*parser).callonImageBlock177,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2848, col: 7, offset: 94521},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2848, col: 7, offset: 94521},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 460, col: 22, offset: 15222},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2584, col: 11, offset: 86279},
																										run: (*parser).callonImageBlock181,
																										expr: &charClassMatcher{
																											pos:        position{line: 2584, col: 12, offset: 86280},
																											val:        "[<>&]",
																											chars:      []rune{'<', '>', '&'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2840, col: 7, offset: 94305},
																				run: (*parser).callonImageBlock183,
																				expr: &litMatcher{
																					pos:        position{line: 2840, col: 7, offset: 94305},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 914, col: 23, offset: 28983},
															run: (*parser).callonImageBlock185,
															expr: &seqExpr{
																pos: position{line: 914, col: 23, offset: 28983},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 912, col: 32, offset: 28951},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 914, col: 51, offset: 29011},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 914, col: 56, offset: 29016},
																			run: (*parser).callonImageBlock189,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 914, col: 56, offset: 29016},
																				expr: &charClassMatcher{
																					pos:        position{line: 914, col: 56, offset: 29016},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 912, col: 32, offset: 28951},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1133, col: 31, offset: 36412},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1133, col: 49, offset: 36430},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1133, col: 67, offset: 36448},
							expr: &actionExpr{
								pos: position{line: 2860, col: 10, offset: 94799},
								run: (*parser).callonImageBlock196,
								expr: &charClassMatcher{
									pos:        position{line: 2860, col: 11, offset: 94800},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2877, col: 8, offset: 95162},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2870, col: 12, offset: 95022},
									run: (*parser).callonImageBlock199,
									expr: &choiceExpr{
										pos: position{line: 2870, col: 13, offset: 95023},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2870, col: 13, offset: 95023},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 20, offset: 95030},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 29, offset: 95039},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2874, col: 8, offset: 95112},
									expr: &anyMatcher{
										line: 2874, col: 9, offset: 95113,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1139, col: 1, offset: 36742},
			expr: &actionExpr{
				pos: position{line: 1139, col: 16, offset: 36757},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1139, col: 16, offset: 36757},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1139, col: 16, offset: 36757},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1139, col: 25, offset: 36766},
							expr: &litMatcher{
								pos:        position{line: 1139, col: 26, offset: 36767},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1139, col: 30, offset: 36771},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 2825, col: 13, offset: 93773},
								run: (*parser).callonInlineImage7,
								expr: &seqExpr{
									pos: position{line: 2825, col: 13, offset: 93773},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2825, col: 13, offset: 93773},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2825, col: 20, offset: 93780},
												expr: &choiceExpr{
													pos: position{line: 2846, col: 11, offset: 94457},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2846, col: 11, offset: 94457},
															val:        "http://",
															ignoreCase: false,
															want:       "\"http://\"",
														},
														&litMatcher{
															pos:        position{line: 2846, col: 23, offset: 94469},
															val:        "https://",
															ignoreCase: false,
															want:       "\"https://\"",
														},
														&litMatcher{
															pos:        position{line: 2846, col: 36, offset: 94482},
															val:        "ftp://",
															ignoreCase: false,
															want:       "\"ftp://\"",
														},
														&litMatcher{
															pos:        position{line: 2846, col: 47, offset: 94493},
															val:        "irc://",
															ignoreCase: false,
															want:       "\"irc://\"",
														},
														&litMatcher{
															pos:        position{line: 2846, col: 58, offset: 94504},
															val:        "mailto:",
															ignoreCase: false,
															want:       "\"mailto:\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2825, col: 30, offset: 93790},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2825, col: 35, offset: 93795},
												expr: &choiceExpr{
													pos: position{line: 2825, col: 36, offset: 93796},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2833, col: 13, offset: 94065},
															run: (*parser).callonInlineImage20,
															expr: &labeledExpr{
																pos:   position{line: 2833, col: 13, offset: 94065},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2833, col: 22, offset: 94074},
																	expr: &choiceExpr{
																		pos: position{line: 2834, col: 5, offset: 94080},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2834, col: 5, offset: 94080},
																				run: (*parser).callonInlineImage24,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2834, col: 5, offset: 94080},
																					expr: &charClassMatcher{
																						pos:        position{line: 2834, col: 6, offset: 94081},
																						val:        "[^\\r\\n[]�&<>{ ]",
																						chars:      []rune{'\r', '\n', '[', ']', '�', '&', '<', '>', '{', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 416, col: 5, offset: 13530},
																				run: (*parser).callonInlineImage27,
																				expr: &seqExpr{
																					pos: position{line: 416, col: 5, offset: 13530},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 416, col: 5, offset: 13530},
																							run: (*parser).callonInlineImage29,
																						},
																						&labeledExpr{
																							pos:   position{line: 419, col: 5, offset: 13594},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 419, col: 14, offset: 13603},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 430, col: 25, offset: 14065},
																										run: (*parser).callonInlineImage32,
																										expr: &seqExpr{
																											pos: position{line: 430, col: 25, offset: 14065},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 430, col: 25, offset: 14065},
																													val:        "{counter:",
																													ignoreCase: false,
																													want:       "\"{counter:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 430, col: 37, offset: 14077},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 120, col: 18, offset: 3502},
																														run: (*parser).callonInlineImage36,
																														expr: &seqExpr{
																															pos: position{line: 120, col: 18, offset: 3502},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 120, col: 18, offset: 3502},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 120, col: 28, offset: 3512},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 120, col: 29, offset: 3513},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 430, col: 56, offset: 14096},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 430, col: 62, offset: 14102},
																														expr: &actionExpr{
																															pos: position{line: 438, col: 17, offset: 14365},
																															run: (*parser).callonInlineImage43,
																															expr: &seqExpr{
																																pos: position{line: 438, col: 17, offset: 14365},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 438, col: 17, offset: 14365},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 438, col: 21, offset: 14369},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 438, col: 28, offset: 14376},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 438, col: 28, offset: 14376},
																																					run: (*parser).callonInlineImage48,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 438, col: 28, offset: 14376},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 440, col: 9, offset: 14430},
																																					run: (*parser).callonInlineImage50,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 440, col: 9, offset: 14430},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 440, col: 9, offset: 14430},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 430, col: 78, offset: 14118},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 434, col: 25, offset: 14220},
																										run: (*parser).callonInlineImage54,
																										expr: &seqExpr{
																											pos: position{line: 434, col: 25, offset: 14220},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 434, col: 25, offset: 14220},
																													val:        "{counter2:",
																													ignoreCase: false,
																													want:       "\"{counter2:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 434, col: 38, offset: 14233},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 120, col: 18, offset: 3502},
																														run: (*parser).callonInlineImage58,
																														expr: &seqExpr{
																															pos: position{line: 120, col: 18, offset: 3502},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 120, col: 18, offset: 3502},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 120, col: 28, offset: 3512},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 120, col: 29, offset: 3513},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 434, col: 57, offset: 14252},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 434, col: 63, offset: 14258},
																														expr: &actionExpr{
																															pos: position{line: 438, col: 17, offset: 14365},
																															run: (*parser).callonInlineImage65,
																															expr: &seqExpr{
																																pos: position{line: 438, col: 17, offset: 14365},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 438, col: 17, offset: 14365},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 438, col: 21, offset: 14369},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 438, col: 28, offset: 14376},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 438, col: 28, offset: 14376},
																																					run: (*parser).callonInlineImage70,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 438, col: 28, offset: 14376},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 440, col: 9, offset: 14430},
																																					run: (*parser).callonInlineImage72,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 440, col: 9, offset: 14430},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 440, col: 9, offset: 14430},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 434, col: 79, offset: 14274},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 423, col: 31, offset: 13720},
																										run: (*parser).callonInlineImage76,
																										expr: &seqExpr{
																											pos: position{line: 423, col: 31, offset: 13720},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 423, col: 31, offset: 13720},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 423, col: 35, offset: 13724},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 120, col: 18, offset: 3502},
																														run: (*parser).callonInlineImage80,
																														expr: &seqExpr{
																															pos: position{line: 120, col: 18, offset: 3502},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 120, col: 18, offset: 3502},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 120, col: 28, offset: 3512},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 120, col: 29, offset: 3513},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 423, col: 54, offset: 13743},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2576, col: 5, offset: 86006},
																				run: (*parser).callonInlineImage86,
																				expr: &seqExpr{
																					pos: position{line: 2576, col: 5, offset: 86006},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 2576, col: 5, offset: 86006},
																							run: (*parser).callonInlineImage88,
																						},
																						&labeledExpr{
																							pos:   position{line: 2579, col: 5, offset: 86077},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 2581, col: 9, offset: 86175},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2581, col: 9, offset: 86175},
																										run: (*parser).callonInlineImage91,
																										expr: &choiceExpr{
																											pos: position{line: 458, col: 27, offset: 15084},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 458, col: 27, offset: 15084},
																													run: (*parser).callonInlineImage93,
																													expr: &seqExpr{
																														pos: position{line: 458, col: 27, offset: 15084},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 458, col: 27, offset: 15084},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 458, col: 32, offset: 15089},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2848, col: 7, offset: 94521},
																																	run: (*parser).callonInlineImage97,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2848, col: 7, offset: 94521},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2848, col: 7, offset: 94521},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 458, col: 40, offset: 15097},
																																expr: &actionExpr{
																																	pos: position{line: 2860, col: 10, offset: 94799},
																																	run: (*parser).callonInlineImage101,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2860, col: 11, offset: 94800},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 458, col: 47, offset: 15104},
																																val:        ",",
																																ignoreCase: false,
																																want:       "\",\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 458, col: 51, offset: 15108},
																																label: "label",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 468, col: 24, offset: 15521},
																																	expr: &choiceExpr{
																																		pos: position{line: 469, col: 5, offset: 15527},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 469, col: 6, offset: 15528},
																																				run: (*parser).callonInlineImage107,
																																				expr: &seqExpr{
																																					pos: position{line: 469, col: 6, offset: 15528},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 469, col: 6, offset: 15528},
																																							val:        "[0-9\\pL]",
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 469, col: 14, offset: 15536},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 469, col: 14, offset: 15536},
																																								val:        "[^\\r\\n{<>]",
																																								chars:      []rune{'\r', '\n', '{', '<', '>'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 416, col: 5, offset: 13530},
																																				run: (*parser).callonInlineImage112,
																																				expr: &seqExpr{
																																					pos: position{line: 416, col: 5, offset: 13530},
																																					exprs: []interface{}{
																																						&andCodeExpr{
																																							pos: position{line: 416, col: 5, offset: 13530},
																																							run: (*parser).callonInlineImage114,
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 419, col: 5, offset: 13594},
																																							label: "element",
																																							expr: &choiceExpr{
																																								pos: position{line: 419, col: 14, offset: 13603},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 430, col: 25, offset: 14065},
																																										run: (*parser).callonInlineImage117,
																																										expr: &seqExpr{
																																											pos: position{line: 430, col: 25, offset: 14065},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 430, col: 25, offset: 14065},
																																													val:        "{counter:",
																																													ignoreCase: false,
																																													want:       "\"{counter:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 430, col: 37, offset: 14077},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														run: (*parser).callonInlineImage121,
																																														expr: &seqExpr{
																																															pos: position{line: 120, col: 18, offset: 3502},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 120, col: 18, offset: 3502},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 120, col: 28, offset: 3512},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 120, col: 29, offset: 3513},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 430, col: 56, offset: 14096},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 430, col: 62, offset: 14102},
																																														expr: &actionExpr{
																																															pos: position{line: 438, col: 17, offset: 14365},
																																															run: (*parser).callonInlineImage128,
																																															expr: &seqExpr{
																																																pos: position{line: 438, col: 17, offset: 14365},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 438, col: 17, offset: 14365},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 438, col: 21, offset: 14369},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 438, col: 28, offset: 14376},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 438, col: 28, offset: 14376},
																																																					run: (*parser).callonInlineImage133,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 438, col: 28, offset: 14376},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 440, col: 9, offset: 14430},
																																																					run: (*parser).callonInlineImage135,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 440, col: 9, offset: 14430},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 440, col: 9, offset: 14430},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 430, col: 78, offset: 14118},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 434, col: 25, offset: 14220},
																																										run: (*parser).callonInlineImage139,
																																										expr: &seqExpr{
																																											pos: position{line: 434, col: 25, offset: 14220},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 434, col: 25, offset: 14220},
																																													val:        "{counter2:",
																																													ignoreCase: false,
																																													want:       "\"{counter2:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 434, col: 38, offset: 14233},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														run: (*parser).callonInlineImage143,
																																														expr: &seqExpr{
																																															pos: position{line: 120, col: 18, offset: 3502},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 120, col: 18, offset: 3502},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 120, col: 28, offset: 3512},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 120, col: 29, offset: 3513},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 434, col: 57, offset: 14252},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 434, col: 63, offset: 14258},
																																														expr: &actionExpr{
																																															pos: position{line: 438, col: 17, offset: 14365},
																																															run: (*parser).callonInlineImage150,
																																															expr: &seqExpr{
																																																pos: position{line: 438, col: 17, offset: 14365},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 438, col: 17, offset: 14365},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 438, col: 21, offset: 14369},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 438, col: 28, offset: 14376},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 438, col: 28, offset: 14376},
																																																					run: (*parser).callonInlineImage155,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 438, col: 28, offset: 14376},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 440, col: 9, offset: 14430},
																																																					run: (*parser).callonInlineImage157,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 440, col: 9, offset: 14430},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 440, col: 9, offset: 14430},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 434, col: 79, offset: 14274},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 423, col: 31, offset: 13720},
																																										run: (*parser).callonInlineImage161,
																																										expr: &seqExpr{
																																											pos: position{line: 423, col: 31, offset: 13720},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 423, col: 31, offset: 13720},
																																													val:        "{",
																																													ignoreCase: false,
																																													want:       "\"{\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 423, col: 35, offset: 13724},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														run: (*parser).callonInlineImage165,
																																														expr: &seqExpr{
																																															pos: position{line: 120, col: 18, offset: 3502},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 120, col: 18, offset: 3502},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 120, col: 28, offset: 3512},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 120, col: 29, offset: 3513},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 423, col: 54, offset: 13743},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 473, col: 8, offset: 15760},
																																				run: (*parser).callonInlineImage171,
																																				expr: &litMatcher{
																																					pos:        position{line: 473, col: 8, offset: 15760},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 458, col: 79, offset: 15136},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 460, col: 9, offset: 15209},
																													run: (*parser).callonInlineImage174,
																													expr: &seqExpr{
																														pos: position{line: 460, col: 9, offset: 15209},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 460, col: 9, offset: 15209},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 460, col: 14, offset: 15214},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2848, col: 7, offset: 94521},
																																	run: (*parser).callonInlineImage178,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2848, col: 7, offset: 94521},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2848, col: 7, offset: 94521},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 460, col: 22, offset: 15222},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2584, col: 11, offset: 86279},
																										run: (*parser).callonInlineImage182,
																										expr: &charClassMatcher{
																											pos:        position{line: 2584, col: 12, offset: 86280},
																											val:        "[<>&]",
																											chars:      []rune{'<', '>', '&'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2840, col: 7, offset: 94305},
																				run: (*parser).callonInlineImage184,
																				expr: &litMatcher{
																					pos:        position{line: 2840, col: 7, offset: 94305},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 914, col: 23, offset: 28983},
															run: (*parser).callonInlineImage186,
															expr: &seqExpr{
																pos: position{line: 914, col: 23, offset: 28983},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 912, col: 32, offset: 28951},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 914, col: 51, offset: 29011},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 914, col: 56, offset: 29016},
																			run: (*parser).callonInlineImage190,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 914, col: 56, offset: 29016},
																				expr: &charClassMatcher{
																					pos:        position{line: 914, col: 56, offset: 29016},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 912, col: 32, offset: 28951},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1139, col: 46, offset: 36787},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1139, col: 64, offset: 36805},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1146, col: 1, offset: 37235},
			expr: &actionExpr{
				pos: position{line: 1146, col: 15, offset: 37249},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1146, col: 15, offset: 37249},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1146, col: 15, offset: 37249},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1146, col: 23, offset: 37257},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1146, col: 29, offset: 37263},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1146, col: 29, offset: 37263},
									expr: &charClassMatcher{
										pos:        position{line: 1146, col: 29, offset: 37263},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1146, col: 73, offset: 37307},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1146, col: 85, offset: 37319},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1153, col: 1, offset: 37685},
			expr: &choiceExpr{
				pos: position{line: 1153, col: 19, offset: 37703},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1153, col: 19, offset: 37703},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1153, col: 19, offset: 37703},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1153, col: 19, offset: 37703},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1153, col: 32, offset: 37716},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1153, col: 41, offset: 37725},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1153, col: 58, offset: 37742},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1155, col: 9, offset: 37802},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1155, col: 9, offset: 37802},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1155, col: 9, offset: 37802},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1155, col: 21, offset: 37814},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 2790, col: 14, offset: 92611},
										run: (*parser).callonInlineFootnote12,
										expr: &oneOrMoreExpr{
											pos: position{line: 2790, col: 14, offset: 92611},
											expr: &charClassMatcher{
												pos:        position{line: 2790, col: 14, offset: 92611},
												val:        "[0-9\\pL]",
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1155, col: 39, offset: 37832},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1155, col: 43, offset: 37836},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1155, col: 51, offset: 37844},
										expr: &ruleRefExpr{
											pos:  position{line: 1155, col: 52, offset: 37845},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1155, col: 70, offset: 37863},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1161, col: 1, offset: 38012},
			expr: &actionExpr{
				pos: position{line: 1161, col: 20, offset: 38031},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1161, col: 20, offset: 38031},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1161, col: 29, offset: 38040},
						expr: &seqExpr{
							pos: position{line: 1161, col: 30, offset: 38041},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1161, col: 30, offset: 38041},
									expr: &litMatcher{
										pos:        position{line: 1161, col: 31, offset: 38042},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1161, col: 35, offset: 38046},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1193, col: 1, offset: 39735},
			expr: &choiceExpr{
				pos: position{line: 1193, col: 21, offset: 39755},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1193, col: 21, offset: 39755},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1193, col: 21, offset: 39755},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1193, col: 21, offset: 39755},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1193, col: 30, offset: 39764},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1193, col: 38, offset: 39772},
										expr: &actionExpr{
											pos: position{line: 1199, col: 30, offset: 40098},
											run: (*parser).callonPassthroughMacro7,
											expr: &charClassMatcher{
												pos:        position{line: 1199, col: 30, offset: 40098},
												val:        "[^]]",
												chars:      []rune{']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1193, col: 67, offset: 39801},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1195, col: 9, offset: 39905},
						run: (*parser).callonPassthroughMacro10,
						expr: &seqExpr{
							pos: position{line: 1195, col: 9, offset: 39905},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1195, col: 9, offset: 39905},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1195, col: 19, offset: 39915},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1195, col: 27, offset: 39923},
										expr: &choiceExpr{
											pos: position{line: 1195, col: 28, offset: 39924},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1195, col: 28, offset: 39924},
													name: "QuotedText",
												},
												&actionExpr{
													pos: position{line: 1199, col: 30, offset: 40098},
													run: (*parser).callonPassthroughMacro17,
													expr: &charClassMatcher{
														pos:        position{line: 1199, col: 30, offset: 40098},
														val:        "[^]]",
														chars:      []rune{']'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1195, col: 69, offset: 39965},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1206, col: 1, offset: 40354},
			expr: &choiceExpr{
				pos: position{line: 1206, col: 9, offset: 40362},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1206, col: 9, offset: 40362},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1206, col: 24, offset: 40377},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1209, col: 1, offset: 40458},
			expr: &actionExpr{
				pos: position{line: 1209, col: 17, offset: 40474},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1209, col: 17, offset: 40474},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1209, col: 17, offset: 40474},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1209, col: 25, offset: 40482},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 2825, col: 13, offset: 93773},
								run: (*parser).callonRelativeLink5,
								expr: &seqExpr{
									pos: position{line: 2825, col: 13, offset: 93773},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2825, col: 13, offset: 93773},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2825, col: 20, offset: 93780},
												expr: &choiceExpr{
													pos: position{line: 2846, col: 11, offset: 94457},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2846, col: 11, offset: 94457},
															val:        "http://",
															ignoreCase: false,
															want:       "\"http://\"",
														},
														&litMatcher{
															pos:        position{line: 2846, col: 23, offset: 94469},
															val:        "https://",
															ignoreCase: false,
															want:       "\"https://\"",
														},
														&litMatcher{
															pos:        position{line: 2846, col: 36, offset: 94482},
															val:        "ftp://",
															ignoreCase: false,
															want:       "\"ftp://\"",
														},
														&litMatcher{
															pos:        position{line: 2846, col: 47, offset: 94493},
															val:        "irc://",
															ignoreCase: false,
															want:       "\"irc://\"",
														},
														&litMatcher{
															pos:        position{line: 2846, col: 58, offset: 94504},
															val:        "mailto:",
															ignoreCase: false,
															want:       "\"mailto:\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2825, col: 30, offset: 93790},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2825, col: 35, offset: 93795},
												expr: &choiceExpr{
													pos: position{line: 2825, col: 36, offset: 93796},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2833, col: 13, offset: 94065},
															run: (*parser).callonRelativeLink18,
															expr: &labeledExpr{
																pos:   position{line: 2833, col: 13, offset: 94065},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2833, col: 22, offset: 94074},
																	expr: &choiceExpr{
																		pos: position{line: 2834, col: 5, offset: 94080},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2834, col: 5, offset: 94080},
																				run: (*parser).callonRelativeLink22,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2834, col: 5, offset: 94080},
																					expr: &charClassMatcher{
																						pos:        position{line: 2834, col: 6, offset: 94081},
																						val:        "[^\\r\\n[]�&<>{ ]",
																						chars:      []rune{'\r', '\n', '[', ']', '�', '&', '<', '>', '{', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 416, col: 5, offset: 13530},
																				run: (*parser).callonRelativeLink25,
																				expr: &seqExpr{
																					pos: position{line: 416, col: 5, offset: 13530},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 416, col: 5, offset: 13530},
																							run: (*parser).callonRelativeLink27,
																						},
																						&labeledExpr{
																							pos:   position{line: 419, col: 5, offset: 13594},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 419, col: 14, offset: 13603},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 430, col: 25, offset: 14065},
																										run: (*parser).callonRelativeLink30,
																										expr: &seqExpr{
																											pos: position{line: 430, col: 25, offset: 14065},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 430, col: 25, offset: 14065},
																													val:        "{counter:",
																													ignoreCase: false,
																													want:       "\"{counter:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 430, col: 37, offset: 14077},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 120, col: 18, offset: 3502},
																														run: (*parser).callonRelativeLink34,
																														expr: &seqExpr{
																															pos: position{line: 120, col: 18, offset: 3502},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 120, col: 18, offset: 3502},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 120, col: 28, offset: 3512},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 120, col: 29, offset: 3513},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 430, col: 56, offset: 14096},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 430, col: 62, offset: 14102},
																														expr: &actionExpr{
																															pos: position{line: 438, col: 17, offset: 14365},
																															run: (*parser).callonRelativeLink41,
																															expr: &seqExpr{
																																pos: position{line: 438, col: 17, offset: 14365},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 438, col: 17, offset: 14365},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 438, col: 21, offset: 14369},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 438, col: 28, offset: 14376},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 438, col: 28, offset: 14376},
																																					run: (*parser).callonRelativeLink46,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 438, col: 28, offset: 14376},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 440, col: 9, offset: 14430},
																																					run: (*parser).callonRelativeLink48,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 440, col: 9, offset: 14430},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 440, col: 9, offset: 14430},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 430, col: 78, offset: 14118},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 434, col: 25, offset: 14220},
																										run: (*parser).callonRelativeLink52,
																										expr: &seqExpr{
																											pos: position{line: 434, col: 25, offset: 14220},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 434, col: 25, offset: 14220},
																													val:        "{counter2:",
																													ignoreCase: false,
																													want:       "\"{counter2:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 434, col: 38, offset: 14233},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 120, col: 18, offset: 3502},
																														run: (*parser).callonRelativeLink56,
																														expr: &seqExpr{
																															pos: position{line: 120, col: 18, offset: 3502},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 120, col: 18, offset: 3502},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 120, col: 28, offset: 3512},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 120, col: 29, offset: 3513},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 434, col: 57, offset: 14252},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 434, col: 63, offset: 14258},
																														expr: &actionExpr{
																															pos: position{line: 438, col: 17, offset: 14365},
																															run: (*parser).callonRelativeLink63,
																															expr: &seqExpr{
																																pos: position{line: 438, col: 17, offset: 14365},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 438, col: 17, offset: 14365},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 438, col: 21, offset: 14369},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 438, col: 28, offset: 14376},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 438, col: 28, offset: 14376},
																																					run: (*parser).callonRelativeLink68,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 438, col: 28, offset: 14376},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 440, col: 9, offset: 14430},
																																					run: (*parser).callonRelativeLink70,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 440, col: 9, offset: 14430},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 440, col: 9, offset: 14430},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 434, col: 79, offset: 14274},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 423, col: 31, offset: 13720},
																										run: (*parser).callonRelativeLink74,
																										expr: &seqExpr{
																											pos: position{line: 423, col: 31, offset: 13720},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 423, col: 31, offset: 13720},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 423, col: 35, offset: 13724},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 120, col: 18, offset: 3502},
																														run: (*parser).callonRelativeLink78,
																														expr: &seqExpr{
																															pos: position{line: 120, col: 18, offset: 3502},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 120, col: 18, offset: 3502},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 120, col: 28, offset: 3512},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 120, col: 29, offset: 3513},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 423, col: 54, offset: 13743},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2576, col: 5, offset: 86006},
																				run: (*parser).callonRelativeLink84,
																				expr: &seqExpr{
																					pos: position{line: 2576, col: 5, offset: 86006},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 2576, col: 5, offset: 86006},
																							run: (*parser).callonRelativeLink86,
																						},
																						&labeledExpr{
																							pos:   position{line: 2579, col: 5, offset: 86077},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 2581, col: 9, offset: 86175},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2581, col: 9, offset: 86175},
																										run: (*parser).callonRelativeLink89,
																										expr: &choiceExpr{
																											pos: position{line: 458, col: 27, offset: 15084},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 458, col: 27, offset: 15084},
																													run: (*parser).callonRelativeLink91,
																													expr: &seqExpr{
																														pos: position{line: 458, col: 27, offset: 15084},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 458, col: 27, offset: 15084},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 458, col: 32, offset: 15089},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2848, col: 7, offset: 94521},
																																	run: (*parser).callonRelativeLink95,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2848, col: 7, offset: 94521},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2848, col: 7, offset: 94521},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 458, col: 40, offset: 15097},
																																expr: &actionExpr{
																																	pos: position{line: 2860, col: 10, offset: 94799},
																																	run: (*parser).callonRelativeLink99,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2860, col: 11, offset: 94800},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 458, col: 47, offset: 15104},
																																val:        ",",
																																ignoreCase: false,
																																want:       "\",\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 458, col: 51, offset: 15108},
																																label: "label",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 468, col: 24, offset: 15521},
																																	expr: &choiceExpr{
																																		pos: position{line: 469, col: 5, offset: 15527},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 469, col: 6, offset: 15528},
																																				run: (*parser).callonRelativeLink105,
																																				expr: &seqExpr{
																																					pos: position{line: 469, col: 6, offset: 15528},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 469, col: 6, offset: 15528},
																																							val:        "[0-9\\pL]",
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 469, col: 14, offset: 15536},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 469, col: 14, offset: 15536},
																																								val:        "[^\\r\\n{<>]",
																																								chars:      []rune{'\r', '\n', '{', '<', '>'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 416, col: 5, offset: 13530},
																																				run: (*parser).callonRelativeLink110,
																																				expr: &seqExpr{
																																					pos: position{line: 416, col: 5, offset: 13530},
																																					exprs: []interface{}{
																																						&andCodeExpr{
																																							pos: position{line: 416, col: 5, offset: 13530},
																																							run: (*parser).callonRelativeLink112,
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 419, col: 5, offset: 13594},
																																							label: "element",
																																							expr: &choiceExpr{
																																								pos: position{line: 419, col: 14, offset: 13603},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 430, col: 25, offset: 14065},
																																										run: (*parser).callonRelativeLink115,
																																										expr: &seqExpr{
																																											pos: position{line: 430, col: 25, offset: 14065},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 430, col: 25, offset: 14065},
																																													val:        "{counter:",
																																													ignoreCase: false,
																																													want:       "\"{counter:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 430, col: 37, offset: 14077},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														run: (*parser).callonRelativeLink119,
																																														expr: &seqExpr{
																																															pos: position{line: 120, col: 18, offset: 3502},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 120, col: 18, offset: 3502},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 120, col: 28, offset: 3512},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 120, col: 29, offset: 3513},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 430, col: 56, offset: 14096},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 430, col: 62, offset: 14102},
																																														expr: &actionExpr{
																																															pos: position{line: 438, col: 17, offset: 14365},
																																															run: (*parser).callonRelativeLink126,
																																															expr: &seqExpr{
																																																pos: position{line: 438, col: 17, offset: 14365},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 438, col: 17, offset: 14365},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 438, col: 21, offset: 14369},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 438, col: 28, offset: 14376},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 438, col: 28, offset: 14376},
																																																					run: (*parser).callonRelativeLink131,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 438, col: 28, offset: 14376},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 440, col: 9, offset: 14430},
																																																					run: (*parser).callonRelativeLink133,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 440, col: 9, offset: 14430},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 440, col: 9, offset: 14430},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 430, col: 78, offset: 14118},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 434, col: 25, offset: 14220},
																																										run: (*parser).callonRelativeLink137,
																																										expr: &seqExpr{
																																											pos: position{line: 434, col: 25, offset: 14220},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 434, col: 25, offset: 14220},
																																													val:        "{counter2:",
																																													ignoreCase: false,
																																													want:       "\"{counter2:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 434, col: 38, offset: 14233},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														run: (*parser).callonRelativeLink141,
																																														expr: &seqExpr{
																																															pos: position{line: 120, col: 18, offset: 3502},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 120, col: 18, offset: 3502},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 120, col: 28, offset: 3512},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 120, col: 29, offset: 3513},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 434, col: 57, offset: 14252},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 434, col: 63, offset: 14258},
																																														expr: &actionExpr{
																																															pos: position{line: 438, col: 17, offset: 14365},
																																															run: (*parser).callonRelativeLink148,
																																															expr: &seqExpr{
																																																pos: position{line: 438, col: 17, offset: 14365},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 438, col: 17, offset: 14365},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 438, col: 21, offset: 14369},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 438, col: 28, offset: 14376},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 438, col: 28, offset: 14376},
																																																					run: (*parser).callonRelativeLink153,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 438, col: 28, offset: 14376},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 440, col: 9, offset: 14430},
																																																					run: (*parser).callonRelativeLink155,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 440, col: 9, offset: 14430},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 440, col: 9, offset: 14430},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 434, col: 79, offset: 14274},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 423, col: 31, offset: 13720},
																																										run: (*parser).callonRelativeLink159,
																																										expr: &seqExpr{
																																											pos: position{line: 423, col: 31, offset: 13720},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 423, col: 31, offset: 13720},
																																													val:        "{",
																																													ignoreCase: false,
																																													want:       "\"{\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 423, col: 35, offset: 13724},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														run: (*parser).callonRelativeLink163,
																																														expr: &seqExpr{
																																															pos: position{line: 120, col: 18, offset: 3502},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 120, col: 18, offset: 3502},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 120, col: 28, offset: 3512},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 120, col: 29, offset: 3513},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 423, col: 54, offset: 13743},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 473, col: 8, offset: 15760},
																																				run: (*parser).callonRelativeLink169,
																																				expr: &litMatcher{
																																					pos:        position{line: 473, col: 8, offset: 15760},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 458, col: 79, offset: 15136},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 460, col: 9, offset: 15209},
																													run: (*parser).callonRelativeLink172,
																													expr: &seqExpr{
																														pos: position{line: 460, col: 9, offset: 15209},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 460, col: 9, offset: 15209},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 460, col: 14, offset: 15214},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2848, col: 7, offset: 94521},
																																	run: (*parser).callonRelativeLink176,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2848, col: 7, offset: 94521},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2848, col: 7, offset: 94521},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 460, col: 22, offset: 15222},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2584, col: 11, offset: 86279},
																										run: (*parser).callonRelativeLink180,
																										expr: &charClassMatcher{
																											pos:        position{line: 2584, col: 12, offset: 86280},
																											val:        "[<>&]",
																											chars:      []rune{'<', '>', '&'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2840, col: 7, offset: 94305},
																				run: (*parser).callonRelativeLink182,
																				expr: &litMatcher{
																					pos:        position{line: 2840, col: 7, offset: 94305},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 914, col: 23, offset: 28983},
															run: (*parser).callonRelativeLink184,
															expr: &seqExpr{
																pos: position{line: 914, col: 23, offset: 28983},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 912, col: 32, offset: 28951},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 914, col: 51, offset: 29011},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 914, col: 56, offset: 29016},
																			run: (*parser).callonRelativeLink188,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 914, col: 56, offset: 29016},
																				expr: &charClassMatcher{
																					pos:        position{line: 914, col: 56, offset: 29016},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 912, col: 32, offset: 28951},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1209, col: 40, offset: 40497},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1209, col: 58, offset: 40515},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1213, col: 1, offset: 40637},
			expr: &actionExpr{
				pos: position{line: 1213, col: 17, offset: 40653},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1213, col: 17, offset: 40653},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1213, col: 17, offset: 40653},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 2829, col: 23, offset: 93922},
								run: (*parser).callonExternalLink4,
								expr: &seqExpr{
									pos: position{line: 2829, col: 23, offset: 93922},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2829, col: 23, offset: 93922},
											expr: &litMatcher{
												pos:        position{line: 2829, col: 24, offset: 93923},
												val:        "[",
												ignoreCase: false,
												want:       "\"[\"",
											},
										},
										&labeledExpr{
											pos:   position{line: 2829, col: 28, offset: 93927},
											label: "scheme",
											expr: &choiceExpr{
												pos: position{line: 2846, col: 11, offset: 94457},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2846, col: 11, offset: 94457},
														val:        "http://",
														ignoreCase: false,
														want:       "\"http://\"",
													},
													&litMatcher{
														pos:        position{line: 2846, col: 23, offset: 94469},
														val:        "https://",
														ignoreCase: false,
														want:       "\"https://\"",
													},
													&litMatcher{
														pos:        position{line: 2846, col: 36, offset: 94482},
														val:        "ftp://",
														ignoreCase: false,
														want:       "\"ftp://\"",
													},
													&litMatcher{
														pos:        position{line: 2846, col: 47, offset: 94493},
														val:        "irc://",
														ignoreCase: false,
														want:       "\"irc://\"",
													},
													&litMatcher{
														pos:        position{line: 2846, col: 58, offset: 94504},
														val:        "mailto:",
														ignoreCase: false,
														want:       "\"mailto:\"",
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2829, col: 44, offset: 93943},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2829, col: 49, offset: 93948},
												expr: &choiceExpr{
													pos: position{line: 2829, col: 50, offset: 93949},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2833, col: 13, offset: 94065},
															run: (*parser).callonExternalLink18,
															expr: &labeledExpr{
																pos:   position{line: 2833, col: 13, offset: 94065},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2833, col: 22, offset: 94074},
																	expr: &choiceExpr{
																		pos: position{line: 2834, col: 5, offset: 94080},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2834, col: 5, offset: 94080},
																				run: (*parser).callonExternalLink22,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2834, col: 5, offset: 94080},
																					expr: &charClassMatcher{
																						pos:        position{line: 2834, col: 6, offset: 94081},
																						val:        "[^\\r\\n[]�&<>{ ]",
																						chars:      []rune{'\r', '\n', '[', ']', '�', '&', '<', '>', '{', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 416, col: 5, offset: 13530},
																				run: (*parser).callonExternalLink25,
																				expr: &seqExpr{
																					pos: position{line: 416, col: 5, offset: 13530},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 416, col: 5, offset: 13530},
																							run: (*parser).callonExternalLink27,
																						},
																						&labeledExpr{
																							pos:   position{line: 419, col: 5, offset: 13594},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 419, col: 14, offset: 13603},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 430, col: 25, offset: 14065},
																										run: (*parser).callonExternalLink30,
																										expr: &seqExpr{
																											pos: position{line: 430, col: 25, offset: 14065},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 430, col: 25, offset: 14065},
																													val:        "{counter:",
																													ignoreCase: false,
																													want:       "\"{counter:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 430, col: 37, offset: 14077},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 120, col: 18, offset: 3502},
																														run: (*parser).callonExternalLink34,
																														expr: &seqExpr{
																															pos: position{line: 120, col: 18, offset: 3502},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 120, col: 18, offset: 3502},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 120, col: 28, offset: 3512},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 120, col: 29, offset: 3513},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 430, col: 56, offset: 14096},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 430, col: 62, offset: 14102},
																														expr: &actionExpr{
																															pos: position{line: 438, col: 17, offset: 14365},
																															run: (*parser).callonExternalLink41,
																															expr: &seqExpr{
																																pos: position{line: 438, col: 17, offset: 14365},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 438, col: 17, offset: 14365},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 438, col: 21, offset: 14369},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 438, col: 28, offset: 14376},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 438, col: 28, offset: 14376},
																																					run: (*parser).callonExternalLink46,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 438, col: 28, offset: 14376},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 440, col: 9, offset: 14430},
																																					run: (*parser).callonExternalLink48,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 440, col: 9, offset: 14430},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 440, col: 9, offset: 14430},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 430, col: 78, offset: 14118},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 434, col: 25, offset: 14220},
																										run: (*parser).callonExternalLink52,
																										expr: &seqExpr{
																											pos: position{line: 434, col: 25, offset: 14220},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 434, col: 25, offset: 14220},
																													val:        "{counter2:",
																													ignoreCase: false,
																													want:       "\"{counter2:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 434, col: 38, offset: 14233},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 120, col: 18, offset: 3502},
																														run: (*parser).callonExternalLink56,
																														expr: &seqExpr{
																															pos: position{line: 120, col: 18, offset: 3502},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 120, col: 18, offset: 3502},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 120, col: 28, offset: 3512},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 120, col: 29, offset: 3513},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 434, col: 57, offset: 14252},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 434, col: 63, offset: 14258},
																														expr: &actionExpr{
																															pos: position{line: 438, col: 17, offset: 14365},
																															run: (*parser).callonExternalLink63,
																															expr: &seqExpr{
																																pos: position{line: 438, col: 17, offset: 14365},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 438, col: 17, offset: 14365},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 438, col: 21, offset: 14369},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 438, col: 28, offset: 14376},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 438, col: 28, offset: 14376},
																																					run: (*parser).callonExternalLink68,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 438, col: 28, offset: 14376},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 440, col: 9, offset: 14430},
																																					run: (*parser).callonExternalLink70,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 440, col: 9, offset: 14430},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 440, col: 9, offset: 14430},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 434, col: 79, offset: 14274},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 423, col: 31, offset: 13720},
																										run: (*parser).callonExternalLink74,
																										expr: &seqExpr{
																											pos: position{line: 423, col: 31, offset: 13720},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 423, col: 31, offset: 13720},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 423, col: 35, offset: 13724},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 120, col: 18, offset: 3502},
																														run: (*parser).callonExternalLink78,
																														expr: &seqExpr{
																															pos: position{line: 120, col: 18, offset: 3502},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 120, col: 18, offset: 3502},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 120, col: 28, offset: 3512},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 120, col: 29, offset: 3513},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 423, col: 54, offset: 13743},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2576, col: 5, offset: 86006},
																				run: (*parser).callonExternalLink84,
																				expr: &seqExpr{
																					pos: position{line: 2576, col: 5, offset: 86006},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 2576, col: 5, offset: 86006},
																							run: (*parser).callonExternalLink86,
																						},
																						&labeledExpr{
																							pos:   position{line: 2579, col: 5, offset: 86077},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 2581, col: 9, offset: 86175},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2581, col: 9, offset: 86175},
																										run: (*parser).callonExternalLink89,
																										expr: &choiceExpr{
																											pos: position{line: 458, col: 27, offset: 15084},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 458, col: 27, offset: 15084},
																													run: (*parser).callonExternalLink91,
																													expr: &seqExpr{
																														pos: position{line: 458, col: 27, offset: 15084},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 458, col: 27, offset: 15084},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 458, col: 32, offset: 15089},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2848, col: 7, offset: 94521},
																																	run: (*parser).callonExternalLink95,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2848, col: 7, offset: 94521},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2848, col: 7, offset: 94521},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 458, col: 40, offset: 15097},
																																expr: &actionExpr{
																																	pos: position{line: 2860, col: 10, offset: 94799},
																																	run: (*parser).callonExternalLink99,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2860, col: 11, offset: 94800},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 458, col: 47, offset: 15104},
																																val:        ",",
																																ignoreCase: false,
																																want:       "\",\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 458, col: 51, offset: 15108},
																																label: "label",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 468, col: 24, offset: 15521},
																																	expr: &choiceExpr{
																																		pos: position{line: 469, col: 5, offset: 15527},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 469, col: 6, offset: 15528},
																																				run: (*parser).callonExternalLink105,
																																				expr: &seqExpr{
																																					pos: position{line: 469, col: 6, offset: 15528},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 469, col: 6, offset: 15528},
																																							val:        "[0-9\\pL]",
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 469, col: 14, offset: 15536},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 469, col: 14, offset: 15536},
																																								val:        "[^\\r\\n{<>]",
																																								chars:      []rune{'\r', '\n', '{', '<', '>'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 416, col: 5, offset: 13530},
																																				run: (*parser).callonExternalLink110,
																																				expr: &seqExpr{
																																					pos: position{line: 416, col: 5, offset: 13530},
																																					exprs: []interface{}{
																																						&andCodeExpr{
																																							pos: position{line: 416, col: 5, offset: 13530},
																																							run: (*parser).callonExternalLink112,
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 419, col: 5, offset: 13594},
																																							label: "element",
																																							expr: &choiceExpr{
																																								pos: position{line: 419, col: 14, offset: 13603},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 430, col: 25, offset: 14065},
																																										run: (*parser).callonExternalLink115,
																																										expr: &seqExpr{
																																											pos: position{line: 430, col: 25, offset: 14065},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 430, col: 25, offset: 14065},
																																													val:        "{counter:",
																																													ignoreCase: false,
																																													want:       "\"{counter:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 430, col: 37, offset: 14077},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														run: (*parser).callonExternalLink119,
																																														expr: &seqExpr{
																																															pos: position{line: 120, col: 18, offset: 3502},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 120, col: 18, offset: 3502},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 120, col: 28, offset: 3512},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 120, col: 29, offset: 3513},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 430, col: 56, offset: 14096},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 430, col: 62, offset: 14102},
																																														expr: &actionExpr{
																																															pos: position{line: 438, col: 17, offset: 14365},
																																															run: (*parser).callonExternalLink126,
																																															expr: &seqExpr{
																																																pos: position{line: 438, col: 17, offset: 14365},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 438, col: 17, offset: 14365},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 438, col: 21, offset: 14369},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 438, col: 28, offset: 14376},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 438, col: 28, offset: 14376},
																																																					run: (*parser).callonExternalLink131,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 438, col: 28, offset: 14376},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 440, col: 9, offset: 14430},
																																																					run: (*parser).callonExternalLink133,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 440, col: 9, offset: 14430},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 440, col: 9, offset: 14430},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 430, col: 78, offset: 14118},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 434, col: 25, offset: 14220},
																																										run: (*parser).callonExternalLink137,
																																										expr: &seqExpr{
																																											pos: position{line: 434, col: 25, offset: 14220},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 434, col: 25, offset: 14220},
																																													val:        "{counter2:",
																																													ignoreCase: false,
																																													want:       "\"{counter2:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 434, col: 38, offset: 14233},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														run: (*parser).callonExternalLink141,
																																														expr: &seqExpr{
																																															pos: position{line: 120, col: 18, offset: 3502},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 120, col: 18, offset: 3502},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 120, col: 28, offset: 3512},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 120, col: 29, offset: 3513},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 434, col: 57, offset: 14252},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 434, col: 63, offset: 14258},
																																														expr: &actionExpr{
																																															pos: position{line: 438, col: 17, offset: 14365},
																																															run: (*parser).callonExternalLink148,
																																															expr: &seqExpr{
																																																pos: position{line: 438, col: 17, offset: 14365},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 438, col: 17, offset: 14365},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 438, col: 21, offset: 14369},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 438, col: 28, offset: 14376},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 438, col: 28, offset: 14376},
																																																					run: (*parser).callonExternalLink153,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 438, col: 28, offset: 14376},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 440, col: 9, offset: 14430},
																																																					run: (*parser).callonExternalLink155,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 440, col: 9, offset: 14430},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 440, col: 9, offset: 14430},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 434, col: 79, offset: 14274},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 423, col: 31, offset: 13720},
																																										run: (*parser).callonExternalLink159,
																																										expr: &seqExpr{
																																											pos: position{line: 423, col: 31, offset: 13720},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 423, col: 31, offset: 13720},
																																													val:        "{",
																																													ignoreCase: false,
																																													want:       "\"{\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 423, col: 35, offset: 13724},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 120, col: 18, offset: 3502},
																																														run: (*parser).callonExternalLink163,
																																														expr: &seqExpr{
																																															pos: position{line: 120, col: 18, offset: 3502},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 120, col: 18, offset: 3502},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 120, col: 28, offset: 3512},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 120, col: 29, offset: 3513},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 423, col: 54, offset: 13743},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 473, col: 8, offset: 15760},
																																				run: (*parser).callonExternalLink169,
																																				expr: &litMatcher{
																																					pos:        position{line: 473, col: 8, offset: 15760},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 458, col: 79, offset: 15136},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 460, col: 9, offset: 15209},
																													run: (*parser).callonExternalLink172,
																													expr: &seqExpr{
																														pos: position{line: 460, col: 9, offset: 15209},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 460, col: 9, offset: 15209},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 460, col: 14, offset: 15214},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2848, col: 7, offset: 94521},
																																	run: (*parser).callonExternalLink176,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2848, col: 7, offset: 94521},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2848, col: 7, offset: 94521},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 460, col: 22, offset: 15222},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2584, col: 11, offset: 86279},
																										run: (*parser).callonExternalLink180,
																										expr: &charClassMatcher{
																											pos:        position{line: 2584, col: 12, offset: 86280},
																											val:        "[<>&]",
																											chars:      []rune{'<', '>', '&'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2840, col: 7, offset: 94305},
																				run: (*parser).callonExternalLink182,
																				expr: &litMatcher{
																					pos:        position{line: 2840, col: 7, offset: 94305},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 914, col: 23, offset: 28983},
															run: (*parser).callonExternalLink184,
															expr: &seqExpr{
																pos: position{line: 914, col: 23, offset: 28983},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 912, col: 32, offset: 28951},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 914, col: 51, offset: 29011},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 914, col: 56, offset: 29016},
																			run: (*parser).callonExternalLink188,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 914, col: 56, offset: 29016},
																				expr: &charClassMatcher{
																					pos:        position{line: 914, col: 56, offset: 29016},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 912, col: 32, offset: 28951},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1213, col: 42, offset: 40678},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1213, col: 59, offset: 40695},
								expr: &ruleRefExpr{
									pos:  position{line: 1213, col: 60, offset: 40696},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElements",
			pos:  position{line: 1221, col: 1, offset: 41056},
			expr: &actionExpr{
				pos: position{line: 1222, col: 5, offset: 41077},
				run: (*parser).callonListElements1,
				expr: &seqExpr{
					pos: position{line: 1222, col: 5, offset: 41077},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1222, col: 5, offset: 41077},
							label: "firstElement",
							expr: &choiceExpr{
								pos: position{line: 1228, col: 5, offset: 41279},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1357, col: 5, offset: 45295},
										run: (*parser).callonListElements5,
										expr: &seqExpr{
											pos: position{line: 1357, col: 5, offset: 45295},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1357, col: 5, offset: 45295},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1364, col: 5, offset: 45503},
														run: (*parser).callonListElements8,
														expr: &seqExpr{
															pos: position{line: 1364, col: 5, offset: 45503},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1364, col: 5, offset: 45503},
																	expr: &actionExpr{
																		pos: position{line: 2860, col: 10, offset: 94799},
																		run: (*parser).callonListElements11,
																		expr: &charClassMatcher{
																			pos:        position{line: 2860, col: 11, offset: 94800},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1364, col: 12, offset: 45510},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1366, col: 9, offset: 45573},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1366, col: 9, offset: 45573},
																				run: (*parser).callonListElements15,
																				expr: &seqExpr{
																					pos: position{line: 1366, col: 9, offset: 45573},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1366, col: 9, offset: 45573},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1366, col: 16, offset: 45580},
																								run: (*parser).callonListElements18,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1366, col: 16, offset: 45580},
																									expr: &litMatcher{
																										pos:        position{line: 1366, col: 17, offset: 45581},
																										val:        ".",
																										ignoreCase: false,
																										want:       "\".\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1370, col: 9, offset: 45681},
																							run: (*parser).callonListElements21,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1389, col: 11, offset: 46398},
																				run: (*parser).callonListElements22,
																				expr: &seqExpr{
																					pos: position{line: 1389, col: 11, offset: 46398},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1389, col: 11, offset: 46398},
																							expr: &charClassMatcher{
																								pos:        position{line: 1389, col: 12, offset: 46399},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1389, col: 20, offset: 46407},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1391, col: 13, offset: 46524},
																				run: (*parser).callonListElements27,
																				expr: &seqExpr{
																					pos: position{line: 1391, col: 13, offset: 46524},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1391, col: 14, offset: 46525},
																							val:        "[a-z]",
																							ranges:     []rune{'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1391, col: 21, offset: 46532},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1393, col: 13, offset: 46652},
																				run: (*parser).callonListElements31,
																				expr: &seqExpr{
																					pos: position{line: 1393, col: 13, offset: 46652},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1393, col: 14, offset: 46653},
																							val:        "[A-Z]",
																							ranges:     []rune{'A', 'Z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1393, col: 21, offset: 46660},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1395, col: 13, offset: 46780},
																				run: (*parser).callonListElements35,
																				expr: &seqExpr{
																					pos: position{line: 1395, col: 13, offset: 46780},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1395, col: 13, offset: 46780},
																							expr: &charClassMatcher{
																								pos:        position{line: 1395, col: 14, offset: 46781},
																								val:        "[ivxdlcm]",
																								chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1395, col: 26, offset: 46793},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1397, col: 13, offset: 46913},
																				run: (*parser).callonListElements40,
																				expr: &seqExpr{
																					pos: position{line: 1397, col: 13, offset: 46913},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1397, col: 13, offset: 46913},
																							expr: &charClassMatcher{
																								pos:        position{line: 1397, col: 14, offset: 46914},
																								val:        "[IVXDLCM]",
																								chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1397, col: 26, offset: 46926},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2865, col: 11, offset: 94908},
																	run: (*parser).callonListElements45,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2865, col: 11, offset: 94908},
																		expr: &charClassMatcher{
																			pos:        position{line: 2865, col: 12, offset: 94909},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1358, col: 5, offset: 45334},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1297, col: 5, offset: 43501},
														run: (*parser).callonListElements49,
														expr: &seqExpr{
															pos: position{line: 1297, col: 5, offset: 43501},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1297, col: 5, offset: 43501},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1297, col: 14, offset: 43510},
																		run: (*parser).callonListElements52,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1297, col: 14, offset: 43510},
																			expr: &charClassMatcher{
																				pos:        position{line: 1297, col: 14, offset: 43510},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2877, col: 8, offset: 95162},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonListElements56,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1407, col: 5, offset: 47192},
										run: (*parser).callonListElements63,
										expr: &seqExpr{
											pos: position{line: 1407, col: 5, offset: 47192},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1407, col: 5, offset: 47192},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1414, col: 5, offset: 47465},
														run: (*parser).callonListElements66,
														expr: &seqExpr{
															pos: position{line: 1414, col: 5, offset: 47465},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1414, col: 5, offset: 47465},
																	expr: &actionExpr{
																		pos: position{line: 2860, col: 10, offset: 94799},
																		run: (*parser).callonListElements69,
																		expr: &charClassMatcher{
																			pos:        position{line: 2860, col: 11, offset: 94800},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1414, col: 12, offset: 47472},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1414, col: 20, offset: 47480},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1416, col: 9, offset: 47537},
																				run: (*parser).callonListElements73,
																				expr: &seqExpr{
																					pos: position{line: 1416, col: 9, offset: 47537},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1416, col: 9, offset: 47537},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1416, col: 16, offset: 47544},
																								run: (*parser).callonListElements76,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1416, col: 16, offset: 47544},
																									expr: &litMatcher{
																										pos:        position{line: 1416, col: 17, offset: 47545},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1420, col: 9, offset: 47645},
																							run: (*parser).callonListElements79,
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 1437, col: 14, offset: 48352},
																				label: "depth",
																				expr: &actionExpr{
																					pos: position{line: 1437, col: 21, offset: 48359},
																					run: (*parser).callonListElements81,
																					expr: &litMatcher{
																						pos:        position{line: 1437, col: 22, offset: 48360},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2865, col: 11, offset: 94908},
																	run: (*parser).callonListElements83,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2865, col: 11, offset: 94908},
																		expr: &charClassMatcher{
																			pos:        position{line: 2865, col: 12, offset: 94909},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1408, col: 5, offset: 47233},
													label: "checkstyle",
													expr: &zeroOrOneExpr{
														pos: position{line: 1408, col: 16, offset: 47244},
														expr: &actionExpr{
															pos: position{line: 1444, col: 5, offset: 48521},
															run: (*parser).callonListElements88,
															expr: &seqExpr{
																pos: position{line: 1444, col: 5, offset: 48521},
																exprs: []interface{}{
																	&andExpr{
																		pos: position{line: 1444, col: 5, offset: 48521},
																		expr: &litMatcher{
																			pos:        position{line: 1444, col: 6, offset: 48522},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1444, col: 10, offset: 48526},
																		label: "style",
																		expr: &choiceExpr{
																			pos: position{line: 1445, col: 7, offset: 48540},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 1445, col: 7, offset: 48540},
																					run: (*parser).callonListElements94,
																					expr: &litMatcher{
																						pos:        position{line: 1445, col: 7, offset: 48540},
																						val:        "[ ]",
																						ignoreCase: false,
																						want:       "\"[ ]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1446, col: 7, offset: 48585},
																					run: (*parser).callonListElements96,
																					expr: &litMatcher{
																						pos:        position{line: 1446, col: 7, offset: 48585},
																						val:        "[*]",
																						ignoreCase: false,
																						want:       "\"[*]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1447, col: 7, offset: 48628},
																					run: (*parser).callonListElements98,
																					expr: &litMatcher{
																						pos:        position{line: 1447, col: 7, offset: 48628},
																						val:        "[x]",
																						ignoreCase: false,
																						want:       "\"[x]\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2865, col: 11, offset: 94908},
																		run: (*parser).callonListElements100,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2865, col: 11, offset: 94908},
																			expr: &charClassMatcher{
																				pos:        position{line: 2865, col: 12, offset: 94909},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1409, col: 5, offset: 47283},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1297, col: 5, offset: 43501},
														run: (*parser).callonListElements104,
														expr: &seqExpr{
															pos: position{line: 1297, col: 5, offset: 43501},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1297, col: 5, offset: 43501},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1297, col: 14, offset: 43510},
																		run: (*parser).callonListElements107,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1297, col: 14, offset: 43510},
																			expr: &charClassMatcher{
																				pos:        position{line: 1297, col: 14, offset: 43510},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2877, col: 8, offset: 95162},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonListElements111,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1514, col: 5, offset: 50477},
										run: (*parser).callonListElements118,
										expr: &seqExpr{
											pos: position{line: 1514, col: 5, offset: 50477},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1514, col: 5, offset: 50477},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1520, col: 5, offset: 50678},
														run: (*parser).callonListElements121,
														expr: &seqExpr{
															pos: position{line: 1520, col: 5, offset: 50678},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1520, col: 5, offset: 50678},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
																&labeledExpr{
																	pos:   position{line: 1520, col: 9, offset: 50682},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1520, col: 14, offset: 50687},
																		run: (*parser).callonListElements125,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1520, col: 14, offset: 50687},
																			expr: &charClassMatcher{
																				pos:        position{line: 1520, col: 14, offset: 50687},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1520, col: 62, offset: 50735},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
																&actionExpr{
																	pos: position{line: 2865, col: 11, offset: 94908},
																	run: (*parser).callonListElements129,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2865, col: 11, offset: 94908},
																		expr: &charClassMatcher{
																			pos:        position{line: 2865, col: 12, offset: 94909},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1515, col: 5, offset: 50513},
													label: "description",
													expr: &actionExpr{
														pos: position{line: 1525, col: 5, offset: 50813},
														run: (*parser).callonListElements133,
														expr: &seqExpr{
															pos: position{line: 1525, col: 5, offset: 50813},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1525, col: 5, offset: 50813},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1525, col: 14, offset: 50822},
																		run: (*parser).callonListElements136,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1525, col: 14, offset: 50822},
																			expr: &charClassMatcher{
																				pos:        position{line: 1525, col: 14, offset: 50822},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2877, col: 8, offset: 95162},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonListElements140,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1456, col: 5, offset: 48821},
										run: (*parser).callonListElements147,
										expr: &seqExpr{
											pos: position{line: 1456, col: 5, offset: 48821},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1456, col: 5, offset: 48821},
													label: "term",
													expr: &actionExpr{
														pos: position{line: 1464, col: 5, offset: 49080},
														run: (*parser).callonListElements150,
														expr: &oneOrMoreExpr{
															pos: position{line: 1464, col: 5, offset: 49080},
															expr: &seqExpr{
																pos: position{line: 1464, col: 6, offset: 49081},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1464, col: 6, offset: 49081},
																		expr: &actionExpr{
																			pos: position{line: 1469, col: 5, offset: 49212},
																			run: (*parser).callonListElements154,
																			expr: &seqExpr{
																				pos: position{line: 1469, col: 5, offset: 49212},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 1469, col: 5, offset: 49212},
																						label: "separator",
																						expr: &actionExpr{
																							pos: position{line: 1469, col: 16, offset: 49223},
																							run: (*parser).callonListElements157,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1469, col: 16, offset: 49223},
																								expr: &litMatcher{
																									pos:        position{line: 1469, col: 17, offset: 49224},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																							},
																						},
																					},
																					&andCodeExpr{
																						pos: position{line: 1472, col: 5, offset: 49281},
																						run: (*parser).callonListElements160,
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 1464, col: 35, offset: 49110},
																		expr: &choiceExpr{
																			pos: position{line: 2877, col: 8, offset: 95162},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2870, col: 12, offset: 95022},
																					run: (*parser).callonListElements163,
																					expr: &choiceExpr{
																						pos: position{line: 2870, col: 13, offset: 95023},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2870, col: 13, offset: 95023},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 20, offset: 95030},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 29, offset: 95039},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2874, col: 8, offset: 95112},
																					expr: &anyMatcher{
																						line: 2874, col: 9, offset: 95113,
																					},
																				},
																			},
																		},
																	},
																	&anyMatcher{
																		line: 1464, col: 40, offset: 49115,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1457, col: 5, offset: 48856},
													label: "separator",
													expr: &actionExpr{
														pos: position{line: 1469, col: 5, offset: 49212},
														run: (*parser).callonListElements172,
														expr: &seqExpr{
															pos: position{line: 1469, col: 5, offset: 49212},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1469, col: 5, offset: 49212},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1469, col: 16, offset: 49223},
																		run: (*parser).callonListElements175,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1469, col: 16, offset: 49223},
																			expr: &litMatcher{
																				pos:        position{line: 1469, col: 17, offset: 49224},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1472, col: 5, offset: 49281},
																	run: (*parser).callonListElements178,
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1458, col: 5, offset: 48901},
													label: "description",
													expr: &choiceExpr{
														pos: position{line: 1480, col: 5, offset: 49531},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1482, col: 9, offset: 49596},
																run: (*parser).callonListElements181,
																expr: &seqExpr{
																	pos: position{line: 1482, col: 9, offset: 49596},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 1482, col: 9, offset: 49596},
																			expr: &actionExpr{
																				pos: position{line: 2860, col: 10, offset: 94799},
																				run: (*parser).callonListElements184,
																				expr: &charClassMatcher{
																					pos:        position{line: 2860, col: 11, offset: 94800},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2877, col: 8, offset: 95162},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2870, col: 12, offset: 95022},
																					run: (*parser).callonListElements187,
																					expr: &choiceExpr{
																						pos: position{line: 2870, col: 13, offset: 95023},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2870, col: 13, offset: 95023},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 20, offset: 95030},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 29, offset: 95039},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2874, col: 8, offset: 95112},
																					expr: &anyMatcher{
																						line: 2874, col: 9, offset: 95113,
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1483, col: 9, offset: 49616},
																			expr: &actionExpr{
																				pos: position{line: 449, col: 14, offset: 14731},
																				run: (*parser).callonListElements195,
																				expr: &seqExpr{
																					pos: position{line: 449, col: 14, offset: 14731},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 449, col: 14, offset: 14731},
																							expr: &notExpr{
																								pos: position{line: 2874, col: 8, offset: 95112},
																								expr: &anyMatcher{
																									line: 2874, col: 9, offset: 95113,
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 449, col: 19, offset: 14736},
																							expr: &actionExpr{
																								pos: position{line: 2860, col: 10, offset: 94799},
																								run: (*parser).callonListElements201,
																								expr: &charClassMatcher{
																									pos:        position{line: 2860, col: 11, offset: 94800},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2877, col: 8, offset: 95162},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2870, col: 12, offset: 95022},
																									run: (*parser).callonListElements204,
																									expr: &choiceExpr{
																										pos: position{line: 2870, col: 13, offset: 95023},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2870, col: 13, offset: 95023},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2870, col: 20, offset: 95030},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2870, col: 29, offset: 95039},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2874, col: 8, offset: 95112},
																									expr: &anyMatcher{
																										line: 2874, col: 9, offset: 95113,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1484, col: 9, offset: 49636},
																			label: "content",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 1484, col: 17, offset: 49644},
																				expr: &actionExpr{
																					pos: position{line: 1282, col: 5, offset: 43075},
																					run: (*parser).callonListElements213,
																					expr: &seqExpr{
																						pos: position{line: 1282, col: 5, offset: 43075},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 1282, col: 5, offset: 43075},
																								expr: &actionExpr{
																									pos: position{line: 449, col: 14, offset: 14731},
																									run: (*parser).callonListElements216,
																									expr: &seqExpr{
																										pos: position{line: 449, col: 14, offset: 14731},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 449, col: 14, offset: 14731},
																												expr: &notExpr{
																													pos: position{line: 2874, col: 8, offset: 95112},
																													expr: &anyMatcher{
																														line: 2874, col: 9, offset: 95113,
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 449, col: 19, offset: 14736},
																												expr: &actionExpr{
																													pos: position{line: 2860, col: 10, offset: 94799},
																													run: (*parser).callonListElements222,
																													expr: &charClassMatcher{
																														pos:        position{line: 2860, col: 11, offset: 94800},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2877, col: 8, offset: 95162},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2870, col: 12, offset: 95022},
																														run: (*parser).callonListElements225,
																														expr: &choiceExpr{
																															pos: position{line: 2870, col: 13, offset: 95023},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2870, col: 13, offset: 95023},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2870, col: 20, offset: 95030},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2870, col: 29, offset: 95039},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2874, col: 8, offset: 95112},
																														expr: &anyMatcher{
																															line: 2874, col: 9, offset: 95113,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1283, col: 5, offset: 43090},
																								expr: &seqExpr{
																									pos: position{line: 1315, col: 34, offset: 44000},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 1315, col: 34, offset: 44000},
																											val:        "+",
																											ignoreCase: false,
																											want:       "\"+\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 1315, col: 38, offset: 44004},
																											expr: &actionExpr{
																												pos: position{line: 2860, col: 10, offset: 94799},
																												run: (*parser).callonListElements236,
																												expr: &charClassMatcher{
																													pos:        position{line: 2860, col: 11, offset: 94800},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2870, col: 12, offset: 95022},
																											run: (*parser).callonListElements238,
																											expr: &choiceExpr{
																												pos: position{line: 2870, col: 13, offset: 95023},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2870, col: 13, offset: 95023},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2870, col: 20, offset: 95030},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2870, col: 29, offset: 95039},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1284, col: 5, offset: 43125},
																								expr: &actionExpr{
																									pos: position{line: 1364, col: 5, offset: 45503},
																									run: (*parser).callonListElements244,
																									expr: &seqExpr{
																										pos: position{line: 1364, col: 5, offset: 45503},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 1364, col: 5, offset: 45503},
																												expr: &actionExpr{
																													pos: position{line: 2860, col: 10, offset: 94799},
																													run: (*parser).callonListElements247,
																													expr: &charClassMatcher{
																														pos:        position{line: 2860, col: 11, offset: 94800},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 1364, col: 12, offset: 45510},
																												label: "prefix",
																												expr: &choiceExpr{
																													pos: position{line: 1366, col: 9, offset: 45573},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 1366, col: 9, offset: 45573},
																															run: (*parser).callonListElements251,
																															expr: &seqExpr{
																																pos: position{line: 1366, col: 9, offset: 45573},
																																exprs: []interface{}{
																																	&labeledExpr{
																																		pos:   position{line: 1366, col: 9, offset: 45573},
																																		label: "depth",
																																		expr: &actionExpr{
																																			pos: position{line: 1366, col: 16, offset: 45580},
																																			run: (*parser).callonListElements254,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 1366, col: 16, offset: 45580},
																																				expr: &litMatcher{
																																					pos:        position{line: 1366, col: 17, offset: 45581},
																																					val:        ".",
																																					ignoreCase: false,
																																					want:       "\".\"",
																																				},
																																			},
																																		},
																																	},
																																	&andCodeExpr{
																																		pos: position{line: 1370, col: 9, offset: 45681},
																																		run: (*parser).callonListElements257,
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1389, col: 11, offset: 46398},
																															run: (*parser).callonListElements258,
																															expr: &seqExpr{
																																pos: position{line: 1389, col: 11, offset: 46398},
																																exprs: []interface{}{
																																	&oneOrMoreExpr{
																																		pos: position{line: 1389, col: 11, offset: 46398},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1389, col: 12, offset: 46399},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1389, col: 20, offset: 46407},
																																		val:        ".",
																																		ignoreCase: false,
																																		want:       "\".\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1391, col: 13, offset: 46524},
																															run: (*parser).callonListElements263,
																															expr: &seqExpr{
																																pos: position{line: 1391, col: 13, offset: 46524},
																																exprs: []interface{}{
																																	&charClassMatcher{
																																		pos:        position{line: 1391, col: 14, offset: 46525},
																																		val:        "[a-z]",
																																		ranges:     []rune{'a', 'z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1391, col: 21, offset: 46532},
																																		val:        ".",
																																		ignoreCase: false,
																																		want:       "\".\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1393, col: 13, offset: 46652},
																															run: (*parser).callonListElements267,
																															expr: &seqExpr{
																																pos: position{line: 1393, col: 13, offset: 46652},
																																exprs: []interface{}{
																																	&charClassMatcher{
																																		pos:        position{line: 1393, col: 14, offset: 46653},
																																		val:        "[A-Z]",
																																		ranges:     []rune{'A', 'Z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1393, col: 21, offset: 46660},
																																		val:        ".",
																																		ignoreCase: false,
																																		want:       "\".\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1395, col: 13, offset: 46780},
																															run: (*parser).callonListElements271,
																															expr: &seqExpr{
																																pos: position{line: 1395, col: 13, offset: 46780},
																																exprs: []interface{}{
																																	&oneOrMoreExpr{
																																		pos: position{line: 1395, col: 13, offset: 46780},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1395, col: 14, offset: 46781},
																																			val:        "[ivxdlcm]",
																																			chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1395, col: 26, offset: 46793},
																																		val:        ")",
																																		ignoreCase: false,
																																		want:       "\")\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1397, col: 13, offset: 46913},
																															run: (*parser).callonListElements276,
																															expr: &seqExpr{
																																pos: position{line: 1397, col: 13, offset: 46913},
																																exprs: []interface{}{
																																	&oneOrMoreExpr{
																																		pos: position{line: 1397, col: 13, offset: 46913},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1397, col: 14, offset: 46914},
																																			val:        "[IVXDLCM]",
																																			chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1397, col: 26, offset: 46926},
																																		val:        ")",
																																		ignoreCase: false,
																																		want:       "\")\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2865, col: 11, offset: 94908},
																												run: (*parser).callonListElements281,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2865, col: 11, offset: 94908},
																													expr: &charClassMatcher{
																														pos:        position{line: 2865, col: 12, offset: 94909},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1285, col: 5, offset: 43155},
																								expr: &actionExpr{
																									pos: position{line: 1414, col: 5, offset: 47465},
																									run: (*parser).callonListElements285,
																									expr: &seqExpr{
																										pos: position{line: 1414, col: 5, offset: 47465},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 1414, col: 5, offset: 47465},
																												expr: &actionExpr{
																													pos: position{line: 2860, col: 10, offset: 94799},
																													run: (*parser).callonListElements288,
																													expr: &charClassMatcher{
																														pos:        position{line: 2860, col: 11, offset: 94800},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 1414, col: 12, offset: 47472},
																												label: "prefix",
																												expr: &choiceExpr{
																													pos: position{line: 1414, col: 20, offset: 47480},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 1416, col: 9, offset: 47537},
																															run: (*parser).callonListElements292,
																															expr: &seqExpr{
																																pos: position{line: 1416, col: 9, offset: 47537},
																																exprs: []interface{}{
																																	&labeledExpr{
																																		pos:   position{line: 1416, col: 9, offset: 47537},
																																		label: "depth",
																																		expr: &actionExpr{
																																			pos: position{line: 1416, col: 16, offset: 47544},
																																			run: (*parser).callonListElements295,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 1416, col: 16, offset: 47544},
																																				expr: &litMatcher{
																																					pos:        position{line: 1416, col: 17, offset: 47545},
																																					val:        "*",
																																					ignoreCase: false,
																																					want:       "\"*\"",
																																				},
																																			},
																																		},
																																	},
																																	&andCodeExpr{
																																		pos: position{line: 1420, col: 9, offset: 47645},
																																		run: (*parser).callonListElements298,
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 1437, col: 14, offset: 48352},
																															label: "depth",
																															expr: &actionExpr{
																																pos: position{line: 1437, col: 21, offset: 48359},
																																run: (*parser).callonListElements300,
																																expr: &litMatcher{
																																	pos:        position{line: 1437, col: 22, offset: 48360},
																																	val:        "-",
																																	ignoreCase: false,
																																	want:       "\"-\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2865, col: 11, offset: 94908},
																												run: (*parser).callonListElements302,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2865, col: 11, offset: 94908},
																													expr: &charClassMatcher{
																														pos:        position{line: 2865, col: 12, offset: 94909},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1286, col: 5, offset: 43187},
																								expr: &actionExpr{
																									pos: position{line: 1520, col: 5, offset: 50678},
																									run: (*parser).callonListElements306,
																									expr: &seqExpr{
																										pos: position{line: 1520, col: 5, offset: 50678},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1520, col: 5, offset: 50678},
																												val:        "<",
																												ignoreCase: false,
																												want:       "\"<\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 1520, col: 9, offset: 50682},
																												label: "ref",
																												expr: &actionExpr{
																													pos: position{line: 1520, col: 14, offset: 50687},
																													run: (*parser).callonListElements310,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1520, col: 14, offset: 50687},
																														expr: &charClassMatcher{
																															pos:        position{line: 1520, col: 14, offset: 50687},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 1520, col: 62, offset: 50735},
																												val:        ">",
																												ignoreCase: false,
																												want:       "\">\"",
																											},
																											&actionExpr{
																												pos: position{line: 2865, col: 11, offset: 94908},
																												run: (*parser).callonListElements314,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2865, col: 11, offset: 94908},
																													expr: &charClassMatcher{
																														pos:        position{line: 2865, col: 12, offset: 94909},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1287, col: 5, offset: 43217},
																								expr: &seqExpr{
																									pos: position{line: 1287, col: 7, offset: 43219},
																									exprs: []interface{}{
																										&actionExpr{
																											pos: position{line: 1464, col: 5, offset: 49080},
																											run: (*parser).callonListElements319,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1464, col: 5, offset: 49080},
																												expr: &seqExpr{
																													pos: position{line: 1464, col: 6, offset: 49081},
																													exprs: []interface{}{
																														&notExpr{
																															pos: position{line: 1464, col: 6, offset: 49081},
																															expr: &actionExpr{
																																pos: position{line: 1469, col: 5, offset: 49212},
																																run: (*parser).callonListElements323,
																																expr: &seqExpr{
																																	pos: position{line: 1469, col: 5, offset: 49212},
																																	exprs: []interface{}{
																																		&labeledExpr{
																																			pos:   position{line: 1469, col: 5, offset: 49212},
																																			label: "separator",
																																			expr: &actionExpr{
																																				pos: position{line: 1469, col: 16, offset: 49223},
																																				run: (*parser).callonListElements326,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 1469, col: 16, offset: 49223},
																																					expr: &litMatcher{
																																						pos:        position{line: 1469, col: 17, offset: 49224},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																				},
																																			},
																																		},
																																		&andCodeExpr{
																																			pos: position{line: 1472, col: 5, offset: 49281},
																																			run: (*parser).callonListElements329,
																																		},
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 1464, col: 35, offset: 49110},
																															expr: &choiceExpr{
																																pos: position{line: 2877, col: 8, offset: 95162},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 2870, col: 12, offset: 95022},
																																		run: (*parser).callonListElements332,
																																		expr: &choiceExpr{
																																			pos: position{line: 2870, col: 13, offset: 95023},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 2870, col: 13, offset: 95023},
																																					val:        "\n",
																																					ignoreCase: false,
																																					want:       "\"\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2870, col: 20, offset: 95030},
																																					val:        "\r\n",
																																					ignoreCase: false,
																																					want:       "\"\\r\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2870, col: 29, offset: 95039},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 2874, col: 8, offset: 95112},
																																		expr: &anyMatcher{
																																			line: 2874, col: 9, offset: 95113,
																																		},
																																	},
																																},
																															},
																														},
																														&anyMatcher{
																															line: 1464, col: 40, offset: 49115,
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1469, col: 5, offset: 49212},
																											run: (*parser).callonListElements340,
																											expr: &seqExpr{
																												pos: position{line: 1469, col: 5, offset: 49212},
																												exprs: []interface{}{
																													&labeledExpr{
																														pos:   position{line: 1469, col: 5, offset: 49212},
																														label: "separator",
																														expr: &actionExpr{
																															pos: position{line: 1469, col: 16, offset: 49223},
																															run: (*parser).callonListElements343,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1469, col: 16, offset: 49223},
																																expr: &litMatcher{
																																	pos:        position{line: 1469, col: 17, offset: 49224},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																															},
																														},
																													},
																													&andCodeExpr{
																														pos: position{line: 1472, col: 5, offset: 49281},
																														run: (*parser).callonListElements346,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1288, col: 5, offset: 43275},
																								expr: &actionExpr{
																									pos: position{line: 494, col: 5, offset: 16252},
																									run: (*parser).callonListElements348,
																									expr: &seqExpr{
																										pos: position{line: 494, col: 5, offset: 16252},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 494, col: 5, offset: 16252},
																												expr: &charClassMatcher{
																													pos:        position{line: 2786, col: 13, offset: 92537},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 495, col: 5, offset: 16282},
																												label: "delimiter",
																												expr: &choiceExpr{
																													pos: position{line: 496, col: 9, offset: 16302},
																													alternatives: []interface{}{
																														&seqExpr{
																															pos: position{line: 508, col: 26, offset: 16623},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 508, col: 26, offset: 16623},
																																	val:        "////",
																																	ignoreCase: false,
																																	want:       "\"////\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 508, col: 33, offset: 16630},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonListElements357,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2877, col: 8, offset: 95162},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2870, col: 12, offset: 95022},
																																			run: (*parser).callonListElements360,
																																			expr: &choiceExpr{
																																				pos: position{line: 2870, col: 13, offset: 95023},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 13, offset: 95023},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 20, offset: 95030},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 29, offset: 95039},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2874, col: 8, offset: 95112},
																																			expr: &anyMatcher{
																																				line: 2874, col: 9, offset: 95113,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 510, col: 26, offset: 16667},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 510, col: 26, offset: 16667},
																																	val:        "====",
																																	ignoreCase: false,
																																	want:       "\"====\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 510, col: 33, offset: 16674},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonListElements370,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2877, col: 8, offset: 95162},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2870, col: 12, offset: 95022},
																																			run: (*parser).callonListElements373,
																																			expr: &choiceExpr{
																																				pos: position{line: 2870, col: 13, offset: 95023},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 13, offset: 95023},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 20, offset: 95030},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 29, offset: 95039},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2874, col: 8, offset: 95112},
																																			expr: &anyMatcher{
																																				line: 2874, col: 9, offset: 95113,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 512, col: 25, offset: 16710},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 512, col: 25, offset: 16710},
																																	val:        "```",
																																	ignoreCase: false,
																																	want:       "\"```\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 512, col: 31, offset: 16716},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonListElements383,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2877, col: 8, offset: 95162},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2870, col: 12, offset: 95022},
																																			run: (*parser).callonListElements386,
																																			expr: &choiceExpr{
																																				pos: position{line: 2870, col: 13, offset: 95023},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 13, offset: 95023},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 20, offset: 95030},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 29, offset: 95039},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2874, col: 8, offset: 95112},
																																			expr: &anyMatcher{
																																				line: 2874, col: 9, offset: 95113,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 514, col: 26, offset: 16753},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 514, col: 26, offset: 16753},
																																	val:        "----",
																																	ignoreCase: false,
																																	want:       "\"----\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 514, col: 33, offset: 16760},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonListElements396,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2877, col: 8, offset: 95162},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2870, col: 12, offset: 95022},
																																			run: (*parser).callonListElements399,
																																			expr: &choiceExpr{
																																				pos: position{line: 2870, col: 13, offset: 95023},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 13, offset: 95023},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 20, offset: 95030},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 29, offset: 95039},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2874, col: 8, offset: 95112},
																																			expr: &anyMatcher{
																																				line: 2874, col: 9, offset: 95113,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 516, col: 26, offset: 16797},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 516, col: 26, offset: 16797},
																																	val:        "....",
																																	ignoreCase: false,
																																	want:       "\"....\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 516, col: 33, offset: 16804},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonListElements409,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2877, col: 8, offset: 95162},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2870, col: 12, offset: 95022},
																																			run: (*parser).callonListElements412,
																																			expr: &choiceExpr{
																																				pos: position{line: 2870, col: 13, offset: 95023},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 13, offset: 95023},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 20, offset: 95030},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 29, offset: 95039},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2874, col: 8, offset: 95112},
																																			expr: &anyMatcher{
																																				line: 2874, col: 9, offset: 95113,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 518, col: 30, offset: 16845},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 518, col: 30, offset: 16845},
																																	val:        "++++",
																																	ignoreCase: false,
																																	want:       "\"++++\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 518, col: 37, offset: 16852},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonListElements422,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2877, col: 8, offset: 95162},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2870, col: 12, offset: 95022},
																																			run: (*parser).callonListElements425,
																																			expr: &choiceExpr{
																																				pos: position{line: 2870, col: 13, offset: 95023},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 13, offset: 95023},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 20, offset: 95030},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 29, offset: 95039},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2874, col: 8, offset: 95112},
																																			expr: &anyMatcher{
																																				line: 2874, col: 9, offset: 95113,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 520, col: 24, offset: 16887},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 520, col: 24, offset: 16887},
																																	val:        "____",
																																	ignoreCase: false,
																																	want:       "\"____\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 520, col: 31, offset: 16894},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonListElements435,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2877, col: 8, offset: 95162},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2870, col: 12, offset: 95022},
																																			run: (*parser).callonListElements438,
																																			expr: &choiceExpr{
																																				pos: position{line: 2870, col: 13, offset: 95023},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 13, offset: 95023},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 20, offset: 95030},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 29, offset: 95039},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2874, col: 8, offset: 95112},
																																			expr: &anyMatcher{
																																				line: 2874, col: 9, offset: 95113,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 522, col: 26, offset: 16931},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 522, col: 26, offset: 16931},
																																	val:        "****",
																																	ignoreCase: false,
																																	want:       "\"****\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 522, col: 33, offset: 16938},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonListElements448,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2877, col: 8, offset: 95162},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2870, col: 12, offset: 95022},
																																			run: (*parser).callonListElements451,
																																			expr: &choiceExpr{
																																				pos: position{line: 2870, col: 13, offset: 95023},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 13, offset: 95023},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 20, offset: 95030},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 29, offset: 95039},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2874, col: 8, offset: 95112},
																																			expr: &anyMatcher{
																																				line: 2874, col: 9, offset: 95113,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1289, col: 5, offset: 43295},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 1289, col: 14, offset: 43304},
																									run: (*parser).callonListElements459,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1289, col: 14, offset: 43304},
																										expr: &charClassMatcher{
																											pos:        position{line: 1289, col: 14, offset: 43304},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2877, col: 8, offset: 95162},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2870, col: 12, offset: 95022},
																										run: (*parser).callonListElements463,
																										expr: &choiceExpr{
																											pos: position{line: 2870, col: 13, offset: 95023},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2870, col: 13, offset: 95023},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 20, offset: 95030},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 29, offset: 95039},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2874, col: 8, offset: 95112},
																										expr: &anyMatcher{
																											line: 2874, col: 9, offset: 95113,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1492, col: 9, offset: 49879},
																run: (*parser).callonListElements470,
																expr: &seqExpr{
																	pos: position{line: 1492, col: 9, offset: 49879},
																	exprs: []interface{}{
																		&actionExpr{
																			pos: position{line: 2865, col: 11, offset: 94908},
																			run: (*parser).callonListElements472,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2865, col: 11, offset: 94908},
																				expr: &charClassMatcher{
																					pos:        position{line: 2865, col: 12, offset: 94909},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1493, col: 9, offset: 49931},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1493, col: 18, offset: 49940},
																				run: (*parser).callonListElements476,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1493, col: 18, offset: 49940},
																					expr: &charClassMatcher{
																						pos:        position{line: 1493, col: 18, offset: 49940},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2877, col: 8, offset: 95162},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2870, col: 12, offset: 95022},
																					run: (*parser).callonListElements480,
																					expr: &choiceExpr{
																						pos: position{line: 2870, col: 13, offset: 95023},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2870, col: 13, offset: 95023},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 20, offset: 95030},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 29, offset: 95039},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2874, col: 8, offset: 95112},
																					expr: &anyMatcher{
																						line: 2874, col: 9, offset: 95113,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1223, col: 5, offset: 41108},
							label: "extraElements",
							expr: &ruleRefExpr{
								pos:  position{line: 1223, col: 20, offset: 41123},
								name: "ExtraListElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ExtraListElements",
			pos:  position{line: 1233, col: 1, offset: 41378},
			expr: &actionExpr{
				pos: position{line: 1233, col: 22, offset: 41399},
				run: (*parser).callonExtraListElements1,
				expr: &labeledExpr{
					pos:   position{line: 1233, col: 22, offset: 41399},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1233, col: 31, offset: 41408},
						expr: &ruleRefExpr{
							pos:  position{line: 1233, col: 32, offset: 41409},
							name: "ExtraListElement",
						},
					},
				},
			},
		},
		{
			name: "ExtraListElement",
			pos:  position{line: 1237, col: 1, offset: 41489},
			expr: &actionExpr{
				pos: position{line: 1238, col: 5, offset: 41628},
				run: (*parser).callonExtraListElement1,
				expr: &seqExpr{
					pos: position{line: 1238, col: 5, offset: 41628},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1238, col: 5, offset: 41628},
							expr: &notExpr{
								pos: position{line: 2874, col: 8, offset: 95112},
								expr: &anyMatcher{
									line: 2874, col: 9, offset: 95113,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1239, col: 5, offset: 41638},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1240, col: 9, offset: 41656},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1240, col: 13, offset: 41660},
										run: (*parser).callonExtraListElement8,
										expr: &seqExpr{
											pos: position{line: 1240, col: 13, offset: 41660},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1240, col: 13, offset: 41660},
													expr: &actionExpr{
														pos: position{line: 449, col: 14, offset: 14731},
														run: (*parser).callonExtraListElement11,
														expr: &seqExpr{
															pos: position{line: 449, col: 14, offset: 14731},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 449, col: 14, offset: 14731},
																	expr: &notExpr{
																		pos: position{line: 2874, col: 8, offset: 95112},
																		expr: &anyMatcher{
																			line: 2874, col: 9, offset: 95113,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 449, col: 19, offset: 14736},
																	expr: &actionExpr{
																		pos: position{line: 2860, col: 10, offset: 94799},
																		run: (*parser).callonExtraListElement17,
																		expr: &charClassMatcher{
																			pos:        position{line: 2860, col: 11, offset: 94800},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2877, col: 8, offset: 95162},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonExtraListElement20,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1241, col: 13, offset: 41684},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1357, col: 5, offset: 45295},
														run: (*parser).callonExtraListElement28,
														expr: &seqExpr{
															pos: position{line: 1357, col: 5, offset: 45295},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1357, col: 5, offset: 45295},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1364, col: 5, offset: 45503},
																		run: (*parser).callonExtraListElement31,
																		expr: &seqExpr{
																			pos: position{line: 1364, col: 5, offset: 45503},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1364, col: 5, offset: 45503},
																					expr: &actionExpr{
																						pos: position{line: 2860, col: 10, offset: 94799},
																						run: (*parser).callonExtraListElement34,
																						expr: &charClassMatcher{
																							pos:        position{line: 2860, col: 11, offset: 94800},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1364, col: 12, offset: 45510},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1366, col: 9, offset: 45573},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1366, col: 9, offset: 45573},
																								run: (*parser).callonExtraListElement38,
																								expr: &seqExpr{
																									pos: position{line: 1366, col: 9, offset: 45573},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1366, col: 9, offset: 45573},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1366, col: 16, offset: 45580},
																												run: (*parser).callonExtraListElement41,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1366, col: 16, offset: 45580},
																													expr: &litMatcher{
																														pos:        position{line: 1366, col: 17, offset: 45581},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1370, col: 9, offset: 45681},
																											run: (*parser).callonExtraListElement44,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1389, col: 11, offset: 46398},
																								run: (*parser).callonExtraListElement45,
																								expr: &seqExpr{
																									pos: position{line: 1389, col: 11, offset: 46398},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1389, col: 11, offset: 46398},
																											expr: &charClassMatcher{
																												pos:        position{line: 1389, col: 12, offset: 46399},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1389, col: 20, offset: 46407},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1391, col: 13, offset: 46524},
																								run: (*parser).callonExtraListElement50,
																								expr: &seqExpr{
																									pos: position{line: 1391, col: 13, offset: 46524},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1391, col: 14, offset: 46525},
																											val:        "[a-z]",
																											ranges:     []rune{'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1391, col: 21, offset: 46532},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1393, col: 13, offset: 46652},
																								run: (*parser).callonExtraListElement54,
																								expr: &seqExpr{
																									pos: position{line: 1393, col: 13, offset: 46652},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1393, col: 14, offset: 46653},
																											val:        "[A-Z]",
																											ranges:     []rune{'A', 'Z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1393, col: 21, offset: 46660},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1395, col: 13, offset: 46780},
																								run: (*parser).callonExtraListElement58,
																								expr: &seqExpr{
																									pos: position{line: 1395, col: 13, offset: 46780},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1395, col: 13, offset: 46780},
																											expr: &charClassMatcher{
																												pos:        position{line: 1395, col: 14, offset: 46781},
																												val:        "[ivxdlcm]",
																												chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1395, col: 26, offset: 46793},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1397, col: 13, offset: 46913},
																								run: (*parser).callonExtraListElement63,
																								expr: &seqExpr{
																									pos: position{line: 1397, col: 13, offset: 46913},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1397, col: 13, offset: 46913},
																											expr: &charClassMatcher{
																												pos:        position{line: 1397, col: 14, offset: 46914},
																												val:        "[IVXDLCM]",
																												chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1397, col: 26, offset: 46926},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2865, col: 11, offset: 94908},
																					run: (*parser).callonExtraListElement68,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2865, col: 11, offset: 94908},
																						expr: &charClassMatcher{
																							pos:        position{line: 2865, col: 12, offset: 94909},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1358, col: 5, offset: 45334},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1297, col: 5, offset: 43501},
																		run: (*parser).callonExtraListElement72,
																		expr: &seqExpr{
																			pos: position{line: 1297, col: 5, offset: 43501},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1297, col: 5, offset: 43501},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1297, col: 14, offset: 43510},
																						run: (*parser).callonExtraListElement75,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1297, col: 14, offset: 43510},
																							expr: &charClassMatcher{
																								pos:        position{line: 1297, col: 14, offset: 43510},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2877, col: 8, offset: 95162},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2870, col: 12, offset: 95022},
																							run: (*parser).callonExtraListElement79,
																							expr: &choiceExpr{
																								pos: position{line: 2870, col: 13, offset: 95023},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2870, col: 13, offset: 95023},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2870, col: 20, offset: 95030},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2870, col: 29, offset: 95039},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2874, col: 8, offset: 95112},
																							expr: &anyMatcher{
																								line: 2874, col: 9, offset: 95113,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1244, col: 13, offset: 41776},
										run: (*parser).callonExtraListElement86,
										expr: &seqExpr{
											pos: position{line: 1244, col: 13, offset: 41776},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1244, col: 13, offset: 41776},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1244, col: 24, offset: 41787},
														expr: &ruleRefExpr{
															pos:  position{line: 1244, col: 25, offset: 41788},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1245, col: 13, offset: 41819},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1357, col: 5, offset: 45295},
														run: (*parser).callonExtraListElement92,
														expr: &seqExpr{
															pos: position{line: 1357, col: 5, offset: 45295},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1357, col: 5, offset: 45295},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1364, col: 5, offset: 45503},
																		run: (*parser).callonExtraListElement95,
																		expr: &seqExpr{
																			pos: position{line: 1364, col: 5, offset: 45503},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1364, col: 5, offset: 45503},
																					expr: &actionExpr{
																						pos: position{line: 2860, col: 10, offset: 94799},
																						run: (*parser).callonExtraListElement98,
																						expr: &charClassMatcher{
																							pos:        position{line: 2860, col: 11, offset: 94800},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1364, col: 12, offset: 45510},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1366, col: 9, offset: 45573},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1366, col: 9, offset: 45573},
																								run: (*parser).callonExtraListElement102,
																								expr: &seqExpr{
																									pos: position{line: 1366, col: 9, offset: 45573},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1366, col: 9, offset: 45573},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1366, col: 16, offset: 45580},
																												run: (*parser).callonExtraListElement105,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1366, col: 16, offset: 45580},
																													expr: &litMatcher{
																														pos:        position{line: 1366, col: 17, offset: 45581},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1370, col: 9, offset: 45681},
																											run: (*parser).callonExtraListElement108,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1389, col: 11, offset: 46398},
																								run: (*parser).callonExtraListElement109,
																								expr: &seqExpr{
																									pos: position{line: 1389, col: 11, offset: 46398},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1389, col: 11, offset: 46398},
																											expr: &charClassMatcher{
																												pos:        position{line: 1389, col: 12, offset: 46399},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1389, col: 20, offset: 46407},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1391, col: 13, offset: 46524},
																								run: (*parser).callonExtraListElement114,
																								expr: &seqExpr{
																									pos: position{line: 1391, col: 13, offset: 46524},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1391, col: 14, offset: 46525},
																											val:        "[a-z]",
																											ranges:     []rune{'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1391, col: 21, offset: 46532},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1393, col: 13, offset: 46652},
																								run: (*parser).callonExtraListElement118,
																								expr: &seqExpr{
																									pos: position{line: 1393, col: 13, offset: 46652},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1393, col: 14, offset: 46653},
																											val:        "[A-Z]",
																											ranges:     []rune{'A', 'Z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1393, col: 21, offset: 46660},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1395, col: 13, offset: 46780},
																								run: (*parser).callonExtraListElement122,
																								expr: &seqExpr{
																									pos: position{line: 1395, col: 13, offset: 46780},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1395, col: 13, offset: 46780},
																											expr: &charClassMatcher{
																												pos:        position{line: 1395, col: 14, offset: 46781},
																												val:        "[ivxdlcm]",
																												chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1395, col: 26, offset: 46793},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1397, col: 13, offset: 46913},
																								run: (*parser).callonExtraListElement127,
																								expr: &seqExpr{
																									pos: position{line: 1397, col: 13, offset: 46913},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1397, col: 13, offset: 46913},
																											expr: &charClassMatcher{
																												pos:        position{line: 1397, col: 14, offset: 46914},
																												val:        "[IVXDLCM]",
																												chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1397, col: 26, offset: 46926},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2865, col: 11, offset: 94908},
																					run: (*parser).callonExtraListElement132,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2865, col: 11, offset: 94908},
																						expr: &charClassMatcher{
																							pos:        position{line: 2865, col: 12, offset: 94909},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1358, col: 5, offset: 45334},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1297, col: 5, offset: 43501},
																		run: (*parser).callonExtraListElement136,
																		expr: &seqExpr{
																			pos: position{line: 1297, col: 5, offset: 43501},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1297, col: 5, offset: 43501},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1297, col: 14, offset: 43510},
																						run: (*parser).callonExtraListElement139,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1297, col: 14, offset: 43510},
																							expr: &charClassMatcher{
																								pos:        position{line: 1297, col: 14, offset: 43510},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2877, col: 8, offset: 95162},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2870, col: 12, offset: 95022},
																							run: (*parser).callonExtraListElement143,
																							expr: &choiceExpr{
																								pos: position{line: 2870, col: 13, offset: 95023},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2870, col: 13, offset: 95023},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2870, col: 20, offset: 95030},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2870, col: 29, offset: 95039},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2874, col: 8, offset: 95112},
																							expr: &anyMatcher{
																								line: 2874, col: 9, offset: 95113,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1248, col: 13, offset: 41947},
										run: (*parser).callonExtraListElement150,
										expr: &seqExpr{
											pos: position{line: 1248, col: 13, offset: 41947},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1248, col: 13, offset: 41947},
													expr: &actionExpr{
														pos: position{line: 449, col: 14, offset: 14731},
														run: (*parser).callonExtraListElement153,
														expr: &seqExpr{
															pos: position{line: 449, col: 14, offset: 14731},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 449, col: 14, offset: 14731},
																	expr: &notExpr{
																		pos: position{line: 2874, col: 8, offset: 95112},
																		expr: &anyMatcher{
																			line: 2874, col: 9, offset: 95113,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 449, col: 19, offset: 14736},
																	expr: &actionExpr{
																		pos: position{line: 2860, col: 10, offset: 94799},
																		run: (*parser).callonExtraListElement159,
																		expr: &charClassMatcher{
																			pos:        position{line: 2860, col: 11, offset: 94800},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2877, col: 8, offset: 95162},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonExtraListElement162,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1249, col: 13, offset: 41971},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1407, col: 5, offset: 47192},
														run: (*parser).callonExtraListElement170,
														expr: &seqExpr{
															pos: position{line: 1407, col: 5, offset: 47192},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1407, col: 5, offset: 47192},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1414, col: 5, offset: 47465},
																		run: (*parser).callonExtraListElement173,
																		expr: &seqExpr{
																			pos: position{line: 1414, col: 5, offset: 47465},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1414, col: 5, offset: 47465},
																					expr: &actionExpr{
																						pos: position{line: 2860, col: 10, offset: 94799},
																						run: (*parser).callonExtraListElement176,
																						expr: &charClassMatcher{
																							pos:        position{line: 2860, col: 11, offset: 94800},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1414, col: 12, offset: 47472},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1414, col: 20, offset: 47480},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1416, col: 9, offset: 47537},
																								run: (*parser).callonExtraListElement180,
																								expr: &seqExpr{
																									pos: position{line: 1416, col: 9, offset: 47537},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1416, col: 9, offset: 47537},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1416, col: 16, offset: 47544},
																												run: (*parser).callonExtraListElement183,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1416, col: 16, offset: 47544},
																													expr: &litMatcher{
																														pos:        position{line: 1416, col: 17, offset: 47545},
																														val:        "*",
																														ignoreCase: false,
																														want:       "\"*\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1420, col: 9, offset: 47645},
																											run: (*parser).callonExtraListElement186,
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1437, col: 14, offset: 48352},
																								label: "depth",
																								expr: &actionExpr{
																									pos: position{line: 1437, col: 21, offset: 48359},
																									run: (*parser).callonExtraListElement188,
																									expr: &litMatcher{
																										pos:        position{line: 1437, col: 22, offset: 48360},
																										val:        "-",
																										ignoreCase: false,
																										want:       "\"-\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2865, col: 11, offset: 94908},
																					run: (*parser).callonExtraListElement190,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2865, col: 11, offset: 94908},
																						expr: &charClassMatcher{
																							pos:        position{line: 2865, col: 12, offset: 94909},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1408, col: 5, offset: 47233},
																	label: "checkstyle",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 1408, col: 16, offset: 47244},
																		expr: &actionExpr{
																			pos: position{line: 1444, col: 5, offset: 48521},
																			run: (*parser).callonExtraListElement195,
																			expr: &seqExpr{
																				pos: position{line: 1444, col: 5, offset: 48521},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 1444, col: 5, offset: 48521},
																						expr: &litMatcher{
																							pos:        position{line: 1444, col: 6, offset: 48522},
																							val:        "[",
																							ignoreCase: false,
																							want:       "\"[\"",
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 1444, col: 10, offset: 48526},
																						label: "style",
																						expr: &choiceExpr{
																							pos: position{line: 1445, col: 7, offset: 48540},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 1445, col: 7, offset: 48540},
																									run: (*parser).callonExtraListElement201,
																									expr: &litMatcher{
																										pos:        position{line: 1445, col: 7, offset: 48540},
																										val:        "[ ]",
																										ignoreCase: false,
																										want:       "\"[ ]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1446, col: 7, offset: 48585},
																									run: (*parser).callonExtraListElement203,
																									expr: &litMatcher{
																										pos:        position{line: 1446, col: 7, offset: 48585},
																										val:        "[*]",
																										ignoreCase: false,
																										want:       "\"[*]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1447, col: 7, offset: 48628},
																									run: (*parser).callonExtraListElement205,
																									expr: &litMatcher{
																										pos:        position{line: 1447, col: 7, offset: 48628},
																										val:        "[x]",
																										ignoreCase: false,
																										want:       "\"[x]\"",
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2865, col: 11, offset: 94908},
																						run: (*parser).callonExtraListElement207,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2865, col: 11, offset: 94908},
																							expr: &charClassMatcher{
																								pos:        position{line: 2865, col: 12, offset: 94909},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1409, col: 5, offset: 47283},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1297, col: 5, offset: 43501},
																		run: (*parser).callonExtraListElement211,
																		expr: &seqExpr{
																			pos: position{line: 1297, col: 5, offset: 43501},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1297, col: 5, offset: 43501},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1297, col: 14, offset: 43510},
																						run: (*parser).callonExtraListElement214,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1297, col: 14, offset: 43510},
																							expr: &charClassMatcher{
																								pos:        position{line: 1297, col: 14, offset: 43510},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2877, col: 8, offset: 95162},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2870, col: 12, offset: 95022},
																							run: (*parser).callonExtraListElement218,
																							expr: &choiceExpr{
																								pos: position{line: 2870, col: 13, offset: 95023},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2870, col: 13, offset: 95023},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2870, col: 20, offset: 95030},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2870, col: 29, offset: 95039},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2874, col: 8, offset: 95112},
																							expr: &anyMatcher{
																								line: 2874, col: 9, offset: 95113,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1252, col: 13, offset: 42065},
										run: (*parser).callonExtraListElement225,
										expr: &seqExpr{
											pos: position{line: 1252, col: 13, offset: 42065},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1252, col: 13, offset: 42065},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1252, col: 24, offset: 42076},
														expr: &ruleRefExpr{
															pos:  position{line: 1252, col: 25, offset: 42077},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1253, col: 13, offset: 42108},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1407, col: 5, offset: 47192},
														run: (*parser).callonExtraListElement231,
														expr: &seqExpr{
															pos: position{line: 1407, col: 5, offset: 47192},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1407, col: 5, offset: 47192},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1414, col: 5, offset: 47465},
																		run: (*parser).callonExtraListElement234,
																		expr: &seqExpr{
																			pos: position{line: 1414, col: 5, offset: 47465},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1414, col: 5, offset: 47465},
																					expr: &actionExpr{
																						pos: position{line: 2860, col: 10, offset: 94799},
																						run: (*parser).callonExtraListElement237,
																						expr: &charClassMatcher{
																							pos:        position{line: 2860, col: 11, offset: 94800},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1414, col: 12, offset: 47472},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1414, col: 20, offset: 47480},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1416, col: 9, offset: 47537},
																								run: (*parser).callonExtraListElement241,
																								expr: &seqExpr{
																									pos: position{line: 1416, col: 9, offset: 47537},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1416, col: 9, offset: 47537},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1416, col: 16, offset: 47544},
																												run: (*parser).callonExtraListElement244,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1416, col: 16, offset: 47544},
																													expr: &litMatcher{
																														pos:        position{line: 1416, col: 17, offset: 47545},
																														val:        "*",
																														ignoreCase: false,
																														want:       "\"*\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1420, col: 9, offset: 47645},
																											run: (*parser).callonExtraListElement247,
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1437, col: 14, offset: 48352},
																								label: "depth",
																								expr: &actionExpr{
																									pos: position{line: 1437, col: 21, offset: 48359},
																									run: (*parser).callonExtraListElement249,
																									expr: &litMatcher{
																										pos:        position{line: 1437, col: 22, offset: 48360},
																										val:        "-",
																										ignoreCase: false,
																										want:       "\"-\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2865, col: 11, offset: 94908},
																					run: (*parser).callonExtraListElement251,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2865, col: 11, offset: 94908},
																						expr: &charClassMatcher{
																							pos:        position{line: 2865, col: 12, offset: 94909},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1408, col: 5, offset: 47233},
																	label: "checkstyle",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 1408, col: 16, offset: 47244},
																		expr: &actionExpr{
																			pos: position{line: 1444, col: 5, offset: 48521},
																			run: (*parser).callonExtraListElement256,
																			expr: &seqExpr{
																				pos: position{line: 1444, col: 5, offset: 48521},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 1444, col: 5, offset: 48521},
																						expr: &litMatcher{
																							pos:        position{line: 1444, col: 6, offset: 48522},
																							val:        "[",
																							ignoreCase: false,
																							want:       "\"[\"",
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 1444, col: 10, offset: 48526},
																						label: "style",
																						expr: &choiceExpr{
																							pos: position{line: 1445, col: 7, offset: 48540},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 1445, col: 7, offset: 48540},
																									run: (*parser).callonExtraListElement262,
																									expr: &litMatcher{
																										pos:        position{line: 1445, col: 7, offset: 48540},
																										val:        "[ ]",
																										ignoreCase: false,
																										want:       "\"[ ]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1446, col: 7, offset: 48585},
																									run: (*parser).callonExtraListElement264,
																									expr: &litMatcher{
																										pos:        position{line: 1446, col: 7, offset: 48585},
																										val:        "[*]",
																										ignoreCase: false,
																										want:       "\"[*]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1447, col: 7, offset: 48628},
																									run: (*parser).callonExtraListElement266,
																									expr: &litMatcher{
																										pos:        position{line: 1447, col: 7, offset: 48628},
																										val:        "[x]",
																										ignoreCase: false,
																										want:       "\"[x]\"",
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2865, col: 11, offset: 94908},
																						run: (*parser).callonExtraListElement268,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2865, col: 11, offset: 94908},
																							expr: &charClassMatcher{
																								pos:        position{line: 2865, col: 12, offset: 94909},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1409, col: 5, offset: 47283},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1297, col: 5, offset: 43501},
																		run: (*parser).callonExtraListElement272,
																		expr: &seqExpr{
																			pos: position{line: 1297, col: 5, offset: 43501},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1297, col: 5, offset: 43501},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1297, col: 14, offset: 43510},
																						run: (*parser).callonExtraListElement275,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1297, col: 14, offset: 43510},
																							expr: &charClassMatcher{
																								pos:        position{line: 1297, col: 14, offset: 43510},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2877, col: 8, offset: 95162},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2870, col: 12, offset: 95022},
																							run: (*parser).callonExtraListElement279,
																							expr: &choiceExpr{
																								pos: position{line: 2870, col: 13, offset: 95023},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2870, col: 13, offset: 95023},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2870, col: 20, offset: 95030},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2870, col: 29, offset: 95039},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2874, col: 8, offset: 95112},
																							expr: &anyMatcher{
																								line: 2874, col: 9, offset: 95113,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1256, col: 13, offset: 42238},
										run: (*parser).callonExtraListElement286,
										expr: &seqExpr{
											pos: position{line: 1256, col: 13, offset: 42238},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1256, col: 13, offset: 42238},
													expr: &actionExpr{
														pos: position{line: 449, col: 14, offset: 14731},
														run: (*parser).callonExtraListElement289,
														expr: &seqExpr{
															pos: position{line: 449, col: 14, offset: 14731},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 449, col: 14, offset: 14731},
																	expr: &notExpr{
																		pos: position{line: 2874, col: 8, offset: 95112},
																		expr: &anyMatcher{
																			line: 2874, col: 9, offset: 95113,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 449, col: 19, offset: 14736},
																	expr: &actionExpr{
																		pos: position{line: 2860, col: 10, offset: 94799},
																		run: (*parser).callonExtraListElement295,
																		expr: &charClassMatcher{
																			pos:        position{line: 2860, col: 11, offset: 94800},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2877, col: 8, offset: 95162},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonExtraListElement298,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1257, col: 13, offset: 42262},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1514, col: 5, offset: 50477},
														run: (*parser).callonExtraListElement306,
														expr: &seqExpr{
															pos: position{line: 1514, col: 5, offset: 50477},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1514, col: 5, offset: 50477},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1520, col: 5, offset: 50678},
																		run: (*parser).callonExtraListElement309,
																		expr: &seqExpr{
																			pos: position{line: 1520, col: 5, offset: 50678},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1520, col: 5, offset: 50678},
																					val:        "<",
																					ignoreCase: false,
																					want:       "\"<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 1520, col: 9, offset: 50682},
																					label: "ref",
																					expr: &actionExpr{
																						pos: position{line: 1520, col: 14, offset: 50687},
																						run: (*parser).callonExtraListElement313,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1520, col: 14, offset: 50687},
																							expr: &charClassMatcher{
																								pos:        position{line: 1520, col: 14, offset: 50687},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1520, col: 62, offset: 50735},
																					val:        ">",
																					ignoreCase: false,
																					want:       "\">\"",
																				},
																				&actionExpr{
																					pos: position{line: 2865, col: 11, offset: 94908},
																					run: (*parser).callonExtraListElement317,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2865, col: 11, offset: 94908},
																						expr: &charClassMatcher{
																							pos:        position{line: 2865, col: 12, offset: 94909},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1515, col: 5, offset: 50513},
																	label: "description",
																	expr: &actionExpr{
																		pos: position{line: 1525, col: 5, offset: 50813},
																		run: (*parser).callonExtraListElement321,
																		expr: &seqExpr{
																			pos: position{line: 1525, col: 5, offset: 50813},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1525, col: 5, offset: 50813},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1525, col: 14, offset: 50822},
																						run: (*parser).callonExtraListElement324,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1525, col: 14, offset: 50822},
																							expr: &charClassMatcher{
																								pos:        position{line: 1525, col: 14, offset: 50822},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2877, col: 8, offset: 95162},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2870, col: 12, offset: 95022},
																							run: (*parser).callonExtraListElement328,
																							expr: &choiceExpr{
																								pos: position{line: 2870, col: 13, offset: 95023},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2870, col: 13, offset: 95023},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2870, col: 20, offset: 95030},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2870, col: 29, offset: 95039},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2874, col: 8, offset: 95112},
																							expr: &anyMatcher{
																								line: 2874, col: 9, offset: 95113,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1260, col: 13, offset: 42354},
										run: (*parser).callonExtraListElement335,
										expr: &seqExpr{
											pos: position{line: 1260, col: 13, offset: 42354},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1260, col: 13, offset: 42354},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1260, col: 24, offset: 42365},
														expr: &ruleRefExpr{
															pos:  position{line: 1260, col: 25, offset: 42366},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1261, col: 13, offset: 42397},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1514, col: 5, offset: 50477},
														run: (*parser).callonExtraListElement341,
														expr: &seqExpr{
															pos: position{line: 1514, col: 5, offset: 50477},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1514, col: 5, offset: 50477},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1520, col: 5, offset: 50678},
																		run: (*parser).callonExtraListElement344,
																		expr: &seqExpr{
																			pos: position{line: 1520, col: 5, offset: 50678},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1520, col: 5, offset: 50678},
																					val:        "<",
																					ignoreCase: false,
																					want:       "\"<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 1520, col: 9, offset: 50682},
																					label: "ref",
																					expr: &actionExpr{
																						pos: position{line: 1520, col: 14, offset: 50687},
																						run: (*parser).callonExtraListElement348,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1520, col: 14, offset: 50687},
																							expr: &charClassMatcher{
																								pos:        position{line: 1520, col: 14, offset: 50687},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1520, col: 62, offset: 50735},
																					val:        ">",
																					ignoreCase: false,
																					want:       "\">\"",
																				},
																				&actionExpr{
																					pos: position{line: 2865, col: 11, offset: 94908},
																					run: (*parser).callonExtraListElement352,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2865, col: 11, offset: 94908},
																						expr: &charClassMatcher{
																							pos:        position{line: 2865, col: 12, offset: 94909},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1515, col: 5, offset: 50513},
																	label: "description",
																	expr: &actionExpr{
																		pos: position{line: 1525, col: 5, offset: 50813},
																		run: (*parser).callonExtraListElement356,
																		expr: &seqExpr{
																			pos: position{line: 1525, col: 5, offset: 50813},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1525, col: 5, offset: 50813},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1525, col: 14, offset: 50822},
																						run: (*parser).callonExtraListElement359,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1525, col: 14, offset: 50822},
																							expr: &charClassMatcher{
																								pos:        position{line: 1525, col: 14, offset: 50822},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2877, col: 8, offset: 95162},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2870, col: 12, offset: 95022},
																							run: (*parser).callonExtraListElement363,
																							expr: &choiceExpr{
																								pos: position{line: 2870, col: 13, offset: 95023},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2870, col: 13, offset: 95023},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2870, col: 20, offset: 95030},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2870, col: 29, offset: 95039},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2874, col: 8, offset: 95112},
																							expr: &anyMatcher{
																								line: 2874, col: 9, offset: 95113,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1264, col: 11, offset: 42523},
										name: "ListElementContinuation",
									},
									&actionExpr{
										pos: position{line: 1265, col: 13, offset: 42559},
										run: (*parser).callonExtraListElement371,
										expr: &seqExpr{
											pos: position{line: 1265, col: 13, offset: 42559},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1265, col: 13, offset: 42559},
													expr: &actionExpr{
														pos: position{line: 449, col: 14, offset: 14731},
														run: (*parser).callonExtraListElement374,
														expr: &seqExpr{
															pos: position{line: 449, col: 14, offset: 14731},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 449, col: 14, offset: 14731},
																	expr: &notExpr{
																		pos: position{line: 2874, col: 8, offset: 95112},
																		expr: &anyMatcher{
																			line: 2874, col: 9, offset: 95113,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 449, col: 19, offset: 14736},
																	expr: &actionExpr{
																		pos: position{line: 2860, col: 10, offset: 94799},
																		run: (*parser).callonExtraListElement380,
																		expr: &charClassMatcher{
																			pos:        position{line: 2860, col: 11, offset: 94800},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2877, col: 8, offset: 95162},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonExtraListElement383,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1266, col: 13, offset: 42583},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1456, col: 5, offset: 48821},
														run: (*parser).callonExtraListElement391,
														expr: &seqExpr{
															pos: position{line: 1456, col: 5, offset: 48821},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1456, col: 5, offset: 48821},
																	label: "term",
																	expr: &actionExpr{
																		pos: position{line: 1464, col: 5, offset: 49080},
																		run: (*parser).callonExtraListElement394,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1464, col: 5, offset: 49080},
																			expr: &seqExpr{
																				pos: position{line: 1464, col: 6, offset: 49081},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1464, col: 6, offset: 49081},
																						expr: &actionExpr{
																							pos: position{line: 1469, col: 5, offset: 49212},
																							run: (*parser).callonExtraListElement398,
																							expr: &seqExpr{
																								pos: position{line: 1469, col: 5, offset: 49212},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 1469, col: 5, offset: 49212},
																										label: "separator",
																										expr: &actionExpr{
																											pos: position{line: 1469, col: 16, offset: 49223},
																											run: (*parser).callonExtraListElement401,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1469, col: 16, offset: 49223},
																												expr: &litMatcher{
																													pos:        position{line: 1469, col: 17, offset: 49224},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 1472, col: 5, offset: 49281},
																										run: (*parser).callonExtraListElement404,
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1464, col: 35, offset: 49110},
																						expr: &choiceExpr{
																							pos: position{line: 2877, col: 8, offset: 95162},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2870, col: 12, offset: 95022},
																									run: (*parser).callonExtraListElement407,
																									expr: &choiceExpr{
																										pos: position{line: 2870, col: 13, offset: 95023},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2870, col: 13, offset: 95023},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2870, col: 20, offset: 95030},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2870, col: 29, offset: 95039},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2874, col: 8, offset: 95112},
																									expr: &anyMatcher{
																										line: 2874, col: 9, offset: 95113,
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1464, col: 40, offset: 49115,
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1457, col: 5, offset: 48856},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1469, col: 5, offset: 49212},
																		run: (*parser).callonExtraListElement416,
																		expr: &seqExpr{
																			pos: position{line: 1469, col: 5, offset: 49212},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1469, col: 5, offset: 49212},
																					label: "separator",
																					expr: &actionExpr{
																						pos: position{line: 1469, col: 16, offset: 49223},
																						run: (*parser).callonExtraListElement419,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1469, col: 16, offset: 49223},
																							expr: &litMatcher{
																								pos:        position{line: 1469, col: 17, offset: 49224},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1472, col: 5, offset: 49281},
																					run: (*parser).callonExtraListElement422,
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1458, col: 5, offset: 48901},
																	label: "description",
																	expr: &choiceExpr{
																		pos: position{line: 1480, col: 5, offset: 49531},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1482, col: 9, offset: 49596},
																				run: (*parser).callonExtraListElement425,
																				expr: &seqExpr{
																					pos: position{line: 1482, col: 9, offset: 49596},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 1482, col: 9, offset: 49596},
																							expr: &actionExpr{
																								pos: position{line: 2860, col: 10, offset: 94799},
																								run: (*parser).callonExtraListElement428,
																								expr: &charClassMatcher{
																									pos:        position{line: 2860, col: 11, offset: 94800},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2877, col: 8, offset: 95162},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2870, col: 12, offset: 95022},
																									run: (*parser).callonExtraListElement431,
																									expr: &choiceExpr{
																										pos: position{line: 2870, col: 13, offset: 95023},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2870, col: 13, offset: 95023},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2870, col: 20, offset: 95030},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2870, col: 29, offset: 95039},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2874, col: 8, offset: 95112},
																									expr: &anyMatcher{
																										line: 2874, col: 9, offset: 95113,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1483, col: 9, offset: 49616},
																							expr: &actionExpr{
																								pos: position{line: 449, col: 14, offset: 14731},
																								run: (*parser).callonExtraListElement439,
																								expr: &seqExpr{
																									pos: position{line: 449, col: 14, offset: 14731},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 449, col: 14, offset: 14731},
																											expr: &notExpr{
																												pos: position{line: 2874, col: 8, offset: 95112},
																												expr: &anyMatcher{
																													line: 2874, col: 9, offset: 95113,
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 449, col: 19, offset: 14736},
																											expr: &actionExpr{
																												pos: position{line: 2860, col: 10, offset: 94799},
																												run: (*parser).callonExtraListElement445,
																												expr: &charClassMatcher{
																													pos:        position{line: 2860, col: 11, offset: 94800},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2877, col: 8, offset: 95162},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2870, col: 12, offset: 95022},
																													run: (*parser).callonExtraListElement448,
																													expr: &choiceExpr{
																														pos: position{line: 2870, col: 13, offset: 95023},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2870, col: 13, offset: 95023},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2870, col: 20, offset: 95030},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2870, col: 29, offset: 95039},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2874, col: 8, offset: 95112},
																													expr: &anyMatcher{
																														line: 2874, col: 9, offset: 95113,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1484, col: 9, offset: 49636},
																							label: "content",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1484, col: 17, offset: 49644},
																								expr: &actionExpr{
																									pos: position{line: 1282, col: 5, offset: 43075},
																									run: (*parser).callonExtraListElement457,
																									expr: &seqExpr{
																										pos: position{line: 1282, col: 5, offset: 43075},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 1282, col: 5, offset: 43075},
																												expr: &actionExpr{
																													pos: position{line: 449, col: 14, offset: 14731},
																													run: (*parser).callonExtraListElement460,
																													expr: &seqExpr{
																														pos: position{line: 449, col: 14, offset: 14731},
																														exprs: []interface{}{
																															&notExpr{
																																pos: position{line: 449, col: 14, offset: 14731},
																																expr: &notExpr{
																																	pos: position{line: 2874, col: 8, offset: 95112},
																																	expr: &anyMatcher{
																																		line: 2874, col: 9, offset: 95113,
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 449, col: 19, offset: 14736},
																																expr: &actionExpr{
																																	pos: position{line: 2860, col: 10, offset: 94799},
																																	run: (*parser).callonExtraListElement466,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2860, col: 11, offset: 94800},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 2877, col: 8, offset: 95162},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 2870, col: 12, offset: 95022},
																																		run: (*parser).callonExtraListElement469,
																																		expr: &choiceExpr{
																																			pos: position{line: 2870, col: 13, offset: 95023},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 2870, col: 13, offset: 95023},
																																					val:        "\n",
																																					ignoreCase: false,
																																					want:       "\"\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2870, col: 20, offset: 95030},
																																					val:        "\r\n",
																																					ignoreCase: false,
																																					want:       "\"\\r\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2870, col: 29, offset: 95039},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 2874, col: 8, offset: 95112},
																																		expr: &anyMatcher{
																																			line: 2874, col: 9, offset: 95113,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1283, col: 5, offset: 43090},
																												expr: &seqExpr{
																													pos: position{line: 1315, col: 34, offset: 44000},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 1315, col: 34, offset: 44000},
																															val:        "+",
																															ignoreCase: false,
																															want:       "\"+\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 1315, col: 38, offset: 44004},
																															expr: &actionExpr{
																																pos: position{line: 2860, col: 10, offset: 94799},
																																run: (*parser).callonExtraListElement480,
																																expr: &charClassMatcher{
																																	pos:        position{line: 2860, col: 11, offset: 94800},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 2870, col: 12, offset: 95022},
																															run: (*parser).callonExtraListElement482,
																															expr: &choiceExpr{
																																pos: position{line: 2870, col: 13, offset: 95023},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2870, col: 13, offset: 95023},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2870, col: 20, offset: 95030},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2870, col: 29, offset: 95039},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1284, col: 5, offset: 43125},
																												expr: &actionExpr{
																													pos: position{line: 1364, col: 5, offset: 45503},
																													run: (*parser).callonExtraListElement488,
																													expr: &seqExpr{
																														pos: position{line: 1364, col: 5, offset: 45503},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 1364, col: 5, offset: 45503},
																																expr: &actionExpr{
																																	pos: position{line: 2860, col: 10, offset: 94799},
																																	run: (*parser).callonExtraListElement491,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2860, col: 11, offset: 94800},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 1364, col: 12, offset: 45510},
																																label: "prefix",
																																expr: &choiceExpr{
																																	pos: position{line: 1366, col: 9, offset: 45573},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 1366, col: 9, offset: 45573},
																																			run: (*parser).callonExtraListElement495,
																																			expr: &seqExpr{
																																				pos: position{line: 1366, col: 9, offset: 45573},
																																				exprs: []interface{}{
																																					&labeledExpr{
																																						pos:   position{line: 1366, col: 9, offset: 45573},
																																						label: "depth",
																																						expr: &actionExpr{
																																							pos: position{line: 1366, col: 16, offset: 45580},
																																							run: (*parser).callonExtraListElement498,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 1366, col: 16, offset: 45580},
																																								expr: &litMatcher{
																																									pos:        position{line: 1366, col: 17, offset: 45581},
																																									val:        ".",
																																									ignoreCase: false,
																																									want:       "\".\"",
																																								},
																																							},
																																						},
																																					},
																																					&andCodeExpr{
																																						pos: position{line: 1370, col: 9, offset: 45681},
																																						run: (*parser).callonExtraListElement501,
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1389, col: 11, offset: 46398},
																																			run: (*parser).callonExtraListElement502,
																																			expr: &seqExpr{
																																				pos: position{line: 1389, col: 11, offset: 46398},
																																				exprs: []interface{}{
																																					&oneOrMoreExpr{
																																						pos: position{line: 1389, col: 11, offset: 46398},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 1389, col: 12, offset: 46399},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1389, col: 20, offset: 46407},
																																						val:        ".",
																																						ignoreCase: false,
																																						want:       "\".\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1391, col: 13, offset: 46524},
																																			run: (*parser).callonExtraListElement507,
																																			expr: &seqExpr{
																																				pos: position{line: 1391, col: 13, offset: 46524},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 1391, col: 14, offset: 46525},
																																						val:        "[a-z]",
																																						ranges:     []rune{'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1391, col: 21, offset: 46532},
																																						val:        ".",
																																						ignoreCase: false,
																																						want:       "\".\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1393, col: 13, offset: 46652},
																																			run: (*parser).callonExtraListElement511,
																																			expr: &seqExpr{
																																				pos: position{line: 1393, col: 13, offset: 46652},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 1393, col: 14, offset: 46653},
																																						val:        "[A-Z]",
																																						ranges:     []rune{'A', 'Z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1393, col: 21, offset: 46660},
																																						val:        ".",
																																						ignoreCase: false,
																																						want:       "\".\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1395, col: 13, offset: 46780},
																																			run: (*parser).callonExtraListElement515,
																																			expr: &seqExpr{
																																				pos: position{line: 1395, col: 13, offset: 46780},
																																				exprs: []interface{}{
																																					&oneOrMoreExpr{
																																						pos: position{line: 1395, col: 13, offset: 46780},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 1395, col: 14, offset: 46781},
																																							val:        "[ivxdlcm]",
																																							chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1395, col: 26, offset: 46793},
																																						val:        ")",
																																						ignoreCase: false,
																																						want:       "\")\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1397, col: 13, offset: 46913},
																																			run: (*parser).callonExtraListElement520,
																																			expr: &seqExpr{
																																				pos: position{line: 1397, col: 13, offset: 46913},
																																				exprs: []interface{}{
																																					&oneOrMoreExpr{
																																						pos: position{line: 1397, col: 13, offset: 46913},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 1397, col: 14, offset: 46914},
																																							val:        "[IVXDLCM]",
																																							chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1397, col: 26, offset: 46926},
																																						val:        ")",
																																						ignoreCase: false,
																																						want:       "\")\"",
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 2865, col: 11, offset: 94908},
																																run: (*parser).callonExtraListElement525,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 2865, col: 11, offset: 94908},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2865, col: 12, offset: 94909},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1285, col: 5, offset: 43155},
																												expr: &actionExpr{
																													pos: position{line: 1414, col: 5, offset: 47465},
																													run: (*parser).callonExtraListElement529,
																													expr: &seqExpr{
																														pos: position{line: 1414, col: 5, offset: 47465},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 1414, col: 5, offset: 47465},
																																expr: &actionExpr{
																																	pos: position{line: 2860, col: 10, offset: 94799},
																																	run: (*parser).callonExtraListElement532,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2860, col: 11, offset: 94800},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 1414, col: 12, offset: 47472},
																																label: "prefix",
																																expr: &choiceExpr{
																																	pos: position{line: 1414, col: 20, offset: 47480},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 1416, col: 9, offset: 47537},
																																			run: (*parser).callonExtraListElement536,
																																			expr: &seqExpr{
																																				pos: position{line: 1416, col: 9, offset: 47537},
																																				exprs: []interface{}{
																																					&labeledExpr{
																																						pos:   position{line: 1416, col: 9, offset: 47537},
																																						label: "depth",
																																						expr: &actionExpr{
																																							pos: position{line: 1416, col: 16, offset: 47544},
																																							run: (*parser).callonExtraListElement539,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 1416, col: 16, offset: 47544},
																																								expr: &litMatcher{
																																									pos:        position{line: 1416, col: 17, offset: 47545},
																																									val:        "*",
																																									ignoreCase: false,
																																									want:       "\"*\"",
																																								},
																																							},
																																						},
																																					},
																																					&andCodeExpr{
																																						pos: position{line: 1420, col: 9, offset: 47645},
																																						run: (*parser).callonExtraListElement542,
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 1437, col: 14, offset: 48352},
																																			label: "depth",
																																			expr: &actionExpr{
																																				pos: position{line: 1437, col: 21, offset: 48359},
																																				run: (*parser).callonExtraListElement544,
																																				expr: &litMatcher{
																																					pos:        position{line: 1437, col: 22, offset: 48360},
																																					val:        "-",
																																					ignoreCase: false,
																																					want:       "\"-\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 2865, col: 11, offset: 94908},
																																run: (*parser).callonExtraListElement546,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 2865, col: 11, offset: 94908},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2865, col: 12, offset: 94909},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1286, col: 5, offset: 43187},
																												expr: &actionExpr{
																													pos: position{line: 1520, col: 5, offset: 50678},
																													run: (*parser).callonExtraListElement550,
																													expr: &seqExpr{
																														pos: position{line: 1520, col: 5, offset: 50678},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 1520, col: 5, offset: 50678},
																																val:        "<",
																																ignoreCase: false,
																																want:       "\"<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 1520, col: 9, offset: 50682},
																																label: "ref",
																																expr: &actionExpr{
																																	pos: position{line: 1520, col: 14, offset: 50687},
																																	run: (*parser).callonExtraListElement554,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 1520, col: 14, offset: 50687},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1520, col: 14, offset: 50687},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 1520, col: 62, offset: 50735},
																																val:        ">",
																																ignoreCase: false,
																																want:       "\">\"",
																															},
																															&actionExpr{
																																pos: position{line: 2865, col: 11, offset: 94908},
																																run: (*parser).callonExtraListElement558,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 2865, col: 11, offset: 94908},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2865, col: 12, offset: 94909},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1287, col: 5, offset: 43217},
																												expr: &seqExpr{
																													pos: position{line: 1287, col: 7, offset: 43219},
																													exprs: []interface{}{
																														&actionExpr{
																															pos: position{line: 1464, col: 5, offset: 49080},
																															run: (*parser).callonExtraListElement563,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1464, col: 5, offset: 49080},
																																expr: &seqExpr{
																																	pos: position{line: 1464, col: 6, offset: 49081},
																																	exprs: []interface{}{
																																		&notExpr{
																																			pos: position{line: 1464, col: 6, offset: 49081},
																																			expr: &actionExpr{
																																				pos: position{line: 1469, col: 5, offset: 49212},
																																				run: (*parser).callonExtraListElement567,
																																				expr: &seqExpr{
																																					pos: position{line: 1469, col: 5, offset: 49212},
																																					exprs: []interface{}{
																																						&labeledExpr{
																																							pos:   position{line: 1469, col: 5, offset: 49212},
																																							label: "separator",
																																							expr: &actionExpr{
																																								pos: position{line: 1469, col: 16, offset: 49223},
																																								run: (*parser).callonExtraListElement570,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 1469, col: 16, offset: 49223},
																																									expr: &litMatcher{
																																										pos:        position{line: 1469, col: 17, offset: 49224},
																																										val:        ":",
																																										ignoreCase: false,
																																										want:       "\":\"",
																																									},
																																								},
																																							},
																																						},
																																						&andCodeExpr{
																																							pos: position{line: 1472, col: 5, offset: 49281},
																																							run: (*parser).callonExtraListElement573,
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 1464, col: 35, offset: 49110},
																																			expr: &choiceExpr{
																																				pos: position{line: 2877, col: 8, offset: 95162},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 2870, col: 12, offset: 95022},
																																						run: (*parser).callonExtraListElement576,
																																						expr: &choiceExpr{
																																							pos: position{line: 2870, col: 13, offset: 95023},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2870, col: 13, offset: 95023},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2870, col: 20, offset: 95030},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2870, col: 29, offset: 95039},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2874, col: 8, offset: 95112},
																																						expr: &anyMatcher{
																																							line: 2874, col: 9, offset: 95113,
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&anyMatcher{
																																			line: 1464, col: 40, offset: 49115,
																																		},
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1469, col: 5, offset: 49212},
																															run: (*parser).callonExtraListElement584,
																															expr: &seqExpr{
																																pos: position{line: 1469, col: 5, offset: 49212},
																																exprs: []interface{}{
																																	&labeledExpr{
																																		pos:   position{line: 1469, col: 5, offset: 49212},
																																		label: "separator",
																																		expr: &actionExpr{
																																			pos: position{line: 1469, col: 16, offset: 49223},
																																			run: (*parser).callonExtraListElement587,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 1469, col: 16, offset: 49223},
																																				expr: &litMatcher{
																																					pos:        position{line: 1469, col: 17, offset: 49224},
																																					val:        ":",
																																					ignoreCase: false,
																																					want:       "\":\"",
																																				},
																																			},
																																		},
																																	},
																																	&andCodeExpr{
																																		pos: position{line: 1472, col: 5, offset: 49281},
																																		run: (*parser).callonExtraListElement590,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1288, col: 5, offset: 43275},
																												expr: &actionExpr{
																													pos: position{line: 494, col: 5, offset: 16252},
																													run: (*parser).callonExtraListElement592,
																													expr: &seqExpr{
																														pos: position{line: 494, col: 5, offset: 16252},
																														exprs: []interface{}{
																															&notExpr{
																																pos: position{line: 494, col: 5, offset: 16252},
																																expr: &charClassMatcher{
																																	pos:        position{line: 2786, col: 13, offset: 92537},
																																	val:        "[0-9\\pL]",
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 495, col: 5, offset: 16282},
																																label: "delimiter",
																																expr: &choiceExpr{
																																	pos: position{line: 496, col: 9, offset: 16302},
																																	alternatives: []interface{}{
																																		&seqExpr{
																																			pos: position{line: 508, col: 26, offset: 16623},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 508, col: 26, offset: 16623},
																																					val:        "////",
																																					ignoreCase: false,
																																					want:       "\"////\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 508, col: 33, offset: 16630},
																																					expr: &actionExpr{
																																						pos: position{line: 2860, col: 10, offset: 94799},
																																						run: (*parser).callonExtraListElement601,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2860, col: 11, offset: 94800},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2877, col: 8, offset: 95162},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2870, col: 12, offset: 95022},
																																							run: (*parser).callonExtraListElement604,
																																							expr: &choiceExpr{
																																								pos: position{line: 2870, col: 13, offset: 95023},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 13, offset: 95023},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 20, offset: 95030},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 29, offset: 95039},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2874, col: 8, offset: 95112},
																																							expr: &anyMatcher{
																																								line: 2874, col: 9, offset: 95113,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 510, col: 26, offset: 16667},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 510, col: 26, offset: 16667},
																																					val:        "====",
																																					ignoreCase: false,
																																					want:       "\"====\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 510, col: 33, offset: 16674},
																																					expr: &actionExpr{
																																						pos: position{line: 2860, col: 10, offset: 94799},
																																						run: (*parser).callonExtraListElement614,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2860, col: 11, offset: 94800},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2877, col: 8, offset: 95162},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2870, col: 12, offset: 95022},
																																							run: (*parser).callonExtraListElement617,
																																							expr: &choiceExpr{
																																								pos: position{line: 2870, col: 13, offset: 95023},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 13, offset: 95023},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 20, offset: 95030},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 29, offset: 95039},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2874, col: 8, offset: 95112},
																																							expr: &anyMatcher{
																																								line: 2874, col: 9, offset: 95113,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 512, col: 25, offset: 16710},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 512, col: 25, offset: 16710},
																																					val:        "```",
																																					ignoreCase: false,
																																					want:       "\"```\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 512, col: 31, offset: 16716},
																																					expr: &actionExpr{
																																						pos: position{line: 2860, col: 10, offset: 94799},
																																						run: (*parser).callonExtraListElement627,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2860, col: 11, offset: 94800},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2877, col: 8, offset: 95162},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2870, col: 12, offset: 95022},
																																							run: (*parser).callonExtraListElement630,
																																							expr: &choiceExpr{
																																								pos: position{line: 2870, col: 13, offset: 95023},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 13, offset: 95023},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 20, offset: 95030},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 29, offset: 95039},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2874, col: 8, offset: 95112},
																																							expr: &anyMatcher{
																																								line: 2874, col: 9, offset: 95113,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 514, col: 26, offset: 16753},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 514, col: 26, offset: 16753},
																																					val:        "----",
																																					ignoreCase: false,
																																					want:       "\"----\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 514, col: 33, offset: 16760},
																																					expr: &actionExpr{
																																						pos: position{line: 2860, col: 10, offset: 94799},
																																						run: (*parser).callonExtraListElement640,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2860, col: 11, offset: 94800},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2877, col: 8, offset: 95162},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2870, col: 12, offset: 95022},
																																							run: (*parser).callonExtraListElement643,
																																							expr: &choiceExpr{
																																								pos: position{line: 2870, col: 13, offset: 95023},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 13, offset: 95023},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 20, offset: 95030},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 29, offset: 95039},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2874, col: 8, offset: 95112},
																																							expr: &anyMatcher{
																																								line: 2874, col: 9, offset: 95113,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 516, col: 26, offset: 16797},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 516, col: 26, offset: 16797},
																																					val:        "....",
																																					ignoreCase: false,
																																					want:       "\"....\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 516, col: 33, offset: 16804},
																																					expr: &actionExpr{
																																						pos: position{line: 2860, col: 10, offset: 94799},
																																						run: (*parser).callonExtraListElement653,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2860, col: 11, offset: 94800},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2877, col: 8, offset: 95162},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2870, col: 12, offset: 95022},
																																							run: (*parser).callonExtraListElement656,
																																							expr: &choiceExpr{
																																								pos: position{line: 2870, col: 13, offset: 95023},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 13, offset: 95023},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 20, offset: 95030},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 29, offset: 95039},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2874, col: 8, offset: 95112},
																																							expr: &anyMatcher{
																																								line: 2874, col: 9, offset: 95113,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 518, col: 30, offset: 16845},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 518, col: 30, offset: 16845},
																																					val:        "++++",
																																					ignoreCase: false,
																																					want:       "\"++++\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 518, col: 37, offset: 16852},
																																					expr: &actionExpr{
																																						pos: position{line: 2860, col: 10, offset: 94799},
																																						run: (*parser).callonExtraListElement666,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2860, col: 11, offset: 94800},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2877, col: 8, offset: 95162},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2870, col: 12, offset: 95022},
																																							run: (*parser).callonExtraListElement669,
																																							expr: &choiceExpr{
																																								pos: position{line: 2870, col: 13, offset: 95023},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 13, offset: 95023},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 20, offset: 95030},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 29, offset: 95039},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2874, col: 8, offset: 95112},
																																							expr: &anyMatcher{
																																								line: 2874, col: 9, offset: 95113,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 520, col: 24, offset: 16887},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 520, col: 24, offset: 16887},
																																					val:        "____",
																																					ignoreCase: false,
																																					want:       "\"____\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 520, col: 31, offset: 16894},
																																					expr: &actionExpr{
																																						pos: position{line: 2860, col: 10, offset: 94799},
																																						run: (*parser).callonExtraListElement679,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2860, col: 11, offset: 94800},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2877, col: 8, offset: 95162},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2870, col: 12, offset: 95022},
																																							run: (*parser).callonExtraListElement682,
																																							expr: &choiceExpr{
																																								pos: position{line: 2870, col: 13, offset: 95023},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 13, offset: 95023},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 20, offset: 95030},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 29, offset: 95039},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2874, col: 8, offset: 95112},
																																							expr: &anyMatcher{
																																								line: 2874, col: 9, offset: 95113,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 522, col: 26, offset: 16931},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 522, col: 26, offset: 16931},
																																					val:        "****",
																																					ignoreCase: false,
																																					want:       "\"****\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 522, col: 33, offset: 16938},
																																					expr: &actionExpr{
																																						pos: position{line: 2860, col: 10, offset: 94799},
																																						run: (*parser).callonExtraListElement692,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2860, col: 11, offset: 94800},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2877, col: 8, offset: 95162},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2870, col: 12, offset: 95022},
																																							run: (*parser).callonExtraListElement695,
																																							expr: &choiceExpr{
																																								pos: position{line: 2870, col: 13, offset: 95023},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 13, offset: 95023},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 20, offset: 95030},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 29, offset: 95039},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2874, col: 8, offset: 95112},
																																							expr: &anyMatcher{
																																								line: 2874, col: 9, offset: 95113,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 1289, col: 5, offset: 43295},
																												label: "content",
																												expr: &actionExpr{
																													pos: position{line: 1289, col: 14, offset: 43304},
																													run: (*parser).callonExtraListElement703,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1289, col: 14, offset: 43304},
																														expr: &charClassMatcher{
																															pos:        position{line: 1289, col: 14, offset: 43304},
																															val:        "[^\\r\\n]",
																															chars:      []rune{'\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2877, col: 8, offset: 95162},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2870, col: 12, offset: 95022},
																														run: (*parser).callonExtraListElement707,
																														expr: &choiceExpr{
																															pos: position{line: 2870, col: 13, offset: 95023},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2870, col: 13, offset: 95023},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2870, col: 20, offset: 95030},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2870, col: 29, offset: 95039},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2874, col: 8, offset: 95112},
																														expr: &anyMatcher{
																															line: 2874, col: 9, offset: 95113,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1492, col: 9, offset: 49879},
																				run: (*parser).callonExtraListElement714,
																				expr: &seqExpr{
																					pos: position{line: 1492, col: 9, offset: 49879},
																					exprs: []interface{}{
																						&actionExpr{
																							pos: position{line: 2865, col: 11, offset: 94908},
																							run: (*parser).callonExtraListElement716,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2865, col: 11, offset: 94908},
																								expr: &charClassMatcher{
																									pos:        position{line: 2865, col: 12, offset: 94909},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1493, col: 9, offset: 49931},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 1493, col: 18, offset: 49940},
																								run: (*parser).callonExtraListElement720,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1493, col: 18, offset: 49940},
																									expr: &charClassMatcher{
																										pos:        position{line: 1493, col: 18, offset: 49940},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2877, col: 8, offset: 95162},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2870, col: 12, offset: 95022},
																									run: (*parser).callonExtraListElement724,
																									expr: &choiceExpr{
																										pos: position{line: 2870, col: 13, offset: 95023},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2870, col: 13, offset: 95023},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2870, col: 20, offset: 95030},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2870, col: 29, offset: 95039},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2874, col: 8, offset: 95112},
																									expr: &anyMatcher{
																										line: 2874, col: 9, offset: 95113,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1269, col: 13, offset: 42675},
										run: (*parser).callonExtraListElement731,
										expr: &seqExpr{
											pos: position{line: 1269, col: 13, offset: 42675},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1269, col: 13, offset: 42675},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1269, col: 24, offset: 42686},
														expr: &ruleRefExpr{
															pos:  position{line: 1269, col: 25, offset: 42687},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1270, col: 13, offset: 42718},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1456, col: 5, offset: 48821},
														run: (*parser).callonExtraListElement737,
														expr: &seqExpr{
															pos: position{line: 1456, col: 5, offset: 48821},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1456, col: 5, offset: 48821},
																	label: "term",
																	expr: &actionExpr{
																		pos: position{line: 1464, col: 5, offset: 49080},
																		run: (*parser).callonExtraListElement740,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1464, col: 5, offset: 49080},
																			expr: &seqExpr{
																				pos: position{line: 1464, col: 6, offset: 49081},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1464, col: 6, offset: 49081},
																						expr: &actionExpr{
																							pos: position{line: 1469, col: 5, offset: 49212},
																							run: (*parser).callonExtraListElement744,
																							expr: &seqExpr{
																								pos: position{line: 1469, col: 5, offset: 49212},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 1469, col: 5, offset: 49212},
																										label: "separator",
																										expr: &actionExpr{
																											pos: position{line: 1469, col: 16, offset: 49223},
																											run: (*parser).callonExtraListElement747,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1469, col: 16, offset: 49223},
																												expr: &litMatcher{
																													pos:        position{line: 1469, col: 17, offset: 49224},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 1472, col: 5, offset: 49281},
																										run: (*parser).callonExtraListElement750,
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1464, col: 35, offset: 49110},
																						expr: &choiceExpr{
																							pos: position{line: 2877, col: 8, offset: 95162},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2870, col: 12, offset: 95022},
																									run: (*parser).callonExtraListElement753,
																									expr: &choiceExpr{
																										pos: position{line: 2870, col: 13, offset: 95023},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2870, col: 13, offset: 95023},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2870, col: 20, offset: 95030},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2870, col: 29, offset: 95039},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2874, col: 8, offset: 95112},
																									expr: &anyMatcher{
																										line: 2874, col: 9, offset: 95113,
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1464, col: 40, offset: 49115,
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1457, col: 5, offset: 48856},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1469, col: 5, offset: 49212},
																		run: (*parser).callonExtraListElement762,
																		expr: &seqExpr{
																			pos: position{line: 1469, col: 5, offset: 49212},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1469, col: 5, offset: 49212},
																					label: "separator",
																					expr: &actionExpr{
																						pos: position{line: 1469, col: 16, offset: 49223},
																						run: (*parser).callonExtraListElement765,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1469, col: 16, offset: 49223},
																							expr: &litMatcher{
																								pos:        position{line: 1469, col: 17, offset: 49224},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1472, col: 5, offset: 49281},
																					run: (*parser).callonExtraListElement768,
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1458, col: 5, offset: 48901},
																	label: "description",
																	expr: &choiceExpr{
																		pos: position{line: 1480, col: 5, offset: 49531},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1482, col: 9, offset: 49596},
																				run: (*parser).callonExtraListElement771,
																				expr: &seqExpr{
																					pos: position{line: 1482, col: 9, offset: 49596},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 1482, col: 9, offset: 49596},
																							expr: &actionExpr{
																								pos: position{line: 2860, col: 10, offset: 94799},
																								run: (*parser).callonExtraListElement774,
																								expr: &charClassMatcher{
																									pos:        position{line: 2860, col: 11, offset: 94800},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2877, col: 8, offset: 95162},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2870, col: 12, offset: 95022},
																									run: (*parser).callonExtraListElement777,
																									expr: &choiceExpr{
																										pos: position{line: 2870, col: 13, offset: 95023},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2870, col: 13, offset: 95023},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2870, col: 20, offset: 95030},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2870, col: 29, offset: 95039},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2874, col: 8, offset: 95112},
																									expr: &anyMatcher{
																										line: 2874, col: 9, offset: 95113,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1483, col: 9, offset: 49616},
																							expr: &actionExpr{
																								pos: position{line: 449, col: 14, offset: 14731},
																								run: (*parser).callonExtraListElement785,
																								expr: &seqExpr{
																									pos: position{line: 449, col: 14, offset: 14731},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 449, col: 14, offset: 14731},
																											expr: &notExpr{
																												pos: position{line: 2874, col: 8, offset: 95112},
																												expr: &anyMatcher{
																													line: 2874, col: 9, offset: 95113,
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 449, col: 19, offset: 14736},
																											expr: &actionExpr{
																												pos: position{line: 2860, col: 10, offset: 94799},
																												run: (*parser).callonExtraListElement791,
																												expr: &charClassMatcher{
																													pos:        position{line: 2860, col: 11, offset: 94800},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2877, col: 8, offset: 95162},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2870, col: 12, offset: 95022},
																													run: (*parser).callonExtraListElement794,
																													expr: &choiceExpr{
																														pos: position{line: 2870, col: 13, offset: 95023},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2870, col: 13, offset: 95023},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2870, col: 20, offset: 95030},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2870, col: 29, offset: 95039},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2874, col: 8, offset: 95112},
																													expr: &anyMatcher{
																														line: 2874, col: 9, offset: 95113,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1484, col: 9, offset: 49636},
																							label: "content",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1484, col: 17, offset: 49644},
																								expr: &actionExpr{
																									pos: position{line: 1282, col: 5, offset: 43075},
																									run: (*parser).callonExtraListElement803,
																									expr: &seqExpr{
																										pos: position{line: 1282, col: 5, offset: 43075},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 1282, col: 5, offset: 43075},
																												expr: &actionExpr{
																													pos: position{line: 449, col: 14, offset: 14731},
																													run: (*parser).callonExtraListElement806,
																													expr: &seqExpr{
																														pos: position{line: 449, col: 14, offset: 14731},
																														exprs: []interface{}{
																															&notExpr{
																																pos: position{line: 449, col: 14, offset: 14731},
																																expr: &notExpr{
																																	pos: position{line: 2874, col: 8, offset: 95112},
																																	expr: &anyMatcher{
																																		line: 2874, col: 9, offset: 95113,
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 449, col: 19, offset: 14736},
																																expr: &actionExpr{
																																	pos: position{line: 2860, col: 10, offset: 94799},
																																	run: (*parser).callonExtraListElement812,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2860, col: 11, offset: 94800},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 2877, col: 8, offset: 95162},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 2870, col: 12, offset: 95022},
																																		run: (*parser).callonExtraListElement815,
																																		expr: &choiceExpr{
																																			pos: position{line: 2870, col: 13, offset: 95023},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 2870, col: 13, offset: 95023},
																																					val:        "\n",
																																					ignoreCase: false,
																																					want:       "\"\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2870, col: 20, offset: 95030},
																																					val:        "\r\n",
																																					ignoreCase: false,
																																					want:       "\"\\r\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2870, col: 29, offset: 95039},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 2874, col: 8, offset: 95112},
																																		expr: &anyMatcher{
																																			line: 2874, col: 9, offset: 95113,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1283, col: 5, offset: 43090},
																												expr: &seqExpr{
																													pos: position{line: 1315, col: 34, offset: 44000},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 1315, col: 34, offset: 44000},
																															val:        "+",
																															ignoreCase: false,
																															want:       "\"+\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 1315, col: 38, offset: 44004},
																															expr: &actionExpr{
																																pos: position{line: 2860, col: 10, offset: 94799},
																																run: (*parser).callonExtraListElement826,
																																expr: &charClassMatcher{
																																	pos:        position{line: 2860, col: 11, offset: 94800},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 2870, col: 12, offset: 95022},
																															run: (*parser).callonExtraListElement828,
																															expr: &choiceExpr{
																																pos: position{line: 2870, col: 13, offset: 95023},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2870, col: 13, offset: 95023},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2870, col: 20, offset: 95030},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2870, col: 29, offset: 95039},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1284, col: 5, offset: 43125},
																												expr: &actionExpr{
																													pos: position{line: 1364, col: 5, offset: 45503},
																													run: (*parser).callonExtraListElement834,
																													expr: &seqExpr{
																														pos: position{line: 1364, col: 5, offset: 45503},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 1364, col: 5, offset: 45503},
																																expr: &actionExpr{
																																	pos: position{line: 2860, col: 10, offset: 94799},
																																	run: (*parser).callonExtraListElement837,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2860, col: 11, offset: 94800},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 1364, col: 12, offset: 45510},
																																label: "prefix",
																																expr: &choiceExpr{
																																	pos: position{line: 1366, col: 9, offset: 45573},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 1366, col: 9, offset: 45573},
																																			run: (*parser).callonExtraListElement841,
																																			expr: &seqExpr{
																																				pos: position{line: 1366, col: 9, offset: 45573},
																																				exprs: []interface{}{
																																					&labeledExpr{
																																						pos:   position{line: 1366, col: 9, offset: 45573},
																																						label: "depth",
																																						expr: &actionExpr{
																																							pos: position{line: 1366, col: 16, offset: 45580},
																																							run: (*parser).callonExtraListElement844,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 1366, col: 16, offset: 45580},
																																								expr: &litMatcher{
																																									pos:        position{line: 1366, col: 17, offset: 45581},
																																									val:        ".",
																																									ignoreCase: false,
																																									want:       "\".\"",
																																								},
																																							},
																																						},
																																					},
																																					&andCodeExpr{
																																						pos: position{line: 1370, col: 9, offset: 45681},
																																						run: (*parser).callonExtraListElement847,
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1389, col: 11, offset: 46398},
																																			run: (*parser).callonExtraListElement848,
																																			expr: &seqExpr{
																																				pos: position{line: 1389, col: 11, offset: 46398},
																																				exprs: []interface{}{
																																					&oneOrMoreExpr{
																																						pos: position{line: 1389, col: 11, offset: 46398},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 1389, col: 12, offset: 46399},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1389, col: 20, offset: 46407},
																																						val:        ".",
																																						ignoreCase: false,
																																						want:       "\".\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1391, col: 13, offset: 46524},
																																			run: (*parser).callonExtraListElement853,
																																			expr: &seqExpr{
																																				pos: position{line: 1391, col: 13, offset: 46524},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 1391, col: 14, offset: 46525},
																																						val:        "[a-z]",
																																						ranges:     []rune{'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1391, col: 21, offset: 46532},
																																						val:        ".",
																																						ignoreCase: false,
																																						want:       "\".\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1393, col: 13, offset: 46652},
																																			run: (*parser).callonExtraListElement857,
																																			expr: &seqExpr{
																																				pos: position{line: 1393, col: 13, offset: 46652},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 1393, col: 14, offset: 46653},
																																						val:        "[A-Z]",
																																						ranges:     []rune{'A', 'Z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1393, col: 21, offset: 46660},
																																						val:        ".",
																																						ignoreCase: false,
																																						want:       "\".\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1395, col: 13, offset: 46780},
																																			run: (*parser).callonExtraListElement861,
																																			expr: &seqExpr{
																																				pos: position{line: 1395, col: 13, offset: 46780},
																																				exprs: []interface{}{
																																					&oneOrMoreExpr{
																																						pos: position{line: 1395, col: 13, offset: 46780},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 1395, col: 14, offset: 46781},
																																							val:        "[ivxdlcm]",
																																							chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1395, col: 26, offset: 46793},
																																						val:        ")",
																																						ignoreCase: false,
																																						want:       "\")\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1397, col: 13, offset: 46913},
																																			run: (*parser).callonExtraListElement866,
																																			expr: &seqExpr{
																																				pos: position{line: 1397, col: 13, offset: 46913},
																																				exprs: []interface{}{
																																					&oneOrMoreExpr{
																																						pos: position{line: 1397, col: 13, offset: 46913},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 1397, col: 14, offset: 46914},
																																							val:        "[IVXDLCM]",
																																							chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1397, col: 26, offset: 46926},
																																						val:        ")",
																																						ignoreCase: false,
																																						want:       "\")\"",
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 2865, col: 11, offset: 94908},
																																run: (*parser).callonExtraListElement871,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 2865, col: 11, offset: 94908},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2865, col: 12, offset: 94909},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1285, col: 5, offset: 43155},
																												expr: &actionExpr{
																													pos: position{line: 1414, col: 5, offset: 47465},
																													run: (*parser).callonExtraListElement875,
																													expr: &seqExpr{
																														pos: position{line: 1414, col: 5, offset: 47465},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 1414, col: 5, offset: 47465},
																																expr: &actionExpr{
																																	pos: position{line: 2860, col: 10, offset: 94799},
																																	run: (*parser).callonExtraListElement878,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2860, col: 11, offset: 94800},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 1414, col: 12, offset: 47472},
																																label: "prefix",
																																expr: &choiceExpr{
																																	pos: position{line: 1414, col: 20, offset: 47480},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 1416, col: 9, offset: 47537},
																																			run: (*parser).callonExtraListElement882,
																																			expr: &seqExpr{
																																				pos: position{line: 1416, col: 9, offset: 47537},
																																				exprs: []interface{}{
																																					&labeledExpr{
																																						pos:   position{line: 1416, col: 9, offset: 47537},
																																						label: "depth",
																																						expr: &actionExpr{
																																							pos: position{line: 1416, col: 16, offset: 47544},
																																							run: (*parser).callonExtraListElement885,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 1416, col: 16, offset: 47544},
																																								expr: &litMatcher{
																																									pos:        position{line: 1416, col: 17, offset: 47545},
																																									val:        "*",
																																									ignoreCase: false,
																																									want:       "\"*\"",
																																								},
																																							},
																																						},
																																					},
																																					&andCodeExpr{
																																						pos: position{line: 1420, col: 9, offset: 47645},
																																						run: (*parser).callonExtraListElement888,
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 1437, col: 14, offset: 48352},
																																			label: "depth",
																																			expr: &actionExpr{
																																				pos: position{line: 1437, col: 21, offset: 48359},
																																				run: (*parser).callonExtraListElement890,
																																				expr: &litMatcher{
																																					pos:        position{line: 1437, col: 22, offset: 48360},
																																					val:        "-",
																																					ignoreCase: false,
																																					want:       "\"-\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 2865, col: 11, offset: 94908},
																																run: (*parser).callonExtraListElement892,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 2865, col: 11, offset: 94908},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2865, col: 12, offset: 94909},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1286, col: 5, offset: 43187},
																												expr: &actionExpr{
																													pos: position{line: 1520, col: 5, offset: 50678},
																													run: (*parser).callonExtraListElement896,
																													expr: &seqExpr{
																														pos: position{line: 1520, col: 5, offset: 50678},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 1520, col: 5, offset: 50678},
																																val:        "<",
																																ignoreCase: false,
																																want:       "\"<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 1520, col: 9, offset: 50682},
																																label: "ref",
																																expr: &actionExpr{
																																	pos: position{line: 1520, col: 14, offset: 50687},
																																	run: (*parser).callonExtraListElement900,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 1520, col: 14, offset: 50687},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1520, col: 14, offset: 50687},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 1520, col: 62, offset: 50735},
																																val:        ">",
																																ignoreCase: false,
																																want:       "\">\"",
																															},
																															&actionExpr{
																																pos: position{line: 2865, col: 11, offset: 94908},
																																run: (*parser).callonExtraListElement904,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 2865, col: 11, offset: 94908},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2865, col: 12, offset: 94909},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1287, col: 5, offset: 43217},
																												expr: &seqExpr{
																													pos: position{line: 1287, col: 7, offset: 43219},
																													exprs: []interface{}{
																														&actionExpr{
																															pos: position{line: 1464, col: 5, offset: 49080},
																															run: (*parser).callonExtraListElement909,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1464, col: 5, offset: 49080},
																																expr: &seqExpr{
																																	pos: position{line: 1464, col: 6, offset: 49081},
																																	exprs: []interface{}{
																																		&notExpr{
																																			pos: position{line: 1464, col: 6, offset: 49081},
																																			expr: &actionExpr{
																																				pos: position{line: 1469, col: 5, offset: 49212},
																																				run: (*parser).callonExtraListElement913,
																																				expr: &seqExpr{
																																					pos: position{line: 1469, col: 5, offset: 49212},
																																					exprs: []interface{}{
																																						&labeledExpr{
																																							pos:   position{line: 1469, col: 5, offset: 49212},
																																							label: "separator",
																																							expr: &actionExpr{
																																								pos: position{line: 1469, col: 16, offset: 49223},
																																								run: (*parser).callonExtraListElement916,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 1469, col: 16, offset: 49223},
																																									expr: &litMatcher{
																																										pos:        position{line: 1469, col: 17, offset: 49224},
																																										val:        ":",
																																										ignoreCase: false,
																																										want:       "\":\"",
																																									},
																																								},
																																							},
																																						},
																																						&andCodeExpr{
																																							pos: position{line: 1472, col: 5, offset: 49281},
																																							run: (*parser).callonExtraListElement919,
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 1464, col: 35, offset: 49110},
																																			expr: &choiceExpr{
																																				pos: position{line: 2877, col: 8, offset: 95162},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 2870, col: 12, offset: 95022},
																																						run: (*parser).callonExtraListElement922,
																																						expr: &choiceExpr{
																																							pos: position{line: 2870, col: 13, offset: 95023},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2870, col: 13, offset: 95023},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2870, col: 20, offset: 95030},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2870, col: 29, offset: 95039},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2874, col: 8, offset: 95112},
																																						expr: &anyMatcher{
																																							line: 2874, col: 9, offset: 95113,
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&anyMatcher{
																																			line: 1464, col: 40, offset: 49115,
																																		},
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1469, col: 5, offset: 49212},
																															run: (*parser).callonExtraListElement930,
																															expr: &seqExpr{
																																pos: position{line: 1469, col: 5, offset: 49212},
																																exprs: []interface{}{
																																	&labeledExpr{
																																		pos:   position{line: 1469, col: 5, offset: 49212},
																																		label: "separator",
																																		expr: &actionExpr{
																																			pos: position{line: 1469, col: 16, offset: 49223},
																																			run: (*parser).callonExtraListElement933,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 1469, col: 16, offset: 49223},
																																				expr: &litMatcher{
																																					pos:        position{line: 1469, col: 17, offset: 49224},
																																					val:        ":",
																																					ignoreCase: false,
																																					want:       "\":\"",
																																				},
																																			},
																																		},
																																	},
																																	&andCodeExpr{
																																		pos: position{line: 1472, col: 5, offset: 49281},
																																		run: (*parser).callonExtraListElement936,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1288, col: 5, offset: 43275},
																												expr: &actionExpr{
																													pos: position{line: 494, col: 5, offset: 16252},
																													run: (*parser).callonExtraListElement938,
																													expr: &seqExpr{
																														pos: position{line: 494, col: 5, offset: 16252},
																														exprs: []interface{}{
																															&notExpr{
																																pos: position{line: 494, col: 5, offset: 16252},
																																expr: &charClassMatcher{
																																	pos:        position{line: 2786, col: 13, offset: 92537},
																																	val:        "[0-9\\pL]",
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 495, col: 5, offset: 16282},
																																label: "delimiter",
																																expr: &choiceExpr{
																																	pos: position{line: 496, col: 9, offset: 16302},
																																	alternatives: []interface{}{
																																		&seqExpr{
																																			pos: position{line: 508, col: 26, offset: 16623},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 508, col: 26, offset: 16623},
																																					val:        "////",
																																					ignoreCase: false,
																																					want:       "\"////\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 508, col: 33, offset: 16630},
																																					expr: &actionExpr{
																																						pos: position{line: 2860, col: 10, offset: 94799},
																																						run: (*parser).callonExtraListElement947,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2860, col: 11, offset: 94800},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2877, col: 8, offset: 95162},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2870, col: 12, offset: 95022},
																																							run: (*parser).callonExtraListElement950,
																																							expr: &choiceExpr{
																																								pos: position{line: 2870, col: 13, offset: 95023},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 13, offset: 95023},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 20, offset: 95030},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 29, offset: 95039},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2874, col: 8, offset: 95112},
																																							expr: &anyMatcher{
																																								line: 2874, col: 9, offset: 95113,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 510, col: 26, offset: 16667},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 510, col: 26, offset: 16667},
																																					val:        "====",
																																					ignoreCase: false,
																																					want:       "\"====\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 510, col: 33, offset: 16674},
																																					expr: &actionExpr{
																																						pos: position{line: 2860, col: 10, offset: 94799},
																																						run: (*parser).callonExtraListElement960,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2860, col: 11, offset: 94800},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2877, col: 8, offset: 95162},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2870, col: 12, offset: 95022},
																																							run: (*parser).callonExtraListElement963,
																																							expr: &choiceExpr{
																																								pos: position{line: 2870, col: 13, offset: 95023},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 13, offset: 95023},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 20, offset: 95030},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 29, offset: 95039},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2874, col: 8, offset: 95112},
																																							expr: &anyMatcher{
																																								line: 2874, col: 9, offset: 95113,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 512, col: 25, offset: 16710},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 512, col: 25, offset: 16710},
																																					val:        "```",
																																					ignoreCase: false,
																																					want:       "\"```\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 512, col: 31, offset: 16716},
																																					expr: &actionExpr{
																																						pos: position{line: 2860, col: 10, offset: 94799},
																																						run: (*parser).callonExtraListElement973,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2860, col: 11, offset: 94800},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2877, col: 8, offset: 95162},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2870, col: 12, offset: 95022},
																																							run: (*parser).callonExtraListElement976,
																																							expr: &choiceExpr{
																																								pos: position{line: 2870, col: 13, offset: 95023},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 13, offset: 95023},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 20, offset: 95030},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 29, offset: 95039},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2874, col: 8, offset: 95112},
																																							expr: &anyMatcher{
																																								line: 2874, col: 9, offset: 95113,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 514, col: 26, offset: 16753},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 514, col: 26, offset: 16753},
																																					val:        "----",
																																					ignoreCase: false,
																																					want:       "\"----\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 514, col: 33, offset: 16760},
																																					expr: &actionExpr{
																																						pos: position{line: 2860, col: 10, offset: 94799},
																																						run: (*parser).callonExtraListElement986,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2860, col: 11, offset: 94800},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2877, col: 8, offset: 95162},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2870, col: 12, offset: 95022},
																																							run: (*parser).callonExtraListElement989,
																																							expr: &choiceExpr{
																																								pos: position{line: 2870, col: 13, offset: 95023},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 13, offset: 95023},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 20, offset: 95030},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 29, offset: 95039},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2874, col: 8, offset: 95112},
																																							expr: &anyMatcher{
																																								line: 2874, col: 9, offset: 95113,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 516, col: 26, offset: 16797},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 516, col: 26, offset: 16797},
																																					val:        "....",
																																					ignoreCase: false,
																																					want:       "\"....\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 516, col: 33, offset: 16804},
																																					expr: &actionExpr{
																																						pos: position{line: 2860, col: 10, offset: 94799},
																																						run: (*parser).callonExtraListElement999,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2860, col: 11, offset: 94800},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2877, col: 8, offset: 95162},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2870, col: 12, offset: 95022},
																																							run: (*parser).callonExtraListElement1002,
																																							expr: &choiceExpr{
																																								pos: position{line: 2870, col: 13, offset: 95023},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 13, offset: 95023},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 20, offset: 95030},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 29, offset: 95039},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2874, col: 8, offset: 95112},
																																							expr: &anyMatcher{
																																								line: 2874, col: 9, offset: 95113,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 518, col: 30, offset: 16845},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 518, col: 30, offset: 16845},
																																					val:        "++++",
																																					ignoreCase: false,
																																					want:       "\"++++\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 518, col: 37, offset: 16852},
																																					expr: &actionExpr{
																																						pos: position{line: 2860, col: 10, offset: 94799},
																																						run: (*parser).callonExtraListElement1012,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2860, col: 11, offset: 94800},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2877, col: 8, offset: 95162},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2870, col: 12, offset: 95022},
																																							run: (*parser).callonExtraListElement1015,
																																							expr: &choiceExpr{
																																								pos: position{line: 2870, col: 13, offset: 95023},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 13, offset: 95023},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 20, offset: 95030},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 29, offset: 95039},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2874, col: 8, offset: 95112},
																																							expr: &anyMatcher{
																																								line: 2874, col: 9, offset: 95113,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 520, col: 24, offset: 16887},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 520, col: 24, offset: 16887},
																																					val:        "____",
																																					ignoreCase: false,
																																					want:       "\"____\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 520, col: 31, offset: 16894},
																																					expr: &actionExpr{
																																						pos: position{line: 2860, col: 10, offset: 94799},
																																						run: (*parser).callonExtraListElement1025,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2860, col: 11, offset: 94800},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2877, col: 8, offset: 95162},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2870, col: 12, offset: 95022},
																																							run: (*parser).callonExtraListElement1028,
																																							expr: &choiceExpr{
																																								pos: position{line: 2870, col: 13, offset: 95023},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 13, offset: 95023},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 20, offset: 95030},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 29, offset: 95039},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2874, col: 8, offset: 95112},
																																							expr: &anyMatcher{
																																								line: 2874, col: 9, offset: 95113,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 522, col: 26, offset: 16931},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 522, col: 26, offset: 16931},
																																					val:        "****",
																																					ignoreCase: false,
																																					want:       "\"****\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 522, col: 33, offset: 16938},
																																					expr: &actionExpr{
																																						pos: position{line: 2860, col: 10, offset: 94799},
																																						run: (*parser).callonExtraListElement1038,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2860, col: 11, offset: 94800},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2877, col: 8, offset: 95162},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2870, col: 12, offset: 95022},
																																							run: (*parser).callonExtraListElement1041,
																																							expr: &choiceExpr{
																																								pos: position{line: 2870, col: 13, offset: 95023},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 13, offset: 95023},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 20, offset: 95030},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2870, col: 29, offset: 95039},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2874, col: 8, offset: 95112},
																																							expr: &anyMatcher{
																																								line: 2874, col: 9, offset: 95113,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 1289, col: 5, offset: 43295},
																												label: "content",
																												expr: &actionExpr{
																													pos: position{line: 1289, col: 14, offset: 43304},
																													run: (*parser).callonExtraListElement1049,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1289, col: 14, offset: 43304},
																														expr: &charClassMatcher{
																															pos:        position{line: 1289, col: 14, offset: 43304},
																															val:        "[^\\r\\n]",
																															chars:      []rune{'\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2877, col: 8, offset: 95162},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2870, col: 12, offset: 95022},
																														run: (*parser).callonExtraListElement1053,
																														expr: &choiceExpr{
																															pos: position{line: 2870, col: 13, offset: 95023},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2870, col: 13, offset: 95023},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2870, col: 20, offset: 95030},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2870, col: 29, offset: 95039},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2874, col: 8, offset: 95112},
																														expr: &anyMatcher{
																															line: 2874, col: 9, offset: 95113,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1492, col: 9, offset: 49879},
																				run: (*parser).callonExtraListElement1060,
																				expr: &seqExpr{
																					pos: position{line: 1492, col: 9, offset: 49879},
																					exprs: []interface{}{
																						&actionExpr{
																							pos: position{line: 2865, col: 11, offset: 94908},
																							run: (*parser).callonExtraListElement1062,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2865, col: 11, offset: 94908},
																								expr: &charClassMatcher{
																									pos:        position{line: 2865, col: 12, offset: 94909},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1493, col: 9, offset: 49931},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 1493, col: 18, offset: 49940},
																								run: (*parser).callonExtraListElement1066,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1493, col: 18, offset: 49940},
																									expr: &charClassMatcher{
																										pos:        position{line: 1493, col: 18, offset: 49940},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2877, col: 8, offset: 95162},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2870, col: 12, offset: 95022},
																									run: (*parser).callonExtraListElement1070,
																									expr: &choiceExpr{
																										pos: position{line: 2870, col: 13, offset: 95023},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2870, col: 13, offset: 95023},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2870, col: 20, offset: 95030},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2870, col: 29, offset: 95039},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2874, col: 8, offset: 95112},
																									expr: &anyMatcher{
																										line: 2874, col: 9, offset: 95113,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2593, col: 22, offset: 86639},
										run: (*parser).callonExtraListElement1077,
										expr: &seqExpr{
											pos: position{line: 2593, col: 22, offset: 86639},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2598, col: 31, offset: 86860},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2598, col: 36, offset: 86865},
													expr: &litMatcher{
														pos:        position{line: 2598, col: 37, offset: 86866},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2593, col: 49, offset: 86666},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2600, col: 29, offset: 86901},
														run: (*parser).callonExtraListElement1083,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2600, col: 29, offset: 86901},
															expr: &charClassMatcher{
																pos:        position{line: 2600, col: 29, offset: 86901},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonExtraListElement1087,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1274, col: 13, offset: 42874},
										run: (*parser).callonExtraListElement1094,
										expr: &labeledExpr{
											pos:   position{line: 1274, col: 13, offset: 42874},
											label: "element",
											expr: &actionExpr{
												pos: position{line: 1282, col: 5, offset: 43075},
												run: (*parser).callonExtraListElement1096,
												expr: &seqExpr{
													pos: position{line: 1282, col: 5, offset: 43075},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 1282, col: 5, offset: 43075},
															expr: &actionExpr{
																pos: position{line: 449, col: 14, offset: 14731},
																run: (*parser).callonExtraListElement1099,
																expr: &seqExpr{
																	pos: position{line: 449, col: 14, offset: 14731},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 449, col: 14, offset: 14731},
																			expr: &notExpr{
																				pos: position{line: 2874, col: 8, offset: 95112},
																				expr: &anyMatcher{
																					line: 2874, col: 9, offset: 95113,
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 449, col: 19, offset: 14736},
																			expr: &actionExpr{
																				pos: position{line: 2860, col: 10, offset: 94799},
																				run: (*parser).callonExtraListElement1105,
																				expr: &charClassMatcher{
																					pos:        position{line: 2860, col: 11, offset: 94800},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2877, col: 8, offset: 95162},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2870, col: 12, offset: 95022},
																					run: (*parser).callonExtraListElement1108,
																					expr: &choiceExpr{
																						pos: position{line: 2870, col: 13, offset: 95023},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2870, col: 13, offset: 95023},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 20, offset: 95030},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 29, offset: 95039},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2874, col: 8, offset: 95112},
																					expr: &anyMatcher{
																						line: 2874, col: 9, offset: 95113,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1283, col: 5, offset: 43090},
															expr: &seqExpr{
																pos: position{line: 1315, col: 34, offset: 44000},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1315, col: 34, offset: 44000},
																		val:        "+",
																		ignoreCase: false,
																		want:       "\"+\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1315, col: 38, offset: 44004},
																		expr: &actionExpr{
																			pos: position{line: 2860, col: 10, offset: 94799},
																			run: (*parser).callonExtraListElement1119,
																			expr: &charClassMatcher{
																				pos:        position{line: 2860, col: 11, offset: 94800},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2870, col: 12, offset: 95022},
																		run: (*parser).callonExtraListElement1121,
																		expr: &choiceExpr{
																			pos: position{line: 2870, col: 13, offset: 95023},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2870, col: 13, offset: 95023},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2870, col: 20, offset: 95030},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2870, col: 29, offset: 95039},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1284, col: 5, offset: 43125},
															expr: &actionExpr{
																pos: position{line: 1364, col: 5, offset: 45503},
																run: (*parser).callonExtraListElement1127,
																expr: &seqExpr{
																	pos: position{line: 1364, col: 5, offset: 45503},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 1364, col: 5, offset: 45503},
																			expr: &actionExpr{
																				pos: position{line: 2860, col: 10, offset: 94799},
																				run: (*parser).callonExtraListElement1130,
																				expr: &charClassMatcher{
																					pos:        position{line: 2860, col: 11, offset: 94800},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1364, col: 12, offset: 45510},
																			label: "prefix",
																			expr: &choiceExpr{
																				pos: position{line: 1366, col: 9, offset: 45573},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 1366, col: 9, offset: 45573},
																						run: (*parser).callonExtraListElement1134,
																						expr: &seqExpr{
																							pos: position{line: 1366, col: 9, offset: 45573},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 1366, col: 9, offset: 45573},
																									label: "depth",
																									expr: &actionExpr{
																										pos: position{line: 1366, col: 16, offset: 45580},
																										run: (*parser).callonExtraListElement1137,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1366, col: 16, offset: 45580},
																											expr: &litMatcher{
																												pos:        position{line: 1366, col: 17, offset: 45581},
																												val:        ".",
																												ignoreCase: false,
																												want:       "\".\"",
																											},
																										},
																									},
																								},
																								&andCodeExpr{
																									pos: position{line: 1370, col: 9, offset: 45681},
																									run: (*parser).callonExtraListElement1140,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1389, col: 11, offset: 46398},
																						run: (*parser).callonExtraListElement1141,
																						expr: &seqExpr{
																							pos: position{line: 1389, col: 11, offset: 46398},
																							exprs: []interface{}{
																								&oneOrMoreExpr{
																									pos: position{line: 1389, col: 11, offset: 46398},
																									expr: &charClassMatcher{
																										pos:        position{line: 1389, col: 12, offset: 46399},
																										val:        "[0-9]",
																										ranges:     []rune{'0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1389, col: 20, offset: 46407},
																									val:        ".",
																									ignoreCase: false,
																									want:       "\".\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1391, col: 13, offset: 46524},
																						run: (*parser).callonExtraListElement1146,
																						expr: &seqExpr{
																							pos: position{line: 1391, col: 13, offset: 46524},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 1391, col: 14, offset: 46525},
																									val:        "[a-z]",
																									ranges:     []rune{'a', 'z'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&litMatcher{
																									pos:        position{line: 1391, col: 21, offset: 46532},
																									val:        ".",
																									ignoreCase: false,
																									want:       "\".\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1393, col: 13, offset: 46652},
																						run: (*parser).callonExtraListElement1150,
																						expr: &seqExpr{
																							pos: position{line: 1393, col: 13, offset: 46652},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 1393, col: 14, offset: 46653},
																									val:        "[A-Z]",
																									ranges:     []rune{'A', 'Z'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&litMatcher{
																									pos:        position{line: 1393, col: 21, offset: 46660},
																									val:        ".",
																									ignoreCase: false,
																									want:       "\".\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1395, col: 13, offset: 46780},
																						run: (*parser).callonExtraListElement1154,
																						expr: &seqExpr{
																							pos: position{line: 1395, col: 13, offset: 46780},
																							exprs: []interface{}{
																								&oneOrMoreExpr{
																									pos: position{line: 1395, col: 13, offset: 46780},
																									expr: &charClassMatcher{
																										pos:        position{line: 1395, col: 14, offset: 46781},
																										val:        "[ivxdlcm]",
																										chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1395, col: 26, offset: 46793},
																									val:        ")",
																									ignoreCase: false,
																									want:       "\")\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1397, col: 13, offset: 46913},
																						run: (*parser).callonExtraListElement1159,
																						expr: &seqExpr{
																							pos: position{line: 1397, col: 13, offset: 46913},
																							exprs: []interface{}{
																								&oneOrMoreExpr{
																									pos: position{line: 1397, col: 13, offset: 46913},
																									expr: &charClassMatcher{
																										pos:        position{line: 1397, col: 14, offset: 46914},
																										val:        "[IVXDLCM]",
																										chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1397, col: 26, offset: 46926},
																									val:        ")",
																									ignoreCase: false,
																									want:       "\")\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2865, col: 11, offset: 94908},
																			run: (*parser).callonExtraListElement1164,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2865, col: 11, offset: 94908},
																				expr: &charClassMatcher{
																					pos:        position{line: 2865, col: 12, offset: 94909},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1285, col: 5, offset: 43155},
															expr: &actionExpr{
																pos: position{line: 1414, col: 5, offset: 47465},
																run: (*parser).callonExtraListElement1168,
																expr: &seqExpr{
																	pos: position{line: 1414, col: 5, offset: 47465},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 1414, col: 5, offset: 47465},
																			expr: &actionExpr{
																				pos: position{line: 2860, col: 10, offset: 94799},
																				run: (*parser).callonExtraListElement1171,
																				expr: &charClassMatcher{
																					pos:        position{line: 2860, col: 11, offset: 94800},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1414, col: 12, offset: 47472},
																			label: "prefix",
																			expr: &choiceExpr{
																				pos: position{line: 1414, col: 20, offset: 47480},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 1416, col: 9, offset: 47537},
																						run: (*parser).callonExtraListElement1175,
																						expr: &seqExpr{
																							pos: position{line: 1416, col: 9, offset: 47537},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 1416, col: 9, offset: 47537},
																									label: "depth",
																									expr: &actionExpr{
																										pos: position{line: 1416, col: 16, offset: 47544},
																										run: (*parser).callonExtraListElement1178,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1416, col: 16, offset: 47544},
																											expr: &litMatcher{
																												pos:        position{line: 1416, col: 17, offset: 47545},
																												val:        "*",
																												ignoreCase: false,
																												want:       "\"*\"",
																											},
																										},
																									},
																								},
																								&andCodeExpr{
																									pos: position{line: 1420, col: 9, offset: 47645},
																									run: (*parser).callonExtraListElement1181,
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 1437, col: 14, offset: 48352},
																						label: "depth",
																						expr: &actionExpr{
																							pos: position{line: 1437, col: 21, offset: 48359},
																							run: (*parser).callonExtraListElement1183,
																							expr: &litMatcher{
																								pos:        position{line: 1437, col: 22, offset: 48360},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2865, col: 11, offset: 94908},
																			run: (*parser).callonExtraListElement1185,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2865, col: 11, offset: 94908},
																				expr: &charClassMatcher{
																					pos:        position{line: 2865, col: 12, offset: 94909},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1286, col: 5, offset: 43187},
															expr: &actionExpr{
																pos: position{line: 1520, col: 5, offset: 50678},
																run: (*parser).callonExtraListElement1189,
																expr: &seqExpr{
																	pos: position{line: 1520, col: 5, offset: 50678},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1520, col: 5, offset: 50678},
																			val:        "<",
																			ignoreCase: false,
																			want:       "\"<\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 1520, col: 9, offset: 50682},
																			label: "ref",
																			expr: &actionExpr{
																				pos: position{line: 1520, col: 14, offset: 50687},
																				run: (*parser).callonExtraListElement1193,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1520, col: 14, offset: 50687},
																					expr: &charClassMatcher{
																						pos:        position{line: 1520, col: 14, offset: 50687},
																						val:        "[0-9]",
																						ranges:     []rune{'0', '9'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 1520, col: 62, offset: 50735},
																			val:        ">",
																			ignoreCase: false,
																			want:       "\">\"",
																		},
																		&actionExpr{
																			pos: position{line: 2865, col: 11, offset: 94908},
																			run: (*parser).callonExtraListElement1197,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2865, col: 11, offset: 94908},
																				expr: &charClassMatcher{
																					pos:        position{line: 2865, col: 12, offset: 94909},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1287, col: 5, offset: 43217},
															expr: &seqExpr{
																pos: position{line: 1287, col: 7, offset: 43219},
																exprs: []interface{}{
																	&actionExpr{
																		pos: position{line: 1464, col: 5, offset: 49080},
																		run: (*parser).callonExtraListElement1202,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1464, col: 5, offset: 49080},
																			expr: &seqExpr{
																				pos: position{line: 1464, col: 6, offset: 49081},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1464, col: 6, offset: 49081},
																						expr: &actionExpr{
																							pos: position{line: 1469, col: 5, offset: 49212},
																							run: (*parser).callonExtraListElement1206,
																							expr: &seqExpr{
																								pos: position{line: 1469, col: 5, offset: 49212},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 1469, col: 5, offset: 49212},
																										label: "separator",
																										expr: &actionExpr{
																											pos: position{line: 1469, col: 16, offset: 49223},
																											run: (*parser).callonExtraListElement1209,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1469, col: 16, offset: 49223},
																												expr: &litMatcher{
																													pos:        position{line: 1469, col: 17, offset: 49224},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 1472, col: 5, offset: 49281},
																										run: (*parser).callonExtraListElement1212,
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1464, col: 35, offset: 49110},
																						expr: &choiceExpr{
																							pos: position{line: 2877, col: 8, offset: 95162},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2870, col: 12, offset: 95022},
																									run: (*parser).callonExtraListElement1215,
																									expr: &choiceExpr{
																										pos: position{line: 2870, col: 13, offset: 95023},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2870, col: 13, offset: 95023},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2870, col: 20, offset: 95030},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2870, col: 29, offset: 95039},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2874, col: 8, offset: 95112},
																									expr: &anyMatcher{
																										line: 2874, col: 9, offset: 95113,
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1464, col: 40, offset: 49115,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1469, col: 5, offset: 49212},
																		run: (*parser).callonExtraListElement1223,
																		expr: &seqExpr{
																			pos: position{line: 1469, col: 5, offset: 49212},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1469, col: 5, offset: 49212},
																					label: "separator",
																					expr: &actionExpr{
																						pos: position{line: 1469, col: 16, offset: 49223},
																						run: (*parser).callonExtraListElement1226,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1469, col: 16, offset: 49223},
																							expr: &litMatcher{
																								pos:        position{line: 1469, col: 17, offset: 49224},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1472, col: 5, offset: 49281},
																					run: (*parser).callonExtraListElement1229,
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1288, col: 5, offset: 43275},
															expr: &actionExpr{
																pos: position{line: 494, col: 5, offset: 16252},
																run: (*parser).callonExtraListElement1231,
																expr: &seqExpr{
																	pos: position{line: 494, col: 5, offset: 16252},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 494, col: 5, offset: 16252},
																			expr: &charClassMatcher{
																				pos:        position{line: 2786, col: 13, offset: 92537},
																				val:        "[0-9\\pL]",
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 495, col: 5, offset: 16282},
																			label: "delimiter",
																			expr: &choiceExpr{
																				pos: position{line: 496, col: 9, offset: 16302},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 508, col: 26, offset: 16623},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 508, col: 26, offset: 16623},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 508, col: 33, offset: 16630},
																								expr: &actionExpr{
																									pos: position{line: 2860, col: 10, offset: 94799},
																									run: (*parser).callonExtraListElement1240,
																									expr: &charClassMatcher{
																										pos:        position{line: 2860, col: 11, offset: 94800},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2877, col: 8, offset: 95162},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2870, col: 12, offset: 95022},
																										run: (*parser).callonExtraListElement1243,
																										expr: &choiceExpr{
																											pos: position{line: 2870, col: 13, offset: 95023},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2870, col: 13, offset: 95023},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 20, offset: 95030},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 29, offset: 95039},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2874, col: 8, offset: 95112},
																										expr: &anyMatcher{
																											line: 2874, col: 9, offset: 95113,
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 510, col: 26, offset: 16667},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 510, col: 26, offset: 16667},
																								val:        "====",
																								ignoreCase: false,
																								want:       "\"====\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 510, col: 33, offset: 16674},
																								expr: &actionExpr{
																									pos: position{line: 2860, col: 10, offset: 94799},
																									run: (*parser).callonExtraListElement1253,
																									expr: &charClassMatcher{
																										pos:        position{line: 2860, col: 11, offset: 94800},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2877, col: 8, offset: 95162},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2870, col: 12, offset: 95022},
																										run: (*parser).callonExtraListElement1256,
																										expr: &choiceExpr{
																											pos: position{line: 2870, col: 13, offset: 95023},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2870, col: 13, offset: 95023},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 20, offset: 95030},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 29, offset: 95039},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2874, col: 8, offset: 95112},
																										expr: &anyMatcher{
																											line: 2874, col: 9, offset: 95113,
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 512, col: 25, offset: 16710},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 512, col: 25, offset: 16710},
																								val:        "```",
																								ignoreCase: false,
																								want:       "\"```\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 512, col: 31, offset: 16716},
																								expr: &actionExpr{
																									pos: position{line: 2860, col: 10, offset: 94799},
																									run: (*parser).callonExtraListElement1266,
																									expr: &charClassMatcher{
																										pos:        position{line: 2860, col: 11, offset: 94800},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2877, col: 8, offset: 95162},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2870, col: 12, offset: 95022},
																										run: (*parser).callonExtraListElement1269,
																										expr: &choiceExpr{
																											pos: position{line: 2870, col: 13, offset: 95023},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2870, col: 13, offset: 95023},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 20, offset: 95030},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 29, offset: 95039},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2874, col: 8, offset: 95112},
																										expr: &anyMatcher{
																											line: 2874, col: 9, offset: 95113,
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 514, col: 26, offset: 16753},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 514, col: 26, offset: 16753},
																								val:        "----",
																								ignoreCase: false,
																								want:       "\"----\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 514, col: 33, offset: 16760},
																								expr: &actionExpr{
																									pos: position{line: 2860, col: 10, offset: 94799},
																									run: (*parser).callonExtraListElement1279,
																									expr: &charClassMatcher{
																										pos:        position{line: 2860, col: 11, offset: 94800},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2877, col: 8, offset: 95162},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2870, col: 12, offset: 95022},
																										run: (*parser).callonExtraListElement1282,
																										expr: &choiceExpr{
																											pos: position{line: 2870, col: 13, offset: 95023},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2870, col: 13, offset: 95023},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 20, offset: 95030},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 29, offset: 95039},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2874, col: 8, offset: 95112},
																										expr: &anyMatcher{
																											line: 2874, col: 9, offset: 95113,
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 516, col: 26, offset: 16797},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 516, col: 26, offset: 16797},
																								val:        "....",
																								ignoreCase: false,
																								want:       "\"....\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 516, col: 33, offset: 16804},
																								expr: &actionExpr{
																									pos: position{line: 2860, col: 10, offset: 94799},
																									run: (*parser).callonExtraListElement1292,
																									expr: &charClassMatcher{
																										pos:        position{line: 2860, col: 11, offset: 94800},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2877, col: 8, offset: 95162},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2870, col: 12, offset: 95022},
																										run: (*parser).callonExtraListElement1295,
																										expr: &choiceExpr{
																											pos: position{line: 2870, col: 13, offset: 95023},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2870, col: 13, offset: 95023},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 20, offset: 95030},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 29, offset: 95039},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2874, col: 8, offset: 95112},
																										expr: &anyMatcher{
																											line: 2874, col: 9, offset: 95113,
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 518, col: 30, offset: 16845},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 518, col: 30, offset: 16845},
																								val:        "++++",
																								ignoreCase: false,
																								want:       "\"++++\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 518, col: 37, offset: 16852},
																								expr: &actionExpr{
																									pos: position{line: 2860, col: 10, offset: 94799},
																									run: (*parser).callonExtraListElement1305,
																									expr: &charClassMatcher{
																										pos:        position{line: 2860, col: 11, offset: 94800},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2877, col: 8, offset: 95162},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2870, col: 12, offset: 95022},
																										run: (*parser).callonExtraListElement1308,
																										expr: &choiceExpr{
																											pos: position{line: 2870, col: 13, offset: 95023},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2870, col: 13, offset: 95023},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 20, offset: 95030},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 29, offset: 95039},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2874, col: 8, offset: 95112},
																										expr: &anyMatcher{
																											line: 2874, col: 9, offset: 95113,
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 520, col: 24, offset: 16887},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 520, col: 24, offset: 16887},
																								val:        "____",
																								ignoreCase: false,
																								want:       "\"____\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 520, col: 31, offset: 16894},
																								expr: &actionExpr{
																									pos: position{line: 2860, col: 10, offset: 94799},
																									run: (*parser).callonExtraListElement1318,
																									expr: &charClassMatcher{
																										pos:        position{line: 2860, col: 11, offset: 94800},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2877, col: 8, offset: 95162},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2870, col: 12, offset: 95022},
																										run: (*parser).callonExtraListElement1321,
																										expr: &choiceExpr{
																											pos: position{line: 2870, col: 13, offset: 95023},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2870, col: 13, offset: 95023},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 20, offset: 95030},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 29, offset: 95039},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2874, col: 8, offset: 95112},
																										expr: &anyMatcher{
																											line: 2874, col: 9, offset: 95113,
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 522, col: 26, offset: 16931},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 522, col: 26, offset: 16931},
																								val:        "****",
																								ignoreCase: false,
																								want:       "\"****\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 522, col: 33, offset: 16938},
																								expr: &actionExpr{
																									pos: position{line: 2860, col: 10, offset: 94799},
																									run: (*parser).callonExtraListElement1331,
																									expr: &charClassMatcher{
																										pos:        position{line: 2860, col: 11, offset: 94800},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2877, col: 8, offset: 95162},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2870, col: 12, offset: 95022},
																										run: (*parser).callonExtraListElement1334,
																										expr: &choiceExpr{
																											pos: position{line: 2870, col: 13, offset: 95023},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2870, col: 13, offset: 95023},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 20, offset: 95030},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 29, offset: 95039},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2874, col: 8, offset: 95112},
																										expr: &anyMatcher{
																											line: 2874, col: 9, offset: 95113,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 1289, col: 5, offset: 43295},
															label: "content",
															expr: &actionExpr{
																pos: position{line: 1289, col: 14, offset: 43304},
																run: (*parser).callonExtraListElement1342,
																expr: &oneOrMoreExpr{
																	pos: position{line: 1289, col: 14, offset: 43304},
																	expr: &charClassMatcher{
																		pos:        position{line: 1289, col: 14, offset: 43304},
																		val:        "[^\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 2877, col: 8, offset: 95162},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2870, col: 12, offset: 95022},
																	run: (*parser).callonExtraListElement1346,
																	expr: &choiceExpr{
																		pos: position{line: 2870, col: 13, offset: 95023},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2870, col: 13, offset: 95023},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2870, col: 20, offset: 95030},
																				val:        "\r\n",
																				ignoreCase: false,
																				want:       "\"\\r\\n\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2870, col: 29, offset: 95039},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2874, col: 8, offset: 95112},
																	expr: &anyMatcher{
																		line: 2874, col: 9, offset: 95113,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElementContinuation",
			pos:  position{line: 1307, col: 1, offset: 43728},
			expr: &actionExpr{
				pos: position{line: 1308, col: 5, offset: 43760},
				run: (*parser).callonListElementContinuation1,
				expr: &seqExpr{
					pos: position{line: 1308, col: 5, offset: 43760},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1308, col: 5, offset: 43760},
							label: "offset",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1308, col: 12, offset: 43767},
								expr: &seqExpr{
									pos: position{line: 1308, col: 13, offset: 43768},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1308, col: 13, offset: 43768},
											expr: &actionExpr{
												pos: position{line: 2860, col: 10, offset: 94799},
												run: (*parser).callonListElementContinuation7,
												expr: &charClassMatcher{
													pos:        position{line: 2860, col: 11, offset: 94800},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&actionExpr{
											pos: position{line: 2870, col: 12, offset: 95022},
											run: (*parser).callonListElementContinuation9,
											expr: &choiceExpr{
												pos: position{line: 2870, col: 13, offset: 95023},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2870, col: 13, offset: 95023},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2870, col: 20, offset: 95030},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2870, col: 29, offset: 95039},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1315, col: 34, offset: 44000},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1315, col: 38, offset: 44004},
							expr: &actionExpr{
								pos: position{line: 2860, col: 10, offset: 94799},
								run: (*parser).callonListElementContinuation16,
								expr: &charClassMatcher{
									pos:        position{line: 2860, col: 11, offset: 94800},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&actionExpr{
							pos: position{line: 2870, col: 12, offset: 95022},
							run: (*parser).callonListElementContinuation18,
							expr: &choiceExpr{
								pos: position{line: 2870, col: 13, offset: 95023},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2870, col: 13, offset: 95023},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2870, col: 20, offset: 95030},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2870, col: 29, offset: 95039},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1310, col: 5, offset: 43824},
							label: "element",
							expr: &zeroOrOneExpr{
								pos: position{line: 1310, col: 13, offset: 43832},
								expr: &ruleRefExpr{
									pos:  position{line: 1310, col: 13, offset: 43832},
									name: "ListElementContinuationElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElementContinuationElement",
			pos:  position{line: 1317, col: 1, offset: 44020},
			expr: &actionExpr{
				pos: position{line: 1318, col: 5, offset: 44098},
				run: (*parser).callonListElementContinuationElement1,
				expr: &seqExpr{
					pos: position{line: 1318, col: 5, offset: 44098},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1318, col: 5, offset: 44098},
							expr: &notExpr{
								pos: position{line: 2874, col: 8, offset: 95112},
								expr: &anyMatcher{
									line: 2874, col: 9, offset: 95113,
								},
							},
						},
						&notExpr{
							pos: position{line: 1319, col: 5, offset: 44124},
							expr: &choiceExpr{
								pos: position{line: 1228, col: 5, offset: 41279},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1357, col: 5, offset: 45295},
										run: (*parser).callonListElementContinuationElement8,
										expr: &seqExpr{
											pos: position{line: 1357, col: 5, offset: 45295},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1357, col: 5, offset: 45295},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1364, col: 5, offset: 45503},
														run: (*parser).callonListElementContinuationElement11,
														expr: &seqExpr{
															pos: position{line: 1364, col: 5, offset: 45503},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1364, col: 5, offset: 45503},
																	expr: &actionExpr{
																		pos: position{line: 2860, col: 10, offset: 94799},
																		run: (*parser).callonListElementContinuationElement14,
																		expr: &charClassMatcher{
																			pos:        position{line: 2860, col: 11, offset: 94800},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1364, col: 12, offset: 45510},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1366, col: 9, offset: 45573},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1366, col: 9, offset: 45573},
																				run: (*parser).callonListElementContinuationElement18,
																				expr: &seqExpr{
																					pos: position{line: 1366, col: 9, offset: 45573},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1366, col: 9, offset: 45573},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1366, col: 16, offset: 45580},
																								run: (*parser).callonListElementContinuationElement21,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1366, col: 16, offset: 45580},
																									expr: &litMatcher{
																										pos:        position{line: 1366, col: 17, offset: 45581},
																										val:        ".",
																										ignoreCase: false,
																										want:       "\".\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1370, col: 9, offset: 45681},
																							run: (*parser).callonListElementContinuationElement24,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1389, col: 11, offset: 46398},
																				run: (*parser).callonListElementContinuationElement25,
																				expr: &seqExpr{
																					pos: position{line: 1389, col: 11, offset: 46398},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1389, col: 11, offset: 46398},
																							expr: &charClassMatcher{
																								pos:        position{line: 1389, col: 12, offset: 46399},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1389, col: 20, offset: 46407},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1391, col: 13, offset: 46524},
																				run: (*parser).callonListElementContinuationElement30,
																				expr: &seqExpr{
																					pos: position{line: 1391, col: 13, offset: 46524},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1391, col: 14, offset: 46525},
																							val:        "[a-z]",
																							ranges:     []rune{'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1391, col: 21, offset: 46532},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1393, col: 13, offset: 46652},
																				run: (*parser).callonListElementContinuationElement34,
																				expr: &seqExpr{
																					pos: position{line: 1393, col: 13, offset: 46652},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1393, col: 14, offset: 46653},
																							val:        "[A-Z]",
																							ranges:     []rune{'A', 'Z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1393, col: 21, offset: 46660},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1395, col: 13, offset: 46780},
																				run: (*parser).callonListElementContinuationElement38,
																				expr: &seqExpr{
																					pos: position{line: 1395, col: 13, offset: 46780},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1395, col: 13, offset: 46780},
																							expr: &charClassMatcher{
																								pos:        position{line: 1395, col: 14, offset: 46781},
																								val:        "[ivxdlcm]",
																								chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1395, col: 26, offset: 46793},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1397, col: 13, offset: 46913},
																				run: (*parser).callonListElementContinuationElement43,
																				expr: &seqExpr{
																					pos: position{line: 1397, col: 13, offset: 46913},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1397, col: 13, offset: 46913},
																							expr: &charClassMatcher{
																								pos:        position{line: 1397, col: 14, offset: 46914},
																								val:        "[IVXDLCM]",
																								chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1397, col: 26, offset: 46926},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2865, col: 11, offset: 94908},
																	run: (*parser).callonListElementContinuationElement48,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2865, col: 11, offset: 94908},
																		expr: &charClassMatcher{
																			pos:        position{line: 2865, col: 12, offset: 94909},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1358, col: 5, offset: 45334},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1297, col: 5, offset: 43501},
														run: (*parser).callonListElementContinuationElement52,
														expr: &seqExpr{
															pos: position{line: 1297, col: 5, offset: 43501},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1297, col: 5, offset: 43501},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1297, col: 14, offset: 43510},
																		run: (*parser).callonListElementContinuationElement55,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1297, col: 14, offset: 43510},
																			expr: &charClassMatcher{
																				pos:        position{line: 1297, col: 14, offset: 43510},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2877, col: 8, offset: 95162},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonListElementContinuationElement59,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1407, col: 5, offset: 47192},
										run: (*parser).callonListElementContinuationElement66,
										expr: &seqExpr{
											pos: position{line: 1407, col: 5, offset: 47192},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1407, col: 5, offset: 47192},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1414, col: 5, offset: 47465},
														run: (*parser).callonListElementContinuationElement69,
														expr: &seqExpr{
															pos: position{line: 1414, col: 5, offset: 47465},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1414, col: 5, offset: 47465},
																	expr: &actionExpr{
																		pos: position{line: 2860, col: 10, offset: 94799},
																		run: (*parser).callonListElementContinuationElement72,
																		expr: &charClassMatcher{
																			pos:        position{line: 2860, col: 11, offset: 94800},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1414, col: 12, offset: 47472},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1414, col: 20, offset: 47480},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1416, col: 9, offset: 47537},
																				run: (*parser).callonListElementContinuationElement76,
																				expr: &seqExpr{
																					pos: position{line: 1416, col: 9, offset: 47537},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1416, col: 9, offset: 47537},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1416, col: 16, offset: 47544},
																								run: (*parser).callonListElementContinuationElement79,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1416, col: 16, offset: 47544},
																									expr: &litMatcher{
																										pos:        position{line: 1416, col: 17, offset: 47545},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1420, col: 9, offset: 47645},
																							run: (*parser).callonListElementContinuationElement82,
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 1437, col: 14, offset: 48352},
																				label: "depth",
																				expr: &actionExpr{
																					pos: position{line: 1437, col: 21, offset: 48359},
																					run: (*parser).callonListElementContinuationElement84,
																					expr: &litMatcher{
																						pos:        position{line: 1437, col: 22, offset: 48360},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2865, col: 11, offset: 94908},
																	run: (*parser).callonListElementContinuationElement86,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2865, col: 11, offset: 94908},
																		expr: &charClassMatcher{
																			pos:        position{line: 2865, col: 12, offset: 94909},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1408, col: 5, offset: 47233},
													label: "checkstyle",
													expr: &zeroOrOneExpr{
														pos: position{line: 1408, col: 16, offset: 47244},
														expr: &actionExpr{
															pos: position{line: 1444, col: 5, offset: 48521},
															run: (*parser).callonListElementContinuationElement91,
															expr: &seqExpr{
																pos: position{line: 1444, col: 5, offset: 48521},
																exprs: []interface{}{
																	&andExpr{
																		pos: position{line: 1444, col: 5, offset: 48521},
																		expr: &litMatcher{
																			pos:        position{line: 1444, col: 6, offset: 48522},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1444, col: 10, offset: 48526},
																		label: "style",
																		expr: &choiceExpr{
																			pos: position{line: 1445, col: 7, offset: 48540},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 1445, col: 7, offset: 48540},
																					run: (*parser).callonListElementContinuationElement97,
																					expr: &litMatcher{
																						pos:        position{line: 1445, col: 7, offset: 48540},
																						val:        "[ ]",
																						ignoreCase: false,
																						want:       "\"[ ]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1446, col: 7, offset: 48585},
																					run: (*parser).callonListElementContinuationElement99,
																					expr: &litMatcher{
																						pos:        position{line: 1446, col: 7, offset: 48585},
																						val:        "[*]",
																						ignoreCase: false,
																						want:       "\"[*]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1447, col: 7, offset: 48628},
																					run: (*parser).callonListElementContinuationElement101,
																					expr: &litMatcher{
																						pos:        position{line: 1447, col: 7, offset: 48628},
																						val:        "[x]",
																						ignoreCase: false,
																						want:       "\"[x]\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2865, col: 11, offset: 94908},
																		run: (*parser).callonListElementContinuationElement103,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2865, col: 11, offset: 94908},
																			expr: &charClassMatcher{
																				pos:        position{line: 2865, col: 12, offset: 94909},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1409, col: 5, offset: 47283},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1297, col: 5, offset: 43501},
														run: (*parser).callonListElementContinuationElement107,
														expr: &seqExpr{
															pos: position{line: 1297, col: 5, offset: 43501},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1297, col: 5, offset: 43501},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1297, col: 14, offset: 43510},
																		run: (*parser).callonListElementContinuationElement110,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1297, col: 14, offset: 43510},
																			expr: &charClassMatcher{
																				pos:        position{line: 1297, col: 14, offset: 43510},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2877, col: 8, offset: 95162},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonListElementContinuationElement114,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1514, col: 5, offset: 50477},
										run: (*parser).callonListElementContinuationElement121,
										expr: &seqExpr{
											pos: position{line: 1514, col: 5, offset: 50477},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1514, col: 5, offset: 50477},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1520, col: 5, offset: 50678},
														run: (*parser).callonListElementContinuationElement124,
														expr: &seqExpr{
															pos: position{line: 1520, col: 5, offset: 50678},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1520, col: 5, offset: 50678},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
																&labeledExpr{
																	pos:   position{line: 1520, col: 9, offset: 50682},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1520, col: 14, offset: 50687},
																		run: (*parser).callonListElementContinuationElement128,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1520, col: 14, offset: 50687},
																			expr: &charClassMatcher{
																				pos:        position{line: 1520, col: 14, offset: 50687},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1520, col: 62, offset: 50735},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
																&actionExpr{
																	pos: position{line: 2865, col: 11, offset: 94908},
																	run: (*parser).callonListElementContinuationElement132,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2865, col: 11, offset: 94908},
																		expr: &charClassMatcher{
																			pos:        position{line: 2865, col: 12, offset: 94909},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1515, col: 5, offset: 50513},
													label: "description",
													expr: &actionExpr{
														pos: position{line: 1525, col: 5, offset: 50813},
														run: (*parser).callonListElementContinuationElement136,
														expr: &seqExpr{
															pos: position{line: 1525, col: 5, offset: 50813},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1525, col: 5, offset: 50813},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1525, col: 14, offset: 50822},
																		run: (*parser).callonListElementContinuationElement139,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1525, col: 14, offset: 50822},
																			expr: &charClassMatcher{
																				pos:        position{line: 1525, col: 14, offset: 50822},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2877, col: 8, offset: 95162},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonListElementContinuationElement143,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1456, col: 5, offset: 48821},
										run: (*parser).callonListElementContinuationElement150,
										expr: &seqExpr{
											pos: position{line: 1456, col: 5, offset: 48821},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1456, col: 5, offset: 48821},
													label: "term",
													expr: &actionExpr{
														pos: position{line: 1464, col: 5, offset: 49080},
														run: (*parser).callonListElementContinuationElement153,
														expr: &oneOrMoreExpr{
															pos: position{line: 1464, col: 5, offset: 49080},
															expr: &seqExpr{
																pos: position{line: 1464, col: 6, offset: 49081},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1464, col: 6, offset: 49081},
																		expr: &actionExpr{
																			pos: position{line: 1469, col: 5, offset: 49212},
																			run: (*parser).callonListElementContinuationElement157,
																			expr: &seqExpr{
																				pos: position{line: 1469, col: 5, offset: 49212},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 1469, col: 5, offset: 49212},
																						label: "separator",
																						expr: &actionExpr{
																							pos: position{line: 1469, col: 16, offset: 49223},
																							run: (*parser).callonListElementContinuationElement160,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1469, col: 16, offset: 49223},
																								expr: &litMatcher{
																									pos:        position{line: 1469, col: 17, offset: 49224},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																							},
																						},
																					},
																					&andCodeExpr{
																						pos: position{line: 1472, col: 5, offset: 49281},
																						run: (*parser).callonListElementContinuationElement163,
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 1464, col: 35, offset: 49110},
																		expr: &choiceExpr{
																			pos: position{line: 2877, col: 8, offset: 95162},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2870, col: 12, offset: 95022},
																					run: (*parser).callonListElementContinuationElement166,
																					expr: &choiceExpr{
																						pos: position{line: 2870, col: 13, offset: 95023},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2870, col: 13, offset: 95023},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 20, offset: 95030},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 29, offset: 95039},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2874, col: 8, offset: 95112},
																					expr: &anyMatcher{
																						line: 2874, col: 9, offset: 95113,
																					},
																				},
																			},
																		},
																	},
																	&anyMatcher{
																		line: 1464, col: 40, offset: 49115,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1457, col: 5, offset: 48856},
													label: "separator",
													expr: &actionExpr{
														pos: position{line: 1469, col: 5, offset: 49212},
														run: (*parser).callonListElementContinuationElement175,
														expr: &seqExpr{
															pos: position{line: 1469, col: 5, offset: 49212},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1469, col: 5, offset: 49212},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1469, col: 16, offset: 49223},
																		run: (*parser).callonListElementContinuationElement178,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1469, col: 16, offset: 49223},
																			expr: &litMatcher{
																				pos:        position{line: 1469, col: 17, offset: 49224},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1472, col: 5, offset: 49281},
																	run: (*parser).callonListElementContinuationElement181,
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1458, col: 5, offset: 48901},
													label: "description",
													expr: &choiceExpr{
														pos: position{line: 1480, col: 5, offset: 49531},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1482, col: 9, offset: 49596},
																run: (*parser).callonListElementContinuationElement184,
																expr: &seqExpr{
																	pos: position{line: 1482, col: 9, offset: 49596},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 1482, col: 9, offset: 49596},
																			expr: &actionExpr{
																				pos: position{line: 2860, col: 10, offset: 94799},
																				run: (*parser).callonListElementContinuationElement187,
																				expr: &charClassMatcher{
																					pos:        position{line: 2860, col: 11, offset: 94800},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2877, col: 8, offset: 95162},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2870, col: 12, offset: 95022},
																					run: (*parser).callonListElementContinuationElement190,
																					expr: &choiceExpr{
																						pos: position{line: 2870, col: 13, offset: 95023},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2870, col: 13, offset: 95023},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 20, offset: 95030},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 29, offset: 95039},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2874, col: 8, offset: 95112},
																					expr: &anyMatcher{
																						line: 2874, col: 9, offset: 95113,
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1483, col: 9, offset: 49616},
																			expr: &actionExpr{
																				pos: position{line: 449, col: 14, offset: 14731},
																				run: (*parser).callonListElementContinuationElement198,
																				expr: &seqExpr{
																					pos: position{line: 449, col: 14, offset: 14731},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 449, col: 14, offset: 14731},
																							expr: &notExpr{
																								pos: position{line: 2874, col: 8, offset: 95112},
																								expr: &anyMatcher{
																									line: 2874, col: 9, offset: 95113,
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 449, col: 19, offset: 14736},
																							expr: &actionExpr{
																								pos: position{line: 2860, col: 10, offset: 94799},
																								run: (*parser).callonListElementContinuationElement204,
																								expr: &charClassMatcher{
																									pos:        position{line: 2860, col: 11, offset: 94800},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2877, col: 8, offset: 95162},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2870, col: 12, offset: 95022},
																									run: (*parser).callonListElementContinuationElement207,
																									expr: &choiceExpr{
																										pos: position{line: 2870, col: 13, offset: 95023},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2870, col: 13, offset: 95023},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2870, col: 20, offset: 95030},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2870, col: 29, offset: 95039},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2874, col: 8, offset: 95112},
																									expr: &anyMatcher{
																										line: 2874, col: 9, offset: 95113,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1484, col: 9, offset: 49636},
																			label: "content",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 1484, col: 17, offset: 49644},
																				expr: &actionExpr{
																					pos: position{line: 1282, col: 5, offset: 43075},
																					run: (*parser).callonListElementContinuationElement216,
																					expr: &seqExpr{
																						pos: position{line: 1282, col: 5, offset: 43075},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 1282, col: 5, offset: 43075},
																								expr: &actionExpr{
																									pos: position{line: 449, col: 14, offset: 14731},
																									run: (*parser).callonListElementContinuationElement219,
																									expr: &seqExpr{
																										pos: position{line: 449, col: 14, offset: 14731},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 449, col: 14, offset: 14731},
																												expr: &notExpr{
																													pos: position{line: 2874, col: 8, offset: 95112},
																													expr: &anyMatcher{
																														line: 2874, col: 9, offset: 95113,
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 449, col: 19, offset: 14736},
																												expr: &actionExpr{
																													pos: position{line: 2860, col: 10, offset: 94799},
																													run: (*parser).callonListElementContinuationElement225,
																													expr: &charClassMatcher{
																														pos:        position{line: 2860, col: 11, offset: 94800},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2877, col: 8, offset: 95162},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2870, col: 12, offset: 95022},
																														run: (*parser).callonListElementContinuationElement228,
																														expr: &choiceExpr{
																															pos: position{line: 2870, col: 13, offset: 95023},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2870, col: 13, offset: 95023},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2870, col: 20, offset: 95030},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2870, col: 29, offset: 95039},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2874, col: 8, offset: 95112},
																														expr: &anyMatcher{
																															line: 2874, col: 9, offset: 95113,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1283, col: 5, offset: 43090},
																								expr: &seqExpr{
																									pos: position{line: 1315, col: 34, offset: 44000},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 1315, col: 34, offset: 44000},
																											val:        "+",
																											ignoreCase: false,
																											want:       "\"+\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 1315, col: 38, offset: 44004},
																											expr: &actionExpr{
																												pos: position{line: 2860, col: 10, offset: 94799},
																												run: (*parser).callonListElementContinuationElement239,
																												expr: &charClassMatcher{
																													pos:        position{line: 2860, col: 11, offset: 94800},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2870, col: 12, offset: 95022},
																											run: (*parser).callonListElementContinuationElement241,
																											expr: &choiceExpr{
																												pos: position{line: 2870, col: 13, offset: 95023},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2870, col: 13, offset: 95023},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2870, col: 20, offset: 95030},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2870, col: 29, offset: 95039},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1284, col: 5, offset: 43125},
																								expr: &actionExpr{
																									pos: position{line: 1364, col: 5, offset: 45503},
																									run: (*parser).callonListElementContinuationElement247,
																									expr: &seqExpr{
																										pos: position{line: 1364, col: 5, offset: 45503},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 1364, col: 5, offset: 45503},
																												expr: &actionExpr{
																													pos: position{line: 2860, col: 10, offset: 94799},
																													run: (*parser).callonListElementContinuationElement250,
																													expr: &charClassMatcher{
																														pos:        position{line: 2860, col: 11, offset: 94800},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 1364, col: 12, offset: 45510},
																												label: "prefix",
																												expr: &choiceExpr{
																													pos: position{line: 1366, col: 9, offset: 45573},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 1366, col: 9, offset: 45573},
																															run: (*parser).callonListElementContinuationElement254,
																															expr: &seqExpr{
																																pos: position{line: 1366, col: 9, offset: 45573},
																																exprs: []interface{}{
																																	&labeledExpr{
																																		pos:   position{line: 1366, col: 9, offset: 45573},
																																		label: "depth",
																																		expr: &actionExpr{
																																			pos: position{line: 1366, col: 16, offset: 45580},
																																			run: (*parser).callonListElementContinuationElement257,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 1366, col: 16, offset: 45580},
																																				expr: &litMatcher{
																																					pos:        position{line: 1366, col: 17, offset: 45581},
																																					val:        ".",
																																					ignoreCase: false,
																																					want:       "\".\"",
																																				},
																																			},
																																		},
																																	},
																																	&andCodeExpr{
																																		pos: position{line: 1370, col: 9, offset: 45681},
																																		run: (*parser).callonListElementContinuationElement260,
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1389, col: 11, offset: 46398},
																															run: (*parser).callonListElementContinuationElement261,
																															expr: &seqExpr{
																																pos: position{line: 1389, col: 11, offset: 46398},
																																exprs: []interface{}{
																																	&oneOrMoreExpr{
																																		pos: position{line: 1389, col: 11, offset: 46398},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1389, col: 12, offset: 46399},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1389, col: 20, offset: 46407},
																																		val:        ".",
																																		ignoreCase: false,
																																		want:       "\".\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1391, col: 13, offset: 46524},
																															run: (*parser).callonListElementContinuationElement266,
																															expr: &seqExpr{
																																pos: position{line: 1391, col: 13, offset: 46524},
																																exprs: []interface{}{
																																	&charClassMatcher{
																																		pos:        position{line: 1391, col: 14, offset: 46525},
																																		val:        "[a-z]",
																																		ranges:     []rune{'a', 'z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1391, col: 21, offset: 46532},
																																		val:        ".",
																																		ignoreCase: false,
																																		want:       "\".\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1393, col: 13, offset: 46652},
																															run: (*parser).callonListElementContinuationElement270,
																															expr: &seqExpr{
																																pos: position{line: 1393, col: 13, offset: 46652},
																																exprs: []interface{}{
																																	&charClassMatcher{
																																		pos:        position{line: 1393, col: 14, offset: 46653},
																																		val:        "[A-Z]",
																																		ranges:     []rune{'A', 'Z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1393, col: 21, offset: 46660},
																																		val:        ".",
																																		ignoreCase: false,
																																		want:       "\".\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1395, col: 13, offset: 46780},
																															run: (*parser).callonListElementContinuationElement274,
																															expr: &seqExpr{
																																pos: position{line: 1395, col: 13, offset: 46780},
																																exprs: []interface{}{
																																	&oneOrMoreExpr{
																																		pos: position{line: 1395, col: 13, offset: 46780},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1395, col: 14, offset: 46781},
																																			val:        "[ivxdlcm]",
																																			chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1395, col: 26, offset: 46793},
																																		val:        ")",
																																		ignoreCase: false,
																																		want:       "\")\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1397, col: 13, offset: 46913},
																															run: (*parser).callonListElementContinuationElement279,
																															expr: &seqExpr{
																																pos: position{line: 1397, col: 13, offset: 46913},
																																exprs: []interface{}{
																																	&oneOrMoreExpr{
																																		pos: position{line: 1397, col: 13, offset: 46913},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1397, col: 14, offset: 46914},
																																			val:        "[IVXDLCM]",
																																			chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1397, col: 26, offset: 46926},
																																		val:        ")",
																																		ignoreCase: false,
																																		want:       "\")\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2865, col: 11, offset: 94908},
																												run: (*parser).callonListElementContinuationElement284,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2865, col: 11, offset: 94908},
																													expr: &charClassMatcher{
																														pos:        position{line: 2865, col: 12, offset: 94909},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1285, col: 5, offset: 43155},
																								expr: &actionExpr{
																									pos: position{line: 1414, col: 5, offset: 47465},
																									run: (*parser).callonListElementContinuationElement288,
																									expr: &seqExpr{
																										pos: position{line: 1414, col: 5, offset: 47465},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 1414, col: 5, offset: 47465},
																												expr: &actionExpr{
																													pos: position{line: 2860, col: 10, offset: 94799},
																													run: (*parser).callonListElementContinuationElement291,
																													expr: &charClassMatcher{
																														pos:        position{line: 2860, col: 11, offset: 94800},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 1414, col: 12, offset: 47472},
																												label: "prefix",
																												expr: &choiceExpr{
																													pos: position{line: 1414, col: 20, offset: 47480},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 1416, col: 9, offset: 47537},
																															run: (*parser).callonListElementContinuationElement295,
																															expr: &seqExpr{
																																pos: position{line: 1416, col: 9, offset: 47537},
																																exprs: []interface{}{
																																	&labeledExpr{
																																		pos:   position{line: 1416, col: 9, offset: 47537},
																																		label: "depth",
																																		expr: &actionExpr{
																																			pos: position{line: 1416, col: 16, offset: 47544},
																																			run: (*parser).callonListElementContinuationElement298,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 1416, col: 16, offset: 47544},
																																				expr: &litMatcher{
																																					pos:        position{line: 1416, col: 17, offset: 47545},
																																					val:        "*",
																																					ignoreCase: false,
																																					want:       "\"*\"",
																																				},
																																			},
																																		},
																																	},
																																	&andCodeExpr{
																																		pos: position{line: 1420, col: 9, offset: 47645},
																																		run: (*parser).callonListElementContinuationElement301,
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 1437, col: 14, offset: 48352},
																															label: "depth",
																															expr: &actionExpr{
																																pos: position{line: 1437, col: 21, offset: 48359},
																																run: (*parser).callonListElementContinuationElement303,
																																expr: &litMatcher{
																																	pos:        position{line: 1437, col: 22, offset: 48360},
																																	val:        "-",
																																	ignoreCase: false,
																																	want:       "\"-\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2865, col: 11, offset: 94908},
																												run: (*parser).callonListElementContinuationElement305,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2865, col: 11, offset: 94908},
																													expr: &charClassMatcher{
																														pos:        position{line: 2865, col: 12, offset: 94909},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1286, col: 5, offset: 43187},
																								expr: &actionExpr{
																									pos: position{line: 1520, col: 5, offset: 50678},
																									run: (*parser).callonListElementContinuationElement309,
																									expr: &seqExpr{
																										pos: position{line: 1520, col: 5, offset: 50678},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1520, col: 5, offset: 50678},
																												val:        "<",
																												ignoreCase: false,
																												want:       "\"<\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 1520, col: 9, offset: 50682},
																												label: "ref",
																												expr: &actionExpr{
																													pos: position{line: 1520, col: 14, offset: 50687},
																													run: (*parser).callonListElementContinuationElement313,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1520, col: 14, offset: 50687},
																														expr: &charClassMatcher{
																															pos:        position{line: 1520, col: 14, offset: 50687},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 1520, col: 62, offset: 50735},
																												val:        ">",
																												ignoreCase: false,
																												want:       "\">\"",
																											},
																											&actionExpr{
																												pos: position{line: 2865, col: 11, offset: 94908},
																												run: (*parser).callonListElementContinuationElement317,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2865, col: 11, offset: 94908},
																													expr: &charClassMatcher{
																														pos:        position{line: 2865, col: 12, offset: 94909},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1287, col: 5, offset: 43217},
																								expr: &seqExpr{
																									pos: position{line: 1287, col: 7, offset: 43219},
																									exprs: []interface{}{
																										&actionExpr{
																											pos: position{line: 1464, col: 5, offset: 49080},
																											run: (*parser).callonListElementContinuationElement322,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1464, col: 5, offset: 49080},
																												expr: &seqExpr{
																													pos: position{line: 1464, col: 6, offset: 49081},
																													exprs: []interface{}{
																														&notExpr{
																															pos: position{line: 1464, col: 6, offset: 49081},
																															expr: &actionExpr{
																																pos: position{line: 1469, col: 5, offset: 49212},
																																run: (*parser).callonListElementContinuationElement326,
																																expr: &seqExpr{
																																	pos: position{line: 1469, col: 5, offset: 49212},
																																	exprs: []interface{}{
																																		&labeledExpr{
																																			pos:   position{line: 1469, col: 5, offset: 49212},
																																			label: "separator",
																																			expr: &actionExpr{
																																				pos: position{line: 1469, col: 16, offset: 49223},
																																				run: (*parser).callonListElementContinuationElement329,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 1469, col: 16, offset: 49223},
																																					expr: &litMatcher{
																																						pos:        position{line: 1469, col: 17, offset: 49224},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																				},
																																			},
																																		},
																																		&andCodeExpr{
																																			pos: position{line: 1472, col: 5, offset: 49281},
																																			run: (*parser).callonListElementContinuationElement332,
																																		},
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 1464, col: 35, offset: 49110},
																															expr: &choiceExpr{
																																pos: position{line: 2877, col: 8, offset: 95162},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 2870, col: 12, offset: 95022},
																																		run: (*parser).callonListElementContinuationElement335,
																																		expr: &choiceExpr{
																																			pos: position{line: 2870, col: 13, offset: 95023},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 2870, col: 13, offset: 95023},
																																					val:        "\n",
																																					ignoreCase: false,
																																					want:       "\"\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2870, col: 20, offset: 95030},
																																					val:        "\r\n",
																																					ignoreCase: false,
																																					want:       "\"\\r\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2870, col: 29, offset: 95039},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 2874, col: 8, offset: 95112},
																																		expr: &anyMatcher{
																																			line: 2874, col: 9, offset: 95113,
																																		},
																																	},
																																},
																															},
																														},
																														&anyMatcher{
																															line: 1464, col: 40, offset: 49115,
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1469, col: 5, offset: 49212},
																											run: (*parser).callonListElementContinuationElement343,
																											expr: &seqExpr{
																												pos: position{line: 1469, col: 5, offset: 49212},
																												exprs: []interface{}{
																													&labeledExpr{
																														pos:   position{line: 1469, col: 5, offset: 49212},
																														label: "separator",
																														expr: &actionExpr{
																															pos: position{line: 1469, col: 16, offset: 49223},
																															run: (*parser).callonListElementContinuationElement346,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1469, col: 16, offset: 49223},
																																expr: &litMatcher{
																																	pos:        position{line: 1469, col: 17, offset: 49224},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																															},
																														},
																													},
																													&andCodeExpr{
																														pos: position{line: 1472, col: 5, offset: 49281},
																														run: (*parser).callonListElementContinuationElement349,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1288, col: 5, offset: 43275},
																								expr: &actionExpr{
																									pos: position{line: 494, col: 5, offset: 16252},
																									run: (*parser).callonListElementContinuationElement351,
																									expr: &seqExpr{
																										pos: position{line: 494, col: 5, offset: 16252},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 494, col: 5, offset: 16252},
																												expr: &charClassMatcher{
																													pos:        position{line: 2786, col: 13, offset: 92537},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 495, col: 5, offset: 16282},
																												label: "delimiter",
																												expr: &choiceExpr{
																													pos: position{line: 496, col: 9, offset: 16302},
																													alternatives: []interface{}{
																														&seqExpr{
																															pos: position{line: 508, col: 26, offset: 16623},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 508, col: 26, offset: 16623},
																																	val:        "////",
																																	ignoreCase: false,
																																	want:       "\"////\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 508, col: 33, offset: 16630},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonListElementContinuationElement360,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2877, col: 8, offset: 95162},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2870, col: 12, offset: 95022},
																																			run: (*parser).callonListElementContinuationElement363,
																																			expr: &choiceExpr{
																																				pos: position{line: 2870, col: 13, offset: 95023},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 13, offset: 95023},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 20, offset: 95030},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 29, offset: 95039},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2874, col: 8, offset: 95112},
																																			expr: &anyMatcher{
																																				line: 2874, col: 9, offset: 95113,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 510, col: 26, offset: 16667},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 510, col: 26, offset: 16667},
																																	val:        "====",
																																	ignoreCase: false,
																																	want:       "\"====\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 510, col: 33, offset: 16674},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonListElementContinuationElement373,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2877, col: 8, offset: 95162},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2870, col: 12, offset: 95022},
																																			run: (*parser).callonListElementContinuationElement376,
																																			expr: &choiceExpr{
																																				pos: position{line: 2870, col: 13, offset: 95023},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 13, offset: 95023},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 20, offset: 95030},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 29, offset: 95039},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2874, col: 8, offset: 95112},
																																			expr: &anyMatcher{
																																				line: 2874, col: 9, offset: 95113,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 512, col: 25, offset: 16710},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 512, col: 25, offset: 16710},
																																	val:        "```",
																																	ignoreCase: false,
																																	want:       "\"```\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 512, col: 31, offset: 16716},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonListElementContinuationElement386,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2877, col: 8, offset: 95162},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2870, col: 12, offset: 95022},
																																			run: (*parser).callonListElementContinuationElement389,
																																			expr: &choiceExpr{
																																				pos: position{line: 2870, col: 13, offset: 95023},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 13, offset: 95023},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 20, offset: 95030},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 29, offset: 95039},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2874, col: 8, offset: 95112},
																																			expr: &anyMatcher{
																																				line: 2874, col: 9, offset: 95113,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 514, col: 26, offset: 16753},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 514, col: 26, offset: 16753},
																																	val:        "----",
																																	ignoreCase: false,
																																	want:       "\"----\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 514, col: 33, offset: 16760},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonListElementContinuationElement399,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2877, col: 8, offset: 95162},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2870, col: 12, offset: 95022},
																																			run: (*parser).callonListElementContinuationElement402,
																																			expr: &choiceExpr{
																																				pos: position{line: 2870, col: 13, offset: 95023},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 13, offset: 95023},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 20, offset: 95030},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 29, offset: 95039},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2874, col: 8, offset: 95112},
																																			expr: &anyMatcher{
																																				line: 2874, col: 9, offset: 95113,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 516, col: 26, offset: 16797},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 516, col: 26, offset: 16797},
																																	val:        "....",
																																	ignoreCase: false,
																																	want:       "\"....\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 516, col: 33, offset: 16804},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonListElementContinuationElement412,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2877, col: 8, offset: 95162},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2870, col: 12, offset: 95022},
																																			run: (*parser).callonListElementContinuationElement415,
																																			expr: &choiceExpr{
																																				pos: position{line: 2870, col: 13, offset: 95023},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 13, offset: 95023},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 20, offset: 95030},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 29, offset: 95039},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2874, col: 8, offset: 95112},
																																			expr: &anyMatcher{
																																				line: 2874, col: 9, offset: 95113,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 518, col: 30, offset: 16845},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 518, col: 30, offset: 16845},
																																	val:        "++++",
																																	ignoreCase: false,
																																	want:       "\"++++\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 518, col: 37, offset: 16852},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonListElementContinuationElement425,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2877, col: 8, offset: 95162},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2870, col: 12, offset: 95022},
																																			run: (*parser).callonListElementContinuationElement428,
																																			expr: &choiceExpr{
																																				pos: position{line: 2870, col: 13, offset: 95023},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 13, offset: 95023},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 20, offset: 95030},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 29, offset: 95039},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2874, col: 8, offset: 95112},
																																			expr: &anyMatcher{
																																				line: 2874, col: 9, offset: 95113,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 520, col: 24, offset: 16887},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 520, col: 24, offset: 16887},
																																	val:        "____",
																																	ignoreCase: false,
																																	want:       "\"____\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 520, col: 31, offset: 16894},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonListElementContinuationElement438,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2877, col: 8, offset: 95162},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2870, col: 12, offset: 95022},
																																			run: (*parser).callonListElementContinuationElement441,
																																			expr: &choiceExpr{
																																				pos: position{line: 2870, col: 13, offset: 95023},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 13, offset: 95023},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 20, offset: 95030},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 29, offset: 95039},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2874, col: 8, offset: 95112},
																																			expr: &anyMatcher{
																																				line: 2874, col: 9, offset: 95113,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 522, col: 26, offset: 16931},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 522, col: 26, offset: 16931},
																																	val:        "****",
																																	ignoreCase: false,
																																	want:       "\"****\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 522, col: 33, offset: 16938},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonListElementContinuationElement451,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2877, col: 8, offset: 95162},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2870, col: 12, offset: 95022},
																																			run: (*parser).callonListElementContinuationElement454,
																																			expr: &choiceExpr{
																																				pos: position{line: 2870, col: 13, offset: 95023},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 13, offset: 95023},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 20, offset: 95030},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 29, offset: 95039},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2874, col: 8, offset: 95112},
																																			expr: &anyMatcher{
																																				line: 2874, col: 9, offset: 95113,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1289, col: 5, offset: 43295},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 1289, col: 14, offset: 43304},
																									run: (*parser).callonListElementContinuationElement462,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1289, col: 14, offset: 43304},
																										expr: &charClassMatcher{
																											pos:        position{line: 1289, col: 14, offset: 43304},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2877, col: 8, offset: 95162},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2870, col: 12, offset: 95022},
																										run: (*parser).callonListElementContinuationElement466,
																										expr: &choiceExpr{
																											pos: position{line: 2870, col: 13, offset: 95023},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2870, col: 13, offset: 95023},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 20, offset: 95030},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 29, offset: 95039},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2874, col: 8, offset: 95112},
																										expr: &anyMatcher{
																											line: 2874, col: 9, offset: 95113,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1492, col: 9, offset: 49879},
																run: (*parser).callonListElementContinuationElement473,
																expr: &seqExpr{
																	pos: position{line: 1492, col: 9, offset: 49879},
																	exprs: []interface{}{
																		&actionExpr{
																			pos: position{line: 2865, col: 11, offset: 94908},
																			run: (*parser).callonListElementContinuationElement475,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2865, col: 11, offset: 94908},
																				expr: &charClassMatcher{
																					pos:        position{line: 2865, col: 12, offset: 94909},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1493, col: 9, offset: 49931},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1493, col: 18, offset: 49940},
																				run: (*parser).callonListElementContinuationElement479,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1493, col: 18, offset: 49940},
																					expr: &charClassMatcher{
																						pos:        position{line: 1493, col: 18, offset: 49940},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2877, col: 8, offset: 95162},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2870, col: 12, offset: 95022},
																					run: (*parser).callonListElementContinuationElement483,
																					expr: &choiceExpr{
																						pos: position{line: 2870, col: 13, offset: 95023},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2870, col: 13, offset: 95023},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 20, offset: 95030},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 29, offset: 95039},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2874, col: 8, offset: 95112},
																					expr: &anyMatcher{
																						line: 2874, col: 9, offset: 95113,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1320, col: 5, offset: 44141},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1320, col: 16, offset: 44152},
								expr: &ruleRefExpr{
									pos:  position{line: 1320, col: 17, offset: 44153},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1321, col: 5, offset: 44175},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1322, col: 9, offset: 44193},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 449, col: 14, offset: 14731},
										run: (*parser).callonListElementContinuationElement495,
										expr: &seqExpr{
											pos: position{line: 449, col: 14, offset: 14731},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 449, col: 14, offset: 14731},
													expr: &notExpr{
														pos: position{line: 2874, col: 8, offset: 95112},
														expr: &anyMatcher{
															line: 2874, col: 9, offset: 95113,
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 449, col: 19, offset: 14736},
													expr: &actionExpr{
														pos: position{line: 2860, col: 10, offset: 94799},
														run: (*parser).callonListElementContinuationElement501,
														expr: &charClassMatcher{
															pos:        position{line: 2860, col: 11, offset: 94800},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonListElementContinuationElement504,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 110, col: 5, offset: 3111},
										run: (*parser).callonListElementContinuationElement511,
										expr: &seqExpr{
											pos: position{line: 110, col: 5, offset: 3111},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 110, col: 5, offset: 3111},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 110, col: 9, offset: 3115},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 120, col: 18, offset: 3502},
														run: (*parser).callonListElementContinuationElement515,
														expr: &seqExpr{
															pos: position{line: 120, col: 18, offset: 3502},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 120, col: 18, offset: 3502},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 120, col: 28, offset: 3512},
																	expr: &charClassMatcher{
																		pos:        position{line: 120, col: 29, offset: 3513},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 110, col: 30, offset: 3136},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 111, col: 5, offset: 3145},
													label: "value",
													expr: &zeroOrOneExpr{
														pos: position{line: 111, col: 11, offset: 3151},
														expr: &actionExpr{
															pos: position{line: 125, col: 5, offset: 3603},
															run: (*parser).callonListElementContinuationElement523,
															expr: &seqExpr{
																pos: position{line: 125, col: 5, offset: 3603},
																exprs: []interface{}{
																	&actionExpr{
																		pos: position{line: 2865, col: 11, offset: 94908},
																		run: (*parser).callonListElementContinuationElement525,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2865, col: 11, offset: 94908},
																			expr: &charClassMatcher{
																				pos:        position{line: 2865, col: 12, offset: 94909},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 125, col: 12, offset: 3610},
																		label: "elements",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 125, col: 21, offset: 3619},
																			expr: &actionExpr{
																				pos: position{line: 129, col: 37, offset: 3778},
																				run: (*parser).callonListElementContinuationElement530,
																				expr: &seqExpr{
																					pos: position{line: 129, col: 37, offset: 3778},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 129, col: 37, offset: 3778},
																							expr: &choiceExpr{
																								pos: position{line: 2877, col: 8, offset: 95162},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2870, col: 12, offset: 95022},
																										run: (*parser).callonListElementContinuationElement534,
																										expr: &choiceExpr{
																											pos: position{line: 2870, col: 13, offset: 95023},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2870, col: 13, offset: 95023},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 20, offset: 95030},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 29, offset: 95039},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2874, col: 8, offset: 95112},
																										expr: &anyMatcher{
																											line: 2874, col: 9, offset: 95113,
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 130, col: 5, offset: 3788},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 131, col: 9, offset: 3806},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 131, col: 10, offset: 3807},
																										run: (*parser).callonListElementContinuationElement543,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 131, col: 10, offset: 3807},
																											expr: &charClassMatcher{
																												pos:        position{line: 131, col: 10, offset: 3807},
																												val:        "[^\\r\\n{]",
																												chars:      []rune{'\r', '\n', '{'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 416, col: 5, offset: 13530},
																										run: (*parser).callonListElementContinuationElement546,
																										expr: &seqExpr{
																											pos: position{line: 416, col: 5, offset: 13530},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 416, col: 5, offset: 13530},
																													run: (*parser).callonListElementContinuationElement548,
																												},
																												&labeledExpr{
																													pos:   position{line: 419, col: 5, offset: 13594},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 419, col: 14, offset: 13603},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 430, col: 25, offset: 14065},
																																run: (*parser).callonListElementContinuationElement551,
																																expr: &seqExpr{
																																	pos: position{line: 430, col: 25, offset: 14065},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 430, col: 25, offset: 14065},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 430, col: 37, offset: 14077},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonListElementContinuationElement555,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 430, col: 56, offset: 14096},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 430, col: 62, offset: 14102},
																																				expr: &actionExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					run: (*parser).callonListElementContinuationElement562,
																																					expr: &seqExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 438, col: 17, offset: 14365},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 438, col: 21, offset: 14369},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 438, col: 28, offset: 14376},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 438, col: 28, offset: 14376},
																																											run: (*parser).callonListElementContinuationElement567,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 438, col: 28, offset: 14376},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											run: (*parser).callonListElementContinuationElement569,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 440, col: 9, offset: 14430},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 430, col: 78, offset: 14118},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 434, col: 25, offset: 14220},
																																run: (*parser).callonListElementContinuationElement573,
																																expr: &seqExpr{
																																	pos: position{line: 434, col: 25, offset: 14220},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 434, col: 25, offset: 14220},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 434, col: 38, offset: 14233},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonListElementContinuationElement577,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 434, col: 57, offset: 14252},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 434, col: 63, offset: 14258},
																																				expr: &actionExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					run: (*parser).callonListElementContinuationElement584,
																																					expr: &seqExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 438, col: 17, offset: 14365},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 438, col: 21, offset: 14369},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 438, col: 28, offset: 14376},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 438, col: 28, offset: 14376},
																																											run: (*parser).callonListElementContinuationElement589,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 438, col: 28, offset: 14376},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											run: (*parser).callonListElementContinuationElement591,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 440, col: 9, offset: 14430},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 434, col: 79, offset: 14274},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 423, col: 31, offset: 13720},
																																run: (*parser).callonListElementContinuationElement595,
																																expr: &seqExpr{
																																	pos: position{line: 423, col: 31, offset: 13720},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 423, col: 31, offset: 13720},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 423, col: 35, offset: 13724},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonListElementContinuationElement599,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 423, col: 54, offset: 13743},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 135, col: 12, offset: 3935},
																										run: (*parser).callonListElementContinuationElement605,
																										expr: &litMatcher{
																											pos:        position{line: 135, col: 12, offset: 3935},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonListElementContinuationElement608,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 142, col: 19, offset: 4090},
										run: (*parser).callonListElementContinuationElement615,
										expr: &seqExpr{
											pos: position{line: 142, col: 19, offset: 4090},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 142, col: 19, offset: 4090},
													val:        ":!",
													ignoreCase: false,
													want:       "\":!\"",
												},
												&labeledExpr{
													pos:   position{line: 142, col: 24, offset: 4095},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 120, col: 18, offset: 3502},
														run: (*parser).callonListElementContinuationElement619,
														expr: &seqExpr{
															pos: position{line: 120, col: 18, offset: 3502},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 120, col: 18, offset: 3502},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 120, col: 28, offset: 3512},
																	expr: &charClassMatcher{
																		pos:        position{line: 120, col: 29, offset: 3513},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 142, col: 45, offset: 4116},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 142, col: 49, offset: 4120},
													expr: &actionExpr{
														pos: position{line: 2860, col: 10, offset: 94799},
														run: (*parser).callonListElementContinuationElement626,
														expr: &charClassMatcher{
															pos:        position{line: 2860, col: 11, offset: 94800},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonListElementContinuationElement629,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 144, col: 5, offset: 4187},
										run: (*parser).callonListElementContinuationElement636,
										expr: &seqExpr{
											pos: position{line: 144, col: 5, offset: 4187},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 144, col: 5, offset: 4187},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 144, col: 9, offset: 4191},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 120, col: 18, offset: 3502},
														run: (*parser).callonListElementContinuationElement640,
														expr: &seqExpr{
															pos: position{line: 120, col: 18, offset: 3502},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 120, col: 18, offset: 3502},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 120, col: 28, offset: 3512},
																	expr: &charClassMatcher{
																		pos:        position{line: 120, col: 29, offset: 3513},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 144, col: 30, offset: 4212},
													val:        "!:",
													ignoreCase: false,
													want:       "\"!:\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 144, col: 35, offset: 4217},
													expr: &actionExpr{
														pos: position{line: 2860, col: 10, offset: 94799},
														run: (*parser).callonListElementContinuationElement647,
														expr: &charClassMatcher{
															pos:        position{line: 2860, col: 11, offset: 94800},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonListElementContinuationElement650,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1325, col: 11, offset: 44269},
										name: "DelimitedBlock",
									},
									&actionExpr{
										pos: position{line: 2744, col: 18, offset: 91063},
										run: (*parser).callonListElementContinuationElement658,
										expr: &seqExpr{
											pos: position{line: 2744, col: 18, offset: 91063},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 2744, col: 19, offset: 91064},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2744, col: 19, offset: 91064},
															val:        "***",
															ignoreCase: false,
															want:       "\"***\"",
														},
														&litMatcher{
															pos:        position{line: 2744, col: 27, offset: 91072},
															val:        "* * *",
															ignoreCase: false,
															want:       "\"* * *\"",
														},
														&litMatcher{
															pos:        position{line: 2744, col: 37, offset: 91082},
															val:        "---",
															ignoreCase: false,
															want:       "\"---\"",
														},
														&litMatcher{
															pos:        position{line: 2744, col: 45, offset: 91090},
															val:        "- - -",
															ignoreCase: false,
															want:       "\"- - -\"",
														},
														&litMatcher{
															pos:        position{line: 2744, col: 55, offset: 91100},
															val:        "___",
															ignoreCase: false,
															want:       "\"___\"",
														},
														&litMatcher{
															pos:        position{line: 2744, col: 63, offset: 91108},
															val:        "_ _ _",
															ignoreCase: false,
															want:       "\"_ _ _\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2874, col: 8, offset: 95112},
													expr: &anyMatcher{
														line: 2874, col: 9, offset: 95113,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1327, col: 11, offset: 44355},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1328, col: 11, offset: 44376},
										name: "FileInclusion",
									},
									&actionExpr{
										pos: position{line: 2643, col: 5, offset: 88195},
										run: (*parser).callonListElementContinuationElement671,
										expr: &seqExpr{
											pos: position{line: 2643, col: 5, offset: 88195},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2650, col: 19, offset: 88371},
													val:        "|===",
													ignoreCase: false,
													want:       "\"|===\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2650, col: 26, offset: 88378},
													expr: &actionExpr{
														pos: position{line: 2860, col: 10, offset: 94799},
														run: (*parser).callonListElementContinuationElement675,
														expr: &charClassMatcher{
															pos:        position{line: 2860, col: 11, offset: 94800},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonListElementContinuationElement678,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2644, col: 5, offset: 88219},
													label: "header",
													expr: &zeroOrOneExpr{
														pos: position{line: 2644, col: 12, offset: 88226},
														expr: &actionExpr{
															pos: position{line: 2658, col: 5, offset: 88538},
															run: (*parser).callonListElementContinuationElement687,
															expr: &seqExpr{
																pos: position{line: 2658, col: 5, offset: 88538},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 2658, col: 5, offset: 88538},
																		label: "cells",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2658, col: 11, offset: 88544},
																			expr: &actionExpr{
																				pos: position{line: 2664, col: 5, offset: 88661},
																				run: (*parser).callonListElementContinuationElement691,
																				expr: &seqExpr{
																					pos: position{line: 2664, col: 5, offset: 88661},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2664, col: 5, offset: 88661},
																							val:        "|",
																							ignoreCase: false,
																							want:       "\"|\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 2664, col: 9, offset: 88665},
																							expr: &actionExpr{
																								pos: position{line: 2860, col: 10, offset: 94799},
																								run: (*parser).callonListElementContinuationElement695,
																								expr: &charClassMatcher{
																									pos:        position{line: 2860, col: 11, offset: 94800},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 2665, col: 5, offset: 88677},
																							label: "content",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 2665, col: 14, offset: 88686},
																								expr: &actionExpr{
																									pos: position{line: 2697, col: 5, offset: 89474},
																									run: (*parser).callonListElementContinuationElement699,
																									expr: &labeledExpr{
																										pos:   position{line: 2697, col: 5, offset: 89474},
																										label: "content",
																										expr: &actionExpr{
																											pos: position{line: 2697, col: 14, offset: 89483},
																											run: (*parser).callonListElementContinuationElement701,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2697, col: 14, offset: 89483},
																												expr: &charClassMatcher{
																													pos:        position{line: 2697, col: 14, offset: 89483},
																													val:        "[^\\r\\n|]",
																													chars:      []rune{'\r', '\n', '|'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2877, col: 8, offset: 95162},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2870, col: 12, offset: 95022},
																				run: (*parser).callonListElementContinuationElement705,
																				expr: &choiceExpr{
																					pos: position{line: 2870, col: 13, offset: 95023},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2870, col: 13, offset: 95023},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2870, col: 20, offset: 95030},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2870, col: 29, offset: 95039},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2874, col: 8, offset: 95112},
																				expr: &anyMatcher{
																					line: 2874, col: 9, offset: 95113,
																				},
																			},
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 2659, col: 5, offset: 88566},
																		expr: &actionExpr{
																			pos: position{line: 449, col: 14, offset: 14731},
																			run: (*parser).callonListElementContinuationElement713,
																			expr: &seqExpr{
																				pos: position{line: 449, col: 14, offset: 14731},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 449, col: 14, offset: 14731},
																						expr: &notExpr{
																							pos: position{line: 2874, col: 8, offset: 95112},
																							expr: &anyMatcher{
																								line: 2874, col: 9, offset: 95113,
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 449, col: 19, offset: 14736},
																						expr: &actionExpr{
																							pos: position{line: 2860, col: 10, offset: 94799},
																							run: (*parser).callonListElementContinuationElement719,
																							expr: &charClassMatcher{
																								pos:        position{line: 2860, col: 11, offset: 94800},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2877, col: 8, offset: 95162},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2870, col: 12, offset: 95022},
																								run: (*parser).callonListElementContinuationElement722,
																								expr: &choiceExpr{
																									pos: position{line: 2870, col: 13, offset: 95023},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2870, col: 13, offset: 95023},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2870, col: 20, offset: 95030},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2870, col: 29, offset: 95039},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2874, col: 8, offset: 95112},
																								expr: &anyMatcher{
																									line: 2874, col: 9, offset: 95113,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2645, col: 5, offset: 88245},
													label: "rows",
													expr: &zeroOrMoreExpr{
														pos: position{line: 2645, col: 10, offset: 88250},
														expr: &choiceExpr{
															pos: position{line: 2669, col: 13, offset: 88783},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2679, col: 5, offset: 89002},
																	run: (*parser).callonListElementContinuationElement732,
																	expr: &seqExpr{
																		pos: position{line: 2679, col: 5, offset: 89002},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2679, col: 5, offset: 89002},
																				expr: &choiceExpr{
																					pos: position{line: 2654, col: 22, offset: 88451},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2650, col: 19, offset: 88371},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2650, col: 19, offset: 88371},
																									val:        "|===",
																									ignoreCase: false,
																									want:       "\"|===\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2650, col: 26, offset: 88378},
																									expr: &actionExpr{
																										pos: position{line: 2860, col: 10, offset: 94799},
																										run: (*parser).callonListElementContinuationElement739,
																										expr: &charClassMatcher{
																											pos:        position{line: 2860, col: 11, offset: 94800},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2877, col: 8, offset: 95162},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2870, col: 12, offset: 95022},
																											run: (*parser).callonListElementContinuationElement742,
																											expr: &choiceExpr{
																												pos: position{line: 2870, col: 13, offset: 95023},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2870, col: 13, offset: 95023},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2870, col: 20, offset: 95030},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2870, col: 29, offset: 95039},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2874, col: 8, offset: 95112},
																											expr: &anyMatcher{
																												line: 2874, col: 9, offset: 95113,
																											},
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2874, col: 8, offset: 95112},
																							expr: &anyMatcher{
																								line: 2874, col: 9, offset: 95113,
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2680, col: 5, offset: 89025},
																				label: "cells",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2680, col: 11, offset: 89031},
																					expr: &actionExpr{
																						pos: position{line: 2680, col: 12, offset: 89032},
																						run: (*parser).callonListElementContinuationElement753,
																						expr: &seqExpr{
																							pos: position{line: 2680, col: 12, offset: 89032},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 2680, col: 12, offset: 89032},
																									label: "cell",
																									expr: &actionExpr{
																										pos: position{line: 2689, col: 5, offset: 89273},
																										run: (*parser).callonListElementContinuationElement756,
																										expr: &seqExpr{
																											pos: position{line: 2689, col: 5, offset: 89273},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 2689, col: 5, offset: 89273},
																													expr: &choiceExpr{
																														pos: position{line: 2654, col: 22, offset: 88451},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 2650, col: 19, offset: 88371},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2650, col: 19, offset: 88371},
																																		val:        "|===",
																																		ignoreCase: false,
																																		want:       "\"|===\"",
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 2650, col: 26, offset: 88378},
																																		expr: &actionExpr{
																																			pos: position{line: 2860, col: 10, offset: 94799},
																																			run: (*parser).callonListElementContinuationElement763,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2860, col: 11, offset: 94800},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 2877, col: 8, offset: 95162},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 2870, col: 12, offset: 95022},
																																				run: (*parser).callonListElementContinuationElement766,
																																				expr: &choiceExpr{
																																					pos: position{line: 2870, col: 13, offset: 95023},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 2870, col: 13, offset: 95023},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2870, col: 20, offset: 95030},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2870, col: 29, offset: 95039},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2874, col: 8, offset: 95112},
																																				expr: &anyMatcher{
																																					line: 2874, col: 9, offset: 95113,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2874, col: 8, offset: 95112},
																																expr: &anyMatcher{
																																	line: 2874, col: 9, offset: 95113,
																																},
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2690, col: 5, offset: 89296},
																													expr: &actionExpr{
																														pos: position{line: 449, col: 14, offset: 14731},
																														run: (*parser).callonListElementContinuationElement776,
																														expr: &seqExpr{
																															pos: position{line: 449, col: 14, offset: 14731},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 449, col: 14, offset: 14731},
																																	expr: &notExpr{
																																		pos: position{line: 2874, col: 8, offset: 95112},
																																		expr: &anyMatcher{
																																			line: 2874, col: 9, offset: 95113,
																																		},
																																	},
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 449, col: 19, offset: 14736},
																																	expr: &actionExpr{
																																		pos: position{line: 2860, col: 10, offset: 94799},
																																		run: (*parser).callonListElementContinuationElement782,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2860, col: 11, offset: 94800},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2877, col: 8, offset: 95162},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2870, col: 12, offset: 95022},
																																			run: (*parser).callonListElementContinuationElement785,
																																			expr: &choiceExpr{
																																				pos: position{line: 2870, col: 13, offset: 95023},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 13, offset: 95023},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 20, offset: 95030},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2870, col: 29, offset: 95039},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2874, col: 8, offset: 95112},
																																			expr: &anyMatcher{
																																				line: 2874, col: 9, offset: 95113,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 2691, col: 5, offset: 89311},
																													val:        "|",
																													ignoreCase: false,
																													want:       "\"|\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 2691, col: 9, offset: 89315},
																													expr: &actionExpr{
																														pos: position{line: 2860, col: 10, offset: 94799},
																														run: (*parser).callonListElementContinuationElement794,
																														expr: &charClassMatcher{
																															pos:        position{line: 2860, col: 11, offset: 94800},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 2691, col: 16, offset: 89322},
																													label: "content",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 2691, col: 25, offset: 89331},
																														expr: &actionExpr{
																															pos: position{line: 2697, col: 5, offset: 89474},
																															run: (*parser).callonListElementContinuationElement798,
																															expr: &labeledExpr{
																																pos:   position{line: 2697, col: 5, offset: 89474},
																																label: "content",
																																expr: &actionExpr{
																																	pos: position{line: 2697, col: 14, offset: 89483},
																																	run: (*parser).callonListElementContinuationElement800,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2697, col: 14, offset: 89483},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2697, col: 14, offset: 89483},
																																			val:        "[^\\r\\n|]",
																																			chars:      []rune{'\r', '\n', '|'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2877, col: 8, offset: 95162},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2870, col: 12, offset: 95022},
																											run: (*parser).callonListElementContinuationElement804,
																											expr: &choiceExpr{
																												pos: position{line: 2870, col: 13, offset: 95023},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2870, col: 13, offset: 95023},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2870, col: 20, offset: 95030},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2870, col: 29, offset: 95039},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2874, col: 8, offset: 95112},
																											expr: &anyMatcher{
																												line: 2874, col: 9, offset: 95113,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2683, col: 6, offset: 89094},
																				alternatives: []interface{}{
																					&oneOrMoreExpr{
																						pos: position{line: 2683, col: 6, offset: 89094},
																						expr: &actionExpr{
																							pos: position{line: 449, col: 14, offset: 14731},
																							run: (*parser).callonListElementContinuationElement813,
																							expr: &seqExpr{
																								pos: position{line: 449, col: 14, offset: 14731},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 449, col: 14, offset: 14731},
																										expr: &notExpr{
																											pos: position{line: 2874, col: 8, offset: 95112},
																											expr: &anyMatcher{
																												line: 2874, col: 9, offset: 95113,
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 449, col: 19, offset: 14736},
																										expr: &actionExpr{
																											pos: position{line: 2860, col: 10, offset: 94799},
																											run: (*parser).callonListElementContinuationElement819,
																											expr: &charClassMatcher{
																												pos:        position{line: 2860, col: 11, offset: 94800},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2877, col: 8, offset: 95162},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2870, col: 12, offset: 95022},
																												run: (*parser).callonListElementContinuationElement822,
																												expr: &choiceExpr{
																													pos: position{line: 2870, col: 13, offset: 95023},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2870, col: 13, offset: 95023},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2870, col: 20, offset: 95030},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2870, col: 29, offset: 95039},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2874, col: 8, offset: 95112},
																												expr: &anyMatcher{
																													line: 2874, col: 9, offset: 95113,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&andExpr{
																						pos: position{line: 2683, col: 19, offset: 89107},
																						expr: &choiceExpr{
																							pos: position{line: 2654, col: 22, offset: 88451},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 2650, col: 19, offset: 88371},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2650, col: 19, offset: 88371},
																											val:        "|===",
																											ignoreCase: false,
																											want:       "\"|===\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 2650, col: 26, offset: 88378},
																											expr: &actionExpr{
																												pos: position{line: 2860, col: 10, offset: 94799},
																												run: (*parser).callonListElementContinuationElement834,
																												expr: &charClassMatcher{
																													pos:        position{line: 2860, col: 11, offset: 94800},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2877, col: 8, offset: 95162},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2870, col: 12, offset: 95022},
																													run: (*parser).callonListElementContinuationElement837,
																													expr: &choiceExpr{
																														pos: position{line: 2870, col: 13, offset: 95023},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2870, col: 13, offset: 95023},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2870, col: 20, offset: 95030},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2870, col: 29, offset: 95039},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2874, col: 8, offset: 95112},
																													expr: &anyMatcher{
																														line: 2874, col: 9, offset: 95113,
																													},
																												},
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2874, col: 8, offset: 95112},
																									expr: &anyMatcher{
																										line: 2874, col: 9, offset: 95113,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2672, col: 5, offset: 88850},
																	run: (*parser).callonListElementContinuationElement846,
																	expr: &seqExpr{
																		pos: position{line: 2672, col: 5, offset: 88850},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2672, col: 5, offset: 88850},
																				expr: &choiceExpr{
																					pos: position{line: 2654, col: 22, offset: 88451},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2650, col: 19, offset: 88371},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2650, col: 19, offset: 88371},
																									val:        "|===",
																									ignoreCase: false,
																									want:       "\"|===\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2650, col: 26, offset: 88378},
																									expr: &actionExpr{
																										pos: position{line: 2860, col: 10, offset: 94799},
																										run: (*parser).callonListElementContinuationElement853,
																										expr: &charClassMatcher{
																											pos:        position{line: 2860, col: 11, offset: 94800},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2877, col: 8, offset: 95162},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2870, col: 12, offset: 95022},
																											run: (*parser).callonListElementContinuationElement856,
																											expr: &choiceExpr{
																												pos: position{line: 2870, col: 13, offset: 95023},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2870, col: 13, offset: 95023},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2870, col: 20, offset: 95030},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2870, col: 29, offset: 95039},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2874, col: 8, offset: 95112},
																											expr: &anyMatcher{
																												line: 2874, col: 9, offset: 95113,
																											},
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2874, col: 8, offset: 95112},
																							expr: &anyMatcher{
																								line: 2874, col: 9, offset: 95113,
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2673, col: 5, offset: 88873},
																				label: "cells",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2673, col: 11, offset: 88879},
																					expr: &actionExpr{
																						pos: position{line: 2689, col: 5, offset: 89273},
																						run: (*parser).callonListElementContinuationElement867,
																						expr: &seqExpr{
																							pos: position{line: 2689, col: 5, offset: 89273},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 2689, col: 5, offset: 89273},
																									expr: &choiceExpr{
																										pos: position{line: 2654, col: 22, offset: 88451},
																										alternatives: []interface{}{
																											&seqExpr{
																												pos: position{line: 2650, col: 19, offset: 88371},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2650, col: 19, offset: 88371},
																														val:        "|===",
																														ignoreCase: false,
																														want:       "\"|===\"",
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 2650, col: 26, offset: 88378},
																														expr: &actionExpr{
																															pos: position{line: 2860, col: 10, offset: 94799},
																															run: (*parser).callonListElementContinuationElement874,
																															expr: &charClassMatcher{
																																pos:        position{line: 2860, col: 11, offset: 94800},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 2877, col: 8, offset: 95162},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 2870, col: 12, offset: 95022},
																																run: (*parser).callonListElementContinuationElement877,
																																expr: &choiceExpr{
																																	pos: position{line: 2870, col: 13, offset: 95023},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2870, col: 13, offset: 95023},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2870, col: 20, offset: 95030},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2870, col: 29, offset: 95039},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2874, col: 8, offset: 95112},
																																expr: &anyMatcher{
																																	line: 2874, col: 9, offset: 95113,
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2874, col: 8, offset: 95112},
																												expr: &anyMatcher{
																													line: 2874, col: 9, offset: 95113,
																												},
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2690, col: 5, offset: 89296},
																									expr: &actionExpr{
																										pos: position{line: 449, col: 14, offset: 14731},
																										run: (*parser).callonListElementContinuationElement887,
																										expr: &seqExpr{
																											pos: position{line: 449, col: 14, offset: 14731},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 449, col: 14, offset: 14731},
																													expr: &notExpr{
																														pos: position{line: 2874, col: 8, offset: 95112},
																														expr: &anyMatcher{
																															line: 2874, col: 9, offset: 95113,
																														},
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 449, col: 19, offset: 14736},
																													expr: &actionExpr{
																														pos: position{line: 2860, col: 10, offset: 94799},
																														run: (*parser).callonListElementContinuationElement893,
																														expr: &charClassMatcher{
																															pos:        position{line: 2860, col: 11, offset: 94800},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2877, col: 8, offset: 95162},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 2870, col: 12, offset: 95022},
																															run: (*parser).callonListElementContinuationElement896,
																															expr: &choiceExpr{
																																pos: position{line: 2870, col: 13, offset: 95023},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2870, col: 13, offset: 95023},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2870, col: 20, offset: 95030},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2870, col: 29, offset: 95039},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 2874, col: 8, offset: 95112},
																															expr: &anyMatcher{
																																line: 2874, col: 9, offset: 95113,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2691, col: 5, offset: 89311},
																									val:        "|",
																									ignoreCase: false,
																									want:       "\"|\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2691, col: 9, offset: 89315},
																									expr: &actionExpr{
																										pos: position{line: 2860, col: 10, offset: 94799},
																										run: (*parser).callonListElementContinuationElement905,
																										expr: &charClassMatcher{
																											pos:        position{line: 2860, col: 11, offset: 94800},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 2691, col: 16, offset: 89322},
																									label: "content",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 2691, col: 25, offset: 89331},
																										expr: &actionExpr{
																											pos: position{line: 2697, col: 5, offset: 89474},
																											run: (*parser).callonListElementContinuationElement909,
																											expr: &labeledExpr{
																												pos:   position{line: 2697, col: 5, offset: 89474},
																												label: "content",
																												expr: &actionExpr{
																													pos: position{line: 2697, col: 14, offset: 89483},
																													run: (*parser).callonListElementContinuationElement911,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 2697, col: 14, offset: 89483},
																														expr: &charClassMatcher{
																															pos:        position{line: 2697, col: 14, offset: 89483},
																															val:        "[^\\r\\n|]",
																															chars:      []rune{'\r', '\n', '|'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2877, col: 8, offset: 95162},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2870, col: 12, offset: 95022},
																						run: (*parser).callonListElementContinuationElement915,
																						expr: &choiceExpr{
																							pos: position{line: 2870, col: 13, offset: 95023},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2870, col: 13, offset: 95023},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2870, col: 20, offset: 95030},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2870, col: 29, offset: 95039},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2874, col: 8, offset: 95112},
																						expr: &anyMatcher{
																							line: 2874, col: 9, offset: 95113,
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2674, col: 5, offset: 88900},
																				expr: &actionExpr{
																					pos: position{line: 449, col: 14, offset: 14731},
																					run: (*parser).callonListElementContinuationElement923,
																					expr: &seqExpr{
																						pos: position{line: 449, col: 14, offset: 14731},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 449, col: 14, offset: 14731},
																								expr: &notExpr{
																									pos: position{line: 2874, col: 8, offset: 95112},
																									expr: &anyMatcher{
																										line: 2874, col: 9, offset: 95113,
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 449, col: 19, offset: 14736},
																								expr: &actionExpr{
																									pos: position{line: 2860, col: 10, offset: 94799},
																									run: (*parser).callonListElementContinuationElement929,
																									expr: &charClassMatcher{
																										pos:        position{line: 2860, col: 11, offset: 94800},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2877, col: 8, offset: 95162},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2870, col: 12, offset: 95022},
																										run: (*parser).callonListElementContinuationElement932,
																										expr: &choiceExpr{
																											pos: position{line: 2870, col: 13, offset: 95023},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2870, col: 13, offset: 95023},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 20, offset: 95030},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 29, offset: 95039},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2874, col: 8, offset: 95112},
																										expr: &anyMatcher{
																											line: 2874, col: 9, offset: 95113,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2654, col: 22, offset: 88451},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 2650, col: 19, offset: 88371},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2650, col: 19, offset: 88371},
																	val:        "|===",
																	ignoreCase: false,
																	want:       "\"|===\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2650, col: 26, offset: 88378},
																	expr: &actionExpr{
																		pos: position{line: 2860, col: 10, offset: 94799},
																		run: (*parser).callonListElementContinuationElement943,
																		expr: &charClassMatcher{
																			pos:        position{line: 2860, col: 11, offset: 94800},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2877, col: 8, offset: 95162},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonListElementContinuationElement946,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2593, col: 22, offset: 86639},
										run: (*parser).callonListElementContinuationElement955,
										expr: &seqExpr{
											pos: position{line: 2593, col: 22, offset: 86639},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2598, col: 31, offset: 86860},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2598, col: 36, offset: 86865},
													expr: &litMatcher{
														pos:        position{line: 2598, col: 37, offset: 86866},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2593, col: 49, offset: 86666},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2600, col: 29, offset: 86901},
														run: (*parser).callonListElementContinuationElement961,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2600, col: 29, offset: 86901},
															expr: &charClassMatcher{
																pos:        position{line: 2600, col: 29, offset: 86901},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonListElementContinuationElement965,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1576, col: 5, offset: 52579},
										run: (*parser).callonListElementContinuationElement972,
										expr: &seqExpr{
											pos: position{line: 1576, col: 5, offset: 52579},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1576, col: 5, offset: 52579},
													label: "kind",
													expr: &choiceExpr{
														pos: position{line: 94, col: 19, offset: 2648},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 94, col: 19, offset: 2648},
																run: (*parser).callonListElementContinuationElement976,
																expr: &litMatcher{
																	pos:        position{line: 94, col: 19, offset: 2648},
																	val:        "TIP",
																	ignoreCase: false,
																	want:       "\"TIP\"",
																},
															},
															&actionExpr{
																pos: position{line: 96, col: 5, offset: 2686},
																run: (*parser).callonListElementContinuationElement978,
																expr: &litMatcher{
																	pos:        position{line: 96, col: 5, offset: 2686},
																	val:        "NOTE",
																	ignoreCase: false,
																	want:       "\"NOTE\"",
																},
															},
															&actionExpr{
																pos: position{line: 98, col: 5, offset: 2726},
																run: (*parser).callonListElementContinuationElement980,
																expr: &litMatcher{
																	pos:        position{line: 98, col: 5, offset: 2726},
																	val:        "IMPORTANT",
																	ignoreCase: false,
																	want:       "\"IMPORTANT\"",
																},
															},
															&actionExpr{
																pos: position{line: 100, col: 5, offset: 2776},
																run: (*parser).callonListElementContinuationElement982,
																expr: &litMatcher{
																	pos:        position{line: 100, col: 5, offset: 2776},
																	val:        "WARNING",
																	ignoreCase: false,
																	want:       "\"WARNING\"",
																},
															},
															&actionExpr{
																pos: position{line: 102, col: 5, offset: 2822},
																run: (*parser).callonListElementContinuationElement984,
																expr: &litMatcher{
																	pos:        position{line: 102, col: 5, offset: 2822},
																	val:        "CAUTION",
																	ignoreCase: false,
																	want:       "\"CAUTION\"",
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1576, col: 27, offset: 52601},
													val:        ": ",
													ignoreCase: false,
													want:       "\": \"",
												},
												&labeledExpr{
													pos:   position{line: 1577, col: 5, offset: 52611},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 1588, col: 5, offset: 52955},
														run: (*parser).callonListElementContinuationElement988,
														expr: &seqExpr{
															pos: position{line: 1588, col: 5, offset: 52955},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1588, col: 5, offset: 52955},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1588, col: 14, offset: 52964},
																		run: (*parser).callonListElementContinuationElement991,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1588, col: 14, offset: 52964},
																			expr: &charClassMatcher{
																				pos:        position{line: 1588, col: 14, offset: 52964},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1591, col: 5, offset: 53021},
																	run: (*parser).callonListElementContinuationElement994,
																},
																&choiceExpr{
																	pos: position{line: 2877, col: 8, offset: 95162},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonListElementContinuationElement996,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1578, col: 5, offset: 52645},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1578, col: 16, offset: 52656},
														expr: &actionExpr{
															pos: position{line: 1579, col: 9, offset: 52666},
															run: (*parser).callonListElementContinuationElement1005,
															expr: &seqExpr{
																pos: position{line: 1579, col: 9, offset: 52666},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1579, col: 9, offset: 52666},
																		expr: &seqExpr{
																			pos: position{line: 1315, col: 34, offset: 44000},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1315, col: 34, offset: 44000},
																					val:        "+",
																					ignoreCase: false,
																					want:       "\"+\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1315, col: 38, offset: 44004},
																					expr: &actionExpr{
																						pos: position{line: 2860, col: 10, offset: 94799},
																						run: (*parser).callonListElementContinuationElement1011,
																						expr: &charClassMatcher{
																							pos:        position{line: 2860, col: 11, offset: 94800},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2870, col: 12, offset: 95022},
																					run: (*parser).callonListElementContinuationElement1013,
																					expr: &choiceExpr{
																						pos: position{line: 2870, col: 13, offset: 95023},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2870, col: 13, offset: 95023},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 20, offset: 95030},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 29, offset: 95039},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1580, col: 9, offset: 52705},
																		label: "line",
																		expr: &choiceExpr{
																			pos: position{line: 1580, col: 15, offset: 52711},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2593, col: 22, offset: 86639},
																					run: (*parser).callonListElementContinuationElement1020,
																					expr: &seqExpr{
																						pos: position{line: 2593, col: 22, offset: 86639},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2598, col: 31, offset: 86860},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 2598, col: 36, offset: 86865},
																								expr: &litMatcher{
																									pos:        position{line: 2598, col: 37, offset: 86866},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2593, col: 49, offset: 86666},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 2600, col: 29, offset: 86901},
																									run: (*parser).callonListElementContinuationElement1026,
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 2600, col: 29, offset: 86901},
																										expr: &charClassMatcher{
																											pos:        position{line: 2600, col: 29, offset: 86901},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2877, col: 8, offset: 95162},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2870, col: 12, offset: 95022},
																										run: (*parser).callonListElementContinuationElement1030,
																										expr: &choiceExpr{
																											pos: position{line: 2870, col: 13, offset: 95023},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2870, col: 13, offset: 95023},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 20, offset: 95030},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 29, offset: 95039},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2874, col: 8, offset: 95112},
																										expr: &anyMatcher{
																											line: 2874, col: 9, offset: 95113,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1588, col: 5, offset: 52955},
																					run: (*parser).callonListElementContinuationElement1037,
																					expr: &seqExpr{
																						pos: position{line: 1588, col: 5, offset: 52955},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1588, col: 5, offset: 52955},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 1588, col: 14, offset: 52964},
																									run: (*parser).callonListElementContinuationElement1040,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1588, col: 14, offset: 52964},
																										expr: &charClassMatcher{
																											pos:        position{line: 1588, col: 14, offset: 52964},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1591, col: 5, offset: 53021},
																								run: (*parser).callonListElementContinuationElement1043,
																							},
																							&choiceExpr{
																								pos: position{line: 2877, col: 8, offset: 95162},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2870, col: 12, offset: 95022},
																										run: (*parser).callonListElementContinuationElement1045,
																										expr: &choiceExpr{
																											pos: position{line: 2870, col: 13, offset: 95023},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2870, col: 13, offset: 95023},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 20, offset: 95030},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2870, col: 29, offset: 95039},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2874, col: 8, offset: 95112},
																										expr: &anyMatcher{
																											line: 2874, col: 9, offset: 95113,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1599, col: 5, offset: 53185},
										run: (*parser).callonListElementContinuationElement1052,
										expr: &seqExpr{
											pos: position{line: 1599, col: 5, offset: 53185},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1599, col: 5, offset: 53185},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 1606, col: 5, offset: 53470},
														run: (*parser).callonListElementContinuationElement1055,
														expr: &seqExpr{
															pos: position{line: 1606, col: 5, offset: 53470},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1606, col: 5, offset: 53470},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1606, col: 14, offset: 53479},
																		run: (*parser).callonListElementContinuationElement1058,
																		expr: &seqExpr{
																			pos: position{line: 1606, col: 14, offset: 53479},
																			exprs: []interface{}{
																				&actionExpr{
																					pos: position{line: 2865, col: 11, offset: 94908},
																					run: (*parser).callonListElementContinuationElement1060,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2865, col: 11, offset: 94908},
																						expr: &charClassMatcher{
																							pos:        position{line: 2865, col: 12, offset: 94909},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 1606, col: 21, offset: 53486},
																					expr: &charClassMatcher{
																						pos:        position{line: 1606, col: 21, offset: 53486},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1609, col: 5, offset: 53543},
																	run: (*parser).callonListElementContinuationElement1065,
																},
																&choiceExpr{
																	pos: position{line: 2877, col: 8, offset: 95162},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonListElementContinuationElement1067,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1600, col: 5, offset: 53226},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1600, col: 16, offset: 53237},
														expr: &choiceExpr{
															pos: position{line: 1600, col: 17, offset: 53238},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2593, col: 22, offset: 86639},
																	run: (*parser).callonListElementContinuationElement1077,
																	expr: &seqExpr{
																		pos: position{line: 2593, col: 22, offset: 86639},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2598, col: 31, offset: 86860},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																			&notExpr{
																				pos: position{line: 2598, col: 36, offset: 86865},
																				expr: &litMatcher{
																					pos:        position{line: 2598, col: 37, offset: 86866},
																					val:        "//",
																					ignoreCase: false,
																					want:       "\"//\"",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2593, col: 49, offset: 86666},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 2600, col: 29, offset: 86901},
																					run: (*parser).callonListElementContinuationElement1083,
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 2600, col: 29, offset: 86901},
																						expr: &charClassMatcher{
																							pos:        position{line: 2600, col: 29, offset: 86901},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2877, col: 8, offset: 95162},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2870, col: 12, offset: 95022},
																						run: (*parser).callonListElementContinuationElement1087,
																						expr: &choiceExpr{
																							pos: position{line: 2870, col: 13, offset: 95023},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2870, col: 13, offset: 95023},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2870, col: 20, offset: 95030},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2870, col: 29, offset: 95039},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2874, col: 8, offset: 95112},
																						expr: &anyMatcher{
																							line: 2874, col: 9, offset: 95113,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1588, col: 5, offset: 52955},
																	run: (*parser).callonListElementContinuationElement1094,
																	expr: &seqExpr{
																		pos: position{line: 1588, col: 5, offset: 52955},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1588, col: 5, offset: 52955},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 1588, col: 14, offset: 52964},
																					run: (*parser).callonListElementContinuationElement1097,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1588, col: 14, offset: 52964},
																						expr: &charClassMatcher{
																							pos:        position{line: 1588, col: 14, offset: 52964},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1591, col: 5, offset: 53021},
																				run: (*parser).callonListElementContinuationElement1100,
																			},
																			&choiceExpr{
																				pos: position{line: 2877, col: 8, offset: 95162},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2870, col: 12, offset: 95022},
																						run: (*parser).callonListElementContinuationElement1102,
																						expr: &choiceExpr{
																							pos: position{line: 2870, col: 13, offset: 95023},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2870, col: 13, offset: 95023},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2870, col: 20, offset: 95030},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2870, col: 29, offset: 95039},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2874, col: 8, offset: 95112},
																						expr: &anyMatcher{
																							line: 2874, col: 9, offset: 95113,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1346, col: 5, offset: 45010},
										run: (*parser).callonListElementContinuationElement1109,
										expr: &seqExpr{
											pos: position{line: 1346, col: 5, offset: 45010},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1346, col: 5, offset: 45010},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1346, col: 14, offset: 45019},
														run: (*parser).callonListElementContinuationElement1112,
														expr: &oneOrMoreExpr{
															pos: position{line: 1346, col: 14, offset: 45019},
															expr: &charClassMatcher{
																pos:        position{line: 1346, col: 14, offset: 45019},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2877, col: 8, offset: 95162},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonListElementContinuationElement1116,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2874, col: 8, offset: 95112},
															expr: &anyMatcher{
																line: 2874, col: 9, offset: 95113,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1504, col: 1, offset: 50173},
			expr: &actionExpr{
				pos: position{line: 1506, col: 5, offset: 50251},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1506, col: 5, offset: 50251},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1506, col: 5, offset: 50251},
							run: (*parser).callonCallout3,
						},
						&litMatcher{
							pos:        position{line: 1509, col: 5, offset: 50313},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1509, col: 9, offset: 50317},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1509, col: 14, offset: 50322},
								run: (*parser).callonCallout6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1509, col: 14, offset: 50322},
									expr: &charClassMatcher{
										pos:        position{line: 1509, col: 14, offset: 50322},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1509, col: 62, offset: 50370},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1509, col: 66, offset: 50374},
							expr: &actionExpr{
								pos: position{line: 2860, col: 10, offset: 94799},
								run: (*parser).callonCallout11,
								expr: &charClassMatcher{
									pos:        position{line: 2860, col: 11, offset: 94800},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&andExpr{
							pos: position{line: 1509, col: 73, offset: 50381},
							expr: &choiceExpr{
								pos: position{line: 1509, col: 75, offset: 50383},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2870, col: 12, offset: 95022},
										run: (*parser).callonCallout15,
										expr: &choiceExpr{
											pos: position{line: 2870, col: 13, offset: 95023},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2870, col: 13, offset: 95023},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2870, col: 20, offset: 95030},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2870, col: 29, offset: 95039},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 2874, col: 8, offset: 95112},
										expr: &anyMatcher{
											line: 2874, col: 9, offset: 95113,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1509, col: 81, offset: 50389},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortcutParagraph",
			pos:  position{line: 1535, col: 1, offset: 51202},
			expr: &actionExpr{
				pos: position{line: 1536, col: 5, offset: 51228},
				run: (*parser).callonShortcutParagraph1,
				expr: &seqExpr{
					pos: position{line: 1536, col: 5, offset: 51228},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1536, col: 5, offset: 51228},
							expr: &charClassMatcher{
								pos:        position{line: 2786, col: 13, offset: 92537},
								val:        "[0-9\\pL]",
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 1537, col: 5, offset: 51339},
							expr: &notExpr{
								pos: position{line: 1537, col: 7, offset: 51341},
								expr: &actionExpr{
									pos: position{line: 1364, col: 5, offset: 45503},
									run: (*parser).callonShortcutParagraph7,
									expr: &seqExpr{
										pos: position{line: 1364, col: 5, offset: 45503},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1364, col: 5, offset: 45503},
												expr: &actionExpr{
													pos: position{line: 2860, col: 10, offset: 94799},
													run: (*parser).callonShortcutParagraph10,
													expr: &charClassMatcher{
														pos:        position{line: 2860, col: 11, offset: 94800},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1364, col: 12, offset: 45510},
												label: "prefix",
												expr: &choiceExpr{
													pos: position{line: 1366, col: 9, offset: 45573},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 1366, col: 9, offset: 45573},
															run: (*parser).callonShortcutParagraph14,
															expr: &seqExpr{
																pos: position{line: 1366, col: 9, offset: 45573},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1366, col: 9, offset: 45573},
																		label: "depth",
																		expr: &actionExpr{
																			pos: position{line: 1366, col: 16, offset: 45580},
																			run: (*parser).callonShortcutParagraph17,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1366, col: 16, offset: 45580},
																				expr: &litMatcher{
																					pos:        position{line: 1366, col: 17, offset: 45581},
																					val:        ".",
																					ignoreCase: false,
																					want:       "\".\"",
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1370, col: 9, offset: 45681},
																		run: (*parser).callonShortcutParagraph20,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1389, col: 11, offset: 46398},
															run: (*parser).callonShortcutParagraph21,
															expr: &seqExpr{
																pos: position{line: 1389, col: 11, offset: 46398},
																exprs: []interface{}{
																	&oneOrMoreExpr{
																		pos: position{line: 1389, col: 11, offset: 46398},
																		expr: &charClassMatcher{
																			pos:        position{line: 1389, col: 12, offset: 46399},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1389, col: 20, offset: 46407},
																		val:        ".",
																		ignoreCase: false,
																		want:       "\".\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1391, col: 13, offset: 46524},
															run: (*parser).callonShortcutParagraph26,
															expr: &seqExpr{
																pos: position{line: 1391, col: 13, offset: 46524},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1391, col: 14, offset: 46525},
																		val:        "[a-z]",
																		ranges:     []rune{'a', 'z'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&litMatcher{
																		pos:        position{line: 1391, col: 21, offset: 46532},
																		val:        ".",
																		ignoreCase: false,
																		want:       "\".\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1393, col: 13, offset: 46652},
															run: (*parser).callonShortcutParagraph30,
															expr: &seqExpr{
																pos: position{line: 1393, col: 13, offset: 46652},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1393, col: 14, offset: 46653},
																		val:        "[A-Z]",
																		ranges:     []rune{'A', 'Z'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&litMatcher{
																		pos:        position{line: 1393, col: 21, offset: 46660},
																		val:        ".",
																		ignoreCase: false,
																		want:       "\".\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1395, col: 13, offset: 46780},
															run: (*parser).callonShortcutParagraph34,
															expr: &seqExpr{
																pos: position{line: 1395, col: 13, offset: 46780},
																exprs: []interface{}{
																	&oneOrMoreExpr{
																		pos: position{line: 1395, col: 13, offset: 46780},
																		expr: &charClassMatcher{
																			pos:        position{line: 1395, col: 14, offset: 46781},
																			val:        "[ivxdlcm]",
																			chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1395, col: 26, offset: 46793},
																		val:        ")",
																		ignoreCase: false,
																		want:       "\")\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1397, col: 13, offset: 46913},
															run: (*parser).callonShortcutParagraph39,
															expr: &seqExpr{
																pos: position{line: 1397, col: 13, offset: 46913},
																exprs: []interface{}{
																	&oneOrMoreExpr{
																		pos: position{line: 1397, col: 13, offset: 46913},
																		expr: &charClassMatcher{
																			pos:        position{line: 1397, col: 14, offset: 46914},
																			val:        "[IVXDLCM]",
																			chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1397, col: 26, offset: 46926},
																		val:        ")",
																		ignoreCase: false,
																		want:       "\")\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2865, col: 11, offset: 94908},
												run: (*parser).callonShortcutParagraph44,
												expr: &oneOrMoreExpr{
													pos: position{line: 2865, col: 11, offset: 94908},
													expr: &charClassMatcher{
														pos:        position{line: 2865, col: 12, offset: 94909},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 1538, col: 5, offset: 51372},
							expr: &notExpr{
								pos: position{line: 1538, col: 7, offset: 51374},
								expr: &actionExpr{
									pos: position{line: 1414, col: 5, offset: 47465},
									run: (*parser).callonShortcutParagraph49,
									expr: &seqExpr{
										pos: position{line: 1414, col: 5, offset: 47465},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1414, col: 5, offset: 47465},
												expr: &actionExpr{
													pos: position{line: 2860, col: 10, offset: 94799},
													run: (*parser).callonShortcutParagraph52,
													expr: &charClassMatcher{
														pos:        position{line: 2860, col: 11, offset: 94800},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1414, col: 12, offset: 47472},
												label: "prefix",
												expr: &choiceExpr{
													pos: position{line: 1414, col: 20, offset: 47480},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 1416, col: 9, offset: 47537},
															run: (*parser).callonShortcutParagraph56,
															expr: &seqExpr{
																pos: position{line: 1416, col: 9, offset: 47537},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1416, col: 9, offset: 47537},
																		label: "depth",
																		expr: &actionExpr{
																			pos: position{line: 1416, col: 16, offset: 47544},
																			run: (*parser).callonShortcutParagraph59,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1416, col: 16, offset: 47544},
																				expr: &litMatcher{
																					pos:        position{line: 1416, col: 17, offset: 47545},
																					val:        "*",
																					ignoreCase: false,
																					want:       "\"*\"",
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1420, col: 9, offset: 47645},
																		run: (*parser).callonShortcutParagraph62,
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 1437, col: 14, offset: 48352},
															label: "depth",
															expr: &actionExpr{
																pos: position{line: 1437, col: 21, offset: 48359},
																run: (*parser).callonShortcutParagraph64,
																expr: &litMatcher{
																	pos:        position{line: 1437, col: 22, offset: 48360},
																	val:        "-",
																	ignoreCase: false,
																	want:       "\"-\"",
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2865, col: 11, offset: 94908},
												run: (*parser).callonShortcutParagraph66,
												expr: &oneOrMoreExpr{
													pos: position{line: 2865, col: 11, offset: 94908},
													expr: &charClassMatcher{
														pos:        position{line: 2865, col: 12, offset: 94909},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 1539, col: 5, offset: 51407},
							expr: &notExpr{
								pos: position{line: 1539, col: 7, offset: 51409},
								expr: &choiceExpr{
									pos: position{line: 94, col: 19, offset: 2648},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 94, col: 19, offset: 2648},
											run: (*parser).callonShortcutParagraph72,
											expr: &litMatcher{
												pos:        position{line: 94, col: 19, offset: 2648},
												val:        "TIP",
												ignoreCase: false,
												want:       "\"TIP\"",
											},
										},
										&actionExpr{
											pos: position{line: 96, col: 5, offset: 2686},
											run: (*parser).callonShortcutParagraph74,
											expr: &litMatcher{
												pos:        position{line: 96, col: 5, offset: 2686},
												val:        "NOTE",
												ignoreCase: false,
												want:       "\"NOTE\"",
											},
										},
										&actionExpr{
											pos: position{line: 98, col: 5, offset: 2726},
											run: (*parser).callonShortcutParagraph76,
											expr: &litMatcher{
												pos:        position{line: 98, col: 5, offset: 2726},
												val:        "IMPORTANT",
												ignoreCase: false,
												want:       "\"IMPORTANT\"",
											},
										},
										&actionExpr{
											pos: position{line: 100, col: 5, offset: 2776},
											run: (*parser).callonShortcutParagraph78,
											expr: &litMatcher{
												pos:        position{line: 100, col: 5, offset: 2776},
												val:        "WARNING",
												ignoreCase: false,
												want:       "\"WARNING\"",
											},
										},
										&actionExpr{
											pos: position{line: 102, col: 5, offset: 2822},
											run: (*parser).callonShortcutParagraph80,
											expr: &litMatcher{
												pos:        position{line: 102, col: 5, offset: 2822},
												val:        "CAUTION",
												ignoreCase: false,
												want:       "\"CAUTION\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1540, col: 5, offset: 51430},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1588, col: 5, offset: 52955},
								run: (*parser).callonShortcutParagraph83,
								expr: &seqExpr{
									pos: position{line: 1588, col: 5, offset: 52955},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1588, col: 5, offset: 52955},
											label: "content",
											expr: &actionExpr{
												pos: position{line: 1588, col: 14, offset: 52964},
												run: (*parser).callonShortcutParagraph86,
												expr: &oneOrMoreExpr{
													pos: position{line: 1588, col: 14, offset: 52964},
													expr: &charClassMatcher{
														pos:        position{line: 1588, col: 14, offset: 52964},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&andCodeExpr{
											pos: position{line: 1591, col: 5, offset: 53021},
											run: (*parser).callonShortcutParagraph89,
										},
										&choiceExpr{
											pos: position{line: 2877, col: 8, offset: 95162},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2870, col: 12, offset: 95022},
													run: (*parser).callonShortcutParagraph91,
													expr: &choiceExpr{
														pos: position{line: 2870, col: 13, offset: 95023},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2870, col: 13, offset: 95023},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 20, offset: 95030},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 29, offset: 95039},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2874, col: 8, offset: 95112},
													expr: &anyMatcher{
														line: 2874, col: 9, offset: 95113,
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1541, col: 5, offset: 51464},
							run: (*parser).callonShortcutParagraph98,
						},
						&labeledExpr{
							pos:   position{line: 1548, col: 5, offset: 51826},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1548, col: 16, offset: 51837},
								expr: &actionExpr{
									pos: position{line: 1549, col: 9, offset: 51847},
									run: (*parser).callonShortcutParagraph101,
									expr: &seqExpr{
										pos: position{line: 1549, col: 9, offset: 51847},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1549, col: 9, offset: 51847},
												expr: &notExpr{
													pos: position{line: 2874, col: 8, offset: 95112},
													expr: &anyMatcher{
														line: 2874, col: 9, offset: 95113,
													},
												},
											},
											&notExpr{
												pos: position{line: 1550, col: 9, offset: 51861},
												expr: &actionExpr{
													pos: position{line: 449, col: 14, offset: 14731},
													run: (*parser).callonShortcutParagraph107,
													expr: &seqExpr{
														pos: position{line: 449, col: 14, offset: 14731},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 449, col: 14, offset: 14731},
																expr: &notExpr{
																	pos: position{line: 2874, col: 8, offset: 95112},
																	expr: &anyMatcher{
																		line: 2874, col: 9, offset: 95113,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 449, col: 19, offset: 14736},
																expr: &actionExpr{
																	pos: position{line: 2860, col: 10, offset: 94799},
																	run: (*parser).callonShortcutParagraph113,
																	expr: &charClassMatcher{
																		pos:        position{line: 2860, col: 11, offset: 94800},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2877, col: 8, offset: 95162},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2870, col: 12, offset: 95022},
																		run: (*parser).callonShortcutParagraph116,
																		expr: &choiceExpr{
																			pos: position{line: 2870, col: 13, offset: 95023},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2870, col: 13, offset: 95023},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2870, col: 20, offset: 95030},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2870, col: 29, offset: 95039},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2874, col: 8, offset: 95112},
																		expr: &anyMatcher{
																			line: 2874, col: 9, offset: 95113,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1551, col: 9, offset: 51880},
												expr: &ruleRefExpr{
													pos:  position{line: 1551, col: 10, offset: 51881},
													name: "BlockAttributes",
												},
											},
											&notExpr{
												pos: position{line: 1552, col: 9, offset: 51905},
												expr: &seqExpr{
													pos: position{line: 1315, col: 34, offset: 44000},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1315, col: 34, offset: 44000},
															val:        "+",
															ignoreCase: false,
															want:       "\"+\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1315, col: 38, offset: 44004},
															expr: &actionExpr{
																pos: position{line: 2860, col: 10, offset: 94799},
																run: (*parser).callonShortcutParagraph129,
																expr: &charClassMatcher{
																	pos:        position{line: 2860, col: 11, offset: 94800},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonShortcutParagraph131,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1553, col: 9, offset: 51944},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 1553, col: 15, offset: 51950},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2593, col: 22, offset: 86639},
															run: (*parser).callonShortcutParagraph138,
															expr: &seqExpr{
																pos: position{line: 2593, col: 22, offset: 86639},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2598, col: 31, offset: 86860},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2598, col: 36, offset: 86865},
																		expr: &litMatcher{
																			pos:        position{line: 2598, col: 37, offset: 86866},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2593, col: 49, offset: 86666},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2600, col: 29, offset: 86901},
																			run: (*parser).callonShortcutParagraph144,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2600, col: 29, offset: 86901},
																				expr: &charClassMatcher{
																					pos:        position{line: 2600, col: 29, offset: 86901},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2877, col: 8, offset: 95162},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2870, col: 12, offset: 95022},
																				run: (*parser).callonShortcutParagraph148,
																				expr: &choiceExpr{
																					pos: position{line: 2870, col: 13, offset: 95023},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2870, col: 13, offset: 95023},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2870, col: 20, offset: 95030},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2870, col: 29, offset: 95039},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2874, col: 8, offset: 95112},
																				expr: &anyMatcher{
																					line: 2874, col: 9, offset: 95113,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1588, col: 5, offset: 52955},
															run: (*parser).callonShortcutParagraph155,
															expr: &seqExpr{
																pos: position{line: 1588, col: 5, offset: 52955},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1588, col: 5, offset: 52955},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1588, col: 14, offset: 52964},
																			run: (*parser).callonShortcutParagraph158,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1588, col: 14, offset: 52964},
																				expr: &charClassMatcher{
																					pos:        position{line: 1588, col: 14, offset: 52964},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1591, col: 5, offset: 53021},
																		run: (*parser).callonShortcutParagraph161,
																	},
																	&choiceExpr{
																		pos: position{line: 2877, col: 8, offset: 95162},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2870, col: 12, offset: 95022},
																				run: (*parser).callonShortcutParagraph163,
																				expr: &choiceExpr{
																					pos: position{line: 2870, col: 13, offset: 95023},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2870, col: 13, offset: 95023},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2870, col: 20, offset: 95030},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2870, col: 29, offset: 95039},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2874, col: 8, offset: 95112},
																				expr: &anyMatcher{
																					line: 2874, col: 9, offset: 95113,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 1560, col: 1, offset: 52147},
			expr: &actionExpr{
				pos: position{line: 1561, col: 5, offset: 52165},
				run: (*parser).callonParagraph1,
				expr: &seqExpr{
					pos: position{line: 1561, col: 5, offset: 52165},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1561, col: 5, offset: 52165},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1588, col: 5, offset: 52955},
								run: (*parser).callonParagraph4,
								expr: &seqExpr{
									pos: position{line: 1588, col: 5, offset: 52955},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1588, col: 5, offset: 52955},
											label: "content",
											expr: &actionExpr{
												pos: position{line: 1588, col: 14, offset: 52964},
												run: (*parser).callonParagraph7,
												expr: &oneOrMoreExpr{
													pos: position{line: 1588, col: 14, offset: 52964},
													expr: &charClassMatcher{
														pos:        position{line: 1588, col: 14, offset: 52964},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&andCodeExpr{
											pos: position{line: 1591, col: 5, offset: 53021},
											run: (*parser).callonParagraph10,
										},
										&choiceExpr{
											pos: position{line: 2877, col: 8, offset: 95162},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2870, col: 12, offset: 95022},
													run: (*parser).callonParagraph12,
													expr: &choiceExpr{
														pos: position{line: 2870, col: 13, offset: 95023},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2870, col: 13, offset: 95023},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 20, offset: 95030},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 29, offset: 95039},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2874, col: 8, offset: 95112},
													expr: &anyMatcher{
														line: 2874, col: 9, offset: 95113,
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1562, col: 5, offset: 52199},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1562, col: 16, offset: 52210},
								expr: &actionExpr{
									pos: position{line: 1563, col: 9, offset: 52220},
									run: (*parser).callonParagraph21,
									expr: &seqExpr{
										pos: position{line: 1563, col: 9, offset: 52220},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1563, col: 9, offset: 52220},
												expr: &notExpr{
													pos: position{line: 2874, col: 8, offset: 95112},
													expr: &anyMatcher{
														line: 2874, col: 9, offset: 95113,
													},
												},
											},
											&notExpr{
												pos: position{line: 1564, col: 9, offset: 52233},
												expr: &actionExpr{
													pos: position{line: 449, col: 14, offset: 14731},
													run: (*parser).callonParagraph27,
													expr: &seqExpr{
														pos: position{line: 449, col: 14, offset: 14731},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 449, col: 14, offset: 14731},
																expr: &notExpr{
																	pos: position{line: 2874, col: 8, offset: 95112},
																	expr: &anyMatcher{
																		line: 2874, col: 9, offset: 95113,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 449, col: 19, offset: 14736},
																expr: &actionExpr{
																	pos: position{line: 2860, col: 10, offset: 94799},
																	run: (*parser).callonParagraph33,
																	expr: &charClassMatcher{
																		pos:        position{line: 2860, col: 11, offset: 94800},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2877, col: 8, offset: 95162},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2870, col: 12, offset: 95022},
																		run: (*parser).callonParagraph36,
																		expr: &choiceExpr{
																			pos: position{line: 2870, col: 13, offset: 95023},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2870, col: 13, offset: 95023},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2870, col: 20, offset: 95030},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2870, col: 29, offset: 95039},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2874, col: 8, offset: 95112},
																		expr: &anyMatcher{
																			line: 2874, col: 9, offset: 95113,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1565, col: 9, offset: 52252},
												expr: &ruleRefExpr{
													pos:  position{line: 1565, col: 10, offset: 52253},
													name: "BlockAttributes",
												},
											},
											&notExpr{
												pos: position{line: 1566, col: 9, offset: 52277},
												expr: &seqExpr{
													pos: position{line: 1315, col: 34, offset: 44000},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1315, col: 34, offset: 44000},
															val:        "+",
															ignoreCase: false,
															want:       "\"+\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1315, col: 38, offset: 44004},
															expr: &actionExpr{
																pos: position{line: 2860, col: 10, offset: 94799},
																run: (*parser).callonParagraph49,
																expr: &charClassMatcher{
																	pos:        position{line: 2860, col: 11, offset: 94800},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonParagraph51,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1567, col: 9, offset: 52316},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 1567, col: 15, offset: 52322},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2593, col: 22, offset: 86639},
															run: (*parser).callonParagraph58,
															expr: &seqExpr{
																pos: position{line: 2593, col: 22, offset: 86639},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2598, col: 31, offset: 86860},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2598, col: 36, offset: 86865},
																		expr: &litMatcher{
																			pos:        position{line: 2598, col: 37, offset: 86866},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2593, col: 49, offset: 86666},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2600, col: 29, offset: 86901},
																			run: (*parser).callonParagraph64,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2600, col: 29, offset: 86901},
																				expr: &charClassMatcher{
																					pos:        position{line: 2600, col: 29, offset: 86901},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2877, col: 8, offset: 95162},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2870, col: 12, offset: 95022},
																				run: (*parser).callonParagraph68,
																				expr: &choiceExpr{
																					pos: position{line: 2870, col: 13, offset: 95023},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2870, col: 13, offset: 95023},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2870, col: 20, offset: 95030},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2870, col: 29, offset: 95039},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2874, col: 8, offset: 95112},
																				expr: &anyMatcher{
																					line: 2874, col: 9, offset: 95113,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1588, col: 5, offset: 52955},
															run: (*parser).callonParagraph75,
															expr: &seqExpr{
																pos: position{line: 1588, col: 5, offset: 52955},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1588, col: 5, offset: 52955},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1588, col: 14, offset: 52964},
																			run: (*parser).callonParagraph78,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1588, col: 14, offset: 52964},
																				expr: &charClassMatcher{
																					pos:        position{line: 1588, col: 14, offset: 52964},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1591, col: 5, offset: 53021},
																		run: (*parser).callonParagraph81,
																	},
																	&choiceExpr{
																		pos: position{line: 2877, col: 8, offset: 95162},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2870, col: 12, offset: 95022},
																				run: (*parser).callonParagraph83,
																				expr: &choiceExpr{
																					pos: position{line: 2870, col: 13, offset: 95023},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2870, col: 13, offset: 95023},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2870, col: 20, offset: 95030},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2870, col: 29, offset: 95039},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2874, col: 8, offset: 95112},
																				expr: &anyMatcher{
																					line: 2874, col: 9, offset: 95113,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1619, col: 1, offset: 54005},
			expr: &choiceExpr{
				pos: position{line: 1620, col: 5, offset: 54024},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1621, col: 9, offset: 54034},
						run: (*parser).callonQuotedText2,
						expr: &seqExpr{
							pos: position{line: 1621, col: 9, offset: 54034},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1621, col: 9, offset: 54034},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1621, col: 20, offset: 54045},
										expr: &ruleRefExpr{
											pos:  position{line: 1621, col: 21, offset: 54046},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1622, col: 9, offset: 54172},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 1622, col: 15, offset: 54178},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1622, col: 15, offset: 54178},
												name: "UnconstrainedQuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1622, col: 41, offset: 54204},
												name: "ConstrainedQuotedText",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1626, col: 7, offset: 54323},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1632, col: 1, offset: 54514},
			expr: &choiceExpr{
				pos: position{line: 1633, col: 5, offset: 54544},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1633, col: 5, offset: 54544},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1634, col: 7, offset: 54571},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1635, col: 7, offset: 54599},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1636, col: 7, offset: 54627},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1637, col: 7, offset: 54659},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1638, col: 7, offset: 54680},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1640, col: 1, offset: 54698},
			expr: &choiceExpr{
				pos: position{line: 1641, col: 5, offset: 54730},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1641, col: 5, offset: 54730},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1642, col: 7, offset: 54756},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1643, col: 7, offset: 54784},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1644, col: 7, offset: 54812},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1646, col: 1, offset: 54838},
			expr: &actionExpr{
				pos: position{line: 1647, col: 5, offset: 54919},
				run: (*parser).callonEscapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 1647, col: 5, offset: 54919},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1647, col: 5, offset: 54919},
							expr: &litMatcher{
								pos:        position{line: 1647, col: 7, offset: 54921},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1648, col: 5, offset: 54930},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1649, col: 9, offset: 54948},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1649, col: 9, offset: 54948},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1650, col: 11, offset: 54975},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1651, col: 11, offset: 55003},
										name: "EscapedMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1652, col: 11, offset: 55031},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1653, col: 11, offset: 55063},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1654, col: 11, offset: 55095},
										name: "EscapedSuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1674, col: 1, offset: 55622},
			expr: &choiceExpr{
				pos: position{line: 1674, col: 13, offset: 55634},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1674, col: 13, offset: 55634},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1674, col: 35, offset: 55656},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1688, col: 1, offset: 56018},
			expr: &actionExpr{
				pos: position{line: 1689, col: 5, offset: 56046},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1689, col: 5, offset: 56046},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1686, col: 33, offset: 56012},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1690, col: 5, offset: 56080},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1690, col: 15, offset: 56090},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1686, col: 33, offset: 56012},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1695, col: 1, offset: 56247},
			expr: &oneOrMoreExpr{
				pos: position{line: 1695, col: 32, offset: 56278},
				expr: &ruleRefExpr{
					pos:  position{line: 1695, col: 32, offset: 56278},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1697, col: 1, offset: 56309},
			expr: &actionExpr{
				pos: position{line: 1698, col: 5, offset: 56344},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1698, col: 5, offset: 56344},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1698, col: 5, offset: 56344},
							expr: &litMatcher{
								pos:        position{line: 1686, col: 33, offset: 56012},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1699, col: 5, offset: 56378},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1700, col: 9, offset: 56396},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1679, col: 5, offset: 55770},
										run: (*parser).callonDoubleQuoteBoldTextElement7,
										expr: &seqExpr{
											pos: position{line: 1679, col: 5, offset: 55770},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1679, col: 5, offset: 55770},
													expr: &charClassMatcher{
														pos:        position{line: 1679, col: 5, offset: 55770},
														val:        "[,?!;0-9\\pL]",
														chars:      []rune{',', '?', '!', ';'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1679, col: 19, offset: 55784},
													expr: &choiceExpr{
														pos: position{line: 1679, col: 21, offset: 55786},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2860, col: 10, offset: 94799},
																run: (*parser).callonDoubleQuoteBoldTextElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 2860, col: 11, offset: 94800},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1676, col: 22, offset: 55744},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2865, col: 11, offset: 94908},
										run: (*parser).callonDoubleQuoteBoldTextElement16,
										expr: &oneOrMoreExpr{
											pos: position{line: 2865, col: 11, offset: 94908},
											expr: &charClassMatcher{
												pos:        position{line: 2865, col: 12, offset: 94909},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 1702, col: 11, offset: 56469},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2870, col: 12, offset: 95022},
												run: (*parser).callonDoubleQuoteBoldTextElement20,
												expr: &choiceExpr{
													pos: position{line: 2870, col: 13, offset: 95023},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2870, col: 13, offset: 95023},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2870, col: 20, offset: 95030},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2870, col: 29, offset: 95039},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1702, col: 19, offset: 56477},
												expr: &actionExpr{
													pos: position{line: 2870, col: 12, offset: 95022},
													run: (*parser).callonDoubleQuoteBoldTextElement26,
													expr: &choiceExpr{
														pos: position{line: 2870, col: 13, offset: 95023},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2870, col: 13, offset: 95023},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 20, offset: 95030},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 29, offset: 95039},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 416, col: 5, offset: 13530},
										run: (*parser).callonDoubleQuoteBoldTextElement31,
										expr: &seqExpr{
											pos: position{line: 416, col: 5, offset: 13530},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 416, col: 5, offset: 13530},
													run: (*parser).callonDoubleQuoteBoldTextElement33,
												},
												&labeledExpr{
													pos:   position{line: 419, col: 5, offset: 13594},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 419, col: 14, offset: 13603},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 430, col: 25, offset: 14065},
																run: (*parser).callonDoubleQuoteBoldTextElement36,
																expr: &seqExpr{
																	pos: position{line: 430, col: 25, offset: 14065},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 430, col: 25, offset: 14065},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 430, col: 37, offset: 14077},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonDoubleQuoteBoldTextElement40,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 430, col: 56, offset: 14096},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 430, col: 62, offset: 14102},
																				expr: &actionExpr{
																					pos: position{line: 438, col: 17, offset: 14365},
																					run: (*parser).callonDoubleQuoteBoldTextElement47,
																					expr: &seqExpr{
																						pos: position{line: 438, col: 17, offset: 14365},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 438, col: 17, offset: 14365},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 438, col: 21, offset: 14369},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 438, col: 28, offset: 14376},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 438, col: 28, offset: 14376},
																											run: (*parser).callonDoubleQuoteBoldTextElement52,
																											expr: &charClassMatcher{
																												pos:        position{line: 438, col: 28, offset: 14376},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 440, col: 9, offset: 14430},
																											run: (*parser).callonDoubleQuoteBoldTextElement54,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 440, col: 9, offset: 14430},
																												expr: &charClassMatcher{
																													pos:        position{line: 440, col: 9, offset: 14430},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 430, col: 78, offset: 14118},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 434, col: 25, offset: 14220},
																run: (*parser).callonDoubleQuoteBoldTextElement58,
																expr: &seqExpr{
																	pos: position{line: 434, col: 25, offset: 14220},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 434, col: 25, offset: 14220},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 434, col: 38, offset: 14233},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonDoubleQuoteBoldTextElement62,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 434, col: 57, offset: 14252},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 434, col: 63, offset: 14258},
																				expr: &actionExpr{
																					pos: position{line: 438, col: 17, offset: 14365},
																					run: (*parser).callonDoubleQuoteBoldTextElement69,
																					expr: &seqExpr{
																						pos: position{line: 438, col: 17, offset: 14365},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 438, col: 17, offset: 14365},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 438, col: 21, offset: 14369},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 438, col: 28, offset: 14376},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 438, col: 28, offset: 14376},
																											run: (*parser).callonDoubleQuoteBoldTextElement74,
																											expr: &charClassMatcher{
																												pos:        position{line: 438, col: 28, offset: 14376},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 440, col: 9, offset: 14430},
																											run: (*parser).callonDoubleQuoteBoldTextElement76,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 440, col: 9, offset: 14430},
																												expr: &charClassMatcher{
																													pos:        position{line: 440, col: 9, offset: 14430},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 434, col: 79, offset: 14274},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 423, col: 31, offset: 13720},
																run: (*parser).callonDoubleQuoteBoldTextElement80,
																expr: &seqExpr{
																	pos: position{line: 423, col: 31, offset: 13720},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 423, col: 31, offset: 13720},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 423, col: 35, offset: 13724},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonDoubleQuoteBoldTextElement84,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 423, col: 54, offset: 13743},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2576, col: 5, offset: 86006},
										run: (*parser).callonDoubleQuoteBoldTextElement90,
										expr: &seqExpr{
											pos: position{line: 2576, col: 5, offset: 86006},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2576, col: 5, offset: 86006},
													run: (*parser).callonDoubleQuoteBoldTextElement92,
												},
												&labeledExpr{
													pos:   position{line: 2579, col: 5, offset: 86077},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2581, col: 9, offset: 86175},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2581, col: 9, offset: 86175},
																run: (*parser).callonDoubleQuoteBoldTextElement95,
																expr: &choiceExpr{
																	pos: position{line: 458, col: 27, offset: 15084},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 458, col: 27, offset: 15084},
																			run: (*parser).callonDoubleQuoteBoldTextElement97,
																			expr: &seqExpr{
																				pos: position{line: 458, col: 27, offset: 15084},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 458, col: 27, offset: 15084},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 458, col: 32, offset: 15089},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 7, offset: 94521},
																							run: (*parser).callonDoubleQuoteBoldTextElement101,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 7, offset: 94521},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 458, col: 40, offset: 15097},
																						expr: &actionExpr{
																							pos: position{line: 2860, col: 10, offset: 94799},
																							run: (*parser).callonDoubleQuoteBoldTextElement105,
																							expr: &charClassMatcher{
																								pos:        position{line: 2860, col: 11, offset: 94800},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 458, col: 47, offset: 15104},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 458, col: 51, offset: 15108},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 468, col: 24, offset: 15521},
																							expr: &choiceExpr{
																								pos: position{line: 469, col: 5, offset: 15527},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 469, col: 6, offset: 15528},
																										run: (*parser).callonDoubleQuoteBoldTextElement111,
																										expr: &seqExpr{
																											pos: position{line: 469, col: 6, offset: 15528},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 469, col: 6, offset: 15528},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 469, col: 14, offset: 15536},
																													expr: &charClassMatcher{
																														pos:        position{line: 469, col: 14, offset: 15536},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 416, col: 5, offset: 13530},
																										run: (*parser).callonDoubleQuoteBoldTextElement116,
																										expr: &seqExpr{
																											pos: position{line: 416, col: 5, offset: 13530},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 416, col: 5, offset: 13530},
																													run: (*parser).callonDoubleQuoteBoldTextElement118,
																												},
																												&labeledExpr{
																													pos:   position{line: 419, col: 5, offset: 13594},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 419, col: 14, offset: 13603},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 430, col: 25, offset: 14065},
																																run: (*parser).callonDoubleQuoteBoldTextElement121,
																																expr: &seqExpr{
																																	pos: position{line: 430, col: 25, offset: 14065},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 430, col: 25, offset: 14065},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 430, col: 37, offset: 14077},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonDoubleQuoteBoldTextElement125,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 430, col: 56, offset: 14096},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 430, col: 62, offset: 14102},
																																				expr: &actionExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					run: (*parser).callonDoubleQuoteBoldTextElement132,
																																					expr: &seqExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 438, col: 17, offset: 14365},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 438, col: 21, offset: 14369},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 438, col: 28, offset: 14376},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 438, col: 28, offset: 14376},
																																											run: (*parser).callonDoubleQuoteBoldTextElement137,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 438, col: 28, offset: 14376},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											run: (*parser).callonDoubleQuoteBoldTextElement139,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 440, col: 9, offset: 14430},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 430, col: 78, offset: 14118},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 434, col: 25, offset: 14220},
																																run: (*parser).callonDoubleQuoteBoldTextElement143,
																																expr: &seqExpr{
																																	pos: position{line: 434, col: 25, offset: 14220},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 434, col: 25, offset: 14220},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 434, col: 38, offset: 14233},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonDoubleQuoteBoldTextElement147,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 434, col: 57, offset: 14252},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 434, col: 63, offset: 14258},
																																				expr: &actionExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					run: (*parser).callonDoubleQuoteBoldTextElement154,
																																					expr: &seqExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 438, col: 17, offset: 14365},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 438, col: 21, offset: 14369},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 438, col: 28, offset: 14376},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 438, col: 28, offset: 14376},
																																											run: (*parser).callonDoubleQuoteBoldTextElement159,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 438, col: 28, offset: 14376},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											run: (*parser).callonDoubleQuoteBoldTextElement161,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 440, col: 9, offset: 14430},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 434, col: 79, offset: 14274},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 423, col: 31, offset: 13720},
																																run: (*parser).callonDoubleQuoteBoldTextElement165,
																																expr: &seqExpr{
																																	pos: position{line: 423, col: 31, offset: 13720},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 423, col: 31, offset: 13720},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 423, col: 35, offset: 13724},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonDoubleQuoteBoldTextElement169,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 423, col: 54, offset: 13743},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 473, col: 8, offset: 15760},
																										run: (*parser).callonDoubleQuoteBoldTextElement175,
																										expr: &litMatcher{
																											pos:        position{line: 473, col: 8, offset: 15760},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 458, col: 79, offset: 15136},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 460, col: 9, offset: 15209},
																			run: (*parser).callonDoubleQuoteBoldTextElement178,
																			expr: &seqExpr{
																				pos: position{line: 460, col: 9, offset: 15209},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 460, col: 9, offset: 15209},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 460, col: 14, offset: 15214},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 7, offset: 94521},
																							run: (*parser).callonDoubleQuoteBoldTextElement182,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 7, offset: 94521},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 460, col: 22, offset: 15222},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2584, col: 11, offset: 86279},
																run: (*parser).callonDoubleQuoteBoldTextElement186,
																expr: &charClassMatcher{
																	pos:        position{line: 2584, col: 12, offset: 86280},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2609, col: 15, offset: 87247},
										run: (*parser).callonDoubleQuoteBoldTextElement188,
										expr: &litMatcher{
											pos:        position{line: 2609, col: 15, offset: 87247},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2615, col: 14, offset: 87362},
										run: (*parser).callonDoubleQuoteBoldTextElement190,
										expr: &litMatcher{
											pos:        position{line: 2615, col: 14, offset: 87362},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2619, col: 14, offset: 87438},
										run: (*parser).callonDoubleQuoteBoldTextElement192,
										expr: &litMatcher{
											pos:        position{line: 2619, col: 14, offset: 87438},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2623, col: 15, offset: 87516},
										run: (*parser).callonDoubleQuoteBoldTextElement194,
										expr: &litMatcher{
											pos:        position{line: 2623, col: 15, offset: 87516},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2627, col: 13, offset: 87591},
										run: (*parser).callonDoubleQuoteBoldTextElement196,
										expr: &litMatcher{
											pos:        position{line: 2627, col: 13, offset: 87591},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2635, col: 22, offset: 87897},
										run: (*parser).callonDoubleQuoteBoldTextElement198,
										expr: &seqExpr{
											pos: position{line: 2635, col: 22, offset: 87897},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2786, col: 13, offset: 92537},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2635, col: 31, offset: 87906},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2635, col: 35, offset: 87910},
													expr: &charClassMatcher{
														pos:        position{line: 2635, col: 36, offset: 87911},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1706, col: 11, offset: 56606},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1707, col: 11, offset: 56628},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1708, col: 11, offset: 56651},
										name: "QuotedTextInDoubleQuoteBoldText",
									},
									&actionExpr{
										pos: position{line: 914, col: 23, offset: 28983},
										run: (*parser).callonDoubleQuoteBoldTextElement207,
										expr: &seqExpr{
											pos: position{line: 914, col: 23, offset: 28983},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 912, col: 32, offset: 28951},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 914, col: 51, offset: 29011},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 914, col: 56, offset: 29016},
														run: (*parser).callonDoubleQuoteBoldTextElement211,
														expr: &oneOrMoreExpr{
															pos: position{line: 914, col: 56, offset: 29016},
															expr: &charClassMatcher{
																pos:        position{line: 914, col: 56, offset: 29016},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 912, col: 32, offset: 28951},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 1727, col: 5, offset: 57163},
										val:        "[^\\r\\n*]",
										chars:      []rune{'\r', '\n', '*'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 1728, col: 7, offset: 57260},
										run: (*parser).callonDoubleQuoteBoldTextElement216,
										expr: &seqExpr{
											pos: position{line: 1728, col: 7, offset: 57260},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1686, col: 33, offset: 56012},
													val:        "**",
													ignoreCase: false,
													want:       "\"**\"",
												},
												&actionExpr{
													pos: position{line: 2790, col: 14, offset: 92611},
													run: (*parser).callonDoubleQuoteBoldTextElement219,
													expr: &oneOrMoreExpr{
														pos: position{line: 2790, col: 14, offset: 92611},
														expr: &charClassMatcher{
															pos:        position{line: 2790, col: 14, offset: 92611},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteBoldText",
			pos:  position{line: 1714, col: 1, offset: 56805},
			expr: &actionExpr{
				pos: position{line: 1715, col: 5, offset: 56845},
				run: (*parser).callonQuotedTextInDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1715, col: 5, offset: 56845},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1715, col: 5, offset: 56845},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1715, col: 16, offset: 56856},
								expr: &ruleRefExpr{
									pos:  position{line: 1715, col: 17, offset: 56857},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1716, col: 5, offset: 56883},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1717, col: 9, offset: 56898},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1717, col: 9, offset: 56898},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1718, col: 11, offset: 56928},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1719, col: 11, offset: 56949},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1720, col: 11, offset: 56970},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1721, col: 11, offset: 56994},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1722, col: 11, offset: 57018},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1739, col: 1, offset: 57647},
			expr: &actionExpr{
				pos: position{line: 1740, col: 5, offset: 57675},
				run: (*parser).callonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1740, col: 5, offset: 57675},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1735, col: 38, offset: 57601},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&labeledExpr{
							pos:   position{line: 1741, col: 5, offset: 57713},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1741, col: 15, offset: 57723},
								name: "SingleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1737, col: 36, offset: 57641},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1746, col: 1, offset: 57883},
			expr: &actionExpr{
				pos: position{line: 1747, col: 5, offset: 57920},
				run: (*parser).callonSingleQuoteBoldTextElements1,
				expr: &seqExpr{
					pos: position{line: 1747, col: 5, offset: 57920},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1747, col: 5, offset: 57920},
							expr: &notExpr{
								pos: position{line: 2874, col: 8, offset: 95112},
								expr: &anyMatcher{
									line: 2874, col: 9, offset: 95113,
								},
							},
						},
						&notExpr{
							pos: position{line: 1747, col: 10, offset: 57925},
							expr: &actionExpr{
								pos: position{line: 2860, col: 10, offset: 94799},
								run: (*parser).callonSingleQuoteBoldTextElements7,
								expr: &charClassMatcher{
									pos:        position{line: 2860, col: 11, offset: 94800},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1748, col: 5, offset: 57964},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1748, col: 14, offset: 57973},
								expr: &ruleRefExpr{
									pos:  position{line: 1748, col: 15, offset: 57974},
									name: "SingleQuoteBoldTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1749, col: 5, offset: 58008},
							run: (*parser).callonSingleQuoteBoldTextElements12,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1755, col: 1, offset: 58149},
			expr: &choiceExpr{
				pos: position{line: 1756, col: 5, offset: 58184},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1679, col: 5, offset: 55770},
						run: (*parser).callonSingleQuoteBoldTextElement2,
						expr: &seqExpr{
							pos: position{line: 1679, col: 5, offset: 55770},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1679, col: 5, offset: 55770},
									expr: &charClassMatcher{
										pos:        position{line: 1679, col: 5, offset: 55770},
										val:        "[,?!;0-9\\pL]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1679, col: 19, offset: 55784},
									expr: &choiceExpr{
										pos: position{line: 1679, col: 21, offset: 55786},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2860, col: 10, offset: 94799},
												run: (*parser).callonSingleQuoteBoldTextElement8,
												expr: &charClassMatcher{
													pos:        position{line: 2860, col: 11, offset: 94800},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 1676, col: 22, offset: 55744},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2865, col: 11, offset: 94908},
						run: (*parser).callonSingleQuoteBoldTextElement11,
						expr: &oneOrMoreExpr{
							pos: position{line: 2865, col: 11, offset: 94908},
							expr: &charClassMatcher{
								pos:        position{line: 2865, col: 12, offset: 94909},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 1758, col: 7, offset: 58216},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 2870, col: 12, offset: 95022},
								run: (*parser).callonSingleQuoteBoldTextElement15,
								expr: &choiceExpr{
									pos: position{line: 2870, col: 13, offset: 95023},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2870, col: 13, offset: 95023},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2870, col: 20, offset: 95030},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2870, col: 29, offset: 95039},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 1758, col: 15, offset: 58224},
								expr: &actionExpr{
									pos: position{line: 2870, col: 12, offset: 95022},
									run: (*parser).callonSingleQuoteBoldTextElement21,
									expr: &choiceExpr{
										pos: position{line: 2870, col: 13, offset: 95023},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2870, col: 13, offset: 95023},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 20, offset: 95030},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 29, offset: 95039},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 416, col: 5, offset: 13530},
						run: (*parser).callonSingleQuoteBoldTextElement26,
						expr: &seqExpr{
							pos: position{line: 416, col: 5, offset: 13530},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 416, col: 5, offset: 13530},
									run: (*parser).callonSingleQuoteBoldTextElement28,
								},
								&labeledExpr{
									pos:   position{line: 419, col: 5, offset: 13594},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 419, col: 14, offset: 13603},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 430, col: 25, offset: 14065},
												run: (*parser).callonSingleQuoteBoldTextElement31,
												expr: &seqExpr{
													pos: position{line: 430, col: 25, offset: 14065},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 430, col: 25, offset: 14065},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 430, col: 37, offset: 14077},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 120, col: 18, offset: 3502},
																run: (*parser).callonSingleQuoteBoldTextElement35,
																expr: &seqExpr{
																	pos: position{line: 120, col: 18, offset: 3502},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 120, col: 18, offset: 3502},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 120, col: 28, offset: 3512},
																			expr: &charClassMatcher{
																				pos:        position{line: 120, col: 29, offset: 3513},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 430, col: 56, offset: 14096},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 430, col: 62, offset: 14102},
																expr: &actionExpr{
																	pos: position{line: 438, col: 17, offset: 14365},
																	run: (*parser).callonSingleQuoteBoldTextElement42,
																	expr: &seqExpr{
																		pos: position{line: 438, col: 17, offset: 14365},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 438, col: 17, offset: 14365},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 438, col: 21, offset: 14369},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 438, col: 28, offset: 14376},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 438, col: 28, offset: 14376},
																							run: (*parser).callonSingleQuoteBoldTextElement47,
																							expr: &charClassMatcher{
																								pos:        position{line: 438, col: 28, offset: 14376},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 440, col: 9, offset: 14430},
																							run: (*parser).callonSingleQuoteBoldTextElement49,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 440, col: 9, offset: 14430},
																								expr: &charClassMatcher{
																									pos:        position{line: 440, col: 9, offset: 14430},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 430, col: 78, offset: 14118},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 434, col: 25, offset: 14220},
												run: (*parser).callonSingleQuoteBoldTextElement53,
												expr: &seqExpr{
													pos: position{line: 434, col: 25, offset: 14220},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 434, col: 25, offset: 14220},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 434, col: 38, offset: 14233},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 120, col: 18, offset: 3502},
																run: (*parser).callonSingleQuoteBoldTextElement57,
																expr: &seqExpr{
																	pos: position{line: 120, col: 18, offset: 3502},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 120, col: 18, offset: 3502},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 120, col: 28, offset: 3512},
																			expr: &charClassMatcher{
																				pos:        position{line: 120, col: 29, offset: 3513},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 434, col: 57, offset: 14252},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 434, col: 63, offset: 14258},
																expr: &actionExpr{
																	pos: position{line: 438, col: 17, offset: 14365},
																	run: (*parser).callonSingleQuoteBoldTextElement64,
																	expr: &seqExpr{
																		pos: position{line: 438, col: 17, offset: 14365},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 438, col: 17, offset: 14365},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 438, col: 21, offset: 14369},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 438, col: 28, offset: 14376},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 438, col: 28, offset: 14376},
																							run: (*parser).callonSingleQuoteBoldTextElement69,
																							expr: &charClassMatcher{
																								pos:        position{line: 438, col: 28, offset: 14376},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 440, col: 9, offset: 14430},
																							run: (*parser).callonSingleQuoteBoldTextElement71,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 440, col: 9, offset: 14430},
																								expr: &charClassMatcher{
																									pos:        position{line: 440, col: 9, offset: 14430},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 434, col: 79, offset: 14274},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 423, col: 31, offset: 13720},
												run: (*parser).callonSingleQuoteBoldTextElement75,
												expr: &seqExpr{
													pos: position{line: 423, col: 31, offset: 13720},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 423, col: 31, offset: 13720},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 423, col: 35, offset: 13724},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 120, col: 18, offset: 3502},
																run: (*parser).callonSingleQuoteBoldTextElement79,
																expr: &seqExpr{
																	pos: position{line: 120, col: 18, offset: 3502},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 120, col: 18, offset: 3502},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 120, col: 28, offset: 3512},
																			expr: &charClassMatcher{
																				pos:        position{line: 120, col: 29, offset: 3513},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 423, col: 54, offset: 13743},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2576, col: 5, offset: 86006},
						run: (*parser).callonSingleQuoteBoldTextElement85,
						expr: &seqExpr{
							pos: position{line: 2576, col: 5, offset: 86006},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2576, col: 5, offset: 86006},
									run: (*parser).callonSingleQuoteBoldTextElement87,
								},
								&labeledExpr{
									pos:   position{line: 2579, col: 5, offset: 86077},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2581, col: 9, offset: 86175},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2581, col: 9, offset: 86175},
												run: (*parser).callonSingleQuoteBoldTextElement90,
												expr: &choiceExpr{
													pos: position{line: 458, col: 27, offset: 15084},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 458, col: 27, offset: 15084},
															run: (*parser).callonSingleQuoteBoldTextElement92,
															expr: &seqExpr{
																pos: position{line: 458, col: 27, offset: 15084},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 458, col: 27, offset: 15084},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 458, col: 32, offset: 15089},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2848, col: 7, offset: 94521},
																			run: (*parser).callonSingleQuoteBoldTextElement96,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2848, col: 7, offset: 94521},
																				expr: &charClassMatcher{
																					pos:        position{line: 2848, col: 7, offset: 94521},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 458, col: 40, offset: 15097},
																		expr: &actionExpr{
																			pos: position{line: 2860, col: 10, offset: 94799},
																			run: (*parser).callonSingleQuoteBoldTextElement100,
																			expr: &charClassMatcher{
																				pos:        position{line: 2860, col: 11, offset: 94800},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 458, col: 47, offset: 15104},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 458, col: 51, offset: 15108},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 468, col: 24, offset: 15521},
																			expr: &choiceExpr{
																				pos: position{line: 469, col: 5, offset: 15527},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 469, col: 6, offset: 15528},
																						run: (*parser).callonSingleQuoteBoldTextElement106,
																						expr: &seqExpr{
																							pos: position{line: 469, col: 6, offset: 15528},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 469, col: 6, offset: 15528},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 469, col: 14, offset: 15536},
																									expr: &charClassMatcher{
																										pos:        position{line: 469, col: 14, offset: 15536},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 416, col: 5, offset: 13530},
																						run: (*parser).callonSingleQuoteBoldTextElement111,
																						expr: &seqExpr{
																							pos: position{line: 416, col: 5, offset: 13530},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 416, col: 5, offset: 13530},
																									run: (*parser).callonSingleQuoteBoldTextElement113,
																								},
																								&labeledExpr{
																									pos:   position{line: 419, col: 5, offset: 13594},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 419, col: 14, offset: 13603},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 430, col: 25, offset: 14065},
																												run: (*parser).callonSingleQuoteBoldTextElement116,
																												expr: &seqExpr{
																													pos: position{line: 430, col: 25, offset: 14065},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 430, col: 25, offset: 14065},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 430, col: 37, offset: 14077},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 120, col: 18, offset: 3502},
																																run: (*parser).callonSingleQuoteBoldTextElement120,
																																expr: &seqExpr{
																																	pos: position{line: 120, col: 18, offset: 3502},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 120, col: 18, offset: 3502},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 120, col: 28, offset: 3512},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 120, col: 29, offset: 3513},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 430, col: 56, offset: 14096},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 430, col: 62, offset: 14102},
																																expr: &actionExpr{
																																	pos: position{line: 438, col: 17, offset: 14365},
																																	run: (*parser).callonSingleQuoteBoldTextElement127,
																																	expr: &seqExpr{
																																		pos: position{line: 438, col: 17, offset: 14365},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 438, col: 17, offset: 14365},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 438, col: 21, offset: 14369},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 438, col: 28, offset: 14376},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 438, col: 28, offset: 14376},
																																							run: (*parser).callonSingleQuoteBoldTextElement132,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 438, col: 28, offset: 14376},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 440, col: 9, offset: 14430},
																																							run: (*parser).callonSingleQuoteBoldTextElement134,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 440, col: 9, offset: 14430},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 440, col: 9, offset: 14430},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 430, col: 78, offset: 14118},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 434, col: 25, offset: 14220},
																												run: (*parser).callonSingleQuoteBoldTextElement138,
																												expr: &seqExpr{
																													pos: position{line: 434, col: 25, offset: 14220},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 434, col: 25, offset: 14220},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 434, col: 38, offset: 14233},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 120, col: 18, offset: 3502},
																																run: (*parser).callonSingleQuoteBoldTextElement142,
																																expr: &seqExpr{
																																	pos: position{line: 120, col: 18, offset: 3502},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 120, col: 18, offset: 3502},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 120, col: 28, offset: 3512},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 120, col: 29, offset: 3513},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 434, col: 57, offset: 14252},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 434, col: 63, offset: 14258},
																																expr: &actionExpr{
																																	pos: position{line: 438, col: 17, offset: 14365},
																																	run: (*parser).callonSingleQuoteBoldTextElement149,
																																	expr: &seqExpr{
																																		pos: position{line: 438, col: 17, offset: 14365},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 438, col: 17, offset: 14365},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 438, col: 21, offset: 14369},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 438, col: 28, offset: 14376},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 438, col: 28, offset: 14376},
																																							run: (*parser).callonSingleQuoteBoldTextElement154,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 438, col: 28, offset: 14376},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 440, col: 9, offset: 14430},
																																							run: (*parser).callonSingleQuoteBoldTextElement156,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 440, col: 9, offset: 14430},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 440, col: 9, offset: 14430},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 434, col: 79, offset: 14274},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 423, col: 31, offset: 13720},
																												run: (*parser).callonSingleQuoteBoldTextElement160,
																												expr: &seqExpr{
																													pos: position{line: 423, col: 31, offset: 13720},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 423, col: 31, offset: 13720},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 423, col: 35, offset: 13724},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 120, col: 18, offset: 3502},
																																run: (*parser).callonSingleQuoteBoldTextElement164,
																																expr: &seqExpr{
																																	pos: position{line: 120, col: 18, offset: 3502},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 120, col: 18, offset: 3502},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 120, col: 28, offset: 3512},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 120, col: 29, offset: 3513},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 423, col: 54, offset: 13743},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 473, col: 8, offset: 15760},
																						run: (*parser).callonSingleQuoteBoldTextElement170,
																						expr: &litMatcher{
																							pos:        position{line: 473, col: 8, offset: 15760},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 458, col: 79, offset: 15136},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 460, col: 9, offset: 15209},
															run: (*parser).callonSingleQuoteBoldTextElement173,
															expr: &seqExpr{
																pos: position{line: 460, col: 9, offset: 15209},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 460, col: 9, offset: 15209},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 460, col: 14, offset: 15214},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2848, col: 7, offset: 94521},
																			run: (*parser).callonSingleQuoteBoldTextElement177,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2848, col: 7, offset: 94521},
																				expr: &charClassMatcher{
																					pos:        position{line: 2848, col: 7, offset: 94521},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 460, col: 22, offset: 15222},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2584, col: 11, offset: 86279},
												run: (*parser).callonSingleQuoteBoldTextElement181,
												expr: &charClassMatcher{
													pos:        position{line: 2584, col: 12, offset: 86280},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2609, col: 15, offset: 87247},
						run: (*parser).callonSingleQuoteBoldTextElement183,
						expr: &litMatcher{
							pos:        position{line: 2609, col: 15, offset: 87247},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2615, col: 14, offset: 87362},
						run: (*parser).callonSingleQuoteBoldTextElement185,
						expr: &litMatcher{
							pos:        position{line: 2615, col: 14, offset: 87362},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2619, col: 14, offset: 87438},
						run: (*parser).callonSingleQuoteBoldTextElement187,
						expr: &litMatcher{
							pos:        position{line: 2619, col: 14, offset: 87438},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2623, col: 15, offset: 87516},
						run: (*parser).callonSingleQuoteBoldTextElement189,
						expr: &litMatcher{
							pos:        position{line: 2623, col: 15, offset: 87516},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2627, col: 13, offset: 87591},
						run: (*parser).callonSingleQuoteBoldTextElement191,
						expr: &litMatcher{
							pos:        position{line: 2627, col: 13, offset: 87591},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2635, col: 22, offset: 87897},
						run: (*parser).callonSingleQuoteBoldTextElement193,
						expr: &seqExpr{
							pos: position{line: 2635, col: 22, offset: 87897},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2786, col: 13, offset: 92537},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2635, col: 31, offset: 87906},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2635, col: 35, offset: 87910},
									expr: &charClassMatcher{
										pos:        position{line: 2635, col: 36, offset: 87911},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1762, col: 7, offset: 58337},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1763, col: 7, offset: 58355},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1764, col: 7, offset: 58374},
						name: "QuotedTextInSingleQuoteBoldText",
					},
					&actionExpr{
						pos: position{line: 914, col: 23, offset: 28983},
						run: (*parser).callonSingleQuoteBoldTextElement202,
						expr: &seqExpr{
							pos: position{line: 914, col: 23, offset: 28983},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 912, col: 32, offset: 28951},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 914, col: 51, offset: 29011},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 914, col: 56, offset: 29016},
										run: (*parser).callonSingleQuoteBoldTextElement206,
										expr: &oneOrMoreExpr{
											pos: position{line: 914, col: 56, offset: 29016},
											expr: &charClassMatcher{
												pos:        position{line: 914, col: 56, offset: 29016},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 912, col: 32, offset: 28951},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 1780, col: 5, offset: 58832},
						val:        "[^\\r\\n *]",
						chars:      []rune{'\r', '\n', ' ', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1781, col: 7, offset: 58937},
						run: (*parser).callonSingleQuoteBoldTextElement211,
						expr: &seqExpr{
							pos: position{line: 1781, col: 7, offset: 58937},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1781, col: 7, offset: 58937},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&actionExpr{
									pos: position{line: 2790, col: 14, offset: 92611},
									run: (*parser).callonSingleQuoteBoldTextElement214,
									expr: &oneOrMoreExpr{
										pos: position{line: 2790, col: 14, offset: 92611},
										expr: &charClassMatcher{
											pos:        position{line: 2790, col: 14, offset: 92611},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteBoldText",
			pos:  position{line: 1768, col: 1, offset: 58475},
			expr: &actionExpr{
				pos: position{line: 1769, col: 5, offset: 58515},
				run: (*parser).callonQuotedTextInSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1769, col: 5, offset: 58515},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1769, col: 5, offset: 58515},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1769, col: 16, offset: 58526},
								expr: &ruleRefExpr{
									pos:  position{line: 1769, col: 17, offset: 58527},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1770, col: 5, offset: 58553},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1771, col: 9, offset: 58568},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1771, col: 9, offset: 58568},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1772, col: 11, offset: 58598},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1773, col: 11, offset: 58619},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1774, col: 11, offset: 58643},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1775, col: 11, offset: 58664},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1776, col: 11, offset: 58688},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1785, col: 1, offset: 59112},
			expr: &choiceExpr{
				pos: position{line: 1786, col: 5, offset: 59136},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1786, col: 5, offset: 59136},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1786, col: 5, offset: 59136},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1786, col: 5, offset: 59136},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1667, col: 25, offset: 55438},
										run: (*parser).callonEscapedBoldText5,
										expr: &seqExpr{
											pos: position{line: 1667, col: 25, offset: 55438},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1667, col: 25, offset: 55438},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1667, col: 30, offset: 55443},
													expr: &litMatcher{
														pos:        position{line: 1667, col: 30, offset: 55443},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1786, col: 40, offset: 59171},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1786, col: 45, offset: 59176},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1786, col: 55, offset: 59186},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1786, col: 84, offset: 59215},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1788, col: 9, offset: 59372},
						run: (*parser).callonEscapedBoldText14,
						expr: &seqExpr{
							pos: position{line: 1788, col: 9, offset: 59372},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1788, col: 9, offset: 59372},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1663, col: 25, offset: 55365},
										run: (*parser).callonEscapedBoldText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1663, col: 25, offset: 55365},
											expr: &litMatcher{
												pos:        position{line: 1663, col: 25, offset: 55365},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1788, col: 44, offset: 59407},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1788, col: 49, offset: 59412},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1788, col: 59, offset: 59422},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1788, col: 88, offset: 59451},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1791, col: 9, offset: 59651},
						run: (*parser).callonEscapedBoldText24,
						expr: &seqExpr{
							pos: position{line: 1791, col: 9, offset: 59651},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1791, col: 9, offset: 59651},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1663, col: 25, offset: 55365},
										run: (*parser).callonEscapedBoldText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1663, col: 25, offset: 55365},
											expr: &litMatcher{
												pos:        position{line: 1663, col: 25, offset: 55365},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1791, col: 44, offset: 59686},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1791, col: 48, offset: 59690},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1791, col: 58, offset: 59700},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1791, col: 87, offset: 59729},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1799, col: 1, offset: 60027},
			expr: &choiceExpr{
				pos: position{line: 1799, col: 15, offset: 60041},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1799, col: 15, offset: 60041},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1799, col: 39, offset: 60065},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1813, col: 1, offset: 60393},
			expr: &actionExpr{
				pos: position{line: 1814, col: 5, offset: 60423},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1814, col: 5, offset: 60423},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1811, col: 35, offset: 60387},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1815, col: 5, offset: 60459},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1815, col: 15, offset: 60469},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1811, col: 35, offset: 60387},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1820, col: 1, offset: 60677},
			expr: &oneOrMoreExpr{
				pos: position{line: 1820, col: 34, offset: 60710},
				expr: &ruleRefExpr{
					pos:  position{line: 1820, col: 34, offset: 60710},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1822, col: 1, offset: 60742},
			expr: &actionExpr{
				pos: position{line: 1823, col: 5, offset: 60779},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1823, col: 5, offset: 60779},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1823, col: 5, offset: 60779},
							expr: &litMatcher{
								pos:        position{line: 1811, col: 35, offset: 60387},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1824, col: 5, offset: 60815},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1825, col: 9, offset: 60833},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1804, col: 5, offset: 60139},
										run: (*parser).callonDoubleQuoteItalicTextElement7,
										expr: &seqExpr{
											pos: position{line: 1804, col: 5, offset: 60139},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1804, col: 5, offset: 60139},
													expr: &charClassMatcher{
														pos:        position{line: 1804, col: 5, offset: 60139},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1804, col: 15, offset: 60149},
													expr: &choiceExpr{
														pos: position{line: 1804, col: 17, offset: 60151},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2860, col: 10, offset: 94799},
																run: (*parser).callonDoubleQuoteItalicTextElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 2860, col: 11, offset: 94800},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1801, col: 24, offset: 60111},
																val:        "_",
																ignoreCase: false,
																want:       "\"_\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2865, col: 11, offset: 94908},
										run: (*parser).callonDoubleQuoteItalicTextElement16,
										expr: &oneOrMoreExpr{
											pos: position{line: 2865, col: 11, offset: 94908},
											expr: &charClassMatcher{
												pos:        position{line: 2865, col: 12, offset: 94909},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 1827, col: 11, offset: 60908},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2870, col: 12, offset: 95022},
												run: (*parser).callonDoubleQuoteItalicTextElement20,
												expr: &choiceExpr{
													pos: position{line: 2870, col: 13, offset: 95023},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2870, col: 13, offset: 95023},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2870, col: 20, offset: 95030},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2870, col: 29, offset: 95039},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1827, col: 19, offset: 60916},
												expr: &actionExpr{
													pos: position{line: 2870, col: 12, offset: 95022},
													run: (*parser).callonDoubleQuoteItalicTextElement26,
													expr: &choiceExpr{
														pos: position{line: 2870, col: 13, offset: 95023},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2870, col: 13, offset: 95023},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 20, offset: 95030},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 29, offset: 95039},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 416, col: 5, offset: 13530},
										run: (*parser).callonDoubleQuoteItalicTextElement31,
										expr: &seqExpr{
											pos: position{line: 416, col: 5, offset: 13530},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 416, col: 5, offset: 13530},
													run: (*parser).callonDoubleQuoteItalicTextElement33,
												},
												&labeledExpr{
													pos:   position{line: 419, col: 5, offset: 13594},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 419, col: 14, offset: 13603},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 430, col: 25, offset: 14065},
																run: (*parser).callonDoubleQuoteItalicTextElement36,
																expr: &seqExpr{
																	pos: position{line: 430, col: 25, offset: 14065},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 430, col: 25, offset: 14065},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 430, col: 37, offset: 14077},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonDoubleQuoteItalicTextElement40,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 430, col: 56, offset: 14096},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 430, col: 62, offset: 14102},
																				expr: &actionExpr{
																					pos: position{line: 438, col: 17, offset: 14365},
																					run: (*parser).callonDoubleQuoteItalicTextElement47,
																					expr: &seqExpr{
																						pos: position{line: 438, col: 17, offset: 14365},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 438, col: 17, offset: 14365},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 438, col: 21, offset: 14369},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 438, col: 28, offset: 14376},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 438, col: 28, offset: 14376},
																											run: (*parser).callonDoubleQuoteItalicTextElement52,
																											expr: &charClassMatcher{
																												pos:        position{line: 438, col: 28, offset: 14376},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 440, col: 9, offset: 14430},
																											run: (*parser).callonDoubleQuoteItalicTextElement54,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 440, col: 9, offset: 14430},
																												expr: &charClassMatcher{
																													pos:        position{line: 440, col: 9, offset: 14430},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 430, col: 78, offset: 14118},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 434, col: 25, offset: 14220},
																run: (*parser).callonDoubleQuoteItalicTextElement58,
																expr: &seqExpr{
																	pos: position{line: 434, col: 25, offset: 14220},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 434, col: 25, offset: 14220},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 434, col: 38, offset: 14233},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonDoubleQuoteItalicTextElement62,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 434, col: 57, offset: 14252},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 434, col: 63, offset: 14258},
																				expr: &actionExpr{
																					pos: position{line: 438, col: 17, offset: 14365},
																					run: (*parser).callonDoubleQuoteItalicTextElement69,
																					expr: &seqExpr{
																						pos: position{line: 438, col: 17, offset: 14365},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 438, col: 17, offset: 14365},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 438, col: 21, offset: 14369},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 438, col: 28, offset: 14376},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 438, col: 28, offset: 14376},
																											run: (*parser).callonDoubleQuoteItalicTextElement74,
																											expr: &charClassMatcher{
																												pos:        position{line: 438, col: 28, offset: 14376},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 440, col: 9, offset: 14430},
																											run: (*parser).callonDoubleQuoteItalicTextElement76,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 440, col: 9, offset: 14430},
																												expr: &charClassMatcher{
																													pos:        position{line: 440, col: 9, offset: 14430},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 434, col: 79, offset: 14274},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 423, col: 31, offset: 13720},
																run: (*parser).callonDoubleQuoteItalicTextElement80,
																expr: &seqExpr{
																	pos: position{line: 423, col: 31, offset: 13720},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 423, col: 31, offset: 13720},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 423, col: 35, offset: 13724},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonDoubleQuoteItalicTextElement84,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 423, col: 54, offset: 13743},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2576, col: 5, offset: 86006},
										run: (*parser).callonDoubleQuoteItalicTextElement90,
										expr: &seqExpr{
											pos: position{line: 2576, col: 5, offset: 86006},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2576, col: 5, offset: 86006},
													run: (*parser).callonDoubleQuoteItalicTextElement92,
												},
												&labeledExpr{
													pos:   position{line: 2579, col: 5, offset: 86077},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2581, col: 9, offset: 86175},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2581, col: 9, offset: 86175},
																run: (*parser).callonDoubleQuoteItalicTextElement95,
																expr: &choiceExpr{
																	pos: position{line: 458, col: 27, offset: 15084},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 458, col: 27, offset: 15084},
																			run: (*parser).callonDoubleQuoteItalicTextElement97,
																			expr: &seqExpr{
																				pos: position{line: 458, col: 27, offset: 15084},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 458, col: 27, offset: 15084},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 458, col: 32, offset: 15089},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 7, offset: 94521},
																							run: (*parser).callonDoubleQuoteItalicTextElement101,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 7, offset: 94521},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 458, col: 40, offset: 15097},
																						expr: &actionExpr{
																							pos: position{line: 2860, col: 10, offset: 94799},
																							run: (*parser).callonDoubleQuoteItalicTextElement105,
																							expr: &charClassMatcher{
																								pos:        position{line: 2860, col: 11, offset: 94800},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 458, col: 47, offset: 15104},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 458, col: 51, offset: 15108},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 468, col: 24, offset: 15521},
																							expr: &choiceExpr{
																								pos: position{line: 469, col: 5, offset: 15527},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 469, col: 6, offset: 15528},
																										run: (*parser).callonDoubleQuoteItalicTextElement111,
																										expr: &seqExpr{
																											pos: position{line: 469, col: 6, offset: 15528},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 469, col: 6, offset: 15528},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 469, col: 14, offset: 15536},
																													expr: &charClassMatcher{
																														pos:        position{line: 469, col: 14, offset: 15536},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 416, col: 5, offset: 13530},
																										run: (*parser).callonDoubleQuoteItalicTextElement116,
																										expr: &seqExpr{
																											pos: position{line: 416, col: 5, offset: 13530},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 416, col: 5, offset: 13530},
																													run: (*parser).callonDoubleQuoteItalicTextElement118,
																												},
																												&labeledExpr{
																													pos:   position{line: 419, col: 5, offset: 13594},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 419, col: 14, offset: 13603},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 430, col: 25, offset: 14065},
																																run: (*parser).callonDoubleQuoteItalicTextElement121,
																																expr: &seqExpr{
																																	pos: position{line: 430, col: 25, offset: 14065},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 430, col: 25, offset: 14065},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 430, col: 37, offset: 14077},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonDoubleQuoteItalicTextElement125,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 430, col: 56, offset: 14096},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 430, col: 62, offset: 14102},
																																				expr: &actionExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					run: (*parser).callonDoubleQuoteItalicTextElement132,
																																					expr: &seqExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 438, col: 17, offset: 14365},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 438, col: 21, offset: 14369},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 438, col: 28, offset: 14376},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 438, col: 28, offset: 14376},
																																											run: (*parser).callonDoubleQuoteItalicTextElement137,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 438, col: 28, offset: 14376},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											run: (*parser).callonDoubleQuoteItalicTextElement139,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 440, col: 9, offset: 14430},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 430, col: 78, offset: 14118},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 434, col: 25, offset: 14220},
																																run: (*parser).callonDoubleQuoteItalicTextElement143,
																																expr: &seqExpr{
																																	pos: position{line: 434, col: 25, offset: 14220},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 434, col: 25, offset: 14220},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 434, col: 38, offset: 14233},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonDoubleQuoteItalicTextElement147,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 434, col: 57, offset: 14252},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 434, col: 63, offset: 14258},
																																				expr: &actionExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					run: (*parser).callonDoubleQuoteItalicTextElement154,
																																					expr: &seqExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 438, col: 17, offset: 14365},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 438, col: 21, offset: 14369},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 438, col: 28, offset: 14376},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 438, col: 28, offset: 14376},
																																											run: (*parser).callonDoubleQuoteItalicTextElement159,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 438, col: 28, offset: 14376},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											run: (*parser).callonDoubleQuoteItalicTextElement161,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 440, col: 9, offset: 14430},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 434, col: 79, offset: 14274},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 423, col: 31, offset: 13720},
																																run: (*parser).callonDoubleQuoteItalicTextElement165,
																																expr: &seqExpr{
																																	pos: position{line: 423, col: 31, offset: 13720},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 423, col: 31, offset: 13720},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 423, col: 35, offset: 13724},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonDoubleQuoteItalicTextElement169,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 423, col: 54, offset: 13743},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 473, col: 8, offset: 15760},
																										run: (*parser).callonDoubleQuoteItalicTextElement175,
																										expr: &litMatcher{
																											pos:        position{line: 473, col: 8, offset: 15760},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 458, col: 79, offset: 15136},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 460, col: 9, offset: 15209},
																			run: (*parser).callonDoubleQuoteItalicTextElement178,
																			expr: &seqExpr{
																				pos: position{line: 460, col: 9, offset: 15209},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 460, col: 9, offset: 15209},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 460, col: 14, offset: 15214},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 7, offset: 94521},
																							run: (*parser).callonDoubleQuoteItalicTextElement182,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 7, offset: 94521},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 460, col: 22, offset: 15222},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2584, col: 11, offset: 86279},
																run: (*parser).callonDoubleQuoteItalicTextElement186,
																expr: &charClassMatcher{
																	pos:        position{line: 2584, col: 12, offset: 86280},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2609, col: 15, offset: 87247},
										run: (*parser).callonDoubleQuoteItalicTextElement188,
										expr: &litMatcher{
											pos:        position{line: 2609, col: 15, offset: 87247},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2615, col: 14, offset: 87362},
										run: (*parser).callonDoubleQuoteItalicTextElement190,
										expr: &litMatcher{
											pos:        position{line: 2615, col: 14, offset: 87362},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2619, col: 14, offset: 87438},
										run: (*parser).callonDoubleQuoteItalicTextElement192,
										expr: &litMatcher{
											pos:        position{line: 2619, col: 14, offset: 87438},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2623, col: 15, offset: 87516},
										run: (*parser).callonDoubleQuoteItalicTextElement194,
										expr: &litMatcher{
											pos:        position{line: 2623, col: 15, offset: 87516},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2627, col: 13, offset: 87591},
										run: (*parser).callonDoubleQuoteItalicTextElement196,
										expr: &litMatcher{
											pos:        position{line: 2627, col: 13, offset: 87591},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2635, col: 22, offset: 87897},
										run: (*parser).callonDoubleQuoteItalicTextElement198,
										expr: &seqExpr{
											pos: position{line: 2635, col: 22, offset: 87897},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2786, col: 13, offset: 92537},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2635, col: 31, offset: 87906},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2635, col: 35, offset: 87910},
													expr: &charClassMatcher{
														pos:        position{line: 2635, col: 36, offset: 87911},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1831, col: 11, offset: 61045},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1832, col: 11, offset: 61067},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1833, col: 11, offset: 61090},
										name: "QuotedTextInDoubleQuoteItalicText",
									},
									&actionExpr{
										pos: position{line: 914, col: 23, offset: 28983},
										run: (*parser).callonDoubleQuoteItalicTextElement207,
										expr: &seqExpr{
											pos: position{line: 914, col: 23, offset: 28983},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 912, col: 32, offset: 28951},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 914, col: 51, offset: 29011},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 914, col: 56, offset: 29016},
														run: (*parser).callonDoubleQuoteItalicTextElement211,
														expr: &oneOrMoreExpr{
															pos: position{line: 914, col: 56, offset: 29016},
															expr: &charClassMatcher{
																pos:        position{line: 914, col: 56, offset: 29016},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 912, col: 32, offset: 28951},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 1851, col: 5, offset: 61601},
										val:        "[^\\r\\n_]",
										chars:      []rune{'\r', '\n', '_'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 1852, col: 7, offset: 61700},
										run: (*parser).callonDoubleQuoteItalicTextElement216,
										expr: &seqExpr{
											pos: position{line: 1852, col: 7, offset: 61700},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1852, col: 7, offset: 61700},
													val:        "__",
													ignoreCase: false,
													want:       "\"__\"",
												},
												&actionExpr{
													pos: position{line: 2790, col: 14, offset: 92611},
													run: (*parser).callonDoubleQuoteItalicTextElement219,
													expr: &oneOrMoreExpr{
														pos: position{line: 2790, col: 14, offset: 92611},
														expr: &charClassMatcher{
															pos:        position{line: 2790, col: 14, offset: 92611},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteItalicText",
			pos:  position{line: 1839, col: 1, offset: 61248},
			expr: &actionExpr{
				pos: position{line: 1840, col: 5, offset: 61290},
				run: (*parser).callonQuotedTextInDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1840, col: 5, offset: 61290},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1840, col: 5, offset: 61290},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1840, col: 16, offset: 61301},
								expr: &ruleRefExpr{
									pos:  position{line: 1840, col: 17, offset: 61302},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1841, col: 5, offset: 61328},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1841, col: 11, offset: 61334},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1841, col: 11, offset: 61334},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1842, col: 11, offset: 61366},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1843, col: 11, offset: 61385},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1844, col: 11, offset: 61406},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1845, col: 11, offset: 61430},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1846, col: 11, offset: 61454},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1863, col: 1, offset: 62076},
			expr: &actionExpr{
				pos: position{line: 1864, col: 5, offset: 62106},
				run: (*parser).callonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1864, col: 5, offset: 62106},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1859, col: 40, offset: 62027},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&labeledExpr{
							pos:   position{line: 1865, col: 5, offset: 62146},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1865, col: 15, offset: 62156},
								name: "SingleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1861, col: 38, offset: 62070},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1870, col: 1, offset: 62323},
			expr: &actionExpr{
				pos: position{line: 1871, col: 5, offset: 62361},
				run: (*parser).callonSingleQuoteItalicTextElements1,
				expr: &seqExpr{
					pos: position{line: 1871, col: 5, offset: 62361},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1871, col: 5, offset: 62361},
							expr: &notExpr{
								pos: position{line: 2874, col: 8, offset: 95112},
								expr: &anyMatcher{
									line: 2874, col: 9, offset: 95113,
								},
							},
						},
						&notExpr{
							pos: position{line: 1871, col: 10, offset: 62366},
							expr: &actionExpr{
								pos: position{line: 2860, col: 10, offset: 94799},
								run: (*parser).callonSingleQuoteItalicTextElements7,
								expr: &charClassMatcher{
									pos:        position{line: 2860, col: 11, offset: 94800},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1872, col: 5, offset: 62405},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1872, col: 14, offset: 62414},
								expr: &ruleRefExpr{
									pos:  position{line: 1872, col: 15, offset: 62415},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1873, col: 5, offset: 62450},
							run: (*parser).callonSingleQuoteItalicTextElements12,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1879, col: 1, offset: 62591},
			expr: &choiceExpr{
				pos: position{line: 1880, col: 5, offset: 62628},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1804, col: 5, offset: 60139},
						run: (*parser).callonSingleQuoteItalicTextElement2,
						expr: &seqExpr{
							pos: position{line: 1804, col: 5, offset: 60139},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1804, col: 5, offset: 60139},
									expr: &charClassMatcher{
										pos:        position{line: 1804, col: 5, offset: 60139},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1804, col: 15, offset: 60149},
									expr: &choiceExpr{
										pos: position{line: 1804, col: 17, offset: 60151},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2860, col: 10, offset: 94799},
												run: (*parser).callonSingleQuoteItalicTextElement8,
												expr: &charClassMatcher{
													pos:        position{line: 2860, col: 11, offset: 94800},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 1801, col: 24, offset: 60111},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2865, col: 11, offset: 94908},
						run: (*parser).callonSingleQuoteItalicTextElement11,
						expr: &oneOrMoreExpr{
							pos: position{line: 2865, col: 11, offset: 94908},
							expr: &charClassMatcher{
								pos:        position{line: 2865, col: 12, offset: 94909},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 1882, col: 7, offset: 62662},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 2870, col: 12, offset: 95022},
								run: (*parser).callonSingleQuoteItalicTextElement15,
								expr: &choiceExpr{
									pos: position{line: 2870, col: 13, offset: 95023},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2870, col: 13, offset: 95023},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2870, col: 20, offset: 95030},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2870, col: 29, offset: 95039},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 1882, col: 15, offset: 62670},
								expr: &actionExpr{
									pos: position{line: 2870, col: 12, offset: 95022},
									run: (*parser).callonSingleQuoteItalicTextElement21,
									expr: &choiceExpr{
										pos: position{line: 2870, col: 13, offset: 95023},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2870, col: 13, offset: 95023},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 20, offset: 95030},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 29, offset: 95039},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 416, col: 5, offset: 13530},
						run: (*parser).callonSingleQuoteItalicTextElement26,
						expr: &seqExpr{
							pos: position{line: 416, col: 5, offset: 13530},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 416, col: 5, offset: 13530},
									run: (*parser).callonSingleQuoteItalicTextElement28,
								},
								&labeledExpr{
									pos:   position{line: 419, col: 5, offset: 13594},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 419, col: 14, offset: 13603},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 430, col: 25, offset: 14065},
												run: (*parser).callonSingleQuoteItalicTextElement31,
												expr: &seqExpr{
													pos: position{line: 430, col: 25, offset: 14065},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 430, col: 25, offset: 14065},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 430, col: 37, offset: 14077},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 120, col: 18, offset: 3502},
																run: (*parser).callonSingleQuoteItalicTextElement35,
																expr: &seqExpr{
																	pos: position{line: 120, col: 18, offset: 3502},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 120, col: 18, offset: 3502},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 120, col: 28, offset: 3512},
																			expr: &charClassMatcher{
																				pos:        position{line: 120, col: 29, offset: 3513},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 430, col: 56, offset: 14096},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 430, col: 62, offset: 14102},
																expr: &actionExpr{
																	pos: position{line: 438, col: 17, offset: 14365},
																	run: (*parser).callonSingleQuoteItalicTextElement42,
																	expr: &seqExpr{
																		pos: position{line: 438, col: 17, offset: 14365},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 438, col: 17, offset: 14365},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 438, col: 21, offset: 14369},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 438, col: 28, offset: 14376},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 438, col: 28, offset: 14376},
																							run: (*parser).callonSingleQuoteItalicTextElement47,
																							expr: &charClassMatcher{
																								pos:        position{line: 438, col: 28, offset: 14376},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 440, col: 9, offset: 14430},
																							run: (*parser).callonSingleQuoteItalicTextElement49,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 440, col: 9, offset: 14430},
																								expr: &charClassMatcher{
																									pos:        position{line: 440, col: 9, offset: 14430},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 430, col: 78, offset: 14118},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 434, col: 25, offset: 14220},
												run: (*parser).callonSingleQuoteItalicTextElement53,
												expr: &seqExpr{
													pos: position{line: 434, col: 25, offset: 14220},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 434, col: 25, offset: 14220},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 434, col: 38, offset: 14233},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 120, col: 18, offset: 3502},
																run: (*parser).callonSingleQuoteItalicTextElement57,
																expr: &seqExpr{
																	pos: position{line: 120, col: 18, offset: 3502},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 120, col: 18, offset: 3502},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 120, col: 28, offset: 3512},
																			expr: &charClassMatcher{
																				pos:        position{line: 120, col: 29, offset: 3513},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 434, col: 57, offset: 14252},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 434, col: 63, offset: 14258},
																expr: &actionExpr{
																	pos: position{line: 438, col: 17, offset: 14365},
																	run: (*parser).callonSingleQuoteItalicTextElement64,
																	expr: &seqExpr{
																		pos: position{line: 438, col: 17, offset: 14365},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 438, col: 17, offset: 14365},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 438, col: 21, offset: 14369},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 438, col: 28, offset: 14376},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 438, col: 28, offset: 14376},
																							run: (*parser).callonSingleQuoteItalicTextElement69,
																							expr: &charClassMatcher{
																								pos:        position{line: 438, col: 28, offset: 14376},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 440, col: 9, offset: 14430},
																							run: (*parser).callonSingleQuoteItalicTextElement71,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 440, col: 9, offset: 14430},
																								expr: &charClassMatcher{
																									pos:        position{line: 440, col: 9, offset: 14430},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 434, col: 79, offset: 14274},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 423, col: 31, offset: 13720},
												run: (*parser).callonSingleQuoteItalicTextElement75,
												expr: &seqExpr{
													pos: position{line: 423, col: 31, offset: 13720},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 423, col: 31, offset: 13720},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 423, col: 35, offset: 13724},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 120, col: 18, offset: 3502},
																run: (*parser).callonSingleQuoteItalicTextElement79,
																expr: &seqExpr{
																	pos: position{line: 120, col: 18, offset: 3502},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 120, col: 18, offset: 3502},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 120, col: 28, offset: 3512},
																			expr: &charClassMatcher{
																				pos:        position{line: 120, col: 29, offset: 3513},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 423, col: 54, offset: 13743},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2576, col: 5, offset: 86006},
						run: (*parser).callonSingleQuoteItalicTextElement85,
						expr: &seqExpr{
							pos: position{line: 2576, col: 5, offset: 86006},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2576, col: 5, offset: 86006},
									run: (*parser).callonSingleQuoteItalicTextElement87,
								},
								&labeledExpr{
									pos:   position{line: 2579, col: 5, offset: 86077},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2581, col: 9, offset: 86175},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2581, col: 9, offset: 86175},
												run: (*parser).callonSingleQuoteItalicTextElement90,
												expr: &choiceExpr{
													pos: position{line: 458, col: 27, offset: 15084},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 458, col: 27, offset: 15084},
															run: (*parser).callonSingleQuoteItalicTextElement92,
															expr: &seqExpr{
																pos: position{line: 458, col: 27, offset: 15084},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 458, col: 27, offset: 15084},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 458, col: 32, offset: 15089},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2848, col: 7, offset: 94521},
																			run: (*parser).callonSingleQuoteItalicTextElement96,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2848, col: 7, offset: 94521},
																				expr: &charClassMatcher{
																					pos:        position{line: 2848, col: 7, offset: 94521},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 458, col: 40, offset: 15097},
																		expr: &actionExpr{
																			pos: position{line: 2860, col: 10, offset: 94799},
																			run: (*parser).callonSingleQuoteItalicTextElement100,
																			expr: &charClassMatcher{
																				pos:        position{line: 2860, col: 11, offset: 94800},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 458, col: 47, offset: 15104},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 458, col: 51, offset: 15108},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 468, col: 24, offset: 15521},
																			expr: &choiceExpr{
																				pos: position{line: 469, col: 5, offset: 15527},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 469, col: 6, offset: 15528},
																						run: (*parser).callonSingleQuoteItalicTextElement106,
																						expr: &seqExpr{
																							pos: position{line: 469, col: 6, offset: 15528},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 469, col: 6, offset: 15528},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 469, col: 14, offset: 15536},
																									expr: &charClassMatcher{
																										pos:        position{line: 469, col: 14, offset: 15536},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 416, col: 5, offset: 13530},
																						run: (*parser).callonSingleQuoteItalicTextElement111,
																						expr: &seqExpr{
																							pos: position{line: 416, col: 5, offset: 13530},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 416, col: 5, offset: 13530},
																									run: (*parser).callonSingleQuoteItalicTextElement113,
																								},
																								&labeledExpr{
																									pos:   position{line: 419, col: 5, offset: 13594},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 419, col: 14, offset: 13603},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 430, col: 25, offset: 14065},
																												run: (*parser).callonSingleQuoteItalicTextElement116,
																												expr: &seqExpr{
																													pos: position{line: 430, col: 25, offset: 14065},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 430, col: 25, offset: 14065},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 430, col: 37, offset: 14077},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 120, col: 18, offset: 3502},
																																run: (*parser).callonSingleQuoteItalicTextElement120,
																																expr: &seqExpr{
																																	pos: position{line: 120, col: 18, offset: 3502},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 120, col: 18, offset: 3502},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 120, col: 28, offset: 3512},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 120, col: 29, offset: 3513},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 430, col: 56, offset: 14096},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 430, col: 62, offset: 14102},
																																expr: &actionExpr{
																																	pos: position{line: 438, col: 17, offset: 14365},
																																	run: (*parser).callonSingleQuoteItalicTextElement127,
																																	expr: &seqExpr{
																																		pos: position{line: 438, col: 17, offset: 14365},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 438, col: 17, offset: 14365},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 438, col: 21, offset: 14369},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 438, col: 28, offset: 14376},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 438, col: 28, offset: 14376},
																																							run: (*parser).callonSingleQuoteItalicTextElement132,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 438, col: 28, offset: 14376},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 440, col: 9, offset: 14430},
																																							run: (*parser).callonSingleQuoteItalicTextElement134,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 440, col: 9, offset: 14430},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 440, col: 9, offset: 14430},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 430, col: 78, offset: 14118},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 434, col: 25, offset: 14220},
																												run: (*parser).callonSingleQuoteItalicTextElement138,
																												expr: &seqExpr{
																													pos: position{line: 434, col: 25, offset: 14220},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 434, col: 25, offset: 14220},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 434, col: 38, offset: 14233},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 120, col: 18, offset: 3502},
																																run: (*parser).callonSingleQuoteItalicTextElement142,
																																expr: &seqExpr{
																																	pos: position{line: 120, col: 18, offset: 3502},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 120, col: 18, offset: 3502},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 120, col: 28, offset: 3512},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 120, col: 29, offset: 3513},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 434, col: 57, offset: 14252},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 434, col: 63, offset: 14258},
																																expr: &actionExpr{
																																	pos: position{line: 438, col: 17, offset: 14365},
																																	run: (*parser).callonSingleQuoteItalicTextElement149,
																																	expr: &seqExpr{
																																		pos: position{line: 438, col: 17, offset: 14365},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 438, col: 17, offset: 14365},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 438, col: 21, offset: 14369},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 438, col: 28, offset: 14376},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 438, col: 28, offset: 14376},
																																							run: (*parser).callonSingleQuoteItalicTextElement154,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 438, col: 28, offset: 14376},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 440, col: 9, offset: 14430},
																																							run: (*parser).callonSingleQuoteItalicTextElement156,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 440, col: 9, offset: 14430},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 440, col: 9, offset: 14430},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 434, col: 79, offset: 14274},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 423, col: 31, offset: 13720},
																												run: (*parser).callonSingleQuoteItalicTextElement160,
																												expr: &seqExpr{
																													pos: position{line: 423, col: 31, offset: 13720},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 423, col: 31, offset: 13720},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 423, col: 35, offset: 13724},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 120, col: 18, offset: 3502},
																																run: (*parser).callonSingleQuoteItalicTextElement164,
																																expr: &seqExpr{
																																	pos: position{line: 120, col: 18, offset: 3502},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 120, col: 18, offset: 3502},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 120, col: 28, offset: 3512},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 120, col: 29, offset: 3513},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 423, col: 54, offset: 13743},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 473, col: 8, offset: 15760},
																						run: (*parser).callonSingleQuoteItalicTextElement170,
																						expr: &litMatcher{
																							pos:        position{line: 473, col: 8, offset: 15760},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 458, col: 79, offset: 15136},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 460, col: 9, offset: 15209},
															run: (*parser).callonSingleQuoteItalicTextElement173,
															expr: &seqExpr{
																pos: position{line: 460, col: 9, offset: 15209},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 460, col: 9, offset: 15209},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 460, col: 14, offset: 15214},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2848, col: 7, offset: 94521},
																			run: (*parser).callonSingleQuoteItalicTextElement177,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2848, col: 7, offset: 94521},
																				expr: &charClassMatcher{
																					pos:        position{line: 2848, col: 7, offset: 94521},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 460, col: 22, offset: 15222},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2584, col: 11, offset: 86279},
												run: (*parser).callonSingleQuoteItalicTextElement181,
												expr: &charClassMatcher{
													pos:        position{line: 2584, col: 12, offset: 86280},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2609, col: 15, offset: 87247},
						run: (*parser).callonSingleQuoteItalicTextElement183,
						expr: &litMatcher{
							pos:        position{line: 2609, col: 15, offset: 87247},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2615, col: 14, offset: 87362},
						run: (*parser).callonSingleQuoteItalicTextElement185,
						expr: &litMatcher{
							pos:        position{line: 2615, col: 14, offset: 87362},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2619, col: 14, offset: 87438},
						run: (*parser).callonSingleQuoteItalicTextElement187,
						expr: &litMatcher{
							pos:        position{line: 2619, col: 14, offset: 87438},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2623, col: 15, offset: 87516},
						run: (*parser).callonSingleQuoteItalicTextElement189,
						expr: &litMatcher{
							pos:        position{line: 2623, col: 15, offset: 87516},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2627, col: 13, offset: 87591},
						run: (*parser).callonSingleQuoteItalicTextElement191,
						expr: &litMatcher{
							pos:        position{line: 2627, col: 13, offset: 87591},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2635, col: 22, offset: 87897},
						run: (*parser).callonSingleQuoteItalicTextElement193,
						expr: &seqExpr{
							pos: position{line: 2635, col: 22, offset: 87897},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2786, col: 13, offset: 92537},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2635, col: 31, offset: 87906},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2635, col: 35, offset: 87910},
									expr: &charClassMatcher{
										pos:        position{line: 2635, col: 36, offset: 87911},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1886, col: 7, offset: 62783},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1887, col: 7, offset: 62801},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1888, col: 7, offset: 62820},
						name: "QuotedTextInSingleQuoteItalicText",
					},
					&actionExpr{
						pos: position{line: 914, col: 23, offset: 28983},
						run: (*parser).callonSingleQuoteItalicTextElement202,
						expr: &seqExpr{
							pos: position{line: 914, col: 23, offset: 28983},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 912, col: 32, offset: 28951},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 914, col: 51, offset: 29011},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 914, col: 56, offset: 29016},
										run: (*parser).callonSingleQuoteItalicTextElement206,
										expr: &oneOrMoreExpr{
											pos: position{line: 914, col: 56, offset: 29016},
											expr: &charClassMatcher{
												pos:        position{line: 914, col: 56, offset: 29016},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 912, col: 32, offset: 28951},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 1904, col: 5, offset: 63277},
						val:        "[^\\r\\n _]",
						chars:      []rune{'\r', '\n', ' ', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1905, col: 7, offset: 63384},
						run: (*parser).callonSingleQuoteItalicTextElement211,
						expr: &seqExpr{
							pos: position{line: 1905, col: 7, offset: 63384},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1905, col: 7, offset: 63384},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&actionExpr{
									pos: position{line: 2790, col: 14, offset: 92611},
									run: (*parser).callonSingleQuoteItalicTextElement214,
									expr: &oneOrMoreExpr{
										pos: position{line: 2790, col: 14, offset: 92611},
										expr: &charClassMatcher{
											pos:        position{line: 2790, col: 14, offset: 92611},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteItalicText",
			pos:  position{line: 1892, col: 1, offset: 62925},
			expr: &actionExpr{
				pos: position{line: 1893, col: 5, offset: 62966},
				run: (*parser).callonQuotedTextInSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1893, col: 5, offset: 62966},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1893, col: 5, offset: 62966},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1893, col: 16, offset: 62977},
								expr: &ruleRefExpr{
									pos:  position{line: 1893, col: 17, offset: 62978},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1894, col: 5, offset: 63004},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1894, col: 11, offset: 63010},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1894, col: 11, offset: 63010},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1895, col: 11, offset: 63029},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1896, col: 11, offset: 63061},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1897, col: 11, offset: 63082},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1898, col: 11, offset: 63106},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1899, col: 11, offset: 63130},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1909, col: 1, offset: 63562},
			expr: &choiceExpr{
				pos: position{line: 1910, col: 5, offset: 63588},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1910, col: 5, offset: 63588},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1910, col: 5, offset: 63588},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1910, col: 5, offset: 63588},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1667, col: 25, offset: 55438},
										run: (*parser).callonEscapedItalicText5,
										expr: &seqExpr{
											pos: position{line: 1667, col: 25, offset: 55438},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1667, col: 25, offset: 55438},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1667, col: 30, offset: 55443},
													expr: &litMatcher{
														pos:        position{line: 1667, col: 30, offset: 55443},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1910, col: 40, offset: 63623},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1910, col: 45, offset: 63628},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1910, col: 55, offset: 63638},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1910, col: 86, offset: 63669},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1912, col: 9, offset: 63826},
						run: (*parser).callonEscapedItalicText14,
						expr: &seqExpr{
							pos: position{line: 1912, col: 9, offset: 63826},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1912, col: 9, offset: 63826},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1663, col: 25, offset: 55365},
										run: (*parser).callonEscapedItalicText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1663, col: 25, offset: 55365},
											expr: &litMatcher{
												pos:        position{line: 1663, col: 25, offset: 55365},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1912, col: 44, offset: 63861},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1912, col: 49, offset: 63866},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1912, col: 59, offset: 63876},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1912, col: 90, offset: 63907},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1915, col: 9, offset: 64107},
						run: (*parser).callonEscapedItalicText24,
						expr: &seqExpr{
							pos: position{line: 1915, col: 9, offset: 64107},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1915, col: 9, offset: 64107},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1663, col: 25, offset: 55365},
										run: (*parser).callonEscapedItalicText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1663, col: 25, offset: 55365},
											expr: &litMatcher{
												pos:        position{line: 1663, col: 25, offset: 55365},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1915, col: 44, offset: 64142},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1915, col: 48, offset: 64146},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1915, col: 58, offset: 64156},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1915, col: 89, offset: 64187},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1922, col: 1, offset: 64506},
			expr: &choiceExpr{
				pos: position{line: 1922, col: 18, offset: 64523},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1922, col: 18, offset: 64523},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1922, col: 45, offset: 64550},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1936, col: 1, offset: 64902},
			expr: &actionExpr{
				pos: position{line: 1937, col: 5, offset: 64935},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1937, col: 5, offset: 64935},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1934, col: 38, offset: 64896},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1938, col: 5, offset: 64974},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1938, col: 15, offset: 64984},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1934, col: 38, offset: 64896},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1943, col: 1, offset: 65156},
			expr: &oneOrMoreExpr{
				pos: position{line: 1943, col: 37, offset: 65192},
				expr: &ruleRefExpr{
					pos:  position{line: 1943, col: 37, offset: 65192},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1945, col: 1, offset: 65259},
			expr: &actionExpr{
				pos: position{line: 1946, col: 5, offset: 65299},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1946, col: 5, offset: 65299},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1946, col: 5, offset: 65299},
							expr: &litMatcher{
								pos:        position{line: 1934, col: 38, offset: 64896},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1947, col: 5, offset: 65338},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1948, col: 9, offset: 65356},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1927, col: 5, offset: 64633},
										run: (*parser).callonDoubleQuoteMonospaceTextElement7,
										expr: &seqExpr{
											pos: position{line: 1927, col: 5, offset: 64633},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1927, col: 5, offset: 64633},
													expr: &charClassMatcher{
														pos:        position{line: 1927, col: 5, offset: 64633},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1927, col: 15, offset: 64643},
													expr: &choiceExpr{
														pos: position{line: 1927, col: 17, offset: 64645},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2860, col: 10, offset: 94799},
																run: (*parser).callonDoubleQuoteMonospaceTextElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 2860, col: 11, offset: 94800},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1924, col: 27, offset: 64602},
																val:        "`",
																ignoreCase: false,
																want:       "\"`\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2865, col: 11, offset: 94908},
										run: (*parser).callonDoubleQuoteMonospaceTextElement16,
										expr: &oneOrMoreExpr{
											pos: position{line: 2865, col: 11, offset: 94908},
											expr: &charClassMatcher{
												pos:        position{line: 2865, col: 12, offset: 94909},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 1950, col: 11, offset: 65434},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2870, col: 12, offset: 95022},
												run: (*parser).callonDoubleQuoteMonospaceTextElement20,
												expr: &choiceExpr{
													pos: position{line: 2870, col: 13, offset: 95023},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2870, col: 13, offset: 95023},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2870, col: 20, offset: 95030},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2870, col: 29, offset: 95039},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1950, col: 19, offset: 65442},
												expr: &actionExpr{
													pos: position{line: 2870, col: 12, offset: 95022},
													run: (*parser).callonDoubleQuoteMonospaceTextElement26,
													expr: &choiceExpr{
														pos: position{line: 2870, col: 13, offset: 95023},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2870, col: 13, offset: 95023},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 20, offset: 95030},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 29, offset: 95039},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 416, col: 5, offset: 13530},
										run: (*parser).callonDoubleQuoteMonospaceTextElement31,
										expr: &seqExpr{
											pos: position{line: 416, col: 5, offset: 13530},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 416, col: 5, offset: 13530},
													run: (*parser).callonDoubleQuoteMonospaceTextElement33,
												},
												&labeledExpr{
													pos:   position{line: 419, col: 5, offset: 13594},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 419, col: 14, offset: 13603},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 430, col: 25, offset: 14065},
																run: (*parser).callonDoubleQuoteMonospaceTextElement36,
																expr: &seqExpr{
																	pos: position{line: 430, col: 25, offset: 14065},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 430, col: 25, offset: 14065},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 430, col: 37, offset: 14077},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement40,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 430, col: 56, offset: 14096},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 430, col: 62, offset: 14102},
																				expr: &actionExpr{
																					pos: position{line: 438, col: 17, offset: 14365},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement47,
																					expr: &seqExpr{
																						pos: position{line: 438, col: 17, offset: 14365},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 438, col: 17, offset: 14365},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 438, col: 21, offset: 14369},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 438, col: 28, offset: 14376},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 438, col: 28, offset: 14376},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement52,
																											expr: &charClassMatcher{
																												pos:        position{line: 438, col: 28, offset: 14376},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 440, col: 9, offset: 14430},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement54,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 440, col: 9, offset: 14430},
																												expr: &charClassMatcher{
																													pos:        position{line: 440, col: 9, offset: 14430},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 430, col: 78, offset: 14118},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 434, col: 25, offset: 14220},
																run: (*parser).callonDoubleQuoteMonospaceTextElement58,
																expr: &seqExpr{
																	pos: position{line: 434, col: 25, offset: 14220},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 434, col: 25, offset: 14220},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 434, col: 38, offset: 14233},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement62,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 434, col: 57, offset: 14252},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 434, col: 63, offset: 14258},
																				expr: &actionExpr{
																					pos: position{line: 438, col: 17, offset: 14365},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement69,
																					expr: &seqExpr{
																						pos: position{line: 438, col: 17, offset: 14365},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 438, col: 17, offset: 14365},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 438, col: 21, offset: 14369},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 438, col: 28, offset: 14376},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 438, col: 28, offset: 14376},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement74,
																											expr: &charClassMatcher{
																												pos:        position{line: 438, col: 28, offset: 14376},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 440, col: 9, offset: 14430},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement76,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 440, col: 9, offset: 14430},
																												expr: &charClassMatcher{
																													pos:        position{line: 440, col: 9, offset: 14430},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 434, col: 79, offset: 14274},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 423, col: 31, offset: 13720},
																run: (*parser).callonDoubleQuoteMonospaceTextElement80,
																expr: &seqExpr{
																	pos: position{line: 423, col: 31, offset: 13720},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 423, col: 31, offset: 13720},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 423, col: 35, offset: 13724},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement84,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 423, col: 54, offset: 13743},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2576, col: 5, offset: 86006},
										run: (*parser).callonDoubleQuoteMonospaceTextElement90,
										expr: &seqExpr{
											pos: position{line: 2576, col: 5, offset: 86006},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2576, col: 5, offset: 86006},
													run: (*parser).callonDoubleQuoteMonospaceTextElement92,
												},
												&labeledExpr{
													pos:   position{line: 2579, col: 5, offset: 86077},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2581, col: 9, offset: 86175},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2581, col: 9, offset: 86175},
																run: (*parser).callonDoubleQuoteMonospaceTextElement95,
																expr: &choiceExpr{
																	pos: position{line: 458, col: 27, offset: 15084},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 458, col: 27, offset: 15084},
																			run: (*parser).callonDoubleQuoteMonospaceTextElement97,
																			expr: &seqExpr{
																				pos: position{line: 458, col: 27, offset: 15084},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 458, col: 27, offset: 15084},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 458, col: 32, offset: 15089},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 7, offset: 94521},
																							run: (*parser).callonDoubleQuoteMonospaceTextElement101,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 7, offset: 94521},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 458, col: 40, offset: 15097},
																						expr: &actionExpr{
																							pos: position{line: 2860, col: 10, offset: 94799},
																							run: (*parser).callonDoubleQuoteMonospaceTextElement105,
																							expr: &charClassMatcher{
																								pos:        position{line: 2860, col: 11, offset: 94800},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 458, col: 47, offset: 15104},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 458, col: 51, offset: 15108},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 468, col: 24, offset: 15521},
																							expr: &choiceExpr{
																								pos: position{line: 469, col: 5, offset: 15527},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 469, col: 6, offset: 15528},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement111,
																										expr: &seqExpr{
																											pos: position{line: 469, col: 6, offset: 15528},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 469, col: 6, offset: 15528},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 469, col: 14, offset: 15536},
																													expr: &charClassMatcher{
																														pos:        position{line: 469, col: 14, offset: 15536},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 416, col: 5, offset: 13530},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement116,
																										expr: &seqExpr{
																											pos: position{line: 416, col: 5, offset: 13530},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 416, col: 5, offset: 13530},
																													run: (*parser).callonDoubleQuoteMonospaceTextElement118,
																												},
																												&labeledExpr{
																													pos:   position{line: 419, col: 5, offset: 13594},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 419, col: 14, offset: 13603},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 430, col: 25, offset: 14065},
																																run: (*parser).callonDoubleQuoteMonospaceTextElement121,
																																expr: &seqExpr{
																																	pos: position{line: 430, col: 25, offset: 14065},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 430, col: 25, offset: 14065},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 430, col: 37, offset: 14077},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonDoubleQuoteMonospaceTextElement125,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 430, col: 56, offset: 14096},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 430, col: 62, offset: 14102},
																																				expr: &actionExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					run: (*parser).callonDoubleQuoteMonospaceTextElement132,
																																					expr: &seqExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 438, col: 17, offset: 14365},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 438, col: 21, offset: 14369},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 438, col: 28, offset: 14376},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 438, col: 28, offset: 14376},
																																											run: (*parser).callonDoubleQuoteMonospaceTextElement137,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 438, col: 28, offset: 14376},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											run: (*parser).callonDoubleQuoteMonospaceTextElement139,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 440, col: 9, offset: 14430},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 430, col: 78, offset: 14118},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 434, col: 25, offset: 14220},
																																run: (*parser).callonDoubleQuoteMonospaceTextElement143,
																																expr: &seqExpr{
																																	pos: position{line: 434, col: 25, offset: 14220},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 434, col: 25, offset: 14220},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 434, col: 38, offset: 14233},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonDoubleQuoteMonospaceTextElement147,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 434, col: 57, offset: 14252},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 434, col: 63, offset: 14258},
																																				expr: &actionExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					run: (*parser).callonDoubleQuoteMonospaceTextElement154,
																																					expr: &seqExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 438, col: 17, offset: 14365},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 438, col: 21, offset: 14369},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 438, col: 28, offset: 14376},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 438, col: 28, offset: 14376},
																																											run: (*parser).callonDoubleQuoteMonospaceTextElement159,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 438, col: 28, offset: 14376},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											run: (*parser).callonDoubleQuoteMonospaceTextElement161,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 440, col: 9, offset: 14430},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 434, col: 79, offset: 14274},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 423, col: 31, offset: 13720},
																																run: (*parser).callonDoubleQuoteMonospaceTextElement165,
																																expr: &seqExpr{
																																	pos: position{line: 423, col: 31, offset: 13720},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 423, col: 31, offset: 13720},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 423, col: 35, offset: 13724},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonDoubleQuoteMonospaceTextElement169,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 423, col: 54, offset: 13743},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 473, col: 8, offset: 15760},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement175,
																										expr: &litMatcher{
																											pos:        position{line: 473, col: 8, offset: 15760},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 458, col: 79, offset: 15136},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 460, col: 9, offset: 15209},
																			run: (*parser).callonDoubleQuoteMonospaceTextElement178,
																			expr: &seqExpr{
																				pos: position{line: 460, col: 9, offset: 15209},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 460, col: 9, offset: 15209},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 460, col: 14, offset: 15214},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 7, offset: 94521},
																							run: (*parser).callonDoubleQuoteMonospaceTextElement182,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 7, offset: 94521},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 460, col: 22, offset: 15222},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2584, col: 11, offset: 86279},
																run: (*parser).callonDoubleQuoteMonospaceTextElement186,
																expr: &charClassMatcher{
																	pos:        position{line: 2584, col: 12, offset: 86280},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2609, col: 15, offset: 87247},
										run: (*parser).callonDoubleQuoteMonospaceTextElement188,
										expr: &litMatcher{
											pos:        position{line: 2609, col: 15, offset: 87247},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2615, col: 14, offset: 87362},
										run: (*parser).callonDoubleQuoteMonospaceTextElement190,
										expr: &litMatcher{
											pos:        position{line: 2615, col: 14, offset: 87362},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2619, col: 14, offset: 87438},
										run: (*parser).callonDoubleQuoteMonospaceTextElement192,
										expr: &litMatcher{
											pos:        position{line: 2619, col: 14, offset: 87438},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2623, col: 15, offset: 87516},
										run: (*parser).callonDoubleQuoteMonospaceTextElement194,
										expr: &litMatcher{
											pos:        position{line: 2623, col: 15, offset: 87516},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2627, col: 13, offset: 87591},
										run: (*parser).callonDoubleQuoteMonospaceTextElement196,
										expr: &litMatcher{
											pos:        position{line: 2627, col: 13, offset: 87591},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2635, col: 22, offset: 87897},
										run: (*parser).callonDoubleQuoteMonospaceTextElement198,
										expr: &seqExpr{
											pos: position{line: 2635, col: 22, offset: 87897},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2786, col: 13, offset: 92537},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2635, col: 31, offset: 87906},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2635, col: 35, offset: 87910},
													expr: &charClassMatcher{
														pos:        position{line: 2635, col: 36, offset: 87911},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1954, col: 11, offset: 65571},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1955, col: 11, offset: 65593},
										name: "QuotedString",
									},
									&litMatcher{
										pos:        position{line: 2613, col: 18, offset: 87326},
										val:        "`'",
										ignoreCase: false,
										want:       "\"`'\"",
									},
									&ruleRefExpr{
										pos:  position{line: 1957, col: 11, offset: 65683},
										name: "QuotedTextInDoubleQuoteMonospaceText",
									},
									&actionExpr{
										pos: position{line: 914, col: 23, offset: 28983},
										run: (*parser).callonDoubleQuoteMonospaceTextElement208,
										expr: &seqExpr{
											pos: position{line: 914, col: 23, offset: 28983},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 912, col: 32, offset: 28951},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 914, col: 51, offset: 29011},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 914, col: 56, offset: 29016},
														run: (*parser).callonDoubleQuoteMonospaceTextElement212,
														expr: &oneOrMoreExpr{
															pos: position{line: 914, col: 56, offset: 29016},
															expr: &charClassMatcher{
																pos:        position{line: 914, col: 56, offset: 29016},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 912, col: 32, offset: 28951},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 1976, col: 5, offset: 66215},
										val:        "[^\\r\\n`]",
										chars:      []rune{'\r', '\n', '`'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 1977, col: 7, offset: 66317},
										run: (*parser).callonDoubleQuoteMonospaceTextElement217,
										expr: &seqExpr{
											pos: position{line: 1977, col: 7, offset: 66317},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1977, col: 7, offset: 66317},
													val:        "``",
													ignoreCase: false,
													want:       "\"``\"",
												},
												&actionExpr{
													pos: position{line: 2790, col: 14, offset: 92611},
													run: (*parser).callonDoubleQuoteMonospaceTextElement220,
													expr: &oneOrMoreExpr{
														pos: position{line: 2790, col: 14, offset: 92611},
														expr: &charClassMatcher{
															pos:        position{line: 2790, col: 14, offset: 92611},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteMonospaceText",
			pos:  position{line: 1963, col: 1, offset: 65847},
			expr: &actionExpr{
				pos: position{line: 1964, col: 5, offset: 65891},
				run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1964, col: 5, offset: 65891},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1964, col: 5, offset: 65891},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1964, col: 16, offset: 65902},
								expr: &ruleRefExpr{
									pos:  position{line: 1964, col: 17, offset: 65903},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1965, col: 5, offset: 65929},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1966, col: 9, offset: 65944},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1966, col: 9, offset: 65944},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1967, col: 11, offset: 65979},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1968, col: 11, offset: 65998},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1969, col: 11, offset: 66019},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1970, col: 11, offset: 66040},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1971, col: 11, offset: 66064},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1990, col: 1, offset: 66803},
			expr: &actionExpr{
				pos: position{line: 1991, col: 5, offset: 66836},
				run: (*parser).callonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1991, col: 5, offset: 66836},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1986, col: 43, offset: 66751},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&labeledExpr{
							pos:   position{line: 1992, col: 5, offset: 66880},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1992, col: 15, offset: 66890},
								name: "SingleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1988, col: 41, offset: 66797},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1997, col: 1, offset: 67066},
			expr: &actionExpr{
				pos: position{line: 1998, col: 5, offset: 67107},
				run: (*parser).callonSingleQuoteMonospaceTextElements1,
				expr: &seqExpr{
					pos: position{line: 1998, col: 5, offset: 67107},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1998, col: 5, offset: 67107},
							expr: &notExpr{
								pos: position{line: 2874, col: 8, offset: 95112},
								expr: &anyMatcher{
									line: 2874, col: 9, offset: 95113,
								},
							},
						},
						&notExpr{
							pos: position{line: 1998, col: 10, offset: 67112},
							expr: &actionExpr{
								pos: position{line: 2860, col: 10, offset: 94799},
								run: (*parser).callonSingleQuoteMonospaceTextElements7,
								expr: &charClassMatcher{
									pos:        position{line: 2860, col: 11, offset: 94800},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1999, col: 5, offset: 67151},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1999, col: 14, offset: 67160},
								expr: &ruleRefExpr{
									pos:  position{line: 1999, col: 15, offset: 67161},
									name: "SingleQuoteMonospaceTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2000, col: 5, offset: 67199},
							run: (*parser).callonSingleQuoteMonospaceTextElements12,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 2006, col: 1, offset: 67340},
			expr: &choiceExpr{
				pos: position{line: 2007, col: 5, offset: 67381},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2798, col: 5, offset: 92992},
						run: (*parser).callonSingleQuoteMonospaceTextElement2,
						expr: &seqExpr{
							pos: position{line: 2798, col: 5, offset: 92992},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2798, col: 5, offset: 92992},
									expr: &charClassMatcher{
										pos:        position{line: 2798, col: 5, offset: 92992},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2798, col: 15, offset: 93002},
									expr: &choiceExpr{
										pos: position{line: 2798, col: 17, offset: 93004},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2798, col: 17, offset: 93004},
												val:        "[\\r\\n ,]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&notExpr{
												pos: position{line: 2874, col: 8, offset: 95112},
												expr: &anyMatcher{
													line: 2874, col: 9, offset: 95113,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2800, col: 9, offset: 93086},
						run: (*parser).callonSingleQuoteMonospaceTextElement11,
						expr: &seqExpr{
							pos: position{line: 2800, col: 9, offset: 93086},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2800, col: 9, offset: 93086},
									expr: &charClassMatcher{
										pos:        position{line: 2800, col: 9, offset: 93086},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2800, col: 19, offset: 93096},
									expr: &seqExpr{
										pos: position{line: 2800, col: 20, offset: 93097},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2800, col: 20, offset: 93097},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2800, col: 27, offset: 93104},
												expr: &charClassMatcher{
													pos:        position{line: 2800, col: 27, offset: 93104},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2865, col: 11, offset: 94908},
						run: (*parser).callonSingleQuoteMonospaceTextElement20,
						expr: &oneOrMoreExpr{
							pos: position{line: 2865, col: 11, offset: 94908},
							expr: &charClassMatcher{
								pos:        position{line: 2865, col: 12, offset: 94909},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 2009, col: 7, offset: 67406},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 2870, col: 12, offset: 95022},
								run: (*parser).callonSingleQuoteMonospaceTextElement24,
								expr: &choiceExpr{
									pos: position{line: 2870, col: 13, offset: 95023},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2870, col: 13, offset: 95023},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2870, col: 20, offset: 95030},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2870, col: 29, offset: 95039},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 2009, col: 15, offset: 67414},
								expr: &actionExpr{
									pos: position{line: 2870, col: 12, offset: 95022},
									run: (*parser).callonSingleQuoteMonospaceTextElement30,
									expr: &choiceExpr{
										pos: position{line: 2870, col: 13, offset: 95023},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2870, col: 13, offset: 95023},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 20, offset: 95030},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 29, offset: 95039},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 416, col: 5, offset: 13530},
						run: (*parser).callonSingleQuoteMonospaceTextElement35,
						expr: &seqExpr{
							pos: position{line: 416, col: 5, offset: 13530},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 416, col: 5, offset: 13530},
									run: (*parser).callonSingleQuoteMonospaceTextElement37,
								},
								&labeledExpr{
									pos:   position{line: 419, col: 5, offset: 13594},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 419, col: 14, offset: 13603},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 430, col: 25, offset: 14065},
												run: (*parser).callonSingleQuoteMonospaceTextElement40,
												expr: &seqExpr{
													pos: position{line: 430, col: 25, offset: 14065},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 430, col: 25, offset: 14065},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 430, col: 37, offset: 14077},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 120, col: 18, offset: 3502},
																run: (*parser).callonSingleQuoteMonospaceTextElement44,
																expr: &seqExpr{
																	pos: position{line: 120, col: 18, offset: 3502},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 120, col: 18, offset: 3502},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 120, col: 28, offset: 3512},
																			expr: &charClassMatcher{
																				pos:        position{line: 120, col: 29, offset: 3513},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 430, col: 56, offset: 14096},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 430, col: 62, offset: 14102},
																expr: &actionExpr{
																	pos: position{line: 438, col: 17, offset: 14365},
																	run: (*parser).callonSingleQuoteMonospaceTextElement51,
																	expr: &seqExpr{
																		pos: position{line: 438, col: 17, offset: 14365},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 438, col: 17, offset: 14365},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 438, col: 21, offset: 14369},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 438, col: 28, offset: 14376},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 438, col: 28, offset: 14376},
																							run: (*parser).callonSingleQuoteMonospaceTextElement56,
																							expr: &charClassMatcher{
																								pos:        position{line: 438, col: 28, offset: 14376},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 440, col: 9, offset: 14430},
																							run: (*parser).callonSingleQuoteMonospaceTextElement58,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 440, col: 9, offset: 14430},
																								expr: &charClassMatcher{
																									pos:        position{line: 440, col: 9, offset: 14430},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 430, col: 78, offset: 14118},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 434, col: 25, offset: 14220},
												run: (*parser).callonSingleQuoteMonospaceTextElement62,
												expr: &seqExpr{
													pos: position{line: 434, col: 25, offset: 14220},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 434, col: 25, offset: 14220},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 434, col: 38, offset: 14233},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 120, col: 18, offset: 3502},
																run: (*parser).callonSingleQuoteMonospaceTextElement66,
																expr: &seqExpr{
																	pos: position{line: 120, col: 18, offset: 3502},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 120, col: 18, offset: 3502},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 120, col: 28, offset: 3512},
																			expr: &charClassMatcher{
																				pos:        position{line: 120, col: 29, offset: 3513},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 434, col: 57, offset: 14252},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 434, col: 63, offset: 14258},
																expr: &actionExpr{
																	pos: position{line: 438, col: 17, offset: 14365},
																	run: (*parser).callonSingleQuoteMonospaceTextElement73,
																	expr: &seqExpr{
																		pos: position{line: 438, col: 17, offset: 14365},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 438, col: 17, offset: 14365},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 438, col: 21, offset: 14369},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 438, col: 28, offset: 14376},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 438, col: 28, offset: 14376},
																							run: (*parser).callonSingleQuoteMonospaceTextElement78,
																							expr: &charClassMatcher{
																								pos:        position{line: 438, col: 28, offset: 14376},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 440, col: 9, offset: 14430},
																							run: (*parser).callonSingleQuoteMonospaceTextElement80,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 440, col: 9, offset: 14430},
																								expr: &charClassMatcher{
																									pos:        position{line: 440, col: 9, offset: 14430},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 434, col: 79, offset: 14274},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 423, col: 31, offset: 13720},
												run: (*parser).callonSingleQuoteMonospaceTextElement84,
												expr: &seqExpr{
													pos: position{line: 423, col: 31, offset: 13720},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 423, col: 31, offset: 13720},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 423, col: 35, offset: 13724},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 120, col: 18, offset: 3502},
																run: (*parser).callonSingleQuoteMonospaceTextElement88,
																expr: &seqExpr{
																	pos: position{line: 120, col: 18, offset: 3502},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 120, col: 18, offset: 3502},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 120, col: 28, offset: 3512},
																			expr: &charClassMatcher{
																				pos:        position{line: 120, col: 29, offset: 3513},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 423, col: 54, offset: 13743},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2576, col: 5, offset: 86006},
						run: (*parser).callonSingleQuoteMonospaceTextElement94,
						expr: &seqExpr{
							pos: position{line: 2576, col: 5, offset: 86006},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2576, col: 5, offset: 86006},
									run: (*parser).callonSingleQuoteMonospaceTextElement96,
								},
								&labeledExpr{
									pos:   position{line: 2579, col: 5, offset: 86077},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2581, col: 9, offset: 86175},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2581, col: 9, offset: 86175},
												run: (*parser).callonSingleQuoteMonospaceTextElement99,
												expr: &choiceExpr{
													pos: position{line: 458, col: 27, offset: 15084},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 458, col: 27, offset: 15084},
															run: (*parser).callonSingleQuoteMonospaceTextElement101,
															expr: &seqExpr{
																pos: position{line: 458, col: 27, offset: 15084},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 458, col: 27, offset: 15084},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 458, col: 32, offset: 15089},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2848, col: 7, offset: 94521},
																			run: (*parser).callonSingleQuoteMonospaceTextElement105,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2848, col: 7, offset: 94521},
																				expr: &charClassMatcher{
																					pos:        position{line: 2848, col: 7, offset: 94521},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 458, col: 40, offset: 15097},
																		expr: &actionExpr{
																			pos: position{line: 2860, col: 10, offset: 94799},
																			run: (*parser).callonSingleQuoteMonospaceTextElement109,
																			expr: &charClassMatcher{
																				pos:        position{line: 2860, col: 11, offset: 94800},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 458, col: 47, offset: 15104},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 458, col: 51, offset: 15108},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 468, col: 24, offset: 15521},
																			expr: &choiceExpr{
																				pos: position{line: 469, col: 5, offset: 15527},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 469, col: 6, offset: 15528},
																						run: (*parser).callonSingleQuoteMonospaceTextElement115,
																						expr: &seqExpr{
																							pos: position{line: 469, col: 6, offset: 15528},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 469, col: 6, offset: 15528},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 469, col: 14, offset: 15536},
																									expr: &charClassMatcher{
																										pos:        position{line: 469, col: 14, offset: 15536},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 416, col: 5, offset: 13530},
																						run: (*parser).callonSingleQuoteMonospaceTextElement120,
																						expr: &seqExpr{
																							pos: position{line: 416, col: 5, offset: 13530},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 416, col: 5, offset: 13530},
																									run: (*parser).callonSingleQuoteMonospaceTextElement122,
																								},
																								&labeledExpr{
																									pos:   position{line: 419, col: 5, offset: 13594},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 419, col: 14, offset: 13603},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 430, col: 25, offset: 14065},
																												run: (*parser).callonSingleQuoteMonospaceTextElement125,
																												expr: &seqExpr{
																													pos: position{line: 430, col: 25, offset: 14065},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 430, col: 25, offset: 14065},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 430, col: 37, offset: 14077},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 120, col: 18, offset: 3502},
																																run: (*parser).callonSingleQuoteMonospaceTextElement129,
																																expr: &seqExpr{
																																	pos: position{line: 120, col: 18, offset: 3502},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 120, col: 18, offset: 3502},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 120, col: 28, offset: 3512},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 120, col: 29, offset: 3513},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 430, col: 56, offset: 14096},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 430, col: 62, offset: 14102},
																																expr: &actionExpr{
																																	pos: position{line: 438, col: 17, offset: 14365},
																																	run: (*parser).callonSingleQuoteMonospaceTextElement136,
																																	expr: &seqExpr{
																																		pos: position{line: 438, col: 17, offset: 14365},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 438, col: 17, offset: 14365},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 438, col: 21, offset: 14369},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 438, col: 28, offset: 14376},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 438, col: 28, offset: 14376},
																																							run: (*parser).callonSingleQuoteMonospaceTextElement141,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 438, col: 28, offset: 14376},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 440, col: 9, offset: 14430},
																																							run: (*parser).callonSingleQuoteMonospaceTextElement143,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 440, col: 9, offset: 14430},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 440, col: 9, offset: 14430},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 430, col: 78, offset: 14118},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 434, col: 25, offset: 14220},
																												run: (*parser).callonSingleQuoteMonospaceTextElement147,
																												expr: &seqExpr{
																													pos: position{line: 434, col: 25, offset: 14220},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 434, col: 25, offset: 14220},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 434, col: 38, offset: 14233},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 120, col: 18, offset: 3502},
																																run: (*parser).callonSingleQuoteMonospaceTextElement151,
																																expr: &seqExpr{
																																	pos: position{line: 120, col: 18, offset: 3502},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 120, col: 18, offset: 3502},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 120, col: 28, offset: 3512},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 120, col: 29, offset: 3513},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 434, col: 57, offset: 14252},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 434, col: 63, offset: 14258},
																																expr: &actionExpr{
																																	pos: position{line: 438, col: 17, offset: 14365},
																																	run: (*parser).callonSingleQuoteMonospaceTextElement158,
																																	expr: &seqExpr{
																																		pos: position{line: 438, col: 17, offset: 14365},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 438, col: 17, offset: 14365},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 438, col: 21, offset: 14369},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 438, col: 28, offset: 14376},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 438, col: 28, offset: 14376},
																																							run: (*parser).callonSingleQuoteMonospaceTextElement163,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 438, col: 28, offset: 14376},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 440, col: 9, offset: 14430},
																																							run: (*parser).callonSingleQuoteMonospaceTextElement165,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 440, col: 9, offset: 14430},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 440, col: 9, offset: 14430},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 434, col: 79, offset: 14274},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 423, col: 31, offset: 13720},
																												run: (*parser).callonSingleQuoteMonospaceTextElement169,
																												expr: &seqExpr{
																													pos: position{line: 423, col: 31, offset: 13720},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 423, col: 31, offset: 13720},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 423, col: 35, offset: 13724},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 120, col: 18, offset: 3502},
																																run: (*parser).callonSingleQuoteMonospaceTextElement173,
																																expr: &seqExpr{
																																	pos: position{line: 120, col: 18, offset: 3502},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 120, col: 18, offset: 3502},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 120, col: 28, offset: 3512},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 120, col: 29, offset: 3513},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 423, col: 54, offset: 13743},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 473, col: 8, offset: 15760},
																						run: (*parser).callonSingleQuoteMonospaceTextElement179,
																						expr: &litMatcher{
																							pos:        position{line: 473, col: 8, offset: 15760},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 458, col: 79, offset: 15136},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 460, col: 9, offset: 15209},
															run: (*parser).callonSingleQuoteMonospaceTextElement182,
															expr: &seqExpr{
																pos: position{line: 460, col: 9, offset: 15209},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 460, col: 9, offset: 15209},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 460, col: 14, offset: 15214},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2848, col: 7, offset: 94521},
																			run: (*parser).callonSingleQuoteMonospaceTextElement186,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2848, col: 7, offset: 94521},
																				expr: &charClassMatcher{
																					pos:        position{line: 2848, col: 7, offset: 94521},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 460, col: 22, offset: 15222},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2584, col: 11, offset: 86279},
												run: (*parser).callonSingleQuoteMonospaceTextElement190,
												expr: &charClassMatcher{
													pos:        position{line: 2584, col: 12, offset: 86280},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2609, col: 15, offset: 87247},
						run: (*parser).callonSingleQuoteMonospaceTextElement192,
						expr: &litMatcher{
							pos:        position{line: 2609, col: 15, offset: 87247},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2615, col: 14, offset: 87362},
						run: (*parser).callonSingleQuoteMonospaceTextElement194,
						expr: &litMatcher{
							pos:        position{line: 2615, col: 14, offset: 87362},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2619, col: 14, offset: 87438},
						run: (*parser).callonSingleQuoteMonospaceTextElement196,
						expr: &litMatcher{
							pos:        position{line: 2619, col: 14, offset: 87438},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2623, col: 15, offset: 87516},
						run: (*parser).callonSingleQuoteMonospaceTextElement198,
						expr: &litMatcher{
							pos:        position{line: 2623, col: 15, offset: 87516},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2627, col: 13, offset: 87591},
						run: (*parser).callonSingleQuoteMonospaceTextElement200,
						expr: &litMatcher{
							pos:        position{line: 2627, col: 13, offset: 87591},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2635, col: 22, offset: 87897},
						run: (*parser).callonSingleQuoteMonospaceTextElement202,
						expr: &seqExpr{
							pos: position{line: 2635, col: 22, offset: 87897},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2786, col: 13, offset: 92537},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2635, col: 31, offset: 87906},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2635, col: 35, offset: 87910},
									expr: &charClassMatcher{
										pos:        position{line: 2635, col: 36, offset: 87911},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2013, col: 7, offset: 67527},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 2014, col: 7, offset: 67545},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 2015, col: 7, offset: 67564},
						name: "QuotedTextInSingleQuoteMonospaceText",
					},
					&litMatcher{
						pos:        position{line: 2613, col: 18, offset: 87326},
						val:        "`'",
						ignoreCase: false,
						want:       "\"`'\"",
					},
					&actionExpr{
						pos: position{line: 914, col: 23, offset: 28983},
						run: (*parser).callonSingleQuoteMonospaceTextElement212,
						expr: &seqExpr{
							pos: position{line: 914, col: 23, offset: 28983},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 912, col: 32, offset: 28951},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 914, col: 51, offset: 29011},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 914, col: 56, offset: 29016},
										run: (*parser).callonSingleQuoteMonospaceTextElement216,
										expr: &oneOrMoreExpr{
											pos: position{line: 914, col: 56, offset: 29016},
											expr: &charClassMatcher{
												pos:        position{line: 914, col: 56, offset: 29016},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 912, col: 32, offset: 28951},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2033, col: 5, offset: 68063},
						run: (*parser).callonSingleQuoteMonospaceTextElement220,
						expr: &choiceExpr{
							pos: position{line: 2033, col: 6, offset: 68064},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2033, col: 6, offset: 68064},
									val:        "[^\\r\\n` ]",
									chars:      []rune{'\r', '\n', '`', ' '},
									ignoreCase: false,
									inverted:   true,
								},
								&seqExpr{
									pos: position{line: 2034, col: 7, offset: 68176},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1924, col: 27, offset: 64602},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&actionExpr{
											pos: position{line: 2790, col: 14, offset: 92611},
											run: (*parser).callonSingleQuoteMonospaceTextElement225,
											expr: &oneOrMoreExpr{
												pos: position{line: 2790, col: 14, offset: 92611},
												expr: &charClassMatcher{
													pos:        position{line: 2790, col: 14, offset: 92611},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMonospaceText",
			pos:  position{line: 2020, col: 1, offset: 67695},
			expr: &actionExpr{
				pos: position{line: 2021, col: 5, offset: 67739},
				run: (*parser).callonQuotedTextInSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2021, col: 5, offset: 67739},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2021, col: 5, offset: 67739},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2021, col: 16, offset: 67750},
								expr: &ruleRefExpr{
									pos:  position{line: 2021, col: 17, offset: 67751},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2022, col: 5, offset: 67777},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2023, col: 9, offset: 67792},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2023, col: 9, offset: 67792},
										name: "DoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 2024, col: 11, offset: 67827},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2025, col: 11, offset: 67846},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 2026, col: 11, offset: 67867},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2027, col: 11, offset: 67888},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2028, col: 11, offset: 67912},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 2038, col: 1, offset: 68377},
			expr: &choiceExpr{
				pos: position{line: 2039, col: 5, offset: 68406},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2039, col: 5, offset: 68406},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 2039, col: 5, offset: 68406},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2039, col: 5, offset: 68406},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1667, col: 25, offset: 55438},
										run: (*parser).callonEscapedMonospaceText5,
										expr: &seqExpr{
											pos: position{line: 1667, col: 25, offset: 55438},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1667, col: 25, offset: 55438},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1667, col: 30, offset: 55443},
													expr: &litMatcher{
														pos:        position{line: 1667, col: 30, offset: 55443},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2039, col: 40, offset: 68441},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 2039, col: 45, offset: 68446},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2039, col: 55, offset: 68456},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2039, col: 89, offset: 68490},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2041, col: 9, offset: 68647},
						run: (*parser).callonEscapedMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 2041, col: 9, offset: 68647},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2041, col: 9, offset: 68647},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1663, col: 25, offset: 55365},
										run: (*parser).callonEscapedMonospaceText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1663, col: 25, offset: 55365},
											expr: &litMatcher{
												pos:        position{line: 1663, col: 25, offset: 55365},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2041, col: 44, offset: 68682},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 2041, col: 49, offset: 68687},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2041, col: 59, offset: 68697},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2041, col: 93, offset: 68731},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2044, col: 9, offset: 68931},
						run: (*parser).callonEscapedMonospaceText24,
						expr: &seqExpr{
							pos: position{line: 2044, col: 9, offset: 68931},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2044, col: 9, offset: 68931},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1663, col: 25, offset: 55365},
										run: (*parser).callonEscapedMonospaceText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1663, col: 25, offset: 55365},
											expr: &litMatcher{
												pos:        position{line: 1663, col: 25, offset: 55365},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2044, col: 44, offset: 68966},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 2044, col: 48, offset: 68970},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2044, col: 58, offset: 68980},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2044, col: 92, offset: 69014},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 2051, col: 1, offset: 69311},
			expr: &choiceExpr{
				pos: position{line: 2051, col: 15, offset: 69325},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2051, col: 15, offset: 69325},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 2051, col: 39, offset: 69349},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 2065, col: 1, offset: 69687},
			expr: &actionExpr{
				pos: position{line: 2066, col: 5, offset: 69717},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2066, col: 5, offset: 69717},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2063, col: 35, offset: 69681},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 2067, col: 5, offset: 69753},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2067, col: 15, offset: 69763},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2063, col: 35, offset: 69681},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 2072, col: 1, offset: 69926},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2072, col: 34, offset: 69959},
				expr: &ruleRefExpr{
					pos:  position{line: 2072, col: 34, offset: 69959},
					name: "DoubleQuoteMarkedTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 2074, col: 1, offset: 69990},
			expr: &actionExpr{
				pos: position{line: 2075, col: 5, offset: 70059},
				run: (*parser).callonDoubleQuoteMarkedTextElement1,
				expr: &seqExpr{
					pos: position{line: 2075, col: 5, offset: 70059},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2075, col: 5, offset: 70059},
							expr: &litMatcher{
								pos:        position{line: 2063, col: 35, offset: 69681},
								val:        "##",
								ignoreCase: false,
								want:       "\"##\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2076, col: 5, offset: 70095},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2077, col: 9, offset: 70113},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2056, col: 5, offset: 69423},
										run: (*parser).callonDoubleQuoteMarkedTextElement7,
										expr: &seqExpr{
											pos: position{line: 2056, col: 5, offset: 69423},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2056, col: 5, offset: 69423},
													expr: &charClassMatcher{
														pos:        position{line: 2056, col: 5, offset: 69423},
														val:        "[,?!;0-9\\pL]",
														chars:      []rune{',', '?', '!', ';'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2056, col: 19, offset: 69437},
													expr: &choiceExpr{
														pos: position{line: 2056, col: 21, offset: 69439},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2860, col: 10, offset: 94799},
																run: (*parser).callonDoubleQuoteMarkedTextElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 2860, col: 11, offset: 94800},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2053, col: 24, offset: 69395},
																val:        "#",
																ignoreCase: false,
																want:       "\"#\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2865, col: 11, offset: 94908},
										run: (*parser).callonDoubleQuoteMarkedTextElement16,
										expr: &oneOrMoreExpr{
											pos: position{line: 2865, col: 11, offset: 94908},
											expr: &charClassMatcher{
												pos:        position{line: 2865, col: 12, offset: 94909},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 2079, col: 11, offset: 70188},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2870, col: 12, offset: 95022},
												run: (*parser).callonDoubleQuoteMarkedTextElement20,
												expr: &choiceExpr{
													pos: position{line: 2870, col: 13, offset: 95023},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2870, col: 13, offset: 95023},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2870, col: 20, offset: 95030},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2870, col: 29, offset: 95039},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2079, col: 19, offset: 70196},
												expr: &actionExpr{
													pos: position{line: 2870, col: 12, offset: 95022},
													run: (*parser).callonDoubleQuoteMarkedTextElement26,
													expr: &choiceExpr{
														pos: position{line: 2870, col: 13, offset: 95023},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2870, col: 13, offset: 95023},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 20, offset: 95030},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 29, offset: 95039},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 416, col: 5, offset: 13530},
										run: (*parser).callonDoubleQuoteMarkedTextElement31,
										expr: &seqExpr{
											pos: position{line: 416, col: 5, offset: 13530},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 416, col: 5, offset: 13530},
													run: (*parser).callonDoubleQuoteMarkedTextElement33,
												},
												&labeledExpr{
													pos:   position{line: 419, col: 5, offset: 13594},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 419, col: 14, offset: 13603},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 430, col: 25, offset: 14065},
																run: (*parser).callonDoubleQuoteMarkedTextElement36,
																expr: &seqExpr{
																	pos: position{line: 430, col: 25, offset: 14065},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 430, col: 25, offset: 14065},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 430, col: 37, offset: 14077},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonDoubleQuoteMarkedTextElement40,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 430, col: 56, offset: 14096},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 430, col: 62, offset: 14102},
																				expr: &actionExpr{
																					pos: position{line: 438, col: 17, offset: 14365},
																					run: (*parser).callonDoubleQuoteMarkedTextElement47,
																					expr: &seqExpr{
																						pos: position{line: 438, col: 17, offset: 14365},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 438, col: 17, offset: 14365},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 438, col: 21, offset: 14369},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 438, col: 28, offset: 14376},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 438, col: 28, offset: 14376},
																											run: (*parser).callonDoubleQuoteMarkedTextElement52,
																											expr: &charClassMatcher{
																												pos:        position{line: 438, col: 28, offset: 14376},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 440, col: 9, offset: 14430},
																											run: (*parser).callonDoubleQuoteMarkedTextElement54,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 440, col: 9, offset: 14430},
																												expr: &charClassMatcher{
																													pos:        position{line: 440, col: 9, offset: 14430},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 430, col: 78, offset: 14118},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 434, col: 25, offset: 14220},
																run: (*parser).callonDoubleQuoteMarkedTextElement58,
																expr: &seqExpr{
																	pos: position{line: 434, col: 25, offset: 14220},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 434, col: 25, offset: 14220},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 434, col: 38, offset: 14233},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonDoubleQuoteMarkedTextElement62,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 434, col: 57, offset: 14252},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 434, col: 63, offset: 14258},
																				expr: &actionExpr{
																					pos: position{line: 438, col: 17, offset: 14365},
																					run: (*parser).callonDoubleQuoteMarkedTextElement69,
																					expr: &seqExpr{
																						pos: position{line: 438, col: 17, offset: 14365},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 438, col: 17, offset: 14365},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 438, col: 21, offset: 14369},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 438, col: 28, offset: 14376},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 438, col: 28, offset: 14376},
																											run: (*parser).callonDoubleQuoteMarkedTextElement74,
																											expr: &charClassMatcher{
																												pos:        position{line: 438, col: 28, offset: 14376},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 440, col: 9, offset: 14430},
																											run: (*parser).callonDoubleQuoteMarkedTextElement76,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 440, col: 9, offset: 14430},
																												expr: &charClassMatcher{
																													pos:        position{line: 440, col: 9, offset: 14430},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 434, col: 79, offset: 14274},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 423, col: 31, offset: 13720},
																run: (*parser).callonDoubleQuoteMarkedTextElement80,
																expr: &seqExpr{
																	pos: position{line: 423, col: 31, offset: 13720},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 423, col: 31, offset: 13720},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 423, col: 35, offset: 13724},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonDoubleQuoteMarkedTextElement84,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 423, col: 54, offset: 13743},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2576, col: 5, offset: 86006},
										run: (*parser).callonDoubleQuoteMarkedTextElement90,
										expr: &seqExpr{
											pos: position{line: 2576, col: 5, offset: 86006},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2576, col: 5, offset: 86006},
													run: (*parser).callonDoubleQuoteMarkedTextElement92,
												},
												&labeledExpr{
													pos:   position{line: 2579, col: 5, offset: 86077},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2581, col: 9, offset: 86175},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2581, col: 9, offset: 86175},
																run: (*parser).callonDoubleQuoteMarkedTextElement95,
																expr: &choiceExpr{
																	pos: position{line: 458, col: 27, offset: 15084},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 458, col: 27, offset: 15084},
																			run: (*parser).callonDoubleQuoteMarkedTextElement97,
																			expr: &seqExpr{
																				pos: position{line: 458, col: 27, offset: 15084},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 458, col: 27, offset: 15084},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 458, col: 32, offset: 15089},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 7, offset: 94521},
																							run: (*parser).callonDoubleQuoteMarkedTextElement101,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 7, offset: 94521},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 458, col: 40, offset: 15097},
																						expr: &actionExpr{
																							pos: position{line: 2860, col: 10, offset: 94799},
																							run: (*parser).callonDoubleQuoteMarkedTextElement105,
																							expr: &charClassMatcher{
																								pos:        position{line: 2860, col: 11, offset: 94800},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 458, col: 47, offset: 15104},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 458, col: 51, offset: 15108},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 468, col: 24, offset: 15521},
																							expr: &choiceExpr{
																								pos: position{line: 469, col: 5, offset: 15527},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 469, col: 6, offset: 15528},
																										run: (*parser).callonDoubleQuoteMarkedTextElement111,
																										expr: &seqExpr{
																											pos: position{line: 469, col: 6, offset: 15528},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 469, col: 6, offset: 15528},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 469, col: 14, offset: 15536},
																													expr: &charClassMatcher{
																														pos:        position{line: 469, col: 14, offset: 15536},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 416, col: 5, offset: 13530},
																										run: (*parser).callonDoubleQuoteMarkedTextElement116,
																										expr: &seqExpr{
																											pos: position{line: 416, col: 5, offset: 13530},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 416, col: 5, offset: 13530},
																													run: (*parser).callonDoubleQuoteMarkedTextElement118,
																												},
																												&labeledExpr{
																													pos:   position{line: 419, col: 5, offset: 13594},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 419, col: 14, offset: 13603},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 430, col: 25, offset: 14065},
																																run: (*parser).callonDoubleQuoteMarkedTextElement121,
																																expr: &seqExpr{
																																	pos: position{line: 430, col: 25, offset: 14065},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 430, col: 25, offset: 14065},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 430, col: 37, offset: 14077},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonDoubleQuoteMarkedTextElement125,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 430, col: 56, offset: 14096},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 430, col: 62, offset: 14102},
																																				expr: &actionExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					run: (*parser).callonDoubleQuoteMarkedTextElement132,
																																					expr: &seqExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 438, col: 17, offset: 14365},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 438, col: 21, offset: 14369},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 438, col: 28, offset: 14376},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 438, col: 28, offset: 14376},
																																											run: (*parser).callonDoubleQuoteMarkedTextElement137,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 438, col: 28, offset: 14376},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											run: (*parser).callonDoubleQuoteMarkedTextElement139,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 440, col: 9, offset: 14430},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 430, col: 78, offset: 14118},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 434, col: 25, offset: 14220},
																																run: (*parser).callonDoubleQuoteMarkedTextElement143,
																																expr: &seqExpr{
																																	pos: position{line: 434, col: 25, offset: 14220},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 434, col: 25, offset: 14220},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 434, col: 38, offset: 14233},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonDoubleQuoteMarkedTextElement147,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 434, col: 57, offset: 14252},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 434, col: 63, offset: 14258},
																																				expr: &actionExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					run: (*parser).callonDoubleQuoteMarkedTextElement154,
																																					expr: &seqExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 438, col: 17, offset: 14365},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 438, col: 21, offset: 14369},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 438, col: 28, offset: 14376},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 438, col: 28, offset: 14376},
																																											run: (*parser).callonDoubleQuoteMarkedTextElement159,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 438, col: 28, offset: 14376},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											run: (*parser).callonDoubleQuoteMarkedTextElement161,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 440, col: 9, offset: 14430},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 434, col: 79, offset: 14274},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 423, col: 31, offset: 13720},
																																run: (*parser).callonDoubleQuoteMarkedTextElement165,
																																expr: &seqExpr{
																																	pos: position{line: 423, col: 31, offset: 13720},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 423, col: 31, offset: 13720},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 423, col: 35, offset: 13724},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonDoubleQuoteMarkedTextElement169,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 423, col: 54, offset: 13743},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 473, col: 8, offset: 15760},
																										run: (*parser).callonDoubleQuoteMarkedTextElement175,
																										expr: &litMatcher{
																											pos:        position{line: 473, col: 8, offset: 15760},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 458, col: 79, offset: 15136},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 460, col: 9, offset: 15209},
																			run: (*parser).callonDoubleQuoteMarkedTextElement178,
																			expr: &seqExpr{
																				pos: position{line: 460, col: 9, offset: 15209},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 460, col: 9, offset: 15209},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 460, col: 14, offset: 15214},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 7, offset: 94521},
																							run: (*parser).callonDoubleQuoteMarkedTextElement182,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 7, offset: 94521},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 460, col: 22, offset: 15222},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2584, col: 11, offset: 86279},
																run: (*parser).callonDoubleQuoteMarkedTextElement186,
																expr: &charClassMatcher{
																	pos:        position{line: 2584, col: 12, offset: 86280},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2609, col: 15, offset: 87247},
										run: (*parser).callonDoubleQuoteMarkedTextElement188,
										expr: &litMatcher{
											pos:        position{line: 2609, col: 15, offset: 87247},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2615, col: 14, offset: 87362},
										run: (*parser).callonDoubleQuoteMarkedTextElement190,
										expr: &litMatcher{
											pos:        position{line: 2615, col: 14, offset: 87362},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2619, col: 14, offset: 87438},
										run: (*parser).callonDoubleQuoteMarkedTextElement192,
										expr: &litMatcher{
											pos:        position{line: 2619, col: 14, offset: 87438},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2623, col: 15, offset: 87516},
										run: (*parser).callonDoubleQuoteMarkedTextElement194,
										expr: &litMatcher{
											pos:        position{line: 2623, col: 15, offset: 87516},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2627, col: 13, offset: 87591},
										run: (*parser).callonDoubleQuoteMarkedTextElement196,
										expr: &litMatcher{
											pos:        position{line: 2627, col: 13, offset: 87591},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2635, col: 22, offset: 87897},
										run: (*parser).callonDoubleQuoteMarkedTextElement198,
										expr: &seqExpr{
											pos: position{line: 2635, col: 22, offset: 87897},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2786, col: 13, offset: 92537},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2635, col: 31, offset: 87906},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2635, col: 35, offset: 87910},
													expr: &charClassMatcher{
														pos:        position{line: 2635, col: 36, offset: 87911},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2083, col: 11, offset: 70325},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 2084, col: 11, offset: 70347},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 2085, col: 11, offset: 70370},
										name: "QuotedTextInDoubleMarkedBoldText",
									},
									&actionExpr{
										pos: position{line: 914, col: 23, offset: 28983},
										run: (*parser).callonDoubleQuoteMarkedTextElement207,
										expr: &seqExpr{
											pos: position{line: 914, col: 23, offset: 28983},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 912, col: 32, offset: 28951},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 914, col: 51, offset: 29011},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 914, col: 56, offset: 29016},
														run: (*parser).callonDoubleQuoteMarkedTextElement211,
														expr: &oneOrMoreExpr{
															pos: position{line: 914, col: 56, offset: 29016},
															expr: &charClassMatcher{
																pos:        position{line: 914, col: 56, offset: 29016},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 912, col: 32, offset: 28951},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 2105, col: 5, offset: 70885},
										val:        "[^\\r\\n#]",
										chars:      []rune{'\r', '\n', '#'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 2106, col: 7, offset: 70984},
										run: (*parser).callonDoubleQuoteMarkedTextElement216,
										expr: &seqExpr{
											pos: position{line: 2106, col: 7, offset: 70984},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2063, col: 35, offset: 69681},
													val:        "##",
													ignoreCase: false,
													want:       "\"##\"",
												},
												&actionExpr{
													pos: position{line: 2790, col: 14, offset: 92611},
													run: (*parser).callonDoubleQuoteMarkedTextElement219,
													expr: &oneOrMoreExpr{
														pos: position{line: 2790, col: 14, offset: 92611},
														expr: &charClassMatcher{
															pos:        position{line: 2790, col: 14, offset: 92611},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleMarkedBoldText",
			pos:  position{line: 2092, col: 1, offset: 70524},
			expr: &actionExpr{
				pos: position{line: 2093, col: 5, offset: 70564},
				run: (*parser).callonQuotedTextInDoubleMarkedBoldText1,
				expr: &seqExpr{
					pos: position{line: 2093, col: 5, offset: 70564},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2093, col: 5, offset: 70564},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2093, col: 16, offset: 70575},
								expr: &ruleRefExpr{
									pos:  position{line: 2093, col: 17, offset: 70576},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2094, col: 5, offset: 70602},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2095, col: 9, offset: 70617},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2095, col: 9, offset: 70617},
										name: "SingleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2096, col: 11, offset: 70649},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2097, col: 11, offset: 70668},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 2098, col: 11, offset: 70689},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 2099, col: 11, offset: 70713},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2100, col: 11, offset: 70737},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 2117, col: 1, offset: 71391},
			expr: &actionExpr{
				pos: position{line: 2118, col: 5, offset: 71421},
				run: (*parser).callonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2118, col: 5, offset: 71421},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2113, col: 40, offset: 71343},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 2119, col: 5, offset: 71461},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2119, col: 15, offset: 71471},
								name: "SingleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2115, col: 38, offset: 71385},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 2124, col: 1, offset: 71638},
			expr: &actionExpr{
				pos: position{line: 2125, col: 5, offset: 71676},
				run: (*parser).callonSingleQuoteMarkedTextElements1,
				expr: &seqExpr{
					pos: position{line: 2125, col: 5, offset: 71676},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2125, col: 5, offset: 71676},
							expr: &notExpr{
								pos: position{line: 2874, col: 8, offset: 95112},
								expr: &anyMatcher{
									line: 2874, col: 9, offset: 95113,
								},
							},
						},
						&notExpr{
							pos: position{line: 2125, col: 10, offset: 71681},
							expr: &actionExpr{
								pos: position{line: 2860, col: 10, offset: 94799},
								run: (*parser).callonSingleQuoteMarkedTextElements7,
								expr: &charClassMatcher{
									pos:        position{line: 2860, col: 11, offset: 94800},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2126, col: 5, offset: 71720},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2126, col: 14, offset: 71729},
								expr: &ruleRefExpr{
									pos:  position{line: 2126, col: 15, offset: 71730},
									name: "SingleQuoteMarkedTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2127, col: 5, offset: 71766},
							run: (*parser).callonSingleQuoteMarkedTextElements12,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 2133, col: 1, offset: 71907},
			expr: &choiceExpr{
				pos: position{line: 2134, col: 5, offset: 71944},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2056, col: 5, offset: 69423},
						run: (*parser).callonSingleQuoteMarkedTextElement2,
						expr: &seqExpr{
							pos: position{line: 2056, col: 5, offset: 69423},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2056, col: 5, offset: 69423},
									expr: &charClassMatcher{
										pos:        position{line: 2056, col: 5, offset: 69423},
										val:        "[,?!;0-9\\pL]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2056, col: 19, offset: 69437},
									expr: &choiceExpr{
										pos: position{line: 2056, col: 21, offset: 69439},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2860, col: 10, offset: 94799},
												run: (*parser).callonSingleQuoteMarkedTextElement8,
												expr: &charClassMatcher{
													pos:        position{line: 2860, col: 11, offset: 94800},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 2053, col: 24, offset: 69395},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2865, col: 11, offset: 94908},
						run: (*parser).callonSingleQuoteMarkedTextElement11,
						expr: &oneOrMoreExpr{
							pos: position{line: 2865, col: 11, offset: 94908},
							expr: &charClassMatcher{
								pos:        position{line: 2865, col: 12, offset: 94909},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 2136, col: 7, offset: 71978},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 2870, col: 12, offset: 95022},
								run: (*parser).callonSingleQuoteMarkedTextElement15,
								expr: &choiceExpr{
									pos: position{line: 2870, col: 13, offset: 95023},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2870, col: 13, offset: 95023},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2870, col: 20, offset: 95030},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2870, col: 29, offset: 95039},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 2136, col: 15, offset: 71986},
								expr: &actionExpr{
									pos: position{line: 2870, col: 12, offset: 95022},
									run: (*parser).callonSingleQuoteMarkedTextElement21,
									expr: &choiceExpr{
										pos: position{line: 2870, col: 13, offset: 95023},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2870, col: 13, offset: 95023},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 20, offset: 95030},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 29, offset: 95039},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 416, col: 5, offset: 13530},
						run: (*parser).callonSingleQuoteMarkedTextElement26,
						expr: &seqExpr{
							pos: position{line: 416, col: 5, offset: 13530},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 416, col: 5, offset: 13530},
									run: (*parser).callonSingleQuoteMarkedTextElement28,
								},
								&labeledExpr{
									pos:   position{line: 419, col: 5, offset: 13594},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 419, col: 14, offset: 13603},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 430, col: 25, offset: 14065},
												run: (*parser).callonSingleQuoteMarkedTextElement31,
												expr: &seqExpr{
													pos: position{line: 430, col: 25, offset: 14065},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 430, col: 25, offset: 14065},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 430, col: 37, offset: 14077},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 120, col: 18, offset: 3502},
																run: (*parser).callonSingleQuoteMarkedTextElement35,
																expr: &seqExpr{
																	pos: position{line: 120, col: 18, offset: 3502},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 120, col: 18, offset: 3502},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 120, col: 28, offset: 3512},
																			expr: &charClassMatcher{
																				pos:        position{line: 120, col: 29, offset: 3513},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 430, col: 56, offset: 14096},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 430, col: 62, offset: 14102},
																expr: &actionExpr{
																	pos: position{line: 438, col: 17, offset: 14365},
																	run: (*parser).callonSingleQuoteMarkedTextElement42,
																	expr: &seqExpr{
																		pos: position{line: 438, col: 17, offset: 14365},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 438, col: 17, offset: 14365},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 438, col: 21, offset: 14369},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 438, col: 28, offset: 14376},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 438, col: 28, offset: 14376},
																							run: (*parser).callonSingleQuoteMarkedTextElement47,
																							expr: &charClassMatcher{
																								pos:        position{line: 438, col: 28, offset: 14376},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 440, col: 9, offset: 14430},
																							run: (*parser).callonSingleQuoteMarkedTextElement49,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 440, col: 9, offset: 14430},
																								expr: &charClassMatcher{
																									pos:        position{line: 440, col: 9, offset: 14430},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 430, col: 78, offset: 14118},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 434, col: 25, offset: 14220},
												run: (*parser).callonSingleQuoteMarkedTextElement53,
												expr: &seqExpr{
													pos: position{line: 434, col: 25, offset: 14220},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 434, col: 25, offset: 14220},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 434, col: 38, offset: 14233},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 120, col: 18, offset: 3502},
																run: (*parser).callonSingleQuoteMarkedTextElement57,
																expr: &seqExpr{
																	pos: position{line: 120, col: 18, offset: 3502},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 120, col: 18, offset: 3502},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 120, col: 28, offset: 3512},
																			expr: &charClassMatcher{
																				pos:        position{line: 120, col: 29, offset: 3513},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 434, col: 57, offset: 14252},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 434, col: 63, offset: 14258},
																expr: &actionExpr{
																	pos: position{line: 438, col: 17, offset: 14365},
																	run: (*parser).callonSingleQuoteMarkedTextElement64,
																	expr: &seqExpr{
																		pos: position{line: 438, col: 17, offset: 14365},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 438, col: 17, offset: 14365},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 438, col: 21, offset: 14369},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 438, col: 28, offset: 14376},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 438, col: 28, offset: 14376},
																							run: (*parser).callonSingleQuoteMarkedTextElement69,
																							expr: &charClassMatcher{
																								pos:        position{line: 438, col: 28, offset: 14376},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 440, col: 9, offset: 14430},
																							run: (*parser).callonSingleQuoteMarkedTextElement71,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 440, col: 9, offset: 14430},
																								expr: &charClassMatcher{
																									pos:        position{line: 440, col: 9, offset: 14430},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 434, col: 79, offset: 14274},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 423, col: 31, offset: 13720},
												run: (*parser).callonSingleQuoteMarkedTextElement75,
												expr: &seqExpr{
													pos: position{line: 423, col: 31, offset: 13720},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 423, col: 31, offset: 13720},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 423, col: 35, offset: 13724},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 120, col: 18, offset: 3502},
																run: (*parser).callonSingleQuoteMarkedTextElement79,
																expr: &seqExpr{
																	pos: position{line: 120, col: 18, offset: 3502},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 120, col: 18, offset: 3502},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 120, col: 28, offset: 3512},
																			expr: &charClassMatcher{
																				pos:        position{line: 120, col: 29, offset: 3513},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 423, col: 54, offset: 13743},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2576, col: 5, offset: 86006},
						run: (*parser).callonSingleQuoteMarkedTextElement85,
						expr: &seqExpr{
							pos: position{line: 2576, col: 5, offset: 86006},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2576, col: 5, offset: 86006},
									run: (*parser).callonSingleQuoteMarkedTextElement87,
								},
								&labeledExpr{
									pos:   position{line: 2579, col: 5, offset: 86077},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2581, col: 9, offset: 86175},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2581, col: 9, offset: 86175},
												run: (*parser).callonSingleQuoteMarkedTextElement90,
												expr: &choiceExpr{
													pos: position{line: 458, col: 27, offset: 15084},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 458, col: 27, offset: 15084},
															run: (*parser).callonSingleQuoteMarkedTextElement92,
															expr: &seqExpr{
																pos: position{line: 458, col: 27, offset: 15084},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 458, col: 27, offset: 15084},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 458, col: 32, offset: 15089},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2848, col: 7, offset: 94521},
																			run: (*parser).callonSingleQuoteMarkedTextElement96,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2848, col: 7, offset: 94521},
																				expr: &charClassMatcher{
																					pos:        position{line: 2848, col: 7, offset: 94521},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 458, col: 40, offset: 15097},
																		expr: &actionExpr{
																			pos: position{line: 2860, col: 10, offset: 94799},
																			run: (*parser).callonSingleQuoteMarkedTextElement100,
																			expr: &charClassMatcher{
																				pos:        position{line: 2860, col: 11, offset: 94800},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 458, col: 47, offset: 15104},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 458, col: 51, offset: 15108},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 468, col: 24, offset: 15521},
																			expr: &choiceExpr{
																				pos: position{line: 469, col: 5, offset: 15527},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 469, col: 6, offset: 15528},
																						run: (*parser).callonSingleQuoteMarkedTextElement106,
																						expr: &seqExpr{
																							pos: position{line: 469, col: 6, offset: 15528},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 469, col: 6, offset: 15528},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 469, col: 14, offset: 15536},
																									expr: &charClassMatcher{
																										pos:        position{line: 469, col: 14, offset: 15536},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 416, col: 5, offset: 13530},
																						run: (*parser).callonSingleQuoteMarkedTextElement111,
																						expr: &seqExpr{
																							pos: position{line: 416, col: 5, offset: 13530},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 416, col: 5, offset: 13530},
																									run: (*parser).callonSingleQuoteMarkedTextElement113,
																								},
																								&labeledExpr{
																									pos:   position{line: 419, col: 5, offset: 13594},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 419, col: 14, offset: 13603},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 430, col: 25, offset: 14065},
																												run: (*parser).callonSingleQuoteMarkedTextElement116,
																												expr: &seqExpr{
																													pos: position{line: 430, col: 25, offset: 14065},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 430, col: 25, offset: 14065},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 430, col: 37, offset: 14077},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 120, col: 18, offset: 3502},
																																run: (*parser).callonSingleQuoteMarkedTextElement120,
																																expr: &seqExpr{
																																	pos: position{line: 120, col: 18, offset: 3502},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 120, col: 18, offset: 3502},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 120, col: 28, offset: 3512},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 120, col: 29, offset: 3513},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 430, col: 56, offset: 14096},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 430, col: 62, offset: 14102},
																																expr: &actionExpr{
																																	pos: position{line: 438, col: 17, offset: 14365},
																																	run: (*parser).callonSingleQuoteMarkedTextElement127,
																																	expr: &seqExpr{
																																		pos: position{line: 438, col: 17, offset: 14365},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 438, col: 17, offset: 14365},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 438, col: 21, offset: 14369},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 438, col: 28, offset: 14376},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 438, col: 28, offset: 14376},
																																							run: (*parser).callonSingleQuoteMarkedTextElement132,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 438, col: 28, offset: 14376},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 440, col: 9, offset: 14430},
																																							run: (*parser).callonSingleQuoteMarkedTextElement134,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 440, col: 9, offset: 14430},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 440, col: 9, offset: 14430},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 430, col: 78, offset: 14118},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 434, col: 25, offset: 14220},
																												run: (*parser).callonSingleQuoteMarkedTextElement138,
																												expr: &seqExpr{
																													pos: position{line: 434, col: 25, offset: 14220},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 434, col: 25, offset: 14220},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 434, col: 38, offset: 14233},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 120, col: 18, offset: 3502},
																																run: (*parser).callonSingleQuoteMarkedTextElement142,
																																expr: &seqExpr{
																																	pos: position{line: 120, col: 18, offset: 3502},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 120, col: 18, offset: 3502},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 120, col: 28, offset: 3512},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 120, col: 29, offset: 3513},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 434, col: 57, offset: 14252},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 434, col: 63, offset: 14258},
																																expr: &actionExpr{
																																	pos: position{line: 438, col: 17, offset: 14365},
																																	run: (*parser).callonSingleQuoteMarkedTextElement149,
																																	expr: &seqExpr{
																																		pos: position{line: 438, col: 17, offset: 14365},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 438, col: 17, offset: 14365},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 438, col: 21, offset: 14369},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 438, col: 28, offset: 14376},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 438, col: 28, offset: 14376},
																																							run: (*parser).callonSingleQuoteMarkedTextElement154,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 438, col: 28, offset: 14376},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 440, col: 9, offset: 14430},
																																							run: (*parser).callonSingleQuoteMarkedTextElement156,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 440, col: 9, offset: 14430},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 440, col: 9, offset: 14430},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 434, col: 79, offset: 14274},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 423, col: 31, offset: 13720},
																												run: (*parser).callonSingleQuoteMarkedTextElement160,
																												expr: &seqExpr{
																													pos: position{line: 423, col: 31, offset: 13720},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 423, col: 31, offset: 13720},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 423, col: 35, offset: 13724},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 120, col: 18, offset: 3502},
																																run: (*parser).callonSingleQuoteMarkedTextElement164,
																																expr: &seqExpr{
																																	pos: position{line: 120, col: 18, offset: 3502},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 120, col: 18, offset: 3502},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 120, col: 28, offset: 3512},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 120, col: 29, offset: 3513},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 423, col: 54, offset: 13743},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 473, col: 8, offset: 15760},
																						run: (*parser).callonSingleQuoteMarkedTextElement170,
																						expr: &litMatcher{
																							pos:        position{line: 473, col: 8, offset: 15760},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 458, col: 79, offset: 15136},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 460, col: 9, offset: 15209},
															run: (*parser).callonSingleQuoteMarkedTextElement173,
															expr: &seqExpr{
																pos: position{line: 460, col: 9, offset: 15209},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 460, col: 9, offset: 15209},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 460, col: 14, offset: 15214},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2848, col: 7, offset: 94521},
																			run: (*parser).callonSingleQuoteMarkedTextElement177,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2848, col: 7, offset: 94521},
																				expr: &charClassMatcher{
																					pos:        position{line: 2848, col: 7, offset: 94521},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 460, col: 22, offset: 15222},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2584, col: 11, offset: 86279},
												run: (*parser).callonSingleQuoteMarkedTextElement181,
												expr: &charClassMatcher{
													pos:        position{line: 2584, col: 12, offset: 86280},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2609, col: 15, offset: 87247},
						run: (*parser).callonSingleQuoteMarkedTextElement183,
						expr: &litMatcher{
							pos:        position{line: 2609, col: 15, offset: 87247},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2615, col: 14, offset: 87362},
						run: (*parser).callonSingleQuoteMarkedTextElement185,
						expr: &litMatcher{
							pos:        position{line: 2615, col: 14, offset: 87362},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2619, col: 14, offset: 87438},
						run: (*parser).callonSingleQuoteMarkedTextElement187,
						expr: &litMatcher{
							pos:        position{line: 2619, col: 14, offset: 87438},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2623, col: 15, offset: 87516},
						run: (*parser).callonSingleQuoteMarkedTextElement189,
						expr: &litMatcher{
							pos:        position{line: 2623, col: 15, offset: 87516},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2627, col: 13, offset: 87591},
						run: (*parser).callonSingleQuoteMarkedTextElement191,
						expr: &litMatcher{
							pos:        position{line: 2627, col: 13, offset: 87591},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2635, col: 22, offset: 87897},
						run: (*parser).callonSingleQuoteMarkedTextElement193,
						expr: &seqExpr{
							pos: position{line: 2635, col: 22, offset: 87897},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2786, col: 13, offset: 92537},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2635, col: 31, offset: 87906},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2635, col: 35, offset: 87910},
									expr: &charClassMatcher{
										pos:        position{line: 2635, col: 36, offset: 87911},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2140, col: 7, offset: 72099},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 2141, col: 7, offset: 72117},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 2142, col: 7, offset: 72136},
						name: "QuotedTextInSingleQuoteMarkedText",
					},
					&actionExpr{
						pos: position{line: 914, col: 23, offset: 28983},
						run: (*parser).callonSingleQuoteMarkedTextElement202,
						expr: &seqExpr{
							pos: position{line: 914, col: 23, offset: 28983},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 912, col: 32, offset: 28951},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 914, col: 51, offset: 29011},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 914, col: 56, offset: 29016},
										run: (*parser).callonSingleQuoteMarkedTextElement206,
										expr: &oneOrMoreExpr{
											pos: position{line: 914, col: 56, offset: 29016},
											expr: &charClassMatcher{
												pos:        position{line: 914, col: 56, offset: 29016},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 912, col: 32, offset: 28951},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 2159, col: 5, offset: 72603},
						val:        "[^\\r\\n #]",
						chars:      []rune{'\r', '\n', ' ', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 2160, col: 7, offset: 72708},
						run: (*parser).callonSingleQuoteMarkedTextElement211,
						expr: &seqExpr{
							pos: position{line: 2160, col: 7, offset: 72708},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2160, col: 7, offset: 72708},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&actionExpr{
									pos: position{line: 2790, col: 14, offset: 92611},
									run: (*parser).callonSingleQuoteMarkedTextElement214,
									expr: &oneOrMoreExpr{
										pos: position{line: 2790, col: 14, offset: 92611},
										expr: &charClassMatcher{
											pos:        position{line: 2790, col: 14, offset: 92611},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMarkedText",
			pos:  position{line: 2146, col: 1, offset: 72241},
			expr: &actionExpr{
				pos: position{line: 2147, col: 5, offset: 72282},
				run: (*parser).callonQuotedTextInSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2147, col: 5, offset: 72282},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2147, col: 5, offset: 72282},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2147, col: 16, offset: 72293},
								expr: &ruleRefExpr{
									pos:  position{line: 2147, col: 17, offset: 72294},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2148, col: 5, offset: 72320},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2149, col: 9, offset: 72335},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2149, col: 9, offset: 72335},
										name: "DoubleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2150, col: 11, offset: 72367},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2151, col: 11, offset: 72386},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 2152, col: 11, offset: 72407},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 2153, col: 11, offset: 72431},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2154, col: 11, offset: 72455},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 2164, col: 1, offset: 72883},
			expr: &choiceExpr{
				pos: position{line: 2165, col: 5, offset: 72908},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2165, col: 5, offset: 72908},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 2165, col: 5, offset: 72908},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2165, col: 5, offset: 72908},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1667, col: 25, offset: 55438},
										run: (*parser).callonEscapedMarkedText5,
										expr: &seqExpr{
											pos: position{line: 1667, col: 25, offset: 55438},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1667, col: 25, offset: 55438},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1667, col: 30, offset: 55443},
													expr: &litMatcher{
														pos:        position{line: 1667, col: 30, offset: 55443},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2165, col: 40, offset: 72943},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 2165, col: 45, offset: 72948},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2165, col: 55, offset: 72958},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2165, col: 86, offset: 72989},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2167, col: 9, offset: 73146},
						run: (*parser).callonEscapedMarkedText14,
						expr: &seqExpr{
							pos: position{line: 2167, col: 9, offset: 73146},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2167, col: 9, offset: 73146},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1663, col: 25, offset: 55365},
										run: (*parser).callonEscapedMarkedText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1663, col: 25, offset: 55365},
											expr: &litMatcher{
												pos:        position{line: 1663, col: 25, offset: 55365},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2167, col: 44, offset: 73181},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 2167, col: 49, offset: 73186},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2167, col: 59, offset: 73196},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2167, col: 90, offset: 73227},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2170, col: 9, offset: 73427},
						run: (*parser).callonEscapedMarkedText24,
						expr: &seqExpr{
							pos: position{line: 2170, col: 9, offset: 73427},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2170, col: 9, offset: 73427},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1663, col: 25, offset: 55365},
										run: (*parser).callonEscapedMarkedText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1663, col: 25, offset: 55365},
											expr: &litMatcher{
												pos:        position{line: 1663, col: 25, offset: 55365},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2170, col: 44, offset: 73462},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 2170, col: 48, offset: 73466},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2170, col: 58, offset: 73476},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2170, col: 89, offset: 73507},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 2177, col: 1, offset: 73819},
			expr: &actionExpr{
				pos: position{line: 2178, col: 5, offset: 73841},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 2178, col: 5, offset: 73841},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2184, col: 27, offset: 74056},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 2179, col: 5, offset: 73868},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2179, col: 14, offset: 73877},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2184, col: 27, offset: 74056},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 2186, col: 1, offset: 74061},
			expr: &choiceExpr{
				pos: position{line: 2186, col: 25, offset: 74085},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2186, col: 25, offset: 74085},
						name: "QuotedText",
					},
					&actionExpr{
						pos: position{line: 2188, col: 21, offset: 74137},
						run: (*parser).callonSubscriptTextElement3,
						expr: &oneOrMoreExpr{
							pos: position{line: 2188, col: 21, offset: 74137},
							expr: &charClassMatcher{
								pos:        position{line: 2188, col: 21, offset: 74137},
								val:        "[^\\r\\n ~]",
								chars:      []rune{'\r', '\n', ' ', '~'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 2192, col: 1, offset: 74222},
			expr: &actionExpr{
				pos: position{line: 2193, col: 5, offset: 74251},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 2193, col: 5, offset: 74251},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2193, col: 5, offset: 74251},
							label: "backslashes",
							expr: &actionExpr{
								pos: position{line: 1663, col: 25, offset: 55365},
								run: (*parser).callonEscapedSubscriptText4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1663, col: 25, offset: 55365},
									expr: &litMatcher{
										pos:        position{line: 1663, col: 25, offset: 55365},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2184, col: 27, offset: 74056},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 2195, col: 5, offset: 74319},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2195, col: 14, offset: 74328},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2184, col: 27, offset: 74056},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 2203, col: 1, offset: 74591},
			expr: &actionExpr{
				pos: position{line: 2204, col: 5, offset: 74615},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 2204, col: 5, offset: 74615},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2210, col: 29, offset: 74842},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 2205, col: 5, offset: 74645},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2205, col: 14, offset: 74654},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2210, col: 29, offset: 74842},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 2212, col: 1, offset: 74847},
			expr: &choiceExpr{
				pos: position{line: 2212, col: 27, offset: 74873},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2212, col: 27, offset: 74873},
						name: "QuotedText",
					},
					&actionExpr{
						pos: position{line: 2214, col: 23, offset: 74929},
						run: (*parser).callonSuperscriptTextElement3,
						expr: &oneOrMoreExpr{
							pos: position{line: 2214, col: 23, offset: 74929},
							expr: &charClassMatcher{
								pos:        position{line: 2214, col: 23, offset: 74929},
								val:        "[^\\r\\n ^]",
								chars:      []rune{'\r', '\n', ' ', '^'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 2218, col: 1, offset: 75014},
			expr: &actionExpr{
				pos: position{line: 2219, col: 5, offset: 75045},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 2219, col: 5, offset: 75045},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2219, col: 5, offset: 75045},
							label: "backslashes",
							expr: &actionExpr{
								pos: position{line: 1663, col: 25, offset: 55365},
								run: (*parser).callonEscapedSuperscriptText4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1663, col: 25, offset: 55365},
									expr: &litMatcher{
										pos:        position{line: 1663, col: 25, offset: 55365},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2210, col: 29, offset: 74842},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 2221, col: 5, offset: 75115},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2221, col: 14, offset: 75124},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2210, col: 29, offset: 74842},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 2230, col: 1, offset: 75572},
			expr: &choiceExpr{
				pos: position{line: 2230, col: 17, offset: 75588},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2230, col: 17, offset: 75588},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 2230, col: 38, offset: 75609},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 2232, col: 1, offset: 75629},
			expr: &actionExpr{
				pos: position{line: 2233, col: 5, offset: 75656},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2233, col: 5, offset: 75656},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2245, col: 27, offset: 76031},
							val:        "'`",
							ignoreCase: false,
							want:       "\"'`\"",
						},
						&notExpr{
							pos: position{line: 2245, col: 32, offset: 76036},
							expr: &charClassMatcher{
								pos:        position{line: 2245, col: 33, offset: 76037},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 2234, col: 5, offset: 75684},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2234, col: 14, offset: 75693},
								name: "SingleQuotedStringElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2247, col: 25, offset: 76072},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 2239, col: 1, offset: 75837},
			expr: &actionExpr{
				pos: position{line: 2240, col: 5, offset: 75872},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 2240, col: 5, offset: 75872},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2240, col: 14, offset: 75881},
						expr: &ruleRefExpr{
							pos:  position{line: 2240, col: 15, offset: 75882},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 2254, col: 1, offset: 76285},
			expr: &actionExpr{
				pos: position{line: 2255, col: 5, offset: 76319},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &seqExpr{
					pos: position{line: 2255, col: 5, offset: 76319},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2255, col: 5, offset: 76319},
							expr: &litMatcher{
								pos:        position{line: 2247, col: 25, offset: 76072},
								val:        "`'",
								ignoreCase: false,
								want:       "\"`'\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2256, col: 5, offset: 76345},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2257, col: 9, offset: 76363},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2249, col: 21, offset: 76098},
										run: (*parser).callonSingleQuotedStringElement7,
										expr: &seqExpr{
											pos: position{line: 2249, col: 21, offset: 76098},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2249, col: 21, offset: 76098},
													expr: &charClassMatcher{
														pos:        position{line: 2249, col: 21, offset: 76098},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2249, col: 31, offset: 76108},
													expr: &choiceExpr{
														pos: position{line: 2249, col: 33, offset: 76110},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2860, col: 10, offset: 94799},
																run: (*parser).callonSingleQuotedStringElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 2860, col: 11, offset: 94800},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2247, col: 25, offset: 76072},
																val:        "`'",
																ignoreCase: false,
																want:       "\"`'\"",
															},
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2258, col: 11, offset: 76390},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2860, col: 10, offset: 94799},
												run: (*parser).callonSingleQuotedStringElement17,
												expr: &charClassMatcher{
													pos:        position{line: 2860, col: 11, offset: 94800},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&notExpr{
												pos: position{line: 2258, col: 17, offset: 76396},
												expr: &litMatcher{
													pos:        position{line: 2247, col: 25, offset: 76072},
													val:        "`'",
													ignoreCase: false,
													want:       "\"`'\"",
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2259, col: 11, offset: 76428},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2870, col: 12, offset: 95022},
												run: (*parser).callonSingleQuotedStringElement22,
												expr: &choiceExpr{
													pos: position{line: 2870, col: 13, offset: 95023},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2870, col: 13, offset: 95023},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2870, col: 20, offset: 95030},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2870, col: 29, offset: 95039},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2259, col: 19, offset: 76436},
												expr: &actionExpr{
													pos: position{line: 2870, col: 12, offset: 95022},
													run: (*parser).callonSingleQuotedStringElement28,
													expr: &choiceExpr{
														pos: position{line: 2870, col: 13, offset: 95023},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2870, col: 13, offset: 95023},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 20, offset: 95030},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 29, offset: 95039},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 416, col: 5, offset: 13530},
										run: (*parser).callonSingleQuotedStringElement33,
										expr: &seqExpr{
											pos: position{line: 416, col: 5, offset: 13530},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 416, col: 5, offset: 13530},
													run: (*parser).callonSingleQuotedStringElement35,
												},
												&labeledExpr{
													pos:   position{line: 419, col: 5, offset: 13594},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 419, col: 14, offset: 13603},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 430, col: 25, offset: 14065},
																run: (*parser).callonSingleQuotedStringElement38,
																expr: &seqExpr{
																	pos: position{line: 430, col: 25, offset: 14065},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 430, col: 25, offset: 14065},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 430, col: 37, offset: 14077},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonSingleQuotedStringElement42,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 430, col: 56, offset: 14096},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 430, col: 62, offset: 14102},
																				expr: &actionExpr{
																					pos: position{line: 438, col: 17, offset: 14365},
																					run: (*parser).callonSingleQuotedStringElement49,
																					expr: &seqExpr{
																						pos: position{line: 438, col: 17, offset: 14365},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 438, col: 17, offset: 14365},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 438, col: 21, offset: 14369},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 438, col: 28, offset: 14376},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 438, col: 28, offset: 14376},
																											run: (*parser).callonSingleQuotedStringElement54,
																											expr: &charClassMatcher{
																												pos:        position{line: 438, col: 28, offset: 14376},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 440, col: 9, offset: 14430},
																											run: (*parser).callonSingleQuotedStringElement56,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 440, col: 9, offset: 14430},
																												expr: &charClassMatcher{
																													pos:        position{line: 440, col: 9, offset: 14430},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 430, col: 78, offset: 14118},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 434, col: 25, offset: 14220},
																run: (*parser).callonSingleQuotedStringElement60,
																expr: &seqExpr{
																	pos: position{line: 434, col: 25, offset: 14220},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 434, col: 25, offset: 14220},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 434, col: 38, offset: 14233},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonSingleQuotedStringElement64,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 434, col: 57, offset: 14252},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 434, col: 63, offset: 14258},
																				expr: &actionExpr{
																					pos: position{line: 438, col: 17, offset: 14365},
																					run: (*parser).callonSingleQuotedStringElement71,
																					expr: &seqExpr{
																						pos: position{line: 438, col: 17, offset: 14365},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 438, col: 17, offset: 14365},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 438, col: 21, offset: 14369},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 438, col: 28, offset: 14376},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 438, col: 28, offset: 14376},
																											run: (*parser).callonSingleQuotedStringElement76,
																											expr: &charClassMatcher{
																												pos:        position{line: 438, col: 28, offset: 14376},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 440, col: 9, offset: 14430},
																											run: (*parser).callonSingleQuotedStringElement78,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 440, col: 9, offset: 14430},
																												expr: &charClassMatcher{
																													pos:        position{line: 440, col: 9, offset: 14430},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 434, col: 79, offset: 14274},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 423, col: 31, offset: 13720},
																run: (*parser).callonSingleQuotedStringElement82,
																expr: &seqExpr{
																	pos: position{line: 423, col: 31, offset: 13720},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 423, col: 31, offset: 13720},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 423, col: 35, offset: 13724},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonSingleQuotedStringElement86,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 423, col: 54, offset: 13743},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2576, col: 5, offset: 86006},
										run: (*parser).callonSingleQuotedStringElement92,
										expr: &seqExpr{
											pos: position{line: 2576, col: 5, offset: 86006},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2576, col: 5, offset: 86006},
													run: (*parser).callonSingleQuotedStringElement94,
												},
												&labeledExpr{
													pos:   position{line: 2579, col: 5, offset: 86077},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2581, col: 9, offset: 86175},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2581, col: 9, offset: 86175},
																run: (*parser).callonSingleQuotedStringElement97,
																expr: &choiceExpr{
																	pos: position{line: 458, col: 27, offset: 15084},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 458, col: 27, offset: 15084},
																			run: (*parser).callonSingleQuotedStringElement99,
																			expr: &seqExpr{
																				pos: position{line: 458, col: 27, offset: 15084},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 458, col: 27, offset: 15084},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 458, col: 32, offset: 15089},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 7, offset: 94521},
																							run: (*parser).callonSingleQuotedStringElement103,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 7, offset: 94521},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 458, col: 40, offset: 15097},
																						expr: &actionExpr{
																							pos: position{line: 2860, col: 10, offset: 94799},
																							run: (*parser).callonSingleQuotedStringElement107,
																							expr: &charClassMatcher{
																								pos:        position{line: 2860, col: 11, offset: 94800},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 458, col: 47, offset: 15104},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 458, col: 51, offset: 15108},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 468, col: 24, offset: 15521},
																							expr: &choiceExpr{
																								pos: position{line: 469, col: 5, offset: 15527},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 469, col: 6, offset: 15528},
																										run: (*parser).callonSingleQuotedStringElement113,
																										expr: &seqExpr{
																											pos: position{line: 469, col: 6, offset: 15528},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 469, col: 6, offset: 15528},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 469, col: 14, offset: 15536},
																													expr: &charClassMatcher{
																														pos:        position{line: 469, col: 14, offset: 15536},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 416, col: 5, offset: 13530},
																										run: (*parser).callonSingleQuotedStringElement118,
																										expr: &seqExpr{
																											pos: position{line: 416, col: 5, offset: 13530},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 416, col: 5, offset: 13530},
																													run: (*parser).callonSingleQuotedStringElement120,
																												},
																												&labeledExpr{
																													pos:   position{line: 419, col: 5, offset: 13594},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 419, col: 14, offset: 13603},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 430, col: 25, offset: 14065},
																																run: (*parser).callonSingleQuotedStringElement123,
																																expr: &seqExpr{
																																	pos: position{line: 430, col: 25, offset: 14065},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 430, col: 25, offset: 14065},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 430, col: 37, offset: 14077},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonSingleQuotedStringElement127,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 430, col: 56, offset: 14096},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 430, col: 62, offset: 14102},
																																				expr: &actionExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					run: (*parser).callonSingleQuotedStringElement134,
																																					expr: &seqExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 438, col: 17, offset: 14365},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 438, col: 21, offset: 14369},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 438, col: 28, offset: 14376},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 438, col: 28, offset: 14376},
																																											run: (*parser).callonSingleQuotedStringElement139,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 438, col: 28, offset: 14376},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											run: (*parser).callonSingleQuotedStringElement141,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 440, col: 9, offset: 14430},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 430, col: 78, offset: 14118},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 434, col: 25, offset: 14220},
																																run: (*parser).callonSingleQuotedStringElement145,
																																expr: &seqExpr{
																																	pos: position{line: 434, col: 25, offset: 14220},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 434, col: 25, offset: 14220},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 434, col: 38, offset: 14233},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonSingleQuotedStringElement149,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 434, col: 57, offset: 14252},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 434, col: 63, offset: 14258},
																																				expr: &actionExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					run: (*parser).callonSingleQuotedStringElement156,
																																					expr: &seqExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 438, col: 17, offset: 14365},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 438, col: 21, offset: 14369},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 438, col: 28, offset: 14376},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 438, col: 28, offset: 14376},
																																											run: (*parser).callonSingleQuotedStringElement161,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 438, col: 28, offset: 14376},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											run: (*parser).callonSingleQuotedStringElement163,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 440, col: 9, offset: 14430},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 434, col: 79, offset: 14274},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 423, col: 31, offset: 13720},
																																run: (*parser).callonSingleQuotedStringElement167,
																																expr: &seqExpr{
																																	pos: position{line: 423, col: 31, offset: 13720},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 423, col: 31, offset: 13720},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 423, col: 35, offset: 13724},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonSingleQuotedStringElement171,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 423, col: 54, offset: 13743},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 473, col: 8, offset: 15760},
																										run: (*parser).callonSingleQuotedStringElement177,
																										expr: &litMatcher{
																											pos:        position{line: 473, col: 8, offset: 15760},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 458, col: 79, offset: 15136},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 460, col: 9, offset: 15209},
																			run: (*parser).callonSingleQuotedStringElement180,
																			expr: &seqExpr{
																				pos: position{line: 460, col: 9, offset: 15209},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 460, col: 9, offset: 15209},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 460, col: 14, offset: 15214},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 7, offset: 94521},
																							run: (*parser).callonSingleQuotedStringElement184,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 7, offset: 94521},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 460, col: 22, offset: 15222},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2584, col: 11, offset: 86279},
																run: (*parser).callonSingleQuotedStringElement188,
																expr: &charClassMatcher{
																	pos:        position{line: 2584, col: 12, offset: 86280},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2262, col: 11, offset: 76548},
										name: "InlineMacro",
									},
									&seqExpr{
										pos: position{line: 2263, col: 11, offset: 76570},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 922, col: 5, offset: 29429},
												run: (*parser).callonSingleQuotedStringElement192,
												expr: &seqExpr{
													pos: position{line: 922, col: 5, offset: 29429},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 922, col: 5, offset: 29429},
															run: (*parser).callonSingleQuotedStringElement194,
														},
														&litMatcher{
															pos:        position{line: 925, col: 5, offset: 29486},
															val:        "+",
															ignoreCase: false,
															want:       "\"+\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 925, col: 9, offset: 29490},
															expr: &actionExpr{
																pos: position{line: 2860, col: 10, offset: 94799},
																run: (*parser).callonSingleQuotedStringElement197,
																expr: &charClassMatcher{
																	pos:        position{line: 2860, col: 11, offset: 94800},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&andExpr{
															pos: position{line: 925, col: 16, offset: 29497},
															expr: &choiceExpr{
																pos: position{line: 2877, col: 8, offset: 95162},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2870, col: 12, offset: 95022},
																		run: (*parser).callonSingleQuotedStringElement201,
																		expr: &choiceExpr{
																			pos: position{line: 2870, col: 13, offset: 95023},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2870, col: 13, offset: 95023},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2870, col: 20, offset: 95030},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2870, col: 29, offset: 95039},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2874, col: 8, offset: 95112},
																		expr: &anyMatcher{
																			line: 2874, col: 9, offset: 95113,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2263, col: 21, offset: 76580},
												expr: &litMatcher{
													pos:        position{line: 2247, col: 25, offset: 76072},
													val:        "`'",
													ignoreCase: false,
													want:       "\"`'\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2609, col: 15, offset: 87247},
										run: (*parser).callonSingleQuotedStringElement210,
										expr: &litMatcher{
											pos:        position{line: 2609, col: 15, offset: 87247},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2615, col: 14, offset: 87362},
										run: (*parser).callonSingleQuotedStringElement212,
										expr: &litMatcher{
											pos:        position{line: 2615, col: 14, offset: 87362},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2619, col: 14, offset: 87438},
										run: (*parser).callonSingleQuotedStringElement214,
										expr: &litMatcher{
											pos:        position{line: 2619, col: 14, offset: 87438},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2623, col: 15, offset: 87516},
										run: (*parser).callonSingleQuotedStringElement216,
										expr: &litMatcher{
											pos:        position{line: 2623, col: 15, offset: 87516},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2627, col: 13, offset: 87591},
										run: (*parser).callonSingleQuotedStringElement218,
										expr: &litMatcher{
											pos:        position{line: 2627, col: 13, offset: 87591},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2635, col: 22, offset: 87897},
										run: (*parser).callonSingleQuotedStringElement220,
										expr: &seqExpr{
											pos: position{line: 2635, col: 22, offset: 87897},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2786, col: 13, offset: 92537},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2635, col: 31, offset: 87906},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2635, col: 35, offset: 87910},
													expr: &charClassMatcher{
														pos:        position{line: 2635, col: 36, offset: 87911},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2265, col: 11, offset: 76629},
										name: "QuotedTextInSingleQuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 2266, col: 11, offset: 76670},
										name: "DoubleQuotedString",
									},
									&charClassMatcher{
										pos:        position{line: 2284, col: 41, offset: 77188},
										val:        "[^\\r\\n\\t `]",
										chars:      []rune{'\r', '\n', '\t', ' ', '`'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 2284, col: 55, offset: 77202},
										run: (*parser).callonSingleQuotedStringElement229,
										expr: &seqExpr{
											pos: position{line: 2284, col: 55, offset: 77202},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2284, col: 55, offset: 77202},
													val:        "`",
													ignoreCase: false,
													want:       "\"`\"",
												},
												&notExpr{
													pos: position{line: 2284, col: 59, offset: 77206},
													expr: &litMatcher{
														pos:        position{line: 2284, col: 60, offset: 77207},
														val:        "'",
														ignoreCase: false,
														want:       "\"'\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuotedString",
			pos:  position{line: 2273, col: 1, offset: 76814},
			expr: &actionExpr{
				pos: position{line: 2274, col: 5, offset: 76852},
				run: (*parser).callonQuotedTextInSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2274, col: 5, offset: 76852},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2274, col: 5, offset: 76852},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2274, col: 16, offset: 76863},
								expr: &ruleRefExpr{
									pos:  position{line: 2274, col: 17, offset: 76864},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2275, col: 5, offset: 76890},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2275, col: 11, offset: 76896},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2275, col: 11, offset: 76896},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2276, col: 11, offset: 76915},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 2277, col: 12, offset: 76937},
										run: (*parser).callonQuotedTextInSingleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 2277, col: 12, offset: 76937},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 2277, col: 12, offset: 76937},
													expr: &litMatcher{
														pos:        position{line: 2277, col: 13, offset: 76938},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2277, col: 18, offset: 76943},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 2277, col: 27, offset: 76952},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2278, col: 11, offset: 77001},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2279, col: 11, offset: 77025},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2280, col: 11, offset: 77051},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 2288, col: 1, offset: 77279},
			expr: &actionExpr{
				pos: position{line: 2288, col: 23, offset: 77301},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2288, col: 23, offset: 77301},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2327, col: 27, offset: 78607},
							val:        "\"`",
							ignoreCase: false,
							want:       "\"\\\"`\"",
						},
						&notExpr{
							pos: position{line: 2327, col: 33, offset: 78613},
							expr: &charClassMatcher{
								pos:        position{line: 2327, col: 34, offset: 78614},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 2288, col: 46, offset: 77324},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2288, col: 55, offset: 77333},
								name: "DoubleQuotedStringElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2329, col: 25, offset: 78649},
							val:        "`\"",
							ignoreCase: false,
							want:       "\"`\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 2292, col: 1, offset: 77472},
			expr: &actionExpr{
				pos: position{line: 2292, col: 31, offset: 77502},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 2292, col: 31, offset: 77502},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2292, col: 41, offset: 77512},
						expr: &ruleRefExpr{
							pos:  position{line: 2292, col: 41, offset: 77512},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 2298, col: 1, offset: 77717},
			expr: &actionExpr{
				pos: position{line: 2299, col: 5, offset: 77751},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &seqExpr{
					pos: position{line: 2299, col: 5, offset: 77751},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2299, col: 5, offset: 77751},
							expr: &litMatcher{
								pos:        position{line: 2329, col: 25, offset: 78649},
								val:        "`\"",
								ignoreCase: false,
								want:       "\"`\\\"\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2300, col: 5, offset: 77777},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2301, col: 9, offset: 77795},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2249, col: 21, offset: 76098},
										run: (*parser).callonDoubleQuotedStringElement7,
										expr: &seqExpr{
											pos: position{line: 2249, col: 21, offset: 76098},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2249, col: 21, offset: 76098},
													expr: &charClassMatcher{
														pos:        position{line: 2249, col: 21, offset: 76098},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2249, col: 31, offset: 76108},
													expr: &choiceExpr{
														pos: position{line: 2249, col: 33, offset: 76110},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2860, col: 10, offset: 94799},
																run: (*parser).callonDoubleQuotedStringElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 2860, col: 11, offset: 94800},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2247, col: 25, offset: 76072},
																val:        "`'",
																ignoreCase: false,
																want:       "\"`'\"",
															},
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2302, col: 11, offset: 77822},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2860, col: 10, offset: 94799},
												run: (*parser).callonDoubleQuotedStringElement17,
												expr: &charClassMatcher{
													pos:        position{line: 2860, col: 11, offset: 94800},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&notExpr{
												pos: position{line: 2302, col: 17, offset: 77828},
												expr: &litMatcher{
													pos:        position{line: 2329, col: 25, offset: 78649},
													val:        "`\"",
													ignoreCase: false,
													want:       "\"`\\\"\"",
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2303, col: 11, offset: 77860},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2870, col: 12, offset: 95022},
												run: (*parser).callonDoubleQuotedStringElement22,
												expr: &choiceExpr{
													pos: position{line: 2870, col: 13, offset: 95023},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2870, col: 13, offset: 95023},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2870, col: 20, offset: 95030},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2870, col: 29, offset: 95039},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2303, col: 19, offset: 77868},
												expr: &actionExpr{
													pos: position{line: 2870, col: 12, offset: 95022},
													run: (*parser).callonDoubleQuotedStringElement28,
													expr: &choiceExpr{
														pos: position{line: 2870, col: 13, offset: 95023},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2870, col: 13, offset: 95023},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 20, offset: 95030},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2870, col: 29, offset: 95039},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2304, col: 11, offset: 77921},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 922, col: 5, offset: 29429},
												run: (*parser).callonDoubleQuotedStringElement34,
												expr: &seqExpr{
													pos: position{line: 922, col: 5, offset: 29429},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 922, col: 5, offset: 29429},
															run: (*parser).callonDoubleQuotedStringElement36,
														},
														&litMatcher{
															pos:        position{line: 925, col: 5, offset: 29486},
															val:        "+",
															ignoreCase: false,
															want:       "\"+\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 925, col: 9, offset: 29490},
															expr: &actionExpr{
																pos: position{line: 2860, col: 10, offset: 94799},
																run: (*parser).callonDoubleQuotedStringElement39,
																expr: &charClassMatcher{
																	pos:        position{line: 2860, col: 11, offset: 94800},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&andExpr{
															pos: position{line: 925, col: 16, offset: 29497},
															expr: &choiceExpr{
																pos: position{line: 2877, col: 8, offset: 95162},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2870, col: 12, offset: 95022},
																		run: (*parser).callonDoubleQuotedStringElement43,
																		expr: &choiceExpr{
																			pos: position{line: 2870, col: 13, offset: 95023},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2870, col: 13, offset: 95023},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2870, col: 20, offset: 95030},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2870, col: 29, offset: 95039},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2874, col: 8, offset: 95112},
																		expr: &anyMatcher{
																			line: 2874, col: 9, offset: 95113,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2304, col: 21, offset: 77931},
												expr: &litMatcher{
													pos:        position{line: 2247, col: 25, offset: 76072},
													val:        "`'",
													ignoreCase: false,
													want:       "\"`'\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 416, col: 5, offset: 13530},
										run: (*parser).callonDoubleQuotedStringElement52,
										expr: &seqExpr{
											pos: position{line: 416, col: 5, offset: 13530},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 416, col: 5, offset: 13530},
													run: (*parser).callonDoubleQuotedStringElement54,
												},
												&labeledExpr{
													pos:   position{line: 419, col: 5, offset: 13594},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 419, col: 14, offset: 13603},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 430, col: 25, offset: 14065},
																run: (*parser).callonDoubleQuotedStringElement57,
																expr: &seqExpr{
																	pos: position{line: 430, col: 25, offset: 14065},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 430, col: 25, offset: 14065},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 430, col: 37, offset: 14077},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonDoubleQuotedStringElement61,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 430, col: 56, offset: 14096},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 430, col: 62, offset: 14102},
																				expr: &actionExpr{
																					pos: position{line: 438, col: 17, offset: 14365},
																					run: (*parser).callonDoubleQuotedStringElement68,
																					expr: &seqExpr{
																						pos: position{line: 438, col: 17, offset: 14365},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 438, col: 17, offset: 14365},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 438, col: 21, offset: 14369},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 438, col: 28, offset: 14376},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 438, col: 28, offset: 14376},
																											run: (*parser).callonDoubleQuotedStringElement73,
																											expr: &charClassMatcher{
																												pos:        position{line: 438, col: 28, offset: 14376},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 440, col: 9, offset: 14430},
																											run: (*parser).callonDoubleQuotedStringElement75,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 440, col: 9, offset: 14430},
																												expr: &charClassMatcher{
																													pos:        position{line: 440, col: 9, offset: 14430},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 430, col: 78, offset: 14118},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 434, col: 25, offset: 14220},
																run: (*parser).callonDoubleQuotedStringElement79,
																expr: &seqExpr{
																	pos: position{line: 434, col: 25, offset: 14220},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 434, col: 25, offset: 14220},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 434, col: 38, offset: 14233},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonDoubleQuotedStringElement83,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 434, col: 57, offset: 14252},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 434, col: 63, offset: 14258},
																				expr: &actionExpr{
																					pos: position{line: 438, col: 17, offset: 14365},
																					run: (*parser).callonDoubleQuotedStringElement90,
																					expr: &seqExpr{
																						pos: position{line: 438, col: 17, offset: 14365},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 438, col: 17, offset: 14365},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 438, col: 21, offset: 14369},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 438, col: 28, offset: 14376},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 438, col: 28, offset: 14376},
																											run: (*parser).callonDoubleQuotedStringElement95,
																											expr: &charClassMatcher{
																												pos:        position{line: 438, col: 28, offset: 14376},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 440, col: 9, offset: 14430},
																											run: (*parser).callonDoubleQuotedStringElement97,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 440, col: 9, offset: 14430},
																												expr: &charClassMatcher{
																													pos:        position{line: 440, col: 9, offset: 14430},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 434, col: 79, offset: 14274},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 423, col: 31, offset: 13720},
																run: (*parser).callonDoubleQuotedStringElement101,
																expr: &seqExpr{
																	pos: position{line: 423, col: 31, offset: 13720},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 423, col: 31, offset: 13720},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 423, col: 35, offset: 13724},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonDoubleQuotedStringElement105,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 423, col: 54, offset: 13743},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2576, col: 5, offset: 86006},
										run: (*parser).callonDoubleQuotedStringElement111,
										expr: &seqExpr{
											pos: position{line: 2576, col: 5, offset: 86006},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2576, col: 5, offset: 86006},
													run: (*parser).callonDoubleQuotedStringElement113,
												},
												&labeledExpr{
													pos:   position{line: 2579, col: 5, offset: 86077},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2581, col: 9, offset: 86175},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2581, col: 9, offset: 86175},
																run: (*parser).callonDoubleQuotedStringElement116,
																expr: &choiceExpr{
																	pos: position{line: 458, col: 27, offset: 15084},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 458, col: 27, offset: 15084},
																			run: (*parser).callonDoubleQuotedStringElement118,
																			expr: &seqExpr{
																				pos: position{line: 458, col: 27, offset: 15084},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 458, col: 27, offset: 15084},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 458, col: 32, offset: 15089},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 7, offset: 94521},
																							run: (*parser).callonDoubleQuotedStringElement122,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 7, offset: 94521},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 458, col: 40, offset: 15097},
																						expr: &actionExpr{
																							pos: position{line: 2860, col: 10, offset: 94799},
																							run: (*parser).callonDoubleQuotedStringElement126,
																							expr: &charClassMatcher{
																								pos:        position{line: 2860, col: 11, offset: 94800},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 458, col: 47, offset: 15104},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 458, col: 51, offset: 15108},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 468, col: 24, offset: 15521},
																							expr: &choiceExpr{
																								pos: position{line: 469, col: 5, offset: 15527},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 469, col: 6, offset: 15528},
																										run: (*parser).callonDoubleQuotedStringElement132,
																										expr: &seqExpr{
																											pos: position{line: 469, col: 6, offset: 15528},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 469, col: 6, offset: 15528},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 469, col: 14, offset: 15536},
																													expr: &charClassMatcher{
																														pos:        position{line: 469, col: 14, offset: 15536},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 416, col: 5, offset: 13530},
																										run: (*parser).callonDoubleQuotedStringElement137,
																										expr: &seqExpr{
																											pos: position{line: 416, col: 5, offset: 13530},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 416, col: 5, offset: 13530},
																													run: (*parser).callonDoubleQuotedStringElement139,
																												},
																												&labeledExpr{
																													pos:   position{line: 419, col: 5, offset: 13594},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 419, col: 14, offset: 13603},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 430, col: 25, offset: 14065},
																																run: (*parser).callonDoubleQuotedStringElement142,
																																expr: &seqExpr{
																																	pos: position{line: 430, col: 25, offset: 14065},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 430, col: 25, offset: 14065},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 430, col: 37, offset: 14077},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonDoubleQuotedStringElement146,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 430, col: 56, offset: 14096},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 430, col: 62, offset: 14102},
																																				expr: &actionExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					run: (*parser).callonDoubleQuotedStringElement153,
																																					expr: &seqExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 438, col: 17, offset: 14365},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 438, col: 21, offset: 14369},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 438, col: 28, offset: 14376},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 438, col: 28, offset: 14376},
																																											run: (*parser).callonDoubleQuotedStringElement158,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 438, col: 28, offset: 14376},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											run: (*parser).callonDoubleQuotedStringElement160,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 440, col: 9, offset: 14430},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 430, col: 78, offset: 14118},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 434, col: 25, offset: 14220},
																																run: (*parser).callonDoubleQuotedStringElement164,
																																expr: &seqExpr{
																																	pos: position{line: 434, col: 25, offset: 14220},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 434, col: 25, offset: 14220},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 434, col: 38, offset: 14233},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonDoubleQuotedStringElement168,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 434, col: 57, offset: 14252},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 434, col: 63, offset: 14258},
																																				expr: &actionExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					run: (*parser).callonDoubleQuotedStringElement175,
																																					expr: &seqExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 438, col: 17, offset: 14365},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 438, col: 21, offset: 14369},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 438, col: 28, offset: 14376},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 438, col: 28, offset: 14376},
																																											run: (*parser).callonDoubleQuotedStringElement180,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 438, col: 28, offset: 14376},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											run: (*parser).callonDoubleQuotedStringElement182,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 440, col: 9, offset: 14430},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 434, col: 79, offset: 14274},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 423, col: 31, offset: 13720},
																																run: (*parser).callonDoubleQuotedStringElement186,
																																expr: &seqExpr{
																																	pos: position{line: 423, col: 31, offset: 13720},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 423, col: 31, offset: 13720},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 423, col: 35, offset: 13724},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonDoubleQuotedStringElement190,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 423, col: 54, offset: 13743},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 473, col: 8, offset: 15760},
																										run: (*parser).callonDoubleQuotedStringElement196,
																										expr: &litMatcher{
																											pos:        position{line: 473, col: 8, offset: 15760},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 458, col: 79, offset: 15136},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 460, col: 9, offset: 15209},
																			run: (*parser).callonDoubleQuotedStringElement199,
																			expr: &seqExpr{
																				pos: position{line: 460, col: 9, offset: 15209},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 460, col: 9, offset: 15209},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 460, col: 14, offset: 15214},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 7, offset: 94521},
																							run: (*parser).callonDoubleQuotedStringElement203,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 7, offset: 94521},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 460, col: 22, offset: 15222},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2584, col: 11, offset: 86279},
																run: (*parser).callonDoubleQuotedStringElement207,
																expr: &charClassMatcher{
																	pos:        position{line: 2584, col: 12, offset: 86280},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2307, col: 11, offset: 78023},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 2308, col: 11, offset: 78045},
										name: "QuotedTextInDoubleQuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 2309, col: 11, offset: 78086},
										name: "SingleQuotedString",
									},
									&actionExpr{
										pos: position{line: 2331, col: 41, offset: 78696},
										run: (*parser).callonDoubleQuotedStringElement212,
										expr: &choiceExpr{
											pos: position{line: 2331, col: 42, offset: 78697},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2331, col: 42, offset: 78697},
													val:        "[^\\r\\n\\t `]",
													chars:      []rune{'\r', '\n', '\t', ' ', '`'},
													ignoreCase: false,
													inverted:   true,
												},
												&seqExpr{
													pos: position{line: 2331, col: 56, offset: 78711},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 2331, col: 56, offset: 78711},
															val:        "`",
															ignoreCase: false,
															want:       "\"`\"",
														},
														&notExpr{
															pos: position{line: 2331, col: 60, offset: 78715},
															expr: &litMatcher{
																pos:        position{line: 2331, col: 61, offset: 78716},
																val:        "\"",
																ignoreCase: false,
																want:       "\"\\\"\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuotedString",
			pos:  position{line: 2315, col: 1, offset: 78237},
			expr: &actionExpr{
				pos: position{line: 2316, col: 5, offset: 78275},
				run: (*parser).callonQuotedTextInDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2316, col: 5, offset: 78275},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2316, col: 5, offset: 78275},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2316, col: 16, offset: 78286},
								expr: &ruleRefExpr{
									pos:  position{line: 2316, col: 17, offset: 78287},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2317, col: 5, offset: 78313},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2318, col: 9, offset: 78328},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2318, col: 9, offset: 78328},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2319, col: 11, offset: 78347},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 2320, col: 12, offset: 78369},
										run: (*parser).callonQuotedTextInDoubleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 2320, col: 12, offset: 78369},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 2320, col: 12, offset: 78369},
													expr: &litMatcher{
														pos:        position{line: 2320, col: 13, offset: 78370},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2320, col: 19, offset: 78376},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 2320, col: 28, offset: 78385},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2321, col: 11, offset: 78434},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2322, col: 11, offset: 78458},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2323, col: 11, offset: 78484},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributesGroup",
			pos:  position{line: 2366, col: 1, offset: 79954},
			expr: &actionExpr{
				pos: position{line: 2366, col: 20, offset: 79973},
				run: (*parser).callonAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 2366, col: 20, offset: 79973},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2366, col: 20, offset: 79973},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2366, col: 29, offset: 79982},
								expr: &choiceExpr{
									pos: position{line: 2367, col: 5, offset: 79988},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2790, col: 14, offset: 92611},
											run: (*parser).callonAttributesGroup6,
											expr: &oneOrMoreExpr{
												pos: position{line: 2790, col: 14, offset: 92611},
												expr: &charClassMatcher{
													pos:        position{line: 2790, col: 14, offset: 92611},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&actionExpr{
											pos: position{line: 2860, col: 10, offset: 94799},
											run: (*parser).callonAttributesGroup9,
											expr: &charClassMatcher{
												pos:        position{line: 2860, col: 11, offset: 94800},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&actionExpr{
											pos: position{line: 2576, col: 5, offset: 86006},
											run: (*parser).callonAttributesGroup11,
											expr: &seqExpr{
												pos: position{line: 2576, col: 5, offset: 86006},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 2576, col: 5, offset: 86006},
														run: (*parser).callonAttributesGroup13,
													},
													&labeledExpr{
														pos:   position{line: 2579, col: 5, offset: 86077},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 2581, col: 9, offset: 86175},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2581, col: 9, offset: 86175},
																	run: (*parser).callonAttributesGroup16,
																	expr: &choiceExpr{
																		pos: position{line: 458, col: 27, offset: 15084},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 458, col: 27, offset: 15084},
																				run: (*parser).callonAttributesGroup18,
																				expr: &seqExpr{
																					pos: position{line: 458, col: 27, offset: 15084},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 458, col: 27, offset: 15084},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 458, col: 32, offset: 15089},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								run: (*parser).callonAttributesGroup22,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2848, col: 7, offset: 94521},
																									expr: &charClassMatcher{
																										pos:        position{line: 2848, col: 7, offset: 94521},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 458, col: 40, offset: 15097},
																							expr: &actionExpr{
																								pos: position{line: 2860, col: 10, offset: 94799},
																								run: (*parser).callonAttributesGroup26,
																								expr: &charClassMatcher{
																									pos:        position{line: 2860, col: 11, offset: 94800},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 458, col: 47, offset: 15104},
																							val:        ",",
																							ignoreCase: false,
																							want:       "\",\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 458, col: 51, offset: 15108},
																							label: "label",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 468, col: 24, offset: 15521},
																								expr: &choiceExpr{
																									pos: position{line: 469, col: 5, offset: 15527},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 469, col: 6, offset: 15528},
																											run: (*parser).callonAttributesGroup32,
																											expr: &seqExpr{
																												pos: position{line: 469, col: 6, offset: 15528},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 469, col: 6, offset: 15528},
																														val:        "[0-9\\pL]",
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 469, col: 14, offset: 15536},
																														expr: &charClassMatcher{
																															pos:        position{line: 469, col: 14, offset: 15536},
																															val:        "[^\\r\\n{<>]",
																															chars:      []rune{'\r', '\n', '{', '<', '>'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 416, col: 5, offset: 13530},
																											run: (*parser).callonAttributesGroup37,
																											expr: &seqExpr{
																												pos: position{line: 416, col: 5, offset: 13530},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 416, col: 5, offset: 13530},
																														run: (*parser).callonAttributesGroup39,
																													},
																													&labeledExpr{
																														pos:   position{line: 419, col: 5, offset: 13594},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 419, col: 14, offset: 13603},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 430, col: 25, offset: 14065},
																																	run: (*parser).callonAttributesGroup42,
																																	expr: &seqExpr{
																																		pos: position{line: 430, col: 25, offset: 14065},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 430, col: 25, offset: 14065},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 430, col: 37, offset: 14077},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					run: (*parser).callonAttributesGroup46,
																																					expr: &seqExpr{
																																						pos: position{line: 120, col: 18, offset: 3502},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 120, col: 18, offset: 3502},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 120, col: 28, offset: 3512},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 120, col: 29, offset: 3513},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 430, col: 56, offset: 14096},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 430, col: 62, offset: 14102},
																																					expr: &actionExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						run: (*parser).callonAttributesGroup53,
																																						expr: &seqExpr{
																																							pos: position{line: 438, col: 17, offset: 14365},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 438, col: 17, offset: 14365},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 438, col: 21, offset: 14369},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 438, col: 28, offset: 14376},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 438, col: 28, offset: 14376},
																																												run: (*parser).callonAttributesGroup58,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 438, col: 28, offset: 14376},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												run: (*parser).callonAttributesGroup60,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 440, col: 9, offset: 14430},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 440, col: 9, offset: 14430},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 430, col: 78, offset: 14118},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 434, col: 25, offset: 14220},
																																	run: (*parser).callonAttributesGroup64,
																																	expr: &seqExpr{
																																		pos: position{line: 434, col: 25, offset: 14220},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 434, col: 25, offset: 14220},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 434, col: 38, offset: 14233},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					run: (*parser).callonAttributesGroup68,
																																					expr: &seqExpr{
																																						pos: position{line: 120, col: 18, offset: 3502},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 120, col: 18, offset: 3502},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 120, col: 28, offset: 3512},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 120, col: 29, offset: 3513},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 434, col: 57, offset: 14252},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 434, col: 63, offset: 14258},
																																					expr: &actionExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						run: (*parser).callonAttributesGroup75,
																																						expr: &seqExpr{
																																							pos: position{line: 438, col: 17, offset: 14365},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 438, col: 17, offset: 14365},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 438, col: 21, offset: 14369},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 438, col: 28, offset: 14376},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 438, col: 28, offset: 14376},
																																												run: (*parser).callonAttributesGroup80,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 438, col: 28, offset: 14376},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												run: (*parser).callonAttributesGroup82,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 440, col: 9, offset: 14430},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 440, col: 9, offset: 14430},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 434, col: 79, offset: 14274},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 423, col: 31, offset: 13720},
																																	run: (*parser).callonAttributesGroup86,
																																	expr: &seqExpr{
																																		pos: position{line: 423, col: 31, offset: 13720},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 423, col: 31, offset: 13720},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 423, col: 35, offset: 13724},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					run: (*parser).callonAttributesGroup90,
																																					expr: &seqExpr{
																																						pos: position{line: 120, col: 18, offset: 3502},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 120, col: 18, offset: 3502},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 120, col: 28, offset: 3512},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 120, col: 29, offset: 3513},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 423, col: 54, offset: 13743},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 473, col: 8, offset: 15760},
																											run: (*parser).callonAttributesGroup96,
																											expr: &litMatcher{
																												pos:        position{line: 473, col: 8, offset: 15760},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 458, col: 79, offset: 15136},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 460, col: 9, offset: 15209},
																				run: (*parser).callonAttributesGroup99,
																				expr: &seqExpr{
																					pos: position{line: 460, col: 9, offset: 15209},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 460, col: 9, offset: 15209},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 460, col: 14, offset: 15214},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								run: (*parser).callonAttributesGroup103,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2848, col: 7, offset: 94521},
																									expr: &charClassMatcher{
																										pos:        position{line: 2848, col: 7, offset: 94521},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 460, col: 22, offset: 15222},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2584, col: 11, offset: 86279},
																	run: (*parser).callonAttributesGroup107,
																	expr: &charClassMatcher{
																		pos:        position{line: 2584, col: 12, offset: 86280},
																		val:        "[<>&]",
																		chars:      []rune{'<', '>', '&'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2370, col: 7, offset: 80039},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 2371, col: 7, offset: 80051},
											name: "InlinePassthrough",
										},
										&actionExpr{
											pos: position{line: 416, col: 5, offset: 13530},
											run: (*parser).callonAttributesGroup111,
											expr: &seqExpr{
												pos: position{line: 416, col: 5, offset: 13530},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 416, col: 5, offset: 13530},
														run: (*parser).callonAttributesGroup113,
													},
													&labeledExpr{
														pos:   position{line: 419, col: 5, offset: 13594},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 419, col: 14, offset: 13603},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 430, col: 25, offset: 14065},
																	run: (*parser).callonAttributesGroup116,
																	expr: &seqExpr{
																		pos: position{line: 430, col: 25, offset: 14065},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 430, col: 25, offset: 14065},
																				val:        "{counter:",
																				ignoreCase: false,
																				want:       "\"{counter:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 430, col: 37, offset: 14077},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					run: (*parser).callonAttributesGroup120,
																					expr: &seqExpr{
																						pos: position{line: 120, col: 18, offset: 3502},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 120, col: 18, offset: 3502},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 120, col: 28, offset: 3512},
																								expr: &charClassMatcher{
																									pos:        position{line: 120, col: 29, offset: 3513},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 430, col: 56, offset: 14096},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 430, col: 62, offset: 14102},
																					expr: &actionExpr{
																						pos: position{line: 438, col: 17, offset: 14365},
																						run: (*parser).callonAttributesGroup127,
																						expr: &seqExpr{
																							pos: position{line: 438, col: 17, offset: 14365},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 438, col: 17, offset: 14365},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 438, col: 21, offset: 14369},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 438, col: 28, offset: 14376},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 438, col: 28, offset: 14376},
																												run: (*parser).callonAttributesGroup132,
																												expr: &charClassMatcher{
																													pos:        position{line: 438, col: 28, offset: 14376},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 440, col: 9, offset: 14430},
																												run: (*parser).callonAttributesGroup134,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 440, col: 9, offset: 14430},
																													expr: &charClassMatcher{
																														pos:        position{line: 440, col: 9, offset: 14430},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 430, col: 78, offset: 14118},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 434, col: 25, offset: 14220},
																	run: (*parser).callonAttributesGroup138,
																	expr: &seqExpr{
																		pos: position{line: 434, col: 25, offset: 14220},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 434, col: 25, offset: 14220},
																				val:        "{counter2:",
																				ignoreCase: false,
																				want:       "\"{counter2:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 434, col: 38, offset: 14233},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					run: (*parser).callonAttributesGroup142,
																					expr: &seqExpr{
																						pos: position{line: 120, col: 18, offset: 3502},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 120, col: 18, offset: 3502},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 120, col: 28, offset: 3512},
																								expr: &charClassMatcher{
																									pos:        position{line: 120, col: 29, offset: 3513},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 434, col: 57, offset: 14252},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 434, col: 63, offset: 14258},
																					expr: &actionExpr{
																						pos: position{line: 438, col: 17, offset: 14365},
																						run: (*parser).callonAttributesGroup149,
																						expr: &seqExpr{
																							pos: position{line: 438, col: 17, offset: 14365},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 438, col: 17, offset: 14365},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 438, col: 21, offset: 14369},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 438, col: 28, offset: 14376},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 438, col: 28, offset: 14376},
																												run: (*parser).callonAttributesGroup154,
																												expr: &charClassMatcher{
																													pos:        position{line: 438, col: 28, offset: 14376},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 440, col: 9, offset: 14430},
																												run: (*parser).callonAttributesGroup156,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 440, col: 9, offset: 14430},
																													expr: &charClassMatcher{
																														pos:        position{line: 440, col: 9, offset: 14430},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 434, col: 79, offset: 14274},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 423, col: 31, offset: 13720},
																	run: (*parser).callonAttributesGroup160,
																	expr: &seqExpr{
																		pos: position{line: 423, col: 31, offset: 13720},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 423, col: 31, offset: 13720},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 423, col: 35, offset: 13724},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					run: (*parser).callonAttributesGroup164,
																					expr: &seqExpr{
																						pos: position{line: 120, col: 18, offset: 3502},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 120, col: 18, offset: 3502},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 120, col: 28, offset: 3512},
																								expr: &charClassMatcher{
																									pos:        position{line: 120, col: 29, offset: 3513},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 423, col: 54, offset: 13743},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 914, col: 23, offset: 28983},
											run: (*parser).callonAttributesGroup170,
											expr: &seqExpr{
												pos: position{line: 914, col: 23, offset: 28983},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 912, col: 32, offset: 28951},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 914, col: 51, offset: 29011},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 914, col: 56, offset: 29016},
															run: (*parser).callonAttributesGroup174,
															expr: &oneOrMoreExpr{
																pos: position{line: 914, col: 56, offset: 29016},
																expr: &charClassMatcher{
																	pos:        position{line: 914, col: 56, offset: 29016},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 912, col: 32, offset: 28951},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2817, col: 12, offset: 93572},
											run: (*parser).callonAttributesGroup178,
											expr: &anyMatcher{
												line: 2817, col: 12, offset: 93572,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2874, col: 8, offset: 95112},
							expr: &anyMatcher{
								line: 2874, col: 9, offset: 95113,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttributesGroup",
			pos:  position{line: 2379, col: 1, offset: 80330},
			expr: &actionExpr{
				pos: position{line: 2379, col: 27, offset: 80356},
				run: (*parser).callonElementAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 2379, col: 27, offset: 80356},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2379, col: 27, offset: 80356},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2379, col: 36, offset: 80365},
								expr: &choiceExpr{
									pos: position{line: 2380, col: 5, offset: 80371},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2805, col: 5, offset: 93210},
											run: (*parser).callonElementAttributesGroup6,
											expr: &seqExpr{
												pos: position{line: 2805, col: 5, offset: 93210},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2805, col: 5, offset: 93210},
														expr: &charClassMatcher{
															pos:        position{line: 2805, col: 5, offset: 93210},
															val:        "[,;!?0-9\\pL]",
															chars:      []rune{',', ';', '!', '?'},
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2806, col: 6, offset: 93230},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2860, col: 10, offset: 94799},
																run: (*parser).callonElementAttributesGroup11,
																expr: &charClassMatcher{
																	pos:        position{line: 2860, col: 11, offset: 94800},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&andExpr{
																pos: position{line: 2806, col: 14, offset: 93238},
																expr: &choiceExpr{
																	pos: position{line: 2806, col: 16, offset: 93240},
																	alternatives: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2806, col: 16, offset: 93240},
																			val:        "[.�]",
																			chars:      []rune{'.', '�'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonElementAttributesGroup16,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2860, col: 10, offset: 94799},
											run: (*parser).callonElementAttributesGroup23,
											expr: &charClassMatcher{
												pos:        position{line: 2860, col: 11, offset: 94800},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&actionExpr{
											pos: position{line: 416, col: 5, offset: 13530},
											run: (*parser).callonElementAttributesGroup25,
											expr: &seqExpr{
												pos: position{line: 416, col: 5, offset: 13530},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 416, col: 5, offset: 13530},
														run: (*parser).callonElementAttributesGroup27,
													},
													&labeledExpr{
														pos:   position{line: 419, col: 5, offset: 13594},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 419, col: 14, offset: 13603},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 430, col: 25, offset: 14065},
																	run: (*parser).callonElementAttributesGroup30,
																	expr: &seqExpr{
																		pos: position{line: 430, col: 25, offset: 14065},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 430, col: 25, offset: 14065},
																				val:        "{counter:",
																				ignoreCase: false,
																				want:       "\"{counter:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 430, col: 37, offset: 14077},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					run: (*parser).callonElementAttributesGroup34,
																					expr: &seqExpr{
																						pos: position{line: 120, col: 18, offset: 3502},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 120, col: 18, offset: 3502},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 120, col: 28, offset: 3512},
																								expr: &charClassMatcher{
																									pos:        position{line: 120, col: 29, offset: 3513},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 430, col: 56, offset: 14096},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 430, col: 62, offset: 14102},
																					expr: &actionExpr{
																						pos: position{line: 438, col: 17, offset: 14365},
																						run: (*parser).callonElementAttributesGroup41,
																						expr: &seqExpr{
																							pos: position{line: 438, col: 17, offset: 14365},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 438, col: 17, offset: 14365},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 438, col: 21, offset: 14369},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 438, col: 28, offset: 14376},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 438, col: 28, offset: 14376},
																												run: (*parser).callonElementAttributesGroup46,
																												expr: &charClassMatcher{
																													pos:        position{line: 438, col: 28, offset: 14376},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 440, col: 9, offset: 14430},
																												run: (*parser).callonElementAttributesGroup48,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 440, col: 9, offset: 14430},
																													expr: &charClassMatcher{
																														pos:        position{line: 440, col: 9, offset: 14430},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 430, col: 78, offset: 14118},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 434, col: 25, offset: 14220},
																	run: (*parser).callonElementAttributesGroup52,
																	expr: &seqExpr{
																		pos: position{line: 434, col: 25, offset: 14220},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 434, col: 25, offset: 14220},
																				val:        "{counter2:",
																				ignoreCase: false,
																				want:       "\"{counter2:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 434, col: 38, offset: 14233},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					run: (*parser).callonElementAttributesGroup56,
																					expr: &seqExpr{
																						pos: position{line: 120, col: 18, offset: 3502},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 120, col: 18, offset: 3502},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 120, col: 28, offset: 3512},
																								expr: &charClassMatcher{
																									pos:        position{line: 120, col: 29, offset: 3513},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 434, col: 57, offset: 14252},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 434, col: 63, offset: 14258},
																					expr: &actionExpr{
																						pos: position{line: 438, col: 17, offset: 14365},
																						run: (*parser).callonElementAttributesGroup63,
																						expr: &seqExpr{
																							pos: position{line: 438, col: 17, offset: 14365},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 438, col: 17, offset: 14365},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 438, col: 21, offset: 14369},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 438, col: 28, offset: 14376},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 438, col: 28, offset: 14376},
																												run: (*parser).callonElementAttributesGroup68,
																												expr: &charClassMatcher{
																													pos:        position{line: 438, col: 28, offset: 14376},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 440, col: 9, offset: 14430},
																												run: (*parser).callonElementAttributesGroup70,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 440, col: 9, offset: 14430},
																													expr: &charClassMatcher{
																														pos:        position{line: 440, col: 9, offset: 14430},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 434, col: 79, offset: 14274},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 423, col: 31, offset: 13720},
																	run: (*parser).callonElementAttributesGroup74,
																	expr: &seqExpr{
																		pos: position{line: 423, col: 31, offset: 13720},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 423, col: 31, offset: 13720},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 423, col: 35, offset: 13724},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					run: (*parser).callonElementAttributesGroup78,
																					expr: &seqExpr{
																						pos: position{line: 120, col: 18, offset: 3502},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 120, col: 18, offset: 3502},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 120, col: 28, offset: 3512},
																								expr: &charClassMatcher{
																									pos:        position{line: 120, col: 29, offset: 3513},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 423, col: 54, offset: 13743},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2383, col: 7, offset: 80428},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 2576, col: 5, offset: 86006},
											run: (*parser).callonElementAttributesGroup85,
											expr: &seqExpr{
												pos: position{line: 2576, col: 5, offset: 86006},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 2576, col: 5, offset: 86006},
														run: (*parser).callonElementAttributesGroup87,
													},
													&labeledExpr{
														pos:   position{line: 2579, col: 5, offset: 86077},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 2581, col: 9, offset: 86175},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2581, col: 9, offset: 86175},
																	run: (*parser).callonElementAttributesGroup90,
																	expr: &choiceExpr{
																		pos: position{line: 458, col: 27, offset: 15084},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 458, col: 27, offset: 15084},
																				run: (*parser).callonElementAttributesGroup92,
																				expr: &seqExpr{
																					pos: position{line: 458, col: 27, offset: 15084},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 458, col: 27, offset: 15084},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 458, col: 32, offset: 15089},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								run: (*parser).callonElementAttributesGroup96,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2848, col: 7, offset: 94521},
																									expr: &charClassMatcher{
																										pos:        position{line: 2848, col: 7, offset: 94521},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 458, col: 40, offset: 15097},
																							expr: &actionExpr{
																								pos: position{line: 2860, col: 10, offset: 94799},
																								run: (*parser).callonElementAttributesGroup100,
																								expr: &charClassMatcher{
																									pos:        position{line: 2860, col: 11, offset: 94800},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 458, col: 47, offset: 15104},
																							val:        ",",
																							ignoreCase: false,
																							want:       "\",\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 458, col: 51, offset: 15108},
																							label: "label",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 468, col: 24, offset: 15521},
																								expr: &choiceExpr{
																									pos: position{line: 469, col: 5, offset: 15527},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 469, col: 6, offset: 15528},
																											run: (*parser).callonElementAttributesGroup106,
																											expr: &seqExpr{
																												pos: position{line: 469, col: 6, offset: 15528},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 469, col: 6, offset: 15528},
																														val:        "[0-9\\pL]",
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 469, col: 14, offset: 15536},
																														expr: &charClassMatcher{
																															pos:        position{line: 469, col: 14, offset: 15536},
																															val:        "[^\\r\\n{<>]",
																															chars:      []rune{'\r', '\n', '{', '<', '>'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 416, col: 5, offset: 13530},
																											run: (*parser).callonElementAttributesGroup111,
																											expr: &seqExpr{
																												pos: position{line: 416, col: 5, offset: 13530},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 416, col: 5, offset: 13530},
																														run: (*parser).callonElementAttributesGroup113,
																													},
																													&labeledExpr{
																														pos:   position{line: 419, col: 5, offset: 13594},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 419, col: 14, offset: 13603},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 430, col: 25, offset: 14065},
																																	run: (*parser).callonElementAttributesGroup116,
																																	expr: &seqExpr{
																																		pos: position{line: 430, col: 25, offset: 14065},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 430, col: 25, offset: 14065},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 430, col: 37, offset: 14077},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					run: (*parser).callonElementAttributesGroup120,
																																					expr: &seqExpr{
																																						pos: position{line: 120, col: 18, offset: 3502},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 120, col: 18, offset: 3502},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 120, col: 28, offset: 3512},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 120, col: 29, offset: 3513},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 430, col: 56, offset: 14096},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 430, col: 62, offset: 14102},
																																					expr: &actionExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						run: (*parser).callonElementAttributesGroup127,
																																						expr: &seqExpr{
																																							pos: position{line: 438, col: 17, offset: 14365},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 438, col: 17, offset: 14365},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 438, col: 21, offset: 14369},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 438, col: 28, offset: 14376},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 438, col: 28, offset: 14376},
																																												run: (*parser).callonElementAttributesGroup132,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 438, col: 28, offset: 14376},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												run: (*parser).callonElementAttributesGroup134,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 440, col: 9, offset: 14430},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 440, col: 9, offset: 14430},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 430, col: 78, offset: 14118},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 434, col: 25, offset: 14220},
																																	run: (*parser).callonElementAttributesGroup138,
																																	expr: &seqExpr{
																																		pos: position{line: 434, col: 25, offset: 14220},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 434, col: 25, offset: 14220},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 434, col: 38, offset: 14233},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					run: (*parser).callonElementAttributesGroup142,
																																					expr: &seqExpr{
																																						pos: position{line: 120, col: 18, offset: 3502},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 120, col: 18, offset: 3502},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 120, col: 28, offset: 3512},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 120, col: 29, offset: 3513},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 434, col: 57, offset: 14252},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 434, col: 63, offset: 14258},
																																					expr: &actionExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						run: (*parser).callonElementAttributesGroup149,
																																						expr: &seqExpr{
																																							pos: position{line: 438, col: 17, offset: 14365},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 438, col: 17, offset: 14365},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 438, col: 21, offset: 14369},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 438, col: 28, offset: 14376},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 438, col: 28, offset: 14376},
																																												run: (*parser).callonElementAttributesGroup154,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 438, col: 28, offset: 14376},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												run: (*parser).callonElementAttributesGroup156,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 440, col: 9, offset: 14430},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 440, col: 9, offset: 14430},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 434, col: 79, offset: 14274},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 423, col: 31, offset: 13720},
																																	run: (*parser).callonElementAttributesGroup160,
																																	expr: &seqExpr{
																																		pos: position{line: 423, col: 31, offset: 13720},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 423, col: 31, offset: 13720},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 423, col: 35, offset: 13724},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					run: (*parser).callonElementAttributesGroup164,
																																					expr: &seqExpr{
																																						pos: position{line: 120, col: 18, offset: 3502},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 120, col: 18, offset: 3502},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 120, col: 28, offset: 3512},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 120, col: 29, offset: 3513},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 423, col: 54, offset: 13743},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 473, col: 8, offset: 15760},
																											run: (*parser).callonElementAttributesGroup170,
																											expr: &litMatcher{
																												pos:        position{line: 473, col: 8, offset: 15760},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 458, col: 79, offset: 15136},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 460, col: 9, offset: 15209},
																				run: (*parser).callonElementAttributesGroup173,
																				expr: &seqExpr{
																					pos: position{line: 460, col: 9, offset: 15209},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 460, col: 9, offset: 15209},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 460, col: 14, offset: 15214},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								run: (*parser).callonElementAttributesGroup177,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2848, col: 7, offset: 94521},
																									expr: &charClassMatcher{
																										pos:        position{line: 2848, col: 7, offset: 94521},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 460, col: 22, offset: 15222},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2584, col: 11, offset: 86279},
																	run: (*parser).callonElementAttributesGroup181,
																	expr: &charClassMatcher{
																		pos:        position{line: 2584, col: 12, offset: 86280},
																		val:        "[<>&]",
																		chars:      []rune{'<', '>', '&'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 914, col: 23, offset: 28983},
											run: (*parser).callonElementAttributesGroup183,
											expr: &seqExpr{
												pos: position{line: 914, col: 23, offset: 28983},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 912, col: 32, offset: 28951},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 914, col: 51, offset: 29011},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 914, col: 56, offset: 29016},
															run: (*parser).callonElementAttributesGroup187,
															expr: &oneOrMoreExpr{
																pos: position{line: 914, col: 56, offset: 29016},
																expr: &charClassMatcher{
																	pos:        position{line: 914, col: 56, offset: 29016},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 912, col: 32, offset: 28951},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2817, col: 12, offset: 93572},
											run: (*parser).callonElementAttributesGroup191,
											expr: &anyMatcher{
												line: 2817, col: 12, offset: 93572,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2874, col: 8, offset: 95112},
							expr: &anyMatcher{
								line: 2874, col: 9, offset: 95113,
							},
						},
					},
				},
			},
		},
		{
			name: "HeaderGroup",
			pos:  position{line: 2391, col: 1, offset: 80693},
			expr: &actionExpr{
				pos: position{line: 2392, col: 5, offset: 80713},
				run: (*parser).callonHeaderGroup1,
				expr: &seqExpr{
					pos: position{line: 2392, col: 5, offset: 80713},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2392, col: 5, offset: 80713},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2392, col: 14, offset: 80722},
								expr: &ruleRefExpr{
									pos:  position{line: 2392, col: 15, offset: 80723},
									name: "HeaderGroupElement",
								},
							},
						},
						&notExpr{
							pos: position{line: 2874, col: 8, offset: 95112},
							expr: &anyMatcher{
								line: 2874, col: 9, offset: 95113,
							},
						},
					},
				},
			},
		},
		{
			name: "HeaderGroupElement",
			pos:  position{line: 2396, col: 1, offset: 80807},
			expr: &actionExpr{
				pos: position{line: 2397, col: 5, offset: 80833},
				run: (*parser).callonHeaderGroupElement1,
				expr: &seqExpr{
					pos: position{line: 2397, col: 5, offset: 80833},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2397, col: 5, offset: 80833},
							expr: &notExpr{
								pos: position{line: 2874, col: 8, offset: 95112},
								expr: &anyMatcher{
									line: 2874, col: 9, offset: 95113,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2398, col: 5, offset: 80842},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2399, col: 9, offset: 80860},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2805, col: 5, offset: 93210},
										run: (*parser).callonHeaderGroupElement8,
										expr: &seqExpr{
											pos: position{line: 2805, col: 5, offset: 93210},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2805, col: 5, offset: 93210},
													expr: &charClassMatcher{
														pos:        position{line: 2805, col: 5, offset: 93210},
														val:        "[,;!?0-9\\pL]",
														chars:      []rune{',', ';', '!', '?'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2806, col: 6, offset: 93230},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2860, col: 10, offset: 94799},
															run: (*parser).callonHeaderGroupElement13,
															expr: &charClassMatcher{
																pos:        position{line: 2860, col: 11, offset: 94800},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&andExpr{
															pos: position{line: 2806, col: 14, offset: 93238},
															expr: &choiceExpr{
																pos: position{line: 2806, col: 16, offset: 93240},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2806, col: 16, offset: 93240},
																		val:        "[.�]",
																		chars:      []rune{'.', '�'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 2870, col: 12, offset: 95022},
																		run: (*parser).callonHeaderGroupElement18,
																		expr: &choiceExpr{
																			pos: position{line: 2870, col: 13, offset: 95023},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2870, col: 13, offset: 95023},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2870, col: 20, offset: 95030},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2870, col: 29, offset: 95039},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2874, col: 8, offset: 95112},
																		expr: &anyMatcher{
																			line: 2874, col: 9, offset: 95113,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2860, col: 10, offset: 94799},
										run: (*parser).callonHeaderGroupElement25,
										expr: &charClassMatcher{
											pos:        position{line: 2860, col: 11, offset: 94800},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2401, col: 11, offset: 80897},
										name: "InlinePassthrough",
									},
									&actionExpr{
										pos: position{line: 2576, col: 5, offset: 86006},
										run: (*parser).callonHeaderGroupElement28,
										expr: &seqExpr{
											pos: position{line: 2576, col: 5, offset: 86006},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2576, col: 5, offset: 86006},
													run: (*parser).callonHeaderGroupElement30,
												},
												&labeledExpr{
													pos:   position{line: 2579, col: 5, offset: 86077},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2581, col: 9, offset: 86175},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2581, col: 9, offset: 86175},
																run: (*parser).callonHeaderGroupElement33,
																expr: &choiceExpr{
																	pos: position{line: 458, col: 27, offset: 15084},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 458, col: 27, offset: 15084},
																			run: (*parser).callonHeaderGroupElement35,
																			expr: &seqExpr{
																				pos: position{line: 458, col: 27, offset: 15084},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 458, col: 27, offset: 15084},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 458, col: 32, offset: 15089},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 7, offset: 94521},
																							run: (*parser).callonHeaderGroupElement39,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 7, offset: 94521},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 458, col: 40, offset: 15097},
																						expr: &actionExpr{
																							pos: position{line: 2860, col: 10, offset: 94799},
																							run: (*parser).callonHeaderGroupElement43,
																							expr: &charClassMatcher{
																								pos:        position{line: 2860, col: 11, offset: 94800},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 458, col: 47, offset: 15104},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 458, col: 51, offset: 15108},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 468, col: 24, offset: 15521},
																							expr: &choiceExpr{
																								pos: position{line: 469, col: 5, offset: 15527},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 469, col: 6, offset: 15528},
																										run: (*parser).callonHeaderGroupElement49,
																										expr: &seqExpr{
																											pos: position{line: 469, col: 6, offset: 15528},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 469, col: 6, offset: 15528},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 469, col: 14, offset: 15536},
																													expr: &charClassMatcher{
																														pos:        position{line: 469, col: 14, offset: 15536},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 416, col: 5, offset: 13530},
																										run: (*parser).callonHeaderGroupElement54,
																										expr: &seqExpr{
																											pos: position{line: 416, col: 5, offset: 13530},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 416, col: 5, offset: 13530},
																													run: (*parser).callonHeaderGroupElement56,
																												},
																												&labeledExpr{
																													pos:   position{line: 419, col: 5, offset: 13594},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 419, col: 14, offset: 13603},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 430, col: 25, offset: 14065},
																																run: (*parser).callonHeaderGroupElement59,
																																expr: &seqExpr{
																																	pos: position{line: 430, col: 25, offset: 14065},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 430, col: 25, offset: 14065},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 430, col: 37, offset: 14077},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonHeaderGroupElement63,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 430, col: 56, offset: 14096},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 430, col: 62, offset: 14102},
																																				expr: &actionExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					run: (*parser).callonHeaderGroupElement70,
																																					expr: &seqExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 438, col: 17, offset: 14365},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 438, col: 21, offset: 14369},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 438, col: 28, offset: 14376},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 438, col: 28, offset: 14376},
																																											run: (*parser).callonHeaderGroupElement75,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 438, col: 28, offset: 14376},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											run: (*parser).callonHeaderGroupElement77,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 440, col: 9, offset: 14430},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 430, col: 78, offset: 14118},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 434, col: 25, offset: 14220},
																																run: (*parser).callonHeaderGroupElement81,
																																expr: &seqExpr{
																																	pos: position{line: 434, col: 25, offset: 14220},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 434, col: 25, offset: 14220},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 434, col: 38, offset: 14233},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonHeaderGroupElement85,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 434, col: 57, offset: 14252},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 434, col: 63, offset: 14258},
																																				expr: &actionExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					run: (*parser).callonHeaderGroupElement92,
																																					expr: &seqExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 438, col: 17, offset: 14365},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 438, col: 21, offset: 14369},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 438, col: 28, offset: 14376},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 438, col: 28, offset: 14376},
																																											run: (*parser).callonHeaderGroupElement97,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 438, col: 28, offset: 14376},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											run: (*parser).callonHeaderGroupElement99,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 440, col: 9, offset: 14430},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 434, col: 79, offset: 14274},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 423, col: 31, offset: 13720},
																																run: (*parser).callonHeaderGroupElement103,
																																expr: &seqExpr{
																																	pos: position{line: 423, col: 31, offset: 13720},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 423, col: 31, offset: 13720},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 423, col: 35, offset: 13724},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonHeaderGroupElement107,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 423, col: 54, offset: 13743},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 473, col: 8, offset: 15760},
																										run: (*parser).callonHeaderGroupElement113,
																										expr: &litMatcher{
																											pos:        position{line: 473, col: 8, offset: 15760},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 458, col: 79, offset: 15136},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 460, col: 9, offset: 15209},
																			run: (*parser).callonHeaderGroupElement116,
																			expr: &seqExpr{
																				pos: position{line: 460, col: 9, offset: 15209},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 460, col: 9, offset: 15209},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 460, col: 14, offset: 15214},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 7, offset: 94521},
																							run: (*parser).callonHeaderGroupElement120,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 7, offset: 94521},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 460, col: 22, offset: 15222},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2584, col: 11, offset: 86279},
																run: (*parser).callonHeaderGroupElement124,
																expr: &charClassMatcher{
																	pos:        position{line: 2584, col: 12, offset: 86280},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2403, col: 11, offset: 80952},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 2404, col: 11, offset: 80968},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 2405, col: 11, offset: 80983},
										name: "InlineIcon",
									},
									&actionExpr{
										pos: position{line: 416, col: 5, offset: 13530},
										run: (*parser).callonHeaderGroupElement129,
										expr: &seqExpr{
											pos: position{line: 416, col: 5, offset: 13530},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 416, col: 5, offset: 13530},
													run: (*parser).callonHeaderGroupElement131,
												},
												&labeledExpr{
													pos:   position{line: 419, col: 5, offset: 13594},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 419, col: 14, offset: 13603},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 430, col: 25, offset: 14065},
																run: (*parser).callonHeaderGroupElement134,
																expr: &seqExpr{
																	pos: position{line: 430, col: 25, offset: 14065},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 430, col: 25, offset: 14065},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 430, col: 37, offset: 14077},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonHeaderGroupElement138,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 430, col: 56, offset: 14096},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 430, col: 62, offset: 14102},
																				expr: &actionExpr{
																					pos: position{line: 438, col: 17, offset: 14365},
																					run: (*parser).callonHeaderGroupElement145,
																					expr: &seqExpr{
																						pos: position{line: 438, col: 17, offset: 14365},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 438, col: 17, offset: 14365},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 438, col: 21, offset: 14369},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 438, col: 28, offset: 14376},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 438, col: 28, offset: 14376},
																											run: (*parser).callonHeaderGroupElement150,
																											expr: &charClassMatcher{
																												pos:        position{line: 438, col: 28, offset: 14376},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 440, col: 9, offset: 14430},
																											run: (*parser).callonHeaderGroupElement152,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 440, col: 9, offset: 14430},
																												expr: &charClassMatcher{
																													pos:        position{line: 440, col: 9, offset: 14430},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 430, col: 78, offset: 14118},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 434, col: 25, offset: 14220},
																run: (*parser).callonHeaderGroupElement156,
																expr: &seqExpr{
																	pos: position{line: 434, col: 25, offset: 14220},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 434, col: 25, offset: 14220},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 434, col: 38, offset: 14233},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonHeaderGroupElement160,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 434, col: 57, offset: 14252},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 434, col: 63, offset: 14258},
																				expr: &actionExpr{
																					pos: position{line: 438, col: 17, offset: 14365},
																					run: (*parser).callonHeaderGroupElement167,
																					expr: &seqExpr{
																						pos: position{line: 438, col: 17, offset: 14365},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 438, col: 17, offset: 14365},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 438, col: 21, offset: 14369},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 438, col: 28, offset: 14376},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 438, col: 28, offset: 14376},
																											run: (*parser).callonHeaderGroupElement172,
																											expr: &charClassMatcher{
																												pos:        position{line: 438, col: 28, offset: 14376},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 440, col: 9, offset: 14430},
																											run: (*parser).callonHeaderGroupElement174,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 440, col: 9, offset: 14430},
																												expr: &charClassMatcher{
																													pos:        position{line: 440, col: 9, offset: 14430},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 434, col: 79, offset: 14274},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 423, col: 31, offset: 13720},
																run: (*parser).callonHeaderGroupElement178,
																expr: &seqExpr{
																	pos: position{line: 423, col: 31, offset: 13720},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 423, col: 31, offset: 13720},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 423, col: 35, offset: 13724},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonHeaderGroupElement182,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 423, col: 54, offset: 13743},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 914, col: 23, offset: 28983},
										run: (*parser).callonHeaderGroupElement188,
										expr: &seqExpr{
											pos: position{line: 914, col: 23, offset: 28983},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 912, col: 32, offset: 28951},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 914, col: 51, offset: 29011},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 914, col: 56, offset: 29016},
														run: (*parser).callonHeaderGroupElement192,
														expr: &oneOrMoreExpr{
															pos: position{line: 914, col: 56, offset: 29016},
															expr: &charClassMatcher{
																pos:        position{line: 914, col: 56, offset: 29016},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 912, col: 32, offset: 28951},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2565, col: 5, offset: 85785},
										run: (*parser).callonHeaderGroupElement196,
										expr: &seqExpr{
											pos: position{line: 2565, col: 5, offset: 85785},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2565, col: 5, offset: 85785},
													run: (*parser).callonHeaderGroupElement198,
												},
												&labeledExpr{
													pos:   position{line: 2568, col: 5, offset: 85851},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2607, col: 11, offset: 87153},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2609, col: 15, offset: 87247},
																run: (*parser).callonHeaderGroupElement201,
																expr: &litMatcher{
																	pos:        position{line: 2609, col: 15, offset: 87247},
																	val:        "`'",
																	ignoreCase: false,
																	want:       "\"`'\"",
																},
															},
															&actionExpr{
																pos: position{line: 2615, col: 14, offset: 87362},
																run: (*parser).callonHeaderGroupElement203,
																expr: &litMatcher{
																	pos:        position{line: 2615, col: 14, offset: 87362},
																	val:        "(C)",
																	ignoreCase: false,
																	want:       "\"(C)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2619, col: 14, offset: 87438},
																run: (*parser).callonHeaderGroupElement205,
																expr: &litMatcher{
																	pos:        position{line: 2619, col: 14, offset: 87438},
																	val:        "(TM)",
																	ignoreCase: false,
																	want:       "\"(TM)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2623, col: 15, offset: 87516},
																run: (*parser).callonHeaderGroupElement207,
																expr: &litMatcher{
																	pos:        position{line: 2623, col: 15, offset: 87516},
																	val:        "(R)",
																	ignoreCase: false,
																	want:       "\"(R)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2627, col: 13, offset: 87591},
																run: (*parser).callonHeaderGroupElement209,
																expr: &litMatcher{
																	pos:        position{line: 2627, col: 13, offset: 87591},
																	val:        "...",
																	ignoreCase: false,
																	want:       "\"...\"",
																},
															},
															&actionExpr{
																pos: position{line: 2635, col: 22, offset: 87897},
																run: (*parser).callonHeaderGroupElement211,
																expr: &seqExpr{
																	pos: position{line: 2635, col: 22, offset: 87897},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2786, col: 13, offset: 92537},
																			val:        "[0-9\\pL]",
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&litMatcher{
																			pos:        position{line: 2635, col: 31, offset: 87906},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&andExpr{
																			pos: position{line: 2635, col: 35, offset: 87910},
																			expr: &charClassMatcher{
																				pos:        position{line: 2635, col: 36, offset: 87911},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 186, col: 4, offset: 5437},
										run: (*parser).callonHeaderGroupElement217,
										expr: &seqExpr{
											pos: position{line: 186, col: 4, offset: 5437},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 186, col: 4, offset: 5437},
													val:        "[[",
													ignoreCase: false,
													want:       "\"[[\"",
												},
												&labeledExpr{
													pos:   position{line: 187, col: 5, offset: 5447},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 188, col: 9, offset: 5460},
														run: (*parser).callonHeaderGroupElement221,
														expr: &labeledExpr{
															pos:   position{line: 188, col: 9, offset: 5460},
															label: "elements",
															expr: &oneOrMoreExpr{
																pos: position{line: 188, col: 18, offset: 5469},
																expr: &choiceExpr{
																	pos: position{line: 189, col: 13, offset: 5483},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 189, col: 14, offset: 5484},
																			run: (*parser).callonHeaderGroupElement225,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 189, col: 14, offset: 5484},
																				expr: &charClassMatcher{
																					pos:        position{line: 189, col: 14, offset: 5484},
																					val:        "[^=\\r\\n�{]]",
																					chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 914, col: 23, offset: 28983},
																			run: (*parser).callonHeaderGroupElement228,
																			expr: &seqExpr{
																				pos: position{line: 914, col: 23, offset: 28983},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 912, col: 32, offset: 28951},
																						val:        "�",
																						ignoreCase: false,
																						want:       "\"�\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 914, col: 51, offset: 29011},
																						label: "ref",
																						expr: &actionExpr{
																							pos: position{line: 914, col: 56, offset: 29016},
																							run: (*parser).callonHeaderGroupElement232,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 914, col: 56, offset: 29016},
																								expr: &charClassMatcher{
																									pos:        position{line: 914, col: 56, offset: 29016},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 912, col: 32, offset: 28951},
																						val:        "�",
																						ignoreCase: false,
																						want:       "\"�\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 416, col: 5, offset: 13530},
																			run: (*parser).callonHeaderGroupElement236,
																			expr: &seqExpr{
																				pos: position{line: 416, col: 5, offset: 13530},
																				exprs: []interface{}{
																					&andCodeExpr{
																						pos: position{line: 416, col: 5, offset: 13530},
																						run: (*parser).callonHeaderGroupElement238,
																					},
																					&labeledExpr{
																						pos:   position{line: 419, col: 5, offset: 13594},
																						label: "element",
																						expr: &choiceExpr{
																							pos: position{line: 419, col: 14, offset: 13603},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 430, col: 25, offset: 14065},
																									run: (*parser).callonHeaderGroupElement241,
																									expr: &seqExpr{
																										pos: position{line: 430, col: 25, offset: 14065},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 430, col: 25, offset: 14065},
																												val:        "{counter:",
																												ignoreCase: false,
																												want:       "\"{counter:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 430, col: 37, offset: 14077},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 120, col: 18, offset: 3502},
																													run: (*parser).callonHeaderGroupElement245,
																													expr: &seqExpr{
																														pos: position{line: 120, col: 18, offset: 3502},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 120, col: 18, offset: 3502},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 120, col: 28, offset: 3512},
																																expr: &charClassMatcher{
																																	pos:        position{line: 120, col: 29, offset: 3513},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 430, col: 56, offset: 14096},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 430, col: 62, offset: 14102},
																													expr: &actionExpr{
																														pos: position{line: 438, col: 17, offset: 14365},
																														run: (*parser).callonHeaderGroupElement252,
																														expr: &seqExpr{
																															pos: position{line: 438, col: 17, offset: 14365},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 438, col: 17, offset: 14365},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 438, col: 21, offset: 14369},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 438, col: 28, offset: 14376},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 438, col: 28, offset: 14376},
																																				run: (*parser).callonHeaderGroupElement257,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 438, col: 28, offset: 14376},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 440, col: 9, offset: 14430},
																																				run: (*parser).callonHeaderGroupElement259,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 440, col: 9, offset: 14430},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 440, col: 9, offset: 14430},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 430, col: 78, offset: 14118},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 434, col: 25, offset: 14220},
																									run: (*parser).callonHeaderGroupElement263,
																									expr: &seqExpr{
																										pos: position{line: 434, col: 25, offset: 14220},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 434, col: 25, offset: 14220},
																												val:        "{counter2:",
																												ignoreCase: false,
																												want:       "\"{counter2:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 434, col: 38, offset: 14233},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 120, col: 18, offset: 3502},
																													run: (*parser).callonHeaderGroupElement267,
																													expr: &seqExpr{
																														pos: position{line: 120, col: 18, offset: 3502},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 120, col: 18, offset: 3502},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 120, col: 28, offset: 3512},
																																expr: &charClassMatcher{
																																	pos:        position{line: 120, col: 29, offset: 3513},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 434, col: 57, offset: 14252},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 434, col: 63, offset: 14258},
																													expr: &actionExpr{
																														pos: position{line: 438, col: 17, offset: 14365},
																														run: (*parser).callonHeaderGroupElement274,
																														expr: &seqExpr{
																															pos: position{line: 438, col: 17, offset: 14365},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 438, col: 17, offset: 14365},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 438, col: 21, offset: 14369},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 438, col: 28, offset: 14376},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 438, col: 28, offset: 14376},
																																				run: (*parser).callonHeaderGroupElement279,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 438, col: 28, offset: 14376},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 440, col: 9, offset: 14430},
																																				run: (*parser).callonHeaderGroupElement281,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 440, col: 9, offset: 14430},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 440, col: 9, offset: 14430},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 434, col: 79, offset: 14274},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 423, col: 31, offset: 13720},
																									run: (*parser).callonHeaderGroupElement285,
																									expr: &seqExpr{
																										pos: position{line: 423, col: 31, offset: 13720},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 423, col: 31, offset: 13720},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 423, col: 35, offset: 13724},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 120, col: 18, offset: 3502},
																													run: (*parser).callonHeaderGroupElement289,
																													expr: &seqExpr{
																														pos: position{line: 120, col: 18, offset: 3502},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 120, col: 18, offset: 3502},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 120, col: 28, offset: 3512},
																																expr: &charClassMatcher{
																																	pos:        position{line: 120, col: 29, offset: 3513},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 423, col: 54, offset: 13743},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 194, col: 16, offset: 5720},
																			run: (*parser).callonHeaderGroupElement295,
																			expr: &litMatcher{
																				pos:        position{line: 194, col: 16, offset: 5720},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 200, col: 5, offset: 5906},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2410, col: 11, offset: 81201},
										name: "InlineFootnote",
									},
									&actionExpr{
										pos: position{line: 2817, col: 12, offset: 93572},
										run: (*parser).callonHeaderGroupElement299,
										expr: &anyMatcher{
											line: 2817, col: 12, offset: 93572,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MacrosGroup",
			pos:  position{line: 2416, col: 1, offset: 81320},
			expr: &actionExpr{
				pos: position{line: 2416, col: 16, offset: 81335},
				run: (*parser).callonMacrosGroup1,
				expr: &seqExpr{
					pos: position{line: 2416, col: 16, offset: 81335},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2416, col: 16, offset: 81335},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2416, col: 25, offset: 81344},
								expr: &choiceExpr{
									pos: position{line: 2417, col: 5, offset: 81350},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2805, col: 5, offset: 93210},
											run: (*parser).callonMacrosGroup6,
											expr: &seqExpr{
												pos: position{line: 2805, col: 5, offset: 93210},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2805, col: 5, offset: 93210},
														expr: &charClassMatcher{
															pos:        position{line: 2805, col: 5, offset: 93210},
															val:        "[,;!?0-9\\pL]",
															chars:      []rune{',', ';', '!', '?'},
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2806, col: 6, offset: 93230},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2860, col: 10, offset: 94799},
																run: (*parser).callonMacrosGroup11,
																expr: &charClassMatcher{
																	pos:        position{line: 2860, col: 11, offset: 94800},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&andExpr{
																pos: position{line: 2806, col: 14, offset: 93238},
																expr: &choiceExpr{
																	pos: position{line: 2806, col: 16, offset: 93240},
																	alternatives: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2806, col: 16, offset: 93240},
																			val:        "[.�]",
																			chars:      []rune{'.', '�'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonMacrosGroup16,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2418, col: 7, offset: 81367},
											name: "InlineMacro",
										},
										&actionExpr{
											pos: position{line: 914, col: 23, offset: 28983},
											run: (*parser).callonMacrosGroup24,
											expr: &seqExpr{
												pos: position{line: 914, col: 23, offset: 28983},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 912, col: 32, offset: 28951},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 914, col: 51, offset: 29011},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 914, col: 56, offset: 29016},
															run: (*parser).callonMacrosGroup28,
															expr: &oneOrMoreExpr{
																pos: position{line: 914, col: 56, offset: 29016},
																expr: &charClassMatcher{
																	pos:        position{line: 914, col: 56, offset: 29016},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 912, col: 32, offset: 28951},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2817, col: 12, offset: 93572},
											run: (*parser).callonMacrosGroup32,
											expr: &anyMatcher{
												line: 2817, col: 12, offset: 93572,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2874, col: 8, offset: 95112},
							expr: &anyMatcher{
								line: 2874, col: 9, offset: 95113,
							},
						},
					},
				},
			},
		},
		{
			name: "NoneGroup",
			pos:  position{line: 2426, col: 1, offset: 81675},
			expr: &actionExpr{
				pos: position{line: 2426, col: 14, offset: 81688},
				run: (*parser).callonNoneGroup1,
				expr: &seqExpr{
					pos: position{line: 2426, col: 14, offset: 81688},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2426, col: 14, offset: 81688},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2426, col: 23, offset: 81697},
								expr: &actionExpr{
									pos: position{line: 2431, col: 5, offset: 81805},
									run: (*parser).callonNoneGroup5,
									expr: &seqExpr{
										pos: position{line: 2431, col: 5, offset: 81805},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2431, col: 5, offset: 81805},
												expr: &notExpr{
													pos: position{line: 2874, col: 8, offset: 95112},
													expr: &anyMatcher{
														line: 2874, col: 9, offset: 95113,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2432, col: 5, offset: 81814},
												label: "element",
												expr: &oneOrMoreExpr{
													pos: position{line: 2432, col: 13, offset: 81822},
													expr: &choiceExpr{
														pos: position{line: 2433, col: 9, offset: 81832},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2805, col: 5, offset: 93210},
																run: (*parser).callonNoneGroup13,
																expr: &seqExpr{
																	pos: position{line: 2805, col: 5, offset: 93210},
																	exprs: []interface{}{
																		&oneOrMoreExpr{
																			pos: position{line: 2805, col: 5, offset: 93210},
																			expr: &charClassMatcher{
																				pos:        position{line: 2805, col: 5, offset: 93210},
																				val:        "[,;!?0-9\\pL]",
																				chars:      []rune{',', ';', '!', '?'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2806, col: 6, offset: 93230},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2860, col: 10, offset: 94799},
																					run: (*parser).callonNoneGroup18,
																					expr: &charClassMatcher{
																						pos:        position{line: 2860, col: 11, offset: 94800},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&andExpr{
																					pos: position{line: 2806, col: 14, offset: 93238},
																					expr: &choiceExpr{
																						pos: position{line: 2806, col: 16, offset: 93240},
																						alternatives: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 2806, col: 16, offset: 93240},
																								val:        "[.�]",
																								chars:      []rune{'.', '�'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&actionExpr{
																								pos: position{line: 2870, col: 12, offset: 95022},
																								run: (*parser).callonNoneGroup23,
																								expr: &choiceExpr{
																									pos: position{line: 2870, col: 13, offset: 95023},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2870, col: 13, offset: 95023},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2870, col: 20, offset: 95030},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2870, col: 29, offset: 95039},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2874, col: 8, offset: 95112},
																								expr: &anyMatcher{
																									line: 2874, col: 9, offset: 95113,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 914, col: 23, offset: 28983},
																run: (*parser).callonNoneGroup30,
																expr: &seqExpr{
																	pos: position{line: 914, col: 23, offset: 28983},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 912, col: 32, offset: 28951},
																			val:        "�",
																			ignoreCase: false,
																			want:       "\"�\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 914, col: 51, offset: 29011},
																			label: "ref",
																			expr: &actionExpr{
																				pos: position{line: 914, col: 56, offset: 29016},
																				run: (*parser).callonNoneGroup34,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 914, col: 56, offset: 29016},
																					expr: &charClassMatcher{
																						pos:        position{line: 914, col: 56, offset: 29016},
																						val:        "[0-9]",
																						ranges:     []rune{'0', '9'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 912, col: 32, offset: 28951},
																			val:        "�",
																			ignoreCase: false,
																			want:       "\"�\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2817, col: 12, offset: 93572},
																run: (*parser).callonNoneGroup38,
																expr: &anyMatcher{
																	line: 2817, col: 12, offset: 93572,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2874, col: 8, offset: 95112},
												expr: &anyMatcher{
													line: 2874, col: 9, offset: 95113,
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2874, col: 8, offset: 95112},
							expr: &anyMatcher{
								line: 2874, col: 9, offset: 95113,
							},
						},
					},
				},
			},
		},
		{
			name: "NormalGroup",
			pos:  position{line: 2441, col: 1, offset: 82230},
			expr: &actionExpr{
				pos: position{line: 2442, col: 5, offset: 82250},
				run: (*parser).callonNormalGroup1,
				expr: &seqExpr{
					pos: position{line: 2442, col: 5, offset: 82250},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2442, col: 5, offset: 82250},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2442, col: 14, offset: 82259},
								expr: &ruleRefExpr{
									pos:  position{line: 2442, col: 15, offset: 82260},
									name: "NormalGroupElement",
								},
							},
						},
						&notExpr{
							pos: position{line: 2874, col: 8, offset: 95112},
							expr: &anyMatcher{
								line: 2874, col: 9, offset: 95113,
							},
						},
					},
				},
			},
		},
		{
			name: "NormalGroupElement",
			pos:  position{line: 2447, col: 1, offset: 82381},
			expr: &actionExpr{
				pos: position{line: 2448, col: 5, offset: 82408},
				run: (*parser).callonNormalGroupElement1,
				expr: &seqExpr{
					pos: position{line: 2448, col: 5, offset: 82408},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2448, col: 5, offset: 82408},
							expr: &notExpr{
								pos: position{line: 2874, col: 8, offset: 95112},
								expr: &anyMatcher{
									line: 2874, col: 9, offset: 95113,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2449, col: 5, offset: 82417},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2450, col: 9, offset: 82435},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2805, col: 5, offset: 93210},
										run: (*parser).callonNormalGroupElement8,
										expr: &seqExpr{
											pos: position{line: 2805, col: 5, offset: 93210},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2805, col: 5, offset: 93210},
													expr: &charClassMatcher{
														pos:        position{line: 2805, col: 5, offset: 93210},
														val:        "[,;!?0-9\\pL]",
														chars:      []rune{',', ';', '!', '?'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2806, col: 6, offset: 93230},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2860, col: 10, offset: 94799},
															run: (*parser).callonNormalGroupElement13,
															expr: &charClassMatcher{
																pos:        position{line: 2860, col: 11, offset: 94800},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&andExpr{
															pos: position{line: 2806, col: 14, offset: 93238},
															expr: &choiceExpr{
																pos: position{line: 2806, col: 16, offset: 93240},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2806, col: 16, offset: 93240},
																		val:        "[.�]",
																		chars:      []rune{'.', '�'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 2870, col: 12, offset: 95022},
																		run: (*parser).callonNormalGroupElement18,
																		expr: &choiceExpr{
																			pos: position{line: 2870, col: 13, offset: 95023},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2870, col: 13, offset: 95023},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2870, col: 20, offset: 95030},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2870, col: 29, offset: 95039},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2874, col: 8, offset: 95112},
																		expr: &anyMatcher{
																			line: 2874, col: 9, offset: 95113,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2860, col: 10, offset: 94799},
										run: (*parser).callonNormalGroupElement25,
										expr: &charClassMatcher{
											pos:        position{line: 2860, col: 11, offset: 94800},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 2870, col: 12, offset: 95022},
										run: (*parser).callonNormalGroupElement27,
										expr: &choiceExpr{
											pos: position{line: 2870, col: 13, offset: 95023},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2870, col: 13, offset: 95023},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2870, col: 20, offset: 95030},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2870, col: 29, offset: 95039},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 914, col: 23, offset: 28983},
										run: (*parser).callonNormalGroupElement32,
										expr: &seqExpr{
											pos: position{line: 914, col: 23, offset: 28983},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 912, col: 32, offset: 28951},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 914, col: 51, offset: 29011},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 914, col: 56, offset: 29016},
														run: (*parser).callonNormalGroupElement36,
														expr: &oneOrMoreExpr{
															pos: position{line: 914, col: 56, offset: 29016},
															expr: &charClassMatcher{
																pos:        position{line: 914, col: 56, offset: 29016},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 912, col: 32, offset: 28951},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 922, col: 5, offset: 29429},
										run: (*parser).callonNormalGroupElement40,
										expr: &seqExpr{
											pos: position{line: 922, col: 5, offset: 29429},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 922, col: 5, offset: 29429},
													run: (*parser).callonNormalGroupElement42,
												},
												&litMatcher{
													pos:        position{line: 925, col: 5, offset: 29486},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 925, col: 9, offset: 29490},
													expr: &actionExpr{
														pos: position{line: 2860, col: 10, offset: 94799},
														run: (*parser).callonNormalGroupElement45,
														expr: &charClassMatcher{
															pos:        position{line: 2860, col: 11, offset: 94800},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&andExpr{
													pos: position{line: 925, col: 16, offset: 29497},
													expr: &choiceExpr{
														pos: position{line: 2877, col: 8, offset: 95162},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2870, col: 12, offset: 95022},
																run: (*parser).callonNormalGroupElement49,
																expr: &choiceExpr{
																	pos: position{line: 2870, col: 13, offset: 95023},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2870, col: 13, offset: 95023},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 20, offset: 95030},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 29, offset: 95039},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2874, col: 8, offset: 95112},
																expr: &anyMatcher{
																	line: 2874, col: 9, offset: 95113,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2811, col: 16, offset: 93361},
										run: (*parser).callonNormalGroupElement56,
										expr: &seqExpr{
											pos: position{line: 2811, col: 16, offset: 93361},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2811, col: 17, offset: 93362},
													val:        "[.,;!?]",
													chars:      []rune{'.', ',', ';', '!', '?'},
													ignoreCase: false,
													inverted:   false,
												},
												&andExpr{
													pos: position{line: 2811, col: 46, offset: 93391},
													expr: &choiceExpr{
														pos: position{line: 2811, col: 48, offset: 93393},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2860, col: 10, offset: 94799},
																run: (*parser).callonNormalGroupElement61,
																expr: &charClassMatcher{
																	pos:        position{line: 2860, col: 11, offset: 94800},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&actionExpr{
																pos: position{line: 2870, col: 12, offset: 95022},
																run: (*parser).callonNormalGroupElement63,
																expr: &choiceExpr{
																	pos: position{line: 2870, col: 13, offset: 95023},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2870, col: 13, offset: 95023},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 20, offset: 95030},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2870, col: 29, offset: 95039},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2874, col: 8, offset: 95112},
																expr: &anyMatcher{
																	line: 2874, col: 9, offset: 95113,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2456, col: 11, offset: 82650},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 2457, col: 11, offset: 82666},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2458, col: 11, offset: 82694},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2576, col: 5, offset: 86006},
										run: (*parser).callonNormalGroupElement73,
										expr: &seqExpr{
											pos: position{line: 2576, col: 5, offset: 86006},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2576, col: 5, offset: 86006},
													run: (*parser).callonNormalGroupElement75,
												},
												&labeledExpr{
													pos:   position{line: 2579, col: 5, offset: 86077},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2581, col: 9, offset: 86175},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2581, col: 9, offset: 86175},
																run: (*parser).callonNormalGroupElement78,
																expr: &choiceExpr{
																	pos: position{line: 458, col: 27, offset: 15084},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 458, col: 27, offset: 15084},
																			run: (*parser).callonNormalGroupElement80,
																			expr: &seqExpr{
																				pos: position{line: 458, col: 27, offset: 15084},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 458, col: 27, offset: 15084},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 458, col: 32, offset: 15089},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 7, offset: 94521},
																							run: (*parser).callonNormalGroupElement84,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 7, offset: 94521},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 458, col: 40, offset: 15097},
																						expr: &actionExpr{
																							pos: position{line: 2860, col: 10, offset: 94799},
																							run: (*parser).callonNormalGroupElement88,
																							expr: &charClassMatcher{
																								pos:        position{line: 2860, col: 11, offset: 94800},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 458, col: 47, offset: 15104},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 458, col: 51, offset: 15108},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 468, col: 24, offset: 15521},
																							expr: &choiceExpr{
																								pos: position{line: 469, col: 5, offset: 15527},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 469, col: 6, offset: 15528},
																										run: (*parser).callonNormalGroupElement94,
																										expr: &seqExpr{
																											pos: position{line: 469, col: 6, offset: 15528},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 469, col: 6, offset: 15528},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 469, col: 14, offset: 15536},
																													expr: &charClassMatcher{
																														pos:        position{line: 469, col: 14, offset: 15536},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 416, col: 5, offset: 13530},
																										run: (*parser).callonNormalGroupElement99,
																										expr: &seqExpr{
																											pos: position{line: 416, col: 5, offset: 13530},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 416, col: 5, offset: 13530},
																													run: (*parser).callonNormalGroupElement101,
																												},
																												&labeledExpr{
																													pos:   position{line: 419, col: 5, offset: 13594},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 419, col: 14, offset: 13603},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 430, col: 25, offset: 14065},
																																run: (*parser).callonNormalGroupElement104,
																																expr: &seqExpr{
																																	pos: position{line: 430, col: 25, offset: 14065},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 430, col: 25, offset: 14065},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 430, col: 37, offset: 14077},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonNormalGroupElement108,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 430, col: 56, offset: 14096},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 430, col: 62, offset: 14102},
																																				expr: &actionExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					run: (*parser).callonNormalGroupElement115,
																																					expr: &seqExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 438, col: 17, offset: 14365},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 438, col: 21, offset: 14369},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 438, col: 28, offset: 14376},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 438, col: 28, offset: 14376},
																																											run: (*parser).callonNormalGroupElement120,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 438, col: 28, offset: 14376},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											run: (*parser).callonNormalGroupElement122,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 440, col: 9, offset: 14430},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 430, col: 78, offset: 14118},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 434, col: 25, offset: 14220},
																																run: (*parser).callonNormalGroupElement126,
																																expr: &seqExpr{
																																	pos: position{line: 434, col: 25, offset: 14220},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 434, col: 25, offset: 14220},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 434, col: 38, offset: 14233},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonNormalGroupElement130,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 434, col: 57, offset: 14252},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 434, col: 63, offset: 14258},
																																				expr: &actionExpr{
																																					pos: position{line: 438, col: 17, offset: 14365},
																																					run: (*parser).callonNormalGroupElement137,
																																					expr: &seqExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 438, col: 17, offset: 14365},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 438, col: 21, offset: 14369},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 438, col: 28, offset: 14376},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 438, col: 28, offset: 14376},
																																											run: (*parser).callonNormalGroupElement142,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 438, col: 28, offset: 14376},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 440, col: 9, offset: 14430},
																																											run: (*parser).callonNormalGroupElement144,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 440, col: 9, offset: 14430},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 434, col: 79, offset: 14274},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 423, col: 31, offset: 13720},
																																run: (*parser).callonNormalGroupElement148,
																																expr: &seqExpr{
																																	pos: position{line: 423, col: 31, offset: 13720},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 423, col: 31, offset: 13720},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 423, col: 35, offset: 13724},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 120, col: 18, offset: 3502},
																																				run: (*parser).callonNormalGroupElement152,
																																				expr: &seqExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 120, col: 18, offset: 3502},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 120, col: 28, offset: 3512},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 120, col: 29, offset: 3513},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 423, col: 54, offset: 13743},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 473, col: 8, offset: 15760},
																										run: (*parser).callonNormalGroupElement158,
																										expr: &litMatcher{
																											pos:        position{line: 473, col: 8, offset: 15760},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 458, col: 79, offset: 15136},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 460, col: 9, offset: 15209},
																			run: (*parser).callonNormalGroupElement161,
																			expr: &seqExpr{
																				pos: position{line: 460, col: 9, offset: 15209},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 460, col: 9, offset: 15209},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 460, col: 14, offset: 15214},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 7, offset: 94521},
																							run: (*parser).callonNormalGroupElement165,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 7, offset: 94521},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 460, col: 22, offset: 15222},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2584, col: 11, offset: 86279},
																run: (*parser).callonNormalGroupElement169,
																expr: &charClassMatcher{
																	pos:        position{line: 2584, col: 12, offset: 86280},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 416, col: 5, offset: 13530},
										run: (*parser).callonNormalGroupElement171,
										expr: &seqExpr{
											pos: position{line: 416, col: 5, offset: 13530},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 416, col: 5, offset: 13530},
													run: (*parser).callonNormalGroupElement173,
												},
												&labeledExpr{
													pos:   position{line: 419, col: 5, offset: 13594},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 419, col: 14, offset: 13603},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 430, col: 25, offset: 14065},
																run: (*parser).callonNormalGroupElement176,
																expr: &seqExpr{
																	pos: position{line: 430, col: 25, offset: 14065},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 430, col: 25, offset: 14065},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 430, col: 37, offset: 14077},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonNormalGroupElement180,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 430, col: 56, offset: 14096},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 430, col: 62, offset: 14102},
																				expr: &actionExpr{
																					pos: position{line: 438, col: 17, offset: 14365},
																					run: (*parser).callonNormalGroupElement187,
																					expr: &seqExpr{
																						pos: position{line: 438, col: 17, offset: 14365},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 438, col: 17, offset: 14365},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 438, col: 21, offset: 14369},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 438, col: 28, offset: 14376},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 438, col: 28, offset: 14376},
																											run: (*parser).callonNormalGroupElement192,
																											expr: &charClassMatcher{
																												pos:        position{line: 438, col: 28, offset: 14376},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 440, col: 9, offset: 14430},
																											run: (*parser).callonNormalGroupElement194,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 440, col: 9, offset: 14430},
																												expr: &charClassMatcher{
																													pos:        position{line: 440, col: 9, offset: 14430},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 430, col: 78, offset: 14118},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 434, col: 25, offset: 14220},
																run: (*parser).callonNormalGroupElement198,
																expr: &seqExpr{
																	pos: position{line: 434, col: 25, offset: 14220},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 434, col: 25, offset: 14220},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 434, col: 38, offset: 14233},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonNormalGroupElement202,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 434, col: 57, offset: 14252},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 434, col: 63, offset: 14258},
																				expr: &actionExpr{
																					pos: position{line: 438, col: 17, offset: 14365},
																					run: (*parser).callonNormalGroupElement209,
																					expr: &seqExpr{
																						pos: position{line: 438, col: 17, offset: 14365},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 438, col: 17, offset: 14365},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 438, col: 21, offset: 14369},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 438, col: 28, offset: 14376},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 438, col: 28, offset: 14376},
																											run: (*parser).callonNormalGroupElement214,
																											expr: &charClassMatcher{
																												pos:        position{line: 438, col: 28, offset: 14376},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 440, col: 9, offset: 14430},
																											run: (*parser).callonNormalGroupElement216,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 440, col: 9, offset: 14430},
																												expr: &charClassMatcher{
																													pos:        position{line: 440, col: 9, offset: 14430},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 434, col: 79, offset: 14274},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 423, col: 31, offset: 13720},
																run: (*parser).callonNormalGroupElement220,
																expr: &seqExpr{
																	pos: position{line: 423, col: 31, offset: 13720},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 423, col: 31, offset: 13720},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 423, col: 35, offset: 13724},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 120, col: 18, offset: 3502},
																				run: (*parser).callonNormalGroupElement224,
																				expr: &seqExpr{
																					pos: position{line: 120, col: 18, offset: 3502},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 120, col: 18, offset: 3502},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 120, col: 28, offset: 3512},
																							expr: &charClassMatcher{
																								pos:        position{line: 120, col: 29, offset: 3513},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 423, col: 54, offset: 13743},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2609, col: 15, offset: 87247},
										run: (*parser).callonNormalGroupElement230,
										expr: &litMatcher{
											pos:        position{line: 2609, col: 15, offset: 87247},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2615, col: 14, offset: 87362},
										run: (*parser).callonNormalGroupElement232,
										expr: &litMatcher{
											pos:        position{line: 2615, col: 14, offset: 87362},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2619, col: 14, offset: 87438},
										run: (*parser).callonNormalGroupElement234,
										expr: &litMatcher{
											pos:        position{line: 2619, col: 14, offset: 87438},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2623, col: 15, offset: 87516},
										run: (*parser).callonNormalGroupElement236,
										expr: &litMatcher{
											pos:        position{line: 2623, col: 15, offset: 87516},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2627, col: 13, offset: 87591},
										run: (*parser).callonNormalGroupElement238,
										expr: &litMatcher{
											pos:        position{line: 2627, col: 13, offset: 87591},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2635, col: 22, offset: 87897},
										run: (*parser).callonNormalGroupElement240,
										expr: &seqExpr{
											pos: position{line: 2635, col: 22, offset: 87897},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2786, col: 13, offset: 92537},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2635, col: 31, offset: 87906},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2635, col: 35, offset: 87910},
													expr: &charClassMatcher{
														pos:        position{line: 2635, col: 36, offset: 87911},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2817, col: 12, offset: 93572},
										run: (*parser).callonNormalGroupElement246,
										expr: &anyMatcher{
											line: 2817, col: 12, offset: 93572,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PostReplacementsGroup",
			pos:  position{line: 2466, col: 1, offset: 82952},
			expr: &actionExpr{
				pos: position{line: 2467, col: 5, offset: 82983},
				run: (*parser).callonPostReplacementsGroup1,
				expr: &seqExpr{
					pos: position{line: 2467, col: 5, offset: 82983},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2467, col: 5, offset: 82983},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2467, col: 14, offset: 82992},
								expr: &actionExpr{
									pos: position{line: 2473, col: 5, offset: 83160},
									run: (*parser).callonPostReplacementsGroup5,
									expr: &seqExpr{
										pos: position{line: 2473, col: 5, offset: 83160},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2473, col: 5, offset: 83160},
												expr: &notExpr{
													pos: position{line: 2874, col: 8, offset: 95112},
													expr: &anyMatcher{
														line: 2874, col: 9, offset: 95113,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2474, col: 5, offset: 83169},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 2475, col: 9, offset: 83187},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2805, col: 5, offset: 93210},
															run: (*parser).callonPostReplacementsGroup12,
															expr: &seqExpr{
																pos: position{line: 2805, col: 5, offset: 93210},
																exprs: []interface{}{
																	&oneOrMoreExpr{
																		pos: position{line: 2805, col: 5, offset: 93210},
																		expr: &charClassMatcher{
																			pos:        position{line: 2805, col: 5, offset: 93210},
																			val:        "[,;!?0-9\\pL]",
																			chars:      []rune{',', ';', '!', '?'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2806, col: 6, offset: 93230},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2860, col: 10, offset: 94799},
																				run: (*parser).callonPostReplacementsGroup17,
																				expr: &charClassMatcher{
																					pos:        position{line: 2860, col: 11, offset: 94800},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&andExpr{
																				pos: position{line: 2806, col: 14, offset: 93238},
																				expr: &choiceExpr{
																					pos: position{line: 2806, col: 16, offset: 93240},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2806, col: 16, offset: 93240},
																							val:        "[.�]",
																							chars:      []rune{'.', '�'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 2870, col: 12, offset: 95022},
																							run: (*parser).callonPostReplacementsGroup22,
																							expr: &choiceExpr{
																								pos: position{line: 2870, col: 13, offset: 95023},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2870, col: 13, offset: 95023},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2870, col: 20, offset: 95030},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2870, col: 29, offset: 95039},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2874, col: 8, offset: 95112},
																							expr: &anyMatcher{
																								line: 2874, col: 9, offset: 95113,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2860, col: 10, offset: 94799},
															run: (*parser).callonPostReplacementsGroup29,
															expr: &charClassMatcher{
																pos:        position{line: 2860, col: 11, offset: 94800},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&actionExpr{
															pos: position{line: 922, col: 5, offset: 29429},
															run: (*parser).callonPostReplacementsGroup31,
															expr: &seqExpr{
																pos: position{line: 922, col: 5, offset: 29429},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 922, col: 5, offset: 29429},
																		run: (*parser).callonPostReplacementsGroup33,
																	},
																	&litMatcher{
																		pos:        position{line: 925, col: 5, offset: 29486},
																		val:        "+",
																		ignoreCase: false,
																		want:       "\"+\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 925, col: 9, offset: 29490},
																		expr: &actionExpr{
																			pos: position{line: 2860, col: 10, offset: 94799},
																			run: (*parser).callonPostReplacementsGroup36,
																			expr: &charClassMatcher{
																				pos:        position{line: 2860, col: 11, offset: 94800},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&andExpr{
																		pos: position{line: 925, col: 16, offset: 29497},
																		expr: &choiceExpr{
																			pos: position{line: 2877, col: 8, offset: 95162},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2870, col: 12, offset: 95022},
																					run: (*parser).callonPostReplacementsGroup40,
																					expr: &choiceExpr{
																						pos: position{line: 2870, col: 13, offset: 95023},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2870, col: 13, offset: 95023},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 20, offset: 95030},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 29, offset: 95039},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2874, col: 8, offset: 95112},
																					expr: &anyMatcher{
																						line: 2874, col: 9, offset: 95113,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2870, col: 12, offset: 95022},
															run: (*parser).callonPostReplacementsGroup47,
															expr: &choiceExpr{
																pos: position{line: 2870, col: 13, offset: 95023},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2870, col: 13, offset: 95023},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 20, offset: 95030},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2870, col: 29, offset: 95039},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 914, col: 23, offset: 28983},
															run: (*parser).callonPostReplacementsGroup52,
															expr: &seqExpr{
																pos: position{line: 914, col: 23, offset: 28983},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 912, col: 32, offset: 28951},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 914, col: 51, offset: 29011},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 914, col: 56, offset: 29016},
																			run: (*parser).callonPostReplacementsGroup56,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 914, col: 56, offset: 29016},
																				expr: &charClassMatcher{
																					pos:        position{line: 914, col: 56, offset: 29016},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 912, col: 32, offset: 28951},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2817, col: 12, offset: 93572},
															run: (*parser).callonPostReplacementsGroup60,
															expr: &anyMatcher{
																line: 2817, col: 12, offset: 93572,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2874, col: 8, offset: 95112},
							expr: &anyMatcher{
								line: 2874, col: 9, offset: 95113,
							},
						},
					},
				},
			},
		},
		{
			name: "QuotesGroup",
			pos:  position{line: 2486, col: 1, offset: 83513},
			expr: &actionExpr{
				pos: position{line: 2486, col: 16, offset: 83528},
				run: (*parser).callonQuotesGroup1,
				expr: &seqExpr{
					pos: position{line: 2486, col: 16, offset: 83528},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2486, col: 16, offset: 83528},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2486, col: 25, offset: 83537},
								expr: &choiceExpr{
									pos: position{line: 2487, col: 5, offset: 83543},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2805, col: 5, offset: 93210},
											run: (*parser).callonQuotesGroup6,
											expr: &seqExpr{
												pos: position{line: 2805, col: 5, offset: 93210},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2805, col: 5, offset: 93210},
														expr: &charClassMatcher{
															pos:        position{line: 2805, col: 5, offset: 93210},
															val:        "[,;!?0-9\\pL]",
															chars:      []rune{',', ';', '!', '?'},
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2806, col: 6, offset: 93230},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2860, col: 10, offset: 94799},
																run: (*parser).callonQuotesGroup11,
																expr: &charClassMatcher{
																	pos:        position{line: 2860, col: 11, offset: 94800},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&andExpr{
																pos: position{line: 2806, col: 14, offset: 93238},
																expr: &choiceExpr{
																	pos: position{line: 2806, col: 16, offset: 93240},
																	alternatives: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2806, col: 16, offset: 93240},
																			val:        "[.�]",
																			chars:      []rune{'.', '�'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonQuotesGroup16,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2488, col: 7, offset: 83560},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 914, col: 23, offset: 28983},
											run: (*parser).callonQuotesGroup24,
											expr: &seqExpr{
												pos: position{line: 914, col: 23, offset: 28983},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 912, col: 32, offset: 28951},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 914, col: 51, offset: 29011},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 914, col: 56, offset: 29016},
															run: (*parser).callonQuotesGroup28,
															expr: &oneOrMoreExpr{
																pos: position{line: 914, col: 56, offset: 29016},
																expr: &charClassMatcher{
																	pos:        position{line: 914, col: 56, offset: 29016},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 912, col: 32, offset: 28951},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2817, col: 12, offset: 93572},
											run: (*parser).callonQuotesGroup32,
											expr: &anyMatcher{
												line: 2817, col: 12, offset: 93572,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2874, col: 8, offset: 95112},
							expr: &anyMatcher{
								line: 2874, col: 9, offset: 95113,
							},
						},
					},
				},
			},
		},
		{
			name: "ReplacementsGroup",
			pos:  position{line: 2495, col: 1, offset: 83804},
			expr: &actionExpr{
				pos: position{line: 2495, col: 22, offset: 83825},
				run: (*parser).callonReplacementsGroup1,
				expr: &seqExpr{
					pos: position{line: 2495, col: 22, offset: 83825},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2495, col: 22, offset: 83825},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2495, col: 31, offset: 83834},
								expr: &choiceExpr{
									pos: position{line: 2496, col: 5, offset: 83840},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2805, col: 5, offset: 93210},
											run: (*parser).callonReplacementsGroup6,
											expr: &seqExpr{
												pos: position{line: 2805, col: 5, offset: 93210},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2805, col: 5, offset: 93210},
														expr: &charClassMatcher{
															pos:        position{line: 2805, col: 5, offset: 93210},
															val:        "[,;!?0-9\\pL]",
															chars:      []rune{',', ';', '!', '?'},
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2806, col: 6, offset: 93230},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2860, col: 10, offset: 94799},
																run: (*parser).callonReplacementsGroup11,
																expr: &charClassMatcher{
																	pos:        position{line: 2860, col: 11, offset: 94800},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&andExpr{
																pos: position{line: 2806, col: 14, offset: 93238},
																expr: &choiceExpr{
																	pos: position{line: 2806, col: 16, offset: 93240},
																	alternatives: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2806, col: 16, offset: 93240},
																			val:        "[.�]",
																			chars:      []rune{'.', '�'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonReplacementsGroup16,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2565, col: 5, offset: 85785},
											run: (*parser).callonReplacementsGroup23,
											expr: &seqExpr{
												pos: position{line: 2565, col: 5, offset: 85785},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 2565, col: 5, offset: 85785},
														run: (*parser).callonReplacementsGroup25,
													},
													&labeledExpr{
														pos:   position{line: 2568, col: 5, offset: 85851},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 2607, col: 11, offset: 87153},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2609, col: 15, offset: 87247},
																	run: (*parser).callonReplacementsGroup28,
																	expr: &litMatcher{
																		pos:        position{line: 2609, col: 15, offset: 87247},
																		val:        "`'",
																		ignoreCase: false,
																		want:       "\"`'\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2615, col: 14, offset: 87362},
																	run: (*parser).callonReplacementsGroup30,
																	expr: &litMatcher{
																		pos:        position{line: 2615, col: 14, offset: 87362},
																		val:        "(C)",
																		ignoreCase: false,
																		want:       "\"(C)\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2619, col: 14, offset: 87438},
																	run: (*parser).callonReplacementsGroup32,
																	expr: &litMatcher{
																		pos:        position{line: 2619, col: 14, offset: 87438},
																		val:        "(TM)",
																		ignoreCase: false,
																		want:       "\"(TM)\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2623, col: 15, offset: 87516},
																	run: (*parser).callonReplacementsGroup34,
																	expr: &litMatcher{
																		pos:        position{line: 2623, col: 15, offset: 87516},
																		val:        "(R)",
																		ignoreCase: false,
																		want:       "\"(R)\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2627, col: 13, offset: 87591},
																	run: (*parser).callonReplacementsGroup36,
																	expr: &litMatcher{
																		pos:        position{line: 2627, col: 13, offset: 87591},
																		val:        "...",
																		ignoreCase: false,
																		want:       "\"...\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2635, col: 22, offset: 87897},
																	run: (*parser).callonReplacementsGroup38,
																	expr: &seqExpr{
																		pos: position{line: 2635, col: 22, offset: 87897},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2786, col: 13, offset: 92537},
																				val:        "[0-9\\pL]",
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&litMatcher{
																				pos:        position{line: 2635, col: 31, offset: 87906},
																				val:        "'",
																				ignoreCase: false,
																				want:       "\"'\"",
																			},
																			&andExpr{
																				pos: position{line: 2635, col: 35, offset: 87910},
																				expr: &charClassMatcher{
																					pos:        position{line: 2635, col: 36, offset: 87911},
																					val:        "[\\pL]",
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 914, col: 23, offset: 28983},
											run: (*parser).callonReplacementsGroup44,
											expr: &seqExpr{
												pos: position{line: 914, col: 23, offset: 28983},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 912, col: 32, offset: 28951},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 914, col: 51, offset: 29011},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 914, col: 56, offset: 29016},
															run: (*parser).callonReplacementsGroup48,
															expr: &oneOrMoreExpr{
																pos: position{line: 914, col: 56, offset: 29016},
																expr: &charClassMatcher{
																	pos:        position{line: 914, col: 56, offset: 29016},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 912, col: 32, offset: 28951},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2817, col: 12, offset: 93572},
											run: (*parser).callonReplacementsGroup52,
											expr: &anyMatcher{
												line: 2817, col: 12, offset: 93572,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2874, col: 8, offset: 95112},
							expr: &anyMatcher{
								line: 2874, col: 9, offset: 95113,
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharactersGroup",
			pos:  position{line: 2504, col: 1, offset: 84132},
			expr: &actionExpr{
				pos: position{line: 2504, col: 27, offset: 84158},
				run: (*parser).callonSpecialCharactersGroup1,
				expr: &seqExpr{
					pos: position{line: 2504, col: 27, offset: 84158},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2504, col: 27, offset: 84158},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2504, col: 36, offset: 84167},
								expr: &choiceExpr{
									pos: position{line: 2505, col: 5, offset: 84173},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2805, col: 5, offset: 93210},
											run: (*parser).callonSpecialCharactersGroup6,
											expr: &seqExpr{
												pos: position{line: 2805, col: 5, offset: 93210},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2805, col: 5, offset: 93210},
														expr: &charClassMatcher{
															pos:        position{line: 2805, col: 5, offset: 93210},
															val:        "[,;!?0-9\\pL]",
															chars:      []rune{',', ';', '!', '?'},
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2806, col: 6, offset: 93230},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2860, col: 10, offset: 94799},
																run: (*parser).callonSpecialCharactersGroup11,
																expr: &charClassMatcher{
																	pos:        position{line: 2860, col: 11, offset: 94800},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&andExpr{
																pos: position{line: 2806, col: 14, offset: 93238},
																expr: &choiceExpr{
																	pos: position{line: 2806, col: 16, offset: 93240},
																	alternatives: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2806, col: 16, offset: 93240},
																			val:        "[.�]",
																			chars:      []rune{'.', '�'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonSpecialCharactersGroup16,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2576, col: 5, offset: 86006},
											run: (*parser).callonSpecialCharactersGroup23,
											expr: &seqExpr{
												pos: position{line: 2576, col: 5, offset: 86006},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 2576, col: 5, offset: 86006},
														run: (*parser).callonSpecialCharactersGroup25,
													},
													&labeledExpr{
														pos:   position{line: 2579, col: 5, offset: 86077},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 2581, col: 9, offset: 86175},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2581, col: 9, offset: 86175},
																	run: (*parser).callonSpecialCharactersGroup28,
																	expr: &choiceExpr{
																		pos: position{line: 458, col: 27, offset: 15084},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 458, col: 27, offset: 15084},
																				run: (*parser).callonSpecialCharactersGroup30,
																				expr: &seqExpr{
																					pos: position{line: 458, col: 27, offset: 15084},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 458, col: 27, offset: 15084},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 458, col: 32, offset: 15089},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								run: (*parser).callonSpecialCharactersGroup34,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2848, col: 7, offset: 94521},
																									expr: &charClassMatcher{
																										pos:        position{line: 2848, col: 7, offset: 94521},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 458, col: 40, offset: 15097},
																							expr: &actionExpr{
																								pos: position{line: 2860, col: 10, offset: 94799},
																								run: (*parser).callonSpecialCharactersGroup38,
																								expr: &charClassMatcher{
																									pos:        position{line: 2860, col: 11, offset: 94800},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 458, col: 47, offset: 15104},
																							val:        ",",
																							ignoreCase: false,
																							want:       "\",\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 458, col: 51, offset: 15108},
																							label: "label",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 468, col: 24, offset: 15521},
																								expr: &choiceExpr{
																									pos: position{line: 469, col: 5, offset: 15527},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 469, col: 6, offset: 15528},
																											run: (*parser).callonSpecialCharactersGroup44,
																											expr: &seqExpr{
																												pos: position{line: 469, col: 6, offset: 15528},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 469, col: 6, offset: 15528},
																														val:        "[0-9\\pL]",
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 469, col: 14, offset: 15536},
																														expr: &charClassMatcher{
																															pos:        position{line: 469, col: 14, offset: 15536},
																															val:        "[^\\r\\n{<>]",
																															chars:      []rune{'\r', '\n', '{', '<', '>'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 416, col: 5, offset: 13530},
																											run: (*parser).callonSpecialCharactersGroup49,
																											expr: &seqExpr{
																												pos: position{line: 416, col: 5, offset: 13530},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 416, col: 5, offset: 13530},
																														run: (*parser).callonSpecialCharactersGroup51,
																													},
																													&labeledExpr{
																														pos:   position{line: 419, col: 5, offset: 13594},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 419, col: 14, offset: 13603},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 430, col: 25, offset: 14065},
																																	run: (*parser).callonSpecialCharactersGroup54,
																																	expr: &seqExpr{
																																		pos: position{line: 430, col: 25, offset: 14065},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 430, col: 25, offset: 14065},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 430, col: 37, offset: 14077},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					run: (*parser).callonSpecialCharactersGroup58,
																																					expr: &seqExpr{
																																						pos: position{line: 120, col: 18, offset: 3502},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 120, col: 18, offset: 3502},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 120, col: 28, offset: 3512},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 120, col: 29, offset: 3513},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 430, col: 56, offset: 14096},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 430, col: 62, offset: 14102},
																																					expr: &actionExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						run: (*parser).callonSpecialCharactersGroup65,
																																						expr: &seqExpr{
																																							pos: position{line: 438, col: 17, offset: 14365},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 438, col: 17, offset: 14365},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 438, col: 21, offset: 14369},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 438, col: 28, offset: 14376},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 438, col: 28, offset: 14376},
																																												run: (*parser).callonSpecialCharactersGroup70,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 438, col: 28, offset: 14376},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												run: (*parser).callonSpecialCharactersGroup72,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 440, col: 9, offset: 14430},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 440, col: 9, offset: 14430},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 430, col: 78, offset: 14118},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 434, col: 25, offset: 14220},
																																	run: (*parser).callonSpecialCharactersGroup76,
																																	expr: &seqExpr{
																																		pos: position{line: 434, col: 25, offset: 14220},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 434, col: 25, offset: 14220},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 434, col: 38, offset: 14233},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					run: (*parser).callonSpecialCharactersGroup80,
																																					expr: &seqExpr{
																																						pos: position{line: 120, col: 18, offset: 3502},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 120, col: 18, offset: 3502},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 120, col: 28, offset: 3512},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 120, col: 29, offset: 3513},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 434, col: 57, offset: 14252},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 434, col: 63, offset: 14258},
																																					expr: &actionExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						run: (*parser).callonSpecialCharactersGroup87,
																																						expr: &seqExpr{
																																							pos: position{line: 438, col: 17, offset: 14365},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 438, col: 17, offset: 14365},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 438, col: 21, offset: 14369},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 438, col: 28, offset: 14376},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 438, col: 28, offset: 14376},
																																												run: (*parser).callonSpecialCharactersGroup92,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 438, col: 28, offset: 14376},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												run: (*parser).callonSpecialCharactersGroup94,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 440, col: 9, offset: 14430},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 440, col: 9, offset: 14430},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 434, col: 79, offset: 14274},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 423, col: 31, offset: 13720},
																																	run: (*parser).callonSpecialCharactersGroup98,
																																	expr: &seqExpr{
																																		pos: position{line: 423, col: 31, offset: 13720},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 423, col: 31, offset: 13720},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 423, col: 35, offset: 13724},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					run: (*parser).callonSpecialCharactersGroup102,
																																					expr: &seqExpr{
																																						pos: position{line: 120, col: 18, offset: 3502},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 120, col: 18, offset: 3502},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 120, col: 28, offset: 3512},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 120, col: 29, offset: 3513},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 423, col: 54, offset: 13743},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 473, col: 8, offset: 15760},
																											run: (*parser).callonSpecialCharactersGroup108,
																											expr: &litMatcher{
																												pos:        position{line: 473, col: 8, offset: 15760},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 458, col: 79, offset: 15136},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 460, col: 9, offset: 15209},
																				run: (*parser).callonSpecialCharactersGroup111,
																				expr: &seqExpr{
																					pos: position{line: 460, col: 9, offset: 15209},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 460, col: 9, offset: 15209},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 460, col: 14, offset: 15214},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								run: (*parser).callonSpecialCharactersGroup115,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2848, col: 7, offset: 94521},
																									expr: &charClassMatcher{
																										pos:        position{line: 2848, col: 7, offset: 94521},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 460, col: 22, offset: 15222},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2584, col: 11, offset: 86279},
																	run: (*parser).callonSpecialCharactersGroup119,
																	expr: &charClassMatcher{
																		pos:        position{line: 2584, col: 12, offset: 86280},
																		val:        "[<>&]",
																		chars:      []rune{'<', '>', '&'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 914, col: 23, offset: 28983},
											run: (*parser).callonSpecialCharactersGroup121,
											expr: &seqExpr{
												pos: position{line: 914, col: 23, offset: 28983},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 912, col: 32, offset: 28951},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 914, col: 51, offset: 29011},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 914, col: 56, offset: 29016},
															run: (*parser).callonSpecialCharactersGroup125,
															expr: &oneOrMoreExpr{
																pos: position{line: 914, col: 56, offset: 29016},
																expr: &charClassMatcher{
																	pos:        position{line: 914, col: 56, offset: 29016},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 912, col: 32, offset: 28951},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2817, col: 12, offset: 93572},
											run: (*parser).callonSpecialCharactersGroup129,
											expr: &anyMatcher{
												line: 2817, col: 12, offset: 93572,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2874, col: 8, offset: 95112},
							expr: &anyMatcher{
								line: 2874, col: 9, offset: 95113,
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimGroup",
			pos:  position{line: 2512, col: 1, offset: 84399},
			expr: &actionExpr{
				pos: position{line: 2512, col: 18, offset: 84416},
				run: (*parser).callonVerbatimGroup1,
				expr: &seqExpr{
					pos: position{line: 2512, col: 18, offset: 84416},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2512, col: 18, offset: 84416},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2512, col: 27, offset: 84425},
								expr: &choiceExpr{
									pos: position{line: 2513, col: 5, offset: 84431},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2805, col: 5, offset: 93210},
											run: (*parser).callonVerbatimGroup6,
											expr: &seqExpr{
												pos: position{line: 2805, col: 5, offset: 93210},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2805, col: 5, offset: 93210},
														expr: &charClassMatcher{
															pos:        position{line: 2805, col: 5, offset: 93210},
															val:        "[,;!?0-9\\pL]",
															chars:      []rune{',', ';', '!', '?'},
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2806, col: 6, offset: 93230},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2860, col: 10, offset: 94799},
																run: (*parser).callonVerbatimGroup11,
																expr: &charClassMatcher{
																	pos:        position{line: 2860, col: 11, offset: 94800},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&andExpr{
																pos: position{line: 2806, col: 14, offset: 93238},
																expr: &choiceExpr{
																	pos: position{line: 2806, col: 16, offset: 93240},
																	alternatives: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2806, col: 16, offset: 93240},
																			val:        "[.�]",
																			chars:      []rune{'.', '�'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&actionExpr{
																			pos: position{line: 2870, col: 12, offset: 95022},
																			run: (*parser).callonVerbatimGroup16,
																			expr: &choiceExpr{
																				pos: position{line: 2870, col: 13, offset: 95023},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2870, col: 13, offset: 95023},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 20, offset: 95030},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2870, col: 29, offset: 95039},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2874, col: 8, offset: 95112},
																			expr: &anyMatcher{
																				line: 2874, col: 9, offset: 95113,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2514, col: 7, offset: 84448},
											name: "Callout",
										},
										&actionExpr{
											pos: position{line: 2576, col: 5, offset: 86006},
											run: (*parser).callonVerbatimGroup24,
											expr: &seqExpr{
												pos: position{line: 2576, col: 5, offset: 86006},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 2576, col: 5, offset: 86006},
														run: (*parser).callonVerbatimGroup26,
													},
													&labeledExpr{
														pos:   position{line: 2579, col: 5, offset: 86077},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 2581, col: 9, offset: 86175},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2581, col: 9, offset: 86175},
																	run: (*parser).callonVerbatimGroup29,
																	expr: &choiceExpr{
																		pos: position{line: 458, col: 27, offset: 15084},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 458, col: 27, offset: 15084},
																				run: (*parser).callonVerbatimGroup31,
																				expr: &seqExpr{
																					pos: position{line: 458, col: 27, offset: 15084},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 458, col: 27, offset: 15084},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 458, col: 32, offset: 15089},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								run: (*parser).callonVerbatimGroup35,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2848, col: 7, offset: 94521},
																									expr: &charClassMatcher{
																										pos:        position{line: 2848, col: 7, offset: 94521},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 458, col: 40, offset: 15097},
																							expr: &actionExpr{
																								pos: position{line: 2860, col: 10, offset: 94799},
																								run: (*parser).callonVerbatimGroup39,
																								expr: &charClassMatcher{
																									pos:        position{line: 2860, col: 11, offset: 94800},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 458, col: 47, offset: 15104},
																							val:        ",",
																							ignoreCase: false,
																							want:       "\",\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 458, col: 51, offset: 15108},
																							label: "label",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 468, col: 24, offset: 15521},
																								expr: &choiceExpr{
																									pos: position{line: 469, col: 5, offset: 15527},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 469, col: 6, offset: 15528},
																											run: (*parser).callonVerbatimGroup45,
																											expr: &seqExpr{
																												pos: position{line: 469, col: 6, offset: 15528},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 469, col: 6, offset: 15528},
																														val:        "[0-9\\pL]",
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 469, col: 14, offset: 15536},
																														expr: &charClassMatcher{
																															pos:        position{line: 469, col: 14, offset: 15536},
																															val:        "[^\\r\\n{<>]",
																															chars:      []rune{'\r', '\n', '{', '<', '>'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 416, col: 5, offset: 13530},
																											run: (*parser).callonVerbatimGroup50,
																											expr: &seqExpr{
																												pos: position{line: 416, col: 5, offset: 13530},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 416, col: 5, offset: 13530},
																														run: (*parser).callonVerbatimGroup52,
																													},
																													&labeledExpr{
																														pos:   position{line: 419, col: 5, offset: 13594},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 419, col: 14, offset: 13603},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 430, col: 25, offset: 14065},
																																	run: (*parser).callonVerbatimGroup55,
																																	expr: &seqExpr{
																																		pos: position{line: 430, col: 25, offset: 14065},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 430, col: 25, offset: 14065},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 430, col: 37, offset: 14077},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					run: (*parser).callonVerbatimGroup59,
																																					expr: &seqExpr{
																																						pos: position{line: 120, col: 18, offset: 3502},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 120, col: 18, offset: 3502},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 120, col: 28, offset: 3512},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 120, col: 29, offset: 3513},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 430, col: 56, offset: 14096},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 430, col: 62, offset: 14102},
																																					expr: &actionExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						run: (*parser).callonVerbatimGroup66,
																																						expr: &seqExpr{
																																							pos: position{line: 438, col: 17, offset: 14365},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 438, col: 17, offset: 14365},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 438, col: 21, offset: 14369},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 438, col: 28, offset: 14376},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 438, col: 28, offset: 14376},
																																												run: (*parser).callonVerbatimGroup71,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 438, col: 28, offset: 14376},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												run: (*parser).callonVerbatimGroup73,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 440, col: 9, offset: 14430},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 440, col: 9, offset: 14430},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 430, col: 78, offset: 14118},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 434, col: 25, offset: 14220},
																																	run: (*parser).callonVerbatimGroup77,
																																	expr: &seqExpr{
																																		pos: position{line: 434, col: 25, offset: 14220},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 434, col: 25, offset: 14220},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 434, col: 38, offset: 14233},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					run: (*parser).callonVerbatimGroup81,
																																					expr: &seqExpr{
																																						pos: position{line: 120, col: 18, offset: 3502},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 120, col: 18, offset: 3502},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 120, col: 28, offset: 3512},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 120, col: 29, offset: 3513},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 434, col: 57, offset: 14252},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 434, col: 63, offset: 14258},
																																					expr: &actionExpr{
																																						pos: position{line: 438, col: 17, offset: 14365},
																																						run: (*parser).callonVerbatimGroup88,
																																						expr: &seqExpr{
																																							pos: position{line: 438, col: 17, offset: 14365},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 438, col: 17, offset: 14365},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 438, col: 21, offset: 14369},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 438, col: 28, offset: 14376},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 438, col: 28, offset: 14376},
																																												run: (*parser).callonVerbatimGroup93,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 438, col: 28, offset: 14376},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 440, col: 9, offset: 14430},
																																												run: (*parser).callonVerbatimGroup95,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 440, col: 9, offset: 14430},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 440, col: 9, offset: 14430},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 434, col: 79, offset: 14274},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 423, col: 31, offset: 13720},
																																	run: (*parser).callonVerbatimGroup99,
																																	expr: &seqExpr{
																																		pos: position{line: 423, col: 31, offset: 13720},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 423, col: 31, offset: 13720},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 423, col: 35, offset: 13724},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 120, col: 18, offset: 3502},
																																					run: (*parser).callonVerbatimGroup103,
																																					expr: &seqExpr{
																																						pos: position{line: 120, col: 18, offset: 3502},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 120, col: 18, offset: 3502},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 120, col: 28, offset: 3512},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 120, col: 29, offset: 3513},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 423, col: 54, offset: 13743},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 473, col: 8, offset: 15760},
																											run: (*parser).callonVerbatimGroup109,
																											expr: &litMatcher{
																												pos:        position{line: 473, col: 8, offset: 15760},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 458, col: 79, offset: 15136},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 460, col: 9, offset: 15209},
																				run: (*parser).callonVerbatimGroup112,
																				expr: &seqExpr{
																					pos: position{line: 460, col: 9, offset: 15209},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 460, col: 9, offset: 15209},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 460, col: 14, offset: 15214},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2848, col: 7, offset: 94521},
																								run: (*parser).callonVerbatimGroup116,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2848, col: 7, offset: 94521},
																									expr: &charClassMatcher{
																										pos:        position{line: 2848, col: 7, offset: 94521},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 460, col: 22, offset: 15222},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2584, col: 11, offset: 86279},
																	run: (*parser).callonVerbatimGroup120,
																	expr: &charClassMatcher{
																		pos:        position{line: 2584, col: 12, offset: 86280},
																		val:        "[<>&]",
																		chars:      []rune{'<', '>', '&'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 914, col: 23, offset: 28983},
											run: (*parser).callonVerbatimGroup122,
											expr: &seqExpr{
												pos: position{line: 914, col: 23, offset: 28983},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 912, col: 32, offset: 28951},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 914, col: 51, offset: 29011},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 914, col: 56, offset: 29016},
															run: (*parser).callonVerbatimGroup126,
															expr: &oneOrMoreExpr{
																pos: position{line: 914, col: 56, offset: 29016},
																expr: &charClassMatcher{
																	pos:        position{line: 914, col: 56, offset: 29016},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 912, col: 32, offset: 28951},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2817, col: 12, offset: 93572},
											run: (*parser).callonVerbatimGroup130,
											expr: &anyMatcher{
												line: 2817, col: 12, offset: 93572,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2874, col: 8, offset: 95112},
							expr: &anyMatcher{
								line: 2874, col: 9, offset: 95113,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMacro",
			pos:  position{line: 2521, col: 1, offset: 84717},
			expr: &actionExpr{
				pos: position{line: 2523, col: 5, offset: 84799},
				run: (*parser).callonInlineMacro1,
				expr: &seqExpr{
					pos: position{line: 2523, col: 5, offset: 84799},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2523, col: 5, offset: 84799},
							run: (*parser).callonInlineMacro3,
						},
						&labeledExpr{
							pos:   position{line: 2526, col: 5, offset: 84859},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2527, col: 9, offset: 84877},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2527, col: 9, offset: 84877},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 2528, col: 11, offset: 84898},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 2529, col: 11, offset: 84921},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 2530, col: 11, offset: 84937},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2531, col: 11, offset: 84966},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 2532, col: 11, offset: 84992},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 2533, col: 11, offset: 85018},
										name: "InlineUserMacro",
									},
									&actionExpr{
										pos: position{line: 1097, col: 20, offset: 34925},
										run: (*parser).callonInlineMacro13,
										expr: &seqExpr{
											pos: position{line: 1097, col: 20, offset: 34925},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1097, col: 20, offset: 34925},
													val:        "[[",
													ignoreCase: false,
													want:       "\"[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1097, col: 25, offset: 34930},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 2848, col: 7, offset: 94521},
														run: (*parser).callonInlineMacro17,
														expr: &oneOrMoreExpr{
															pos: position{line: 2848, col: 7, offset: 94521},
															expr: &charClassMatcher{
																pos:        position{line: 2848, col: 7, offset: 94521},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1097, col: 33, offset: 34938},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1097, col: 38, offset: 34943},
													expr: &actionExpr{
														pos: position{line: 2860, col: 10, offset: 94799},
														run: (*parser).callonInlineMacro22,
														expr: &charClassMatcher{
															pos:        position{line: 2860, col: 11, offset: 94800},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1114, col: 23, offset: 35634},
										run: (*parser).callonInlineMacro24,
										expr: &seqExpr{
											pos: position{line: 1114, col: 23, offset: 35634},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1114, col: 23, offset: 35634},
													val:        "(((",
													ignoreCase: false,
													want:       "\"(((\"",
												},
												&labeledExpr{
													pos:   position{line: 1114, col: 29, offset: 35640},
													label: "term1",
													expr: &actionExpr{
														pos: position{line: 1121, col: 30, offset: 35971},
														run: (*parser).callonInlineMacro28,
														expr: &oneOrMoreExpr{
															pos: position{line: 1121, col: 30, offset: 35971},
															expr: &choiceExpr{
																pos: position{line: 1121, col: 31, offset: 35972},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2786, col: 13, offset: 92537},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 2860, col: 10, offset: 94799},
																		run: (*parser).callonInlineMacro32,
																		expr: &charClassMatcher{
																			pos:        position{line: 2860, col: 11, offset: 94800},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1115, col: 5, offset: 35679},
													label: "term2",
													expr: &zeroOrOneExpr{
														pos: position{line: 1115, col: 11, offset: 35685},
														expr: &actionExpr{
															pos: position{line: 1115, col: 12, offset: 35686},
															run: (*parser).callonInlineMacro36,
															expr: &seqExpr{
																pos: position{line: 1115, col: 12, offset: 35686},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 1115, col: 12, offset: 35686},
																		expr: &actionExpr{
																			pos: position{line: 2860, col: 10, offset: 94799},
																			run: (*parser).callonInlineMacro39,
																			expr: &charClassMatcher{
																				pos:        position{line: 2860, col: 11, offset: 94800},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1115, col: 19, offset: 35693},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1115, col: 23, offset: 35697},
																		expr: &actionExpr{
																			pos: position{line: 2860, col: 10, offset: 94799},
																			run: (*parser).callonInlineMacro43,
																			expr: &charClassMatcher{
																				pos:        position{line: 2860, col: 11, offset: 94800},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1115, col: 30, offset: 35704},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1121, col: 30, offset: 35971},
																			run: (*parser).callonInlineMacro46,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1121, col: 30, offset: 35971},
																				expr: &choiceExpr{
																					pos: position{line: 1121, col: 31, offset: 35972},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2786, col: 13, offset: 92537},
																							val:        "[0-9\\pL]",
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 2860, col: 10, offset: 94799},
																							run: (*parser).callonInlineMacro50,
																							expr: &charClassMatcher{
																								pos:        position{line: 2860, col: 11, offset: 94800},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1116, col: 5, offset: 35771},
													label: "term3",
													expr: &zeroOrOneExpr{
														pos: position{line: 1116, col: 11, offset: 35777},
														expr: &actionExpr{
															pos: position{line: 1116, col: 12, offset: 35778},
															run: (*parser).callonInlineMacro54,
															expr: &seqExpr{
																pos: position{line: 1116, col: 12, offset: 35778},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 1116, col: 12, offset: 35778},
																		expr: &actionExpr{
																			pos: position{line: 2860, col: 10, offset: 94799},
																			run: (*parser).callonInlineMacro57,
																			expr: &charClassMatcher{
																				pos:        position{line: 2860, col: 11, offset: 94800},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1116, col: 19, offset: 35785},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1116, col: 23, offset: 35789},
																		expr: &actionExpr{
																			pos: position{line: 2860, col: 10, offset: 94799},
																			run: (*parser).callonInlineMacro61,
																			expr: &charClassMatcher{
																				pos:        position{line: 2860, col: 11, offset: 94800},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1116, col: 30, offset: 35796},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1121, col: 30, offset: 35971},
																			run: (*parser).callonInlineMacro64,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1121, col: 30, offset: 35971},
																				expr: &choiceExpr{
																					pos: position{line: 1121, col: 31, offset: 35972},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2786, col: 13, offset: 92537},
																							val:        "[0-9\\pL]",
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 2860, col: 10, offset: 94799},
																							run: (*parser).callonInlineMacro68,
																							expr: &charClassMatcher{
																								pos:        position{line: 2860, col: 11, offset: 94800},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1117, col: 5, offset: 35863},
													val:        ")))",
													ignoreCase: false,
													want:       "\")))\"",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2536, col: 11, offset: 85100},
										name: "IndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 2537, col: 11, offset: 85120},
										name: "InlineUserMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 2541, col: 1, offset: 85182},
			expr: &actionExpr{
				pos: position{line: 2543, col: 5, offset: 85270},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 2543, col: 5, offset: 85270},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2543, col: 5, offset: 85270},
							run: (*parser).callonInlinePassthrough3,
						},
						&labeledExpr{
							pos:   position{line: 2546, col: 5, offset: 85342},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2547, col: 9, offset: 85360},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1183, col: 26, offset: 39153},
										run: (*parser).callonInlinePassthrough6,
										expr: &seqExpr{
											pos: position{line: 1183, col: 26, offset: 39153},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1181, col: 32, offset: 39121},
													val:        "+++",
													ignoreCase: false,
													want:       "\"+++\"",
												},
												&labeledExpr{
													pos:   position{line: 1183, col: 54, offset: 39181},
													label: "content",
													expr: &choiceExpr{
														pos: position{line: 1187, col: 33, offset: 39394},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1187, col: 34, offset: 39395},
																run: (*parser).callonInlinePassthrough11,
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1187, col: 34, offset: 39395},
																	expr: &seqExpr{
																		pos: position{line: 1187, col: 35, offset: 39396},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1187, col: 35, offset: 39396},
																				expr: &litMatcher{
																					pos:        position{line: 1181, col: 32, offset: 39121},
																					val:        "+++",
																					ignoreCase: false,
																					want:       "\"+++\"",
																				},
																			},
																			&anyMatcher{
																				line: 1187, col: 64, offset: 39425,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1189, col: 11, offset: 39598},
																run: (*parser).callonInlinePassthrough17,
																expr: &zeroOrOneExpr{
																	pos: position{line: 1189, col: 11, offset: 39598},
																	expr: &seqExpr{
																		pos: position{line: 1189, col: 12, offset: 39599},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1189, col: 12, offset: 39599},
																				expr: &actionExpr{
																					pos: position{line: 2860, col: 10, offset: 94799},
																					run: (*parser).callonInlinePassthrough21,
																					expr: &charClassMatcher{
																						pos:        position{line: 2860, col: 11, offset: 94800},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 1189, col: 19, offset: 39606},
																				expr: &actionExpr{
																					pos: position{line: 2870, col: 12, offset: 95022},
																					run: (*parser).callonInlinePassthrough24,
																					expr: &choiceExpr{
																						pos: position{line: 2870, col: 13, offset: 95023},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2870, col: 13, offset: 95023},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 20, offset: 95030},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2870, col: 29, offset: 95039},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 1189, col: 28, offset: 39615},
																				expr: &litMatcher{
																					pos:        position{line: 1181, col: 32, offset: 39121},
																					val:        "+++",
																					ignoreCase: false,
																					want:       "\"+++\"",
																				},
																			},
																			&anyMatcher{
																				line: 1189, col: 57, offset: 39644,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1181, col: 32, offset: 39121},
													val:        "+++",
													ignoreCase: false,
													want:       "\"+++\"",
												},
												&notExpr{
													pos: position{line: 1183, col: 121, offset: 39248},
													expr: &charClassMatcher{
														pos:        position{line: 2786, col: 13, offset: 92537},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1171, col: 26, offset: 38436},
										run: (*parser).callonInlinePassthrough35,
										expr: &seqExpr{
											pos: position{line: 1171, col: 26, offset: 38436},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1169, col: 32, offset: 38406},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&labeledExpr{
													pos:   position{line: 1171, col: 54, offset: 38464},
													label: "content",
													expr: &choiceExpr{
														pos: position{line: 1175, col: 33, offset: 38677},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1175, col: 34, offset: 38678},
																run: (*parser).callonInlinePassthrough40,
																expr: &seqExpr{
																	pos: position{line: 1175, col: 34, offset: 38678},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1175, col: 35, offset: 38679},
																			expr: &litMatcher{
																				pos:        position{line: 1169, col: 32, offset: 38406},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																		},
																		&notExpr{
																			pos: position{line: 1175, col: 64, offset: 38708},
																			expr: &actionExpr{
																				pos: position{line: 2860, col: 10, offset: 94799},
																				run: (*parser).callonInlinePassthrough45,
																				expr: &charClassMatcher{
																					pos:        position{line: 2860, col: 11, offset: 94800},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1175, col: 71, offset: 38715},
																			expr: &actionExpr{
																				pos: position{line: 2870, col: 12, offset: 95022},
																				run: (*parser).callonInlinePassthrough48,
																				expr: &choiceExpr{
																					pos: position{line: 2870, col: 13, offset: 95023},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2870, col: 13, offset: 95023},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2870, col: 20, offset: 95030},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2870, col: 29, offset: 95039},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																		&anyMatcher{
																			line: 1175, col: 80, offset: 38724,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1175, col: 83, offset: 38727},
																			expr: &seqExpr{
																				pos: position{line: 1175, col: 84, offset: 38728},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1175, col: 84, offset: 38728},
																						expr: &seqExpr{
																							pos: position{line: 1175, col: 86, offset: 38730},
																							exprs: []interface{}{
																								&actionExpr{
																									pos: position{line: 2865, col: 11, offset: 94908},
																									run: (*parser).callonInlinePassthrough58,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2865, col: 11, offset: 94908},
																										expr: &charClassMatcher{
																											pos:        position{line: 2865, col: 12, offset: 94909},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1169, col: 32, offset: 38406},
																									val:        "+",
																									ignoreCase: false,
																									want:       "\"+\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1175, col: 122, offset: 38766},
																						expr: &litMatcher{
																							pos:        position{line: 1169, col: 32, offset: 38406},
																							val:        "+",
																							ignoreCase: false,
																							want:       "\"+\"",
																						},
																					},
																					&notExpr{
																						pos: position{line: 1175, col: 151, offset: 38795},
																						expr: &actionExpr{
																							pos: position{line: 2870, col: 12, offset: 95022},
																							run: (*parser).callonInlinePassthrough65,
																							expr: &choiceExpr{
																								pos: position{line: 2870, col: 13, offset: 95023},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2870, col: 13, offset: 95023},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2870, col: 20, offset: 95030},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2870, col: 29, offset: 95039},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1175, col: 160, offset: 38804,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1177, col: 11, offset: 38954},
																run: (*parser).callonInlinePassthrough71,
																expr: &seqExpr{
																	pos: position{line: 1177, col: 12, offset: 38955},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1177, col: 12, offset: 38955},
																			expr: &actionExpr{
																				pos: position{line: 2860, col: 10, offset: 94799},
																				run: (*parser).callonInlinePassthrough74,
																				expr: &charClassMatcher{
																					pos:        position{line: 2860, col: 11, offset: 94800},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1177, col: 19, offset: 38962},
																			expr: &actionExpr{
																				pos: position{line: 2870, col: 12, offset: 95022},
																				run: (*parser).callonInlinePassthrough77,
																				expr: &choiceExpr{
																					pos: position{line: 2870, col: 13, offset: 95023},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2870, col: 13, offset: 95023},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2870, col: 20, offset: 95030},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2870, col: 29, offset: 95039},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1177, col: 28, offset: 38971},
																			expr: &litMatcher{
																				pos:        position{line: 1169, col: 32, offset: 38406},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																		},
																		&anyMatcher{
																			line: 1177, col: 57, offset: 39000,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1169, col: 32, offset: 38406},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&notExpr{
													pos: position{line: 1171, col: 121, offset: 38531},
													expr: &charClassMatcher{
														pos:        position{line: 2786, col: 13, offset: 92537},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2547, col: 57, offset: 85408},
										name: "PassthroughMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 2552, col: 1, offset: 85468},
			expr: &actionExpr{
				pos: position{line: 2554, col: 5, offset: 85544},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 2554, col: 5, offset: 85544},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2554, col: 5, offset: 85544},
							run: (*parser).callonQuote3,
						},
						&labeledExpr{
							pos:   position{line: 2557, col: 5, offset: 85604},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2558, col: 9, offset: 85622},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2558, col: 9, offset: 85622},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2559, col: 11, offset: 85644},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableColumnsAttribute",
			pos:  position{line: 2704, col: 1, offset: 89652},
			expr: &actionExpr{
				pos: position{line: 2704, col: 26, offset: 89677},
				run: (*parser).callonTableColumnsAttribute1,
				expr: &seqExpr{
					pos: position{line: 2704, col: 26, offset: 89677},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2704, col: 26, offset: 89677},
							label: "cols",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2704, col: 31, offset: 89682},
								expr: &actionExpr{
									pos: position{line: 2709, col: 5, offset: 89745},
									run: (*parser).callonTableColumnsAttribute5,
									expr: &seqExpr{
										pos: position{line: 2709, col: 5, offset: 89745},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2709, col: 5, offset: 89745},
												expr: &notExpr{
													pos: position{line: 2874, col: 8, offset: 95112},
													expr: &anyMatcher{
														line: 2874, col: 9, offset: 95113,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2712, col: 5, offset: 89869},
												label: "multiplier",
												expr: &zeroOrOneExpr{
													pos: position{line: 2712, col: 16, offset: 89880},
													expr: &actionExpr{
														pos: position{line: 2712, col: 17, offset: 89881},
														run: (*parser).callonTableColumnsAttribute12,
														expr: &seqExpr{
															pos: position{line: 2712, col: 17, offset: 89881},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 2712, col: 17, offset: 89881},
																	label: "n",
																	expr: &actionExpr{
																		pos: position{line: 2856, col: 11, offset: 94723},
																		run: (*parser).callonTableColumnsAttribute15,
																		expr: &seqExpr{
																			pos: position{line: 2856, col: 12, offset: 94724},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 2856, col: 12, offset: 94724},
																					expr: &litMatcher{
																						pos:        position{line: 2856, col: 12, offset: 94724},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 2856, col: 17, offset: 94729},
																					expr: &actionExpr{
																						pos: position{line: 2852, col: 10, offset: 94663},
																						run: (*parser).callonTableColumnsAttribute20,
																						expr: &charClassMatcher{
																							pos:        position{line: 2852, col: 10, offset: 94663},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2712, col: 26, offset: 89890},
																	val:        "*",
																	ignoreCase: false,
																	want:       "\"*\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2713, col: 5, offset: 89918},
												label: "halign",
												expr: &zeroOrOneExpr{
													pos: position{line: 2713, col: 12, offset: 89925},
													expr: &choiceExpr{
														pos: position{line: 2714, col: 9, offset: 89935},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2714, col: 9, offset: 89935},
																run: (*parser).callonTableColumnsAttribute26,
																expr: &litMatcher{
																	pos:        position{line: 2714, col: 9, offset: 89935},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
															},
															&actionExpr{
																pos: position{line: 2715, col: 11, offset: 89982},
																run: (*parser).callonTableColumnsAttribute28,
																expr: &litMatcher{
																	pos:        position{line: 2715, col: 11, offset: 89982},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
															},
															&actionExpr{
																pos: position{line: 2716, col: 11, offset: 90030},
																run: (*parser).callonTableColumnsAttribute30,
																expr: &litMatcher{
																	pos:        position{line: 2716, col: 11, offset: 90030},
																	val:        "^",
																	ignoreCase: false,
																	want:       "\"^\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2718, col: 5, offset: 90080},
												label: "valign",
												expr: &zeroOrOneExpr{
													pos: position{line: 2718, col: 12, offset: 90087},
													expr: &choiceExpr{
														pos: position{line: 2719, col: 9, offset: 90097},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2719, col: 9, offset: 90097},
																run: (*parser).callonTableColumnsAttribute35,
																expr: &litMatcher{
																	pos:        position{line: 2719, col: 9, offset: 90097},
																	val:        ".<",
																	ignoreCase: false,
																	want:       "\".<\"",
																},
															},
															&actionExpr{
																pos: position{line: 2720, col: 11, offset: 90144},
																run: (*parser).callonTableColumnsAttribute37,
																expr: &litMatcher{
																	pos:        position{line: 2720, col: 11, offset: 90144},
																	val:        ".>",
																	ignoreCase: false,
																	want:       "\".>\"",
																},
															},
															&actionExpr{
																pos: position{line: 2721, col: 11, offset: 90194},
																run: (*parser).callonTableColumnsAttribute39,
																expr: &litMatcher{
																	pos:        position{line: 2721, col: 11, offset: 90194},
																	val:        ".^",
																	ignoreCase: false,
																	want:       "\".^\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2723, col: 5, offset: 90245},
												label: "weight",
												expr: &zeroOrOneExpr{
													pos: position{line: 2723, col: 12, offset: 90252},
													expr: &choiceExpr{
														pos: position{line: 2723, col: 13, offset: 90253},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2856, col: 11, offset: 94723},
																run: (*parser).callonTableColumnsAttribute44,
																expr: &seqExpr{
																	pos: position{line: 2856, col: 12, offset: 94724},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 2856, col: 12, offset: 94724},
																			expr: &litMatcher{
																				pos:        position{line: 2856, col: 12, offset: 94724},
																				val:        "-",
																				ignoreCase: false,
																				want:       "\"-\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 2856, col: 17, offset: 94729},
																			expr: &actionExpr{
																				pos: position{line: 2852, col: 10, offset: 94663},
																				run: (*parser).callonTableColumnsAttribute49,
																				expr: &charClassMatcher{
																					pos:        position{line: 2852, col: 10, offset: 94663},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2723, col: 23, offset: 90263},
																run: (*parser).callonTableColumnsAttribute51,
																expr: &litMatcher{
																	pos:        position{line: 2723, col: 23, offset: 90263},
																	val:        "~",
																	ignoreCase: false,
																	want:       "\"~\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2724, col: 5, offset: 90305},
												label: "style",
												expr: &zeroOrOneExpr{
													pos: position{line: 2724, col: 11, offset: 90311},
													expr: &actionExpr{
														pos: position{line: 2724, col: 12, offset: 90312},
														run: (*parser).callonTableColumnsAttribute55,
														expr: &charClassMatcher{
															pos:        position{line: 2724, col: 12, offset: 90312},
															val:        "[adehlms]",
															chars:      []rune{'a', 'd', 'e', 'h', 'l', 'm', 's'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2726, col: 5, offset: 90442},
												label: "comma",
												expr: &zeroOrOneExpr{
													pos: position{line: 2726, col: 11, offset: 90448},
													expr: &litMatcher{
														pos:        position{line: 2726, col: 12, offset: 90449},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
											},
											&andCodeExpr{
												pos: position{line: 2727, col: 5, offset: 90459},
												run: (*parser).callonTableColumnsAttribute60,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2874, col: 8, offset: 95112},
							expr: &anyMatcher{
								line: 2874, col: 9, offset: 95113,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 2751, col: 1, offset: 91389},
			expr: &actionExpr{
				pos: position{line: 2752, col: 5, offset: 91412},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 2752, col: 5, offset: 91412},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2752, col: 5, offset: 91412},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 2775, col: 18, offset: 92201},
								run: (*parser).callonUserMacroBlock4,
								expr: &oneOrMoreExpr{
									pos: position{line: 2775, col: 19, offset: 92202},
									expr: &charClassMatcher{
										pos:        position{line: 2775, col: 19, offset: 92202},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2753, col: 5, offset: 91438},
							run: (*parser).callonUserMacroBlock7,
						},
						&litMatcher{
							pos:        position{line: 2757, col: 5, offset: 91578},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 2758, col: 5, offset: 91588},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 2779, col: 19, offset: 92277},
								run: (*parser).callonUserMacroBlock10,
								expr: &zeroOrMoreExpr{
									pos: position{line: 2779, col: 19, offset: 92277},
									expr: &charClassMatcher{
										pos:        position{line: 2779, col: 19, offset: 92277},
										val:        "[^:[ \\r\\n]",
										chars:      []rune{':', '[', ' ', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2759, col: 5, offset: 91616},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2759, col: 23, offset: 91634},
								name: "InlineAttributes",
							},
						},
						&choiceExpr{
							pos: position{line: 2877, col: 8, offset: 95162},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2870, col: 12, offset: 95022},
									run: (*parser).callonUserMacroBlock16,
									expr: &choiceExpr{
										pos: position{line: 2870, col: 13, offset: 95023},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2870, col: 13, offset: 95023},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 20, offset: 95030},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2870, col: 29, offset: 95039},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2874, col: 8, offset: 95112},
									expr: &anyMatcher{
										line: 2874, col: 9, offset: 95113,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 2763, col: 1, offset: 91788},
			expr: &actionExpr{
				pos: position{line: 2764, col: 5, offset: 91812},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 2764, col: 5, offset: 91812},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2764, col: 5, offset: 91812},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 2775, col: 18, offset: 92201},
								run: (*parser).callonInlineUserMacro4,
								expr: &oneOrMoreExpr{
									pos: position{line: 2775, col: 19, offset: 92202},
									expr: &charClassMatcher{
										pos:        position{line: 2775, col: 19, offset: 92202},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2765, col: 5, offset: 91838},
							run: (*parser).callonInlineUserMacro7,
						},
						&litMatcher{
							pos:        position{line: 2769, col: 5, offset: 91978},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 2770, col: 5, offset: 91987},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 2779, col: 19, offset: 92277},
								run: (*parser).callonInlineUserMacro10,
								expr: &zeroOrMoreExpr{
									pos: position{line: 2779, col: 19, offset: 92277},
									expr: &charClassMatcher{
										pos:        position{line: 2779, col: 19, offset: 92277},
										val:        "[^:[ \\r\\n]",
										chars:      []rune{':', '[', ' ', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2771, col: 5, offset: 92015},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2771, col: 23, offset: 92033},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2821, col: 1, offset: 93639},
			expr: &actionExpr{
				pos: position{line: 2821, col: 17, offset: 93655},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2821, col: 17, offset: 93655},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2821, col: 22, offset: 93660},
						expr: &choiceExpr{
							pos: position{line: 2821, col: 23, offset: 93661},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2833, col: 13, offset: 94065},
									run: (*parser).callonFileLocation5,
									expr: &labeledExpr{
										pos:   position{line: 2833, col: 13, offset: 94065},
										label: "elements",
										expr: &oneOrMoreExpr{
											pos: position{line: 2833, col: 22, offset: 94074},
											expr: &choiceExpr{
												pos: position{line: 2834, col: 5, offset: 94080},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2834, col: 5, offset: 94080},
														run: (*parser).callonFileLocation9,
														expr: &oneOrMoreExpr{
															pos: position{line: 2834, col: 5, offset: 94080},
															expr: &charClassMatcher{
																pos:        position{line: 2834, col: 6, offset: 94081},
																val:        "[^\\r\\n[]�&<>{ ]",
																chars:      []rune{'\r', '\n', '[', ']', '�', '&', '<', '>', '{', ' '},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
													&actionExpr{
														pos: position{line: 416, col: 5, offset: 13530},
														run: (*parser).callonFileLocation12,
														expr: &seqExpr{
															pos: position{line: 416, col: 5, offset: 13530},
															exprs: []interface{}{
																&andCodeExpr{
																	pos: position{line: 416, col: 5, offset: 13530},
																	run: (*parser).callonFileLocation14,
																},
																&labeledExpr{
																	pos:   position{line: 419, col: 5, offset: 13594},
																	label: "element",
																	expr: &choiceExpr{
																		pos: position{line: 419, col: 14, offset: 13603},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 430, col: 25, offset: 14065},
																				run: (*parser).callonFileLocation17,
																				expr: &seqExpr{
																					pos: position{line: 430, col: 25, offset: 14065},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 430, col: 25, offset: 14065},
																							val:        "{counter:",
																							ignoreCase: false,
																							want:       "\"{counter:\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 430, col: 37, offset: 14077},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 120, col: 18, offset: 3502},
																								run: (*parser).callonFileLocation21,
																								expr: &seqExpr{
																									pos: position{line: 120, col: 18, offset: 3502},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 120, col: 18, offset: 3502},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 120, col: 28, offset: 3512},
																											expr: &charClassMatcher{
																												pos:        position{line: 120, col: 29, offset: 3513},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 430, col: 56, offset: 14096},
																							label: "start",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 430, col: 62, offset: 14102},
																								expr: &actionExpr{
																									pos: position{line: 438, col: 17, offset: 14365},
																									run: (*parser).callonFileLocation28,
																									expr: &seqExpr{
																										pos: position{line: 438, col: 17, offset: 14365},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 438, col: 17, offset: 14365},
																												val:        ":",
																												ignoreCase: false,
																												want:       "\":\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 438, col: 21, offset: 14369},
																												label: "start",
																												expr: &choiceExpr{
																													pos: position{line: 438, col: 28, offset: 14376},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 438, col: 28, offset: 14376},
																															run: (*parser).callonFileLocation33,
																															expr: &charClassMatcher{
																																pos:        position{line: 438, col: 28, offset: 14376},
																																val:        "[A-Za-z]",
																																ranges:     []rune{'A', 'Z', 'a', 'z'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&actionExpr{
																															pos: position{line: 440, col: 9, offset: 14430},
																															run: (*parser).callonFileLocation35,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 440, col: 9, offset: 14430},
																																expr: &charClassMatcher{
																																	pos:        position{line: 440, col: 9, offset: 14430},
																																	val:        "[0-9]",
																																	ranges:     []rune{'0', '9'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 430, col: 78, offset: 14118},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 434, col: 25, offset: 14220},
																				run: (*parser).callonFileLocation39,
																				expr: &seqExpr{
																					pos: position{line: 434, col: 25, offset: 14220},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 434, col: 25, offset: 14220},
																							val:        "{counter2:",
																							ignoreCase: false,
																							want:       "\"{counter2:\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 434, col: 38, offset: 14233},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 120, col: 18, offset: 3502},
																								run: (*parser).callonFileLocation43,
																								expr: &seqExpr{
																									pos: position{line: 120, col: 18, offset: 3502},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 120, col: 18, offset: 3502},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 120, col: 28, offset: 3512},
																											expr: &charClassMatcher{
																												pos:        position{line: 120, col: 29, offset: 3513},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 434, col: 57, offset: 14252},
																							label: "start",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 434, col: 63, offset: 14258},
																								expr: &actionExpr{
																									pos: position{line: 438, col: 17, offset: 14365},
																									run: (*parser).callonFileLocation50,
																									expr: &seqExpr{
																										pos: position{line: 438, col: 17, offset: 14365},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 438, col: 17, offset: 14365},
																												val:        ":",
																												ignoreCase: false,
																												want:       "\":\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 438, col: 21, offset: 14369},
																												label: "start",
																												expr: &choiceExpr{
																													pos: position{line: 438, col: 28, offset: 14376},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 438, col: 28, offset: 14376},
																															run: (*parser).callonFileLocation55,
																															expr: &charClassMatcher{
																																pos:        position{line: 438, col: 28, offset: 14376},
																																val:        "[A-Za-z]",
																																ranges:     []rune{'A', 'Z', 'a', 'z'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&actionExpr{
																															pos: position{line: 440, col: 9, offset: 14430},
																															run: (*parser).callonFileLocation57,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 440, col: 9, offset: 14430},
																																expr: &charClassMatcher{
																																	pos:        position{line: 440, col: 9, offset: 14430},
																																	val:        "[0-9]",
																																	ranges:     []rune{'0', '9'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 434, col: 79, offset: 14274},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 423, col: 31, offset: 13720},
																				run: (*parser).callonFileLocation61,
																				expr: &seqExpr{
																					pos: position{line: 423, col: 31, offset: 13720},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 423, col: 31, offset: 13720},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 423, col: 35, offset: 13724},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 120, col: 18, offset: 3502},
																								run: (*parser).callonFileLocation65,
																								expr: &seqExpr{
																									pos: position{line: 120, col: 18, offset: 3502},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 120, col: 18, offset: 3502},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 120, col: 28, offset: 3512},
																											expr: &charClassMatcher{
																												pos:        position{line: 120, col: 29, offset: 3513},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 423, col: 54, offset: 13743},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2576, col: 5, offset: 86006},
														run: (*parser).callonFileLocation71,
														expr: &seqExpr{
															pos: position{line: 2576, col: 5, offset: 86006},
															exprs: []interface{}{
																&andCodeExpr{
																	pos: position{line: 2576, col: 5, offset: 86006},
																	run: (*parser).callonFileLocation73,
																},
																&labeledExpr{
																	pos:   position{line: 2579, col: 5, offset: 86077},
																	label: "element",
																	expr: &choiceExpr{
																		pos: position{line: 2581, col: 9, offset: 86175},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2581, col: 9, offset: 86175},
																				run: (*parser).callonFileLocation76,
																				expr: &choiceExpr{
																					pos: position{line: 458, col: 27, offset: 15084},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 458, col: 27, offset: 15084},
																							run: (*parser).callonFileLocation78,
																							expr: &seqExpr{
																								pos: position{line: 458, col: 27, offset: 15084},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 458, col: 27, offset: 15084},
																										val:        "<<",
																										ignoreCase: false,
																										want:       "\"<<\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 458, col: 32, offset: 15089},
																										label: "id",
																										expr: &actionExpr{
																											pos: position{line: 2848, col: 7, offset: 94521},
																											run: (*parser).callonFileLocation82,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2848, col: 7, offset: 94521},
																												expr: &charClassMatcher{
																													pos:        position{line: 2848, col: 7, offset: 94521},
																													val:        "[^[]<>,]",
																													chars:      []rune{'[', ']', '<', '>', ','},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 458, col: 40, offset: 15097},
																										expr: &actionExpr{
																											pos: position{line: 2860, col: 10, offset: 94799},
																											run: (*parser).callonFileLocation86,
																											expr: &charClassMatcher{
																												pos:        position{line: 2860, col: 11, offset: 94800},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 458, col: 47, offset: 15104},
																										val:        ",",
																										ignoreCase: false,
																										want:       "\",\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 458, col: 51, offset: 15108},
																										label: "label",
																										expr: &oneOrMoreExpr{
																											pos: position{line: 468, col: 24, offset: 15521},
																											expr: &choiceExpr{
																												pos: position{line: 469, col: 5, offset: 15527},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 469, col: 6, offset: 15528},
																														run: (*parser).callonFileLocation92,
																														expr: &seqExpr{
																															pos: position{line: 469, col: 6, offset: 15528},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 469, col: 6, offset: 15528},
																																	val:        "[0-9\\pL]",
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&oneOrMoreExpr{
																																	pos: position{line: 469, col: 14, offset: 15536},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 469, col: 14, offset: 15536},
																																		val:        "[^\\r\\n{<>]",
																																		chars:      []rune{'\r', '\n', '{', '<', '>'},
																																		ignoreCase: false,
																																		inverted:   true,
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 416, col: 5, offset: 13530},
																														run: (*parser).callonFileLocation97,
																														expr: &seqExpr{
																															pos: position{line: 416, col: 5, offset: 13530},
																															exprs: []interface{}{
																																&andCodeExpr{
																																	pos: position{line: 416, col: 5, offset: 13530},
																																	run: (*parser).callonFileLocation99,
																																},
																																&labeledExpr{
																																	pos:   position{line: 419, col: 5, offset: 13594},
																																	label: "element",
																																	expr: &choiceExpr{
																																		pos: position{line: 419, col: 14, offset: 13603},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 430, col: 25, offset: 14065},
																																				run: (*parser).callonFileLocation102,
																																				expr: &seqExpr{
																																					pos: position{line: 430, col: 25, offset: 14065},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 430, col: 25, offset: 14065},
																																							val:        "{counter:",
																																							ignoreCase: false,
																																							want:       "\"{counter:\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 430, col: 37, offset: 14077},
																																							label: "name",
																																							expr: &actionExpr{
																																								pos: position{line: 120, col: 18, offset: 3502},
																																								run: (*parser).callonFileLocation106,
																																								expr: &seqExpr{
																																									pos: position{line: 120, col: 18, offset: 3502},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 120, col: 18, offset: 3502},
																																											val:        "[_0-9\\pL]",
																																											chars:      []rune{'_'},
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&zeroOrMoreExpr{
																																											pos: position{line: 120, col: 28, offset: 3512},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 120, col: 29, offset: 3513},
																																												val:        "[-0-9\\pL]",
																																												chars:      []rune{'-'},
																																												ranges:     []rune{'0', '9'},
																																												classes:    []*unicode.RangeTable{rangeTable("L")},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 430, col: 56, offset: 14096},
																																							label: "start",
																																							expr: &zeroOrOneExpr{
																																								pos: position{line: 430, col: 62, offset: 14102},
																																								expr: &actionExpr{
																																									pos: position{line: 438, col: 17, offset: 14365},
																																									run: (*parser).callonFileLocation113,
																																									expr: &seqExpr{
																																										pos: position{line: 438, col: 17, offset: 14365},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 438, col: 17, offset: 14365},
																																												val:        ":",
																																												ignoreCase: false,
																																												want:       "\":\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 438, col: 21, offset: 14369},
																																												label: "start",
																																												expr: &choiceExpr{
																																													pos: position{line: 438, col: 28, offset: 14376},
																																													alternatives: []interface{}{
																																														&actionExpr{
																																															pos: position{line: 438, col: 28, offset: 14376},
																																															run: (*parser).callonFileLocation118,
																																															expr: &charClassMatcher{
																																																pos:        position{line: 438, col: 28, offset: 14376},
																																																val:        "[A-Za-z]",
																																																ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																														&actionExpr{
																																															pos: position{line: 440, col: 9, offset: 14430},
																																															run: (*parser).callonFileLocation120,
																																															expr: &oneOrMoreExpr{
																																																pos: position{line: 440, col: 9, offset: 14430},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 440, col: 9, offset: 14430},
																																																	val:        "[0-9]",
																																																	ranges:     []rune{'0', '9'},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 430, col: 78, offset: 14118},
																																							val:        "}",
																																							ignoreCase: false,
																																							want:       "\"}\"",
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 434, col: 25, offset: 14220},
																																				run: (*parser).callonFileLocation124,
																																				expr: &seqExpr{
																																					pos: position{line: 434, col: 25, offset: 14220},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 434, col: 25, offset: 14220},
																																							val:        "{counter2:",
																																							ignoreCase: false,
																																							want:       "\"{counter2:\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 434, col: 38, offset: 14233},
																																							label: "name",
																																							expr: &actionExpr{
																																								pos: position{line: 120, col: 18, offset: 3502},
																																								run: (*parser).callonFileLocation128,
																																								expr: &seqExpr{
																																									pos: position{line: 120, col: 18, offset: 3502},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 120, col: 18, offset: 3502},
																																											val:        "[_0-9\\pL]",
																																											chars:      []rune{'_'},
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&zeroOrMoreExpr{
																																											pos: position{line: 120, col: 28, offset: 3512},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 120, col: 29, offset: 3513},
																																												val:        "[-0-9\\pL]",
																																												chars:      []rune{'-'},
																																												ranges:     []rune{'0', '9'},
																																												classes:    []*unicode.RangeTable{rangeTable("L")},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 434, col: 57, offset: 14252},
																																							label: "start",
																																							expr: &zeroOrOneExpr{
																																								pos: position{line: 434, col: 63, offset: 14258},
																																								expr: &actionExpr{
																																									pos: position{line: 438, col: 17, offset: 14365},
																																									run: (*parser).callonFileLocation135,
																																									expr: &seqExpr{
																																										pos: position{line: 438, col: 17, offset: 14365},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 438, col: 17, offset: 14365},
																																												val:        ":",
																																												ignoreCase: false,
																																												want:       "\":\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 438, col: 21, offset: 14369},
																																												label: "start",
																																												expr: &choiceExpr{
																																													pos: position{line: 438, col: 28, offset: 14376},
																																													alternatives: []interface{}{
																																														&actionExpr{
																																															pos: position{line: 438, col: 28, offset: 14376},
																																															run: (*parser).callonFileLocation140,
																																															expr: &charClassMatcher{
																																																pos:        position{line: 438, col: 28, offset: 14376},
																																																val:        "[A-Za-z]",
																																																ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																														&actionExpr{
																																															pos: position{line: 440, col: 9, offset: 14430},
																																															run: (*parser).callonFileLocation142,
																																															expr: &oneOrMoreExpr{
																																																pos: position{line: 440, col: 9, offset: 14430},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 440, col: 9, offset: 14430},
																																																	val:        "[0-9]",
																																																	ranges:     []rune{'0', '9'},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 434, col: 79, offset: 14274},
																																							val:        "}",
																																							ignoreCase: false,
																																							want:       "\"}\"",
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 423, col: 31, offset: 13720},
																																				run: (*parser).callonFileLocation146,
																																				expr: &seqExpr{
																																					pos: position{line: 423, col: 31, offset: 13720},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 423, col: 31, offset: 13720},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 423, col: 35, offset: 13724},
																																							label: "name",
																																							expr: &actionExpr{
																																								pos: position{line: 120, col: 18, offset: 3502},
																																								run: (*parser).callonFileLocation150,
																																								expr: &seqExpr{
																																									pos: position{line: 120, col: 18, offset: 3502},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 120, col: 18, offset: 3502},
																																											val:        "[_0-9\\pL]",
																																											chars:      []rune{'_'},
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&zeroOrMoreExpr{
																																											pos: position{line: 120, col: 28, offset: 3512},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 120, col: 29, offset: 3513},
																																												val:        "[-0-9\\pL]",
																																												chars:      []rune{'-'},
																																												ranges:     []rune{'0', '9'},
																																												classes:    []*unicode.RangeTable{rangeTable("L")},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 423, col: 54, offset: 13743},
																																							val:        "}",
																																							ignoreCase: false,
																																							want:       "\"}\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 473, col: 8, offset: 15760},
																														run: (*parser).callonFileLocation156,
																														expr: &litMatcher{
																															pos:        position{line: 473, col: 8, offset: 15760},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 458, col: 79, offset: 15136},
																										val:        ">>",
																										ignoreCase: false,
																										want:       "\">>\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 460, col: 9, offset: 15209},
																							run: (*parser).callonFileLocation159,
																							expr: &seqExpr{
																								pos: position{line: 460, col: 9, offset: 15209},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 460, col: 9, offset: 15209},
																										val:        "<<",
																										ignoreCase: false,
																										want:       "\"<<\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 460, col: 14, offset: 15214},
																										label: "id",
																										expr: &actionExpr{
																											pos: position{line: 2848, col: 7, offset: 94521},
																											run: (*parser).callonFileLocation163,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2848, col: 7, offset: 94521},
																												expr: &charClassMatcher{
																													pos:        position{line: 2848, col: 7, offset: 94521},
																													val:        "[^[]<>,]",
																													chars:      []rune{'[', ']', '<', '>', ','},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 460, col: 22, offset: 15222},
																										val:        ">>",
																										ignoreCase: false,
																										want:       "\">>\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2584, col: 11, offset: 86279},
																				run: (*parser).callonFileLocation167,
																				expr: &charClassMatcher{
																					pos:        position{line: 2584, col: 12, offset: 86280},
																					val:        "[<>&]",
																					chars:      []rune{'<', '>', '&'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2840, col: 7, offset: 94305},
														run: (*parser).callonFileLocation169,
														expr: &litMatcher{
															pos:        position{line: 2840, col: 7, offset: 94305},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 914, col: 23, offset: 28983},
									run: (*parser).callonFileLocation171,
									expr: &seqExpr{
										pos: position{line: 914, col: 23, offset: 28983},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 912, col: 32, offset: 28951},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 914, col: 51, offset: 29011},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 914, col: 56, offset: 29016},
													run: (*parser).callonFileLocation175,
													expr: &oneOrMoreExpr{
														pos: position{line: 914, col: 56, offset: 29016},
														expr: &charClassMatcher{
															pos:        position{line: 914, col: 56, offset: 29016},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 912, col: 32, offset: 28951},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onDocumentFragment19() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment19()
}

func (c *current) onDocumentFragment29() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment29()
}

func (c *current) onDocumentFragment38() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment38()
}

func (c *current) onDocumentFragment47() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDocumentFragment47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment47()
}

func (c *current) onDocumentFragment52() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDocumentFragment52() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment52()
}

func (c *current) onDocumentFragment59() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment59()
}

func (c *current) onDocumentFragment71() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment71()
}

func (c *current) onDocumentFragment73() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentFragment73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment73()
}

func (c *current) onDocumentFragment66(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDocumentFragment66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment66(stack["start"])
}

func (c *current) onDocumentFragment55(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDocumentFragment55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment55(stack["name"], stack["start"])
}

func (c *current) onDocumentFragment81() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment81()
}

func (c *current) onDocumentFragment93() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment93()
}

func (c *current) onDocumentFragment95() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentFragment95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment95()
}

func (c *current) onDocumentFragment88(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDocumentFragment88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment88(stack["start"])
}

func (c *current) onDocumentFragment77(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDocumentFragment77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment77(stack["name"], stack["start"])
}

func (c *current) onDocumentFragment103() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment103()
}

func (c *current) onDocumentFragment99(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentFragment99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment99(stack["name"])
}

func (c *current) onDocumentFragment50(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDocumentFragment50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment50(stack["element"])
}

func (c *current) onDocumentFragment109() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDocumentFragment109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment109()
}

func (c *current) onDocumentFragment34(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonDocumentFragment34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment34(stack["element"])
}

func (c *current) onDocumentFragment27(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonDocumentFragment27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment27(stack["elements"])
}

func (c *current) onDocumentFragment112() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment112()
}

func (c *current) onDocumentFragment15(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	return d, nil

}

func (p *parser) callonDocumentFragment15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment15(stack["name"], stack["value"])
}

func (c *current) onDocumentFragment123() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment123()
}

func (c *current) onDocumentFragment130() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment130()
}

func (c *current) onDocumentFragment133() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment133()
}

func (c *current) onDocumentFragment119(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonDocumentFragment119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment119(stack["name"])
}

func (c *current) onDocumentFragment144() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment144()
}

func (c *current) onDocumentFragment151() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment151()
}

func (c *current) onDocumentFragment154() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment154()
}

func (c *current) onDocumentFragment140(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonDocumentFragment140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment140(stack["name"])
}

func (c *current) onDocumentFragment163() (bool, error) {
	return c.isDocumentHeaderAllowed(), nil

}

func (p *parser) callonDocumentFragment163() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment163()
}

func (c *current) onDocumentFragment171() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment171()
}

func (c *current) onDocumentFragment174() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment174()
}

func (c *current) onDocumentFragment165() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment165()
}

func (c *current) onDocumentFragment185() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment185()
}

func (c *current) onDocumentFragment189() (interface{}, error) {
	// can't have empty title, that may collide with example block delimiter (`====`)
	return []interface{}{
		types.RawLine(c.text),
	}, nil
}

func (p *parser) callonDocumentFragment189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment189()
}

func (c *current) onDocumentFragment193() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment193()
}

func (c *current) onDocumentFragment182(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonDocumentFragment182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment182(stack["title"])
}

func (c *current) onDocumentFragment211() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment211()
}

func (c *current) onDocumentFragment214() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment214()
}

func (c *current) onDocumentFragment205() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment205()
}

func (c *current) onDocumentFragment229() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment229()
}

func (c *current) onDocumentFragment233() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment233()
}

func (c *current) onDocumentFragment223(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment223(stack["content"])
}

func (c *current) onDocumentFragment242() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Comment), nil

}

func (p *parser) callonDocumentFragment242() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment242()
}

func (c *current) onDocumentFragment245() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment245() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment245()
}

func (c *current) onDocumentFragment248() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment248()
}

func (c *current) onDocumentFragment255() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Comment)
	return true, nil

}

func (p *parser) callonDocumentFragment255() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment255()
}

func (c *current) onDocumentFragment265() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment265() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment265()
}

func (c *current) onDocumentFragment268() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment268()
}

func (c *current) onDocumentFragment284() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment284() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment284()
}

func (c *current) onDocumentFragment288() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment288() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment288()
}

func (c *current) onDocumentFragment278(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment278() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment278(stack["content"])
}

func (c *current) onDocumentFragment258(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment258() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment258(stack["line"])
}

func (c *current) onDocumentFragment300() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment300()
}

func (c *current) onDocumentFragment303() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment303() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment303()
}

func (c *current) onDocumentFragment240(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentFragment240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment240(stack["content"])
}

func (c *current) onDocumentFragment316() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment316() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment316()
}

func (c *current) onDocumentFragment333() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment333() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment333()
}

func (c *current) onDocumentFragment337() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment337() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment337()
}

func (c *current) onDocumentFragment341() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment341() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment341()
}

func (c *current) onDocumentFragment345() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment345() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment345()
}

func (c *current) onDocumentFragment349() (interface{}, error) {
	// spaces allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment349() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment349()
}

func (c *current) onDocumentFragment353() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment353() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment353()
}

func (c *current) onDocumentFragment330(part1, part2, part3 interface{}) (interface{}, error) {
	return types.NewDocumentAuthorFullName(part1.(string), part2, part3)

}

func (p *parser) callonDocumentFragment330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment330(stack["part1"], stack["part2"], stack["part3"])
}

func (c *current) onDocumentFragment364() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment364()
}

func (c *current) onDocumentFragment357(email interface{}) (interface{}, error) {
	return email, nil

}

func (p *parser) callonDocumentFragment357() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment357(stack["email"])
}

func (c *current) onDocumentFragment369() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment369() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment369()
}

func (c *current) onDocumentFragment374() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment374()
}

func (c *current) onDocumentFragment376(fullName, email interface{}) (bool, error) {
	// at least 1 of [fullName, email] must be defined
	return fullName != nil || email != nil, nil

}

func (p *parser) callonDocumentFragment376() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment376(stack["fullName"], stack["email"])
}

func (c *current) onDocumentFragment326(fullName, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullName, email)

}

func (p *parser) callonDocumentFragment326() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment326(stack["fullName"], stack["email"])
}

func (c *current) onDocumentFragment320(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{})...)
}

func (p *parser) callonDocumentFragment320() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment320(stack["authors"])
}

func (c *current) onDocumentFragment381() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment381() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment381()
}

func (c *current) onDocumentFragment391() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment391() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment391()
}

func (c *current) onDocumentFragment395() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment395() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment395()
}

func (c *current) onDocumentFragment399() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment399() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment399()
}

func (c *current) onDocumentFragment403() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment403() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment403()
}

func (c *current) onDocumentFragment407() (interface{}, error) {
	// spaces allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment407() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment407()
}

func (c *current) onDocumentFragment411() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment411() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment411()
}

func (c *current) onDocumentFragment388(part1, part2, part3 interface{}) (interface{}, error) {
	return types.NewDocumentAuthorFullName(part1.(string), part2, part3)

}

func (p *parser) callonDocumentFragment388() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment388(stack["part1"], stack["part2"], stack["part3"])
}

func (c *current) onDocumentFragment422() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment422() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment422()
}

func (c *current) onDocumentFragment415(email interface{}) (interface{}, error) {
	return email, nil

}

func (p *parser) callonDocumentFragment415() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment415(stack["email"])
}

func (c *current) onDocumentFragment427() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment427() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment427()
}

func (c *current) onDocumentFragment432() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment432() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment432()
}

func (c *current) onDocumentFragment434(fullName, email interface{}) (bool, error) {
	// at least 1 of [fullName, email] must be defined
	return fullName != nil || email != nil, nil

}

func (p *parser) callonDocumentFragment434() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment434(stack["fullName"], stack["email"])
}

func (c *current) onDocumentFragment384(fullName, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullName, email)

}

func (p *parser) callonDocumentFragment384() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment384(stack["fullName"], stack["email"])
}

func (c *current) onDocumentFragment377(author interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(author)
}

func (p *parser) callonDocumentFragment377() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment377(stack["author"])
}

func (c *current) onDocumentFragment436() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment436() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment436()
}

func (c *current) onDocumentFragment313(authors interface{}) (interface{}, error) {
	return authors, nil
}

func (p *parser) callonDocumentFragment313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment313(stack["authors"])
}

func (c *current) onDocumentFragment451() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment451() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment451()
}

func (c *current) onDocumentFragment455() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment455() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment455()
}

func (c *current) onDocumentFragment445(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment445() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment445(stack["content"])
}

func (c *current) onDocumentFragment464() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Comment), nil

}

func (p *parser) callonDocumentFragment464() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment464()
}

func (c *current) onDocumentFragment467() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment467() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment467()
}

func (c *current) onDocumentFragment470() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment470() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment470()
}

func (c *current) onDocumentFragment477() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Comment)
	return true, nil

}

func (p *parser) callonDocumentFragment477() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment477()
}

func (c *current) onDocumentFragment487() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment487() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment487()
}

func (c *current) onDocumentFragment490() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment490() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment490()
}

func (c *current) onDocumentFragment506() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment506() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment506()
}

func (c *current) onDocumentFragment510() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment510() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment510()
}

func (c *current) onDocumentFragment500(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment500() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment500(stack["content"])
}

func (c *current) onDocumentFragment480(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment480() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment480(stack["line"])
}

func (c *current) onDocumentFragment522() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment522() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment522()
}

func (c *current) onDocumentFragment525() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment525() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment525()
}

func (c *current) onDocumentFragment462(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentFragment462() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment462(stack["content"])
}

func (c *current) onDocumentFragment539() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment539() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment539()
}

func (c *current) onDocumentFragment552() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment552() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment552()
}

func (c *current) onDocumentFragment549() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment549() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment549()
}

func (c *current) onDocumentFragment560() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment560() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment560()
}

func (c *current) onDocumentFragment565() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment565() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment565()
}

func (c *current) onDocumentFragment556() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment556() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment556()
}

func (c *current) onDocumentFragment573() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment573() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment573()
}

func (c *current) onDocumentFragment580() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment580() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment580()
}

func (c *current) onDocumentFragment545(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentFragment545() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment545(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentFragment586() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment586() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment586()
}

func (c *current) onDocumentFragment593() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment593() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment593()
}

func (c *current) onDocumentFragment583(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentFragment583() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment583(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentFragment597() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment597() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment597()
}

func (c *current) onDocumentFragment536(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentFragment536() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment536(stack["revision"])
}

func (c *current) onDocumentFragment202(authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentInformation(authors.(types.DocumentAuthors), revision)

}

func (p *parser) callonDocumentFragment202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment202(stack["authors"], stack["revision"])
}

func (c *current) onDocumentFragment611() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment611() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment611()
}

func (c *current) onDocumentFragment621() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment621() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment621()
}

func (c *current) onDocumentFragment630() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment630() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment630()
}

func (c *current) onDocumentFragment639() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDocumentFragment639() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment639()
}

func (c *current) onDocumentFragment644() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDocumentFragment644() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment644()
}

func (c *current) onDocumentFragment651() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment651() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment651()
}

func (c *current) onDocumentFragment663() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment663() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment663()
}

func (c *current) onDocumentFragment665() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentFragment665() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment665()
}

func (c *current) onDocumentFragment658(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDocumentFragment658() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment658(stack["start"])
}

func (c *current) onDocumentFragment647(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDocumentFragment647() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment647(stack["name"], stack["start"])
}

func (c *current) onDocumentFragment673() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment673() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment673()
}

func (c *current) onDocumentFragment685() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment685() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment685()
}

func (c *current) onDocumentFragment687() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentFragment687() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment687()
}

func (c *current) onDocumentFragment680(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDocumentFragment680() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment680(stack["start"])
}

func (c *current) onDocumentFragment669(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDocumentFragment669() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment669(stack["name"], stack["start"])
}

func (c *current) onDocumentFragment695() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment695() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment695()
}

func (c *current) onDocumentFragment691(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentFragment691() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment691(stack["name"])
}

func (c *current) onDocumentFragment642(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDocumentFragment642() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment642(stack["element"])
}

func (c *current) onDocumentFragment701() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDocumentFragment701() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment701()
}

func (c *current) onDocumentFragment626(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonDocumentFragment626() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment626(stack["element"])
}

func (c *current) onDocumentFragment619(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonDocumentFragment619() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment619(stack["elements"])
}

func (c *current) onDocumentFragment704() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment704() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment704()
}

func (c *current) onDocumentFragment607(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	return d, nil

}

func (p *parser) callonDocumentFragment607() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment607(stack["name"], stack["value"])
}

func (c *current) onDocumentFragment715() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment715() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment715()
}

func (c *current) onDocumentFragment722() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment722() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment722()
}

func (c *current) onDocumentFragment725() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment725() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment725()
}

func (c *current) onDocumentFragment711(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonDocumentFragment711() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment711(stack["name"])
}

func (c *current) onDocumentFragment736() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment736() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment736()
}

func (c *current) onDocumentFragment743() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment743() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment743()
}

func (c *current) onDocumentFragment746() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment746() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment746()
}

func (c *current) onDocumentFragment732(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonDocumentFragment732() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment732(stack["name"])
}

func (c *current) onDocumentFragment161(title, info, extraAttrs interface{}) (interface{}, error) {
	c.setFrontMatterAllowed(false)    // not allowed anymore
	c.setDocumentHeaderAllowed(false) // not allowed anymore
	return types.NewDocumentHeader(title.([]interface{}), info, extraAttrs.([]interface{}))

}

func (p *parser) callonDocumentFragment161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment161(stack["title"], stack["info"], stack["extraAttrs"])
}

func (c *current) onDocumentFragment759() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment759() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment759()
}

func (c *current) onDocumentFragment762() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment762() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment762()
}

func (c *current) onDocumentFragment753() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment753() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment753()
}

func (c *current) onDocumentFragment771() (bool, error) {

	return !c.isWithinDelimitedBlock(), nil

}

func (p *parser) callonDocumentFragment771() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment771()
}

func (c *current) onDocumentFragment773() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonDocumentFragment773() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment773()
}

func (c *current) onDocumentFragment776(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonDocumentFragment776() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment776(stack["level"])
}

func (c *current) onDocumentFragment777(level interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment777() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment777(stack["level"])
}

func (c *current) onDocumentFragment781() (interface{}, error) {
	// can't have empty title, that may collide with example block delimiter (`====`)
	return []interface{}{
		types.RawLine(c.text),
	}, nil
}

func (p *parser) callonDocumentFragment781() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment781()
}

func (c *current) onDocumentFragment785() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment785() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment785()
}

func (c *current) onDocumentFragment769(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.([]interface{}))

}

func (p *parser) callonDocumentFragment769() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment769(stack["level"], stack["title"])
}

func (c *current) onDocumentFragment793() (interface{}, error) {
	// TODO: Space* before EOF
	return types.NewThematicBreak()

}

func (p *parser) callonDocumentFragment793() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment793()
}

func (c *current) onDocumentFragment809() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment809() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment809()
}

func (c *current) onDocumentFragment812() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment812() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment812()
}

func (c *current) onDocumentFragment829() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment829() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment829()
}

func (c *current) onDocumentFragment835() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment835() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment835()
}

func (c *current) onDocumentFragment833(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonDocumentFragment833() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment833(stack["content"])
}

func (c *current) onDocumentFragment825(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonDocumentFragment825() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment825(stack["content"])
}

func (c *current) onDocumentFragment839() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment839() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment839()
}

func (c *current) onDocumentFragment853() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment853() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment853()
}

func (c *current) onDocumentFragment856() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment856() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment856()
}

func (c *current) onDocumentFragment847() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment847() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment847()
}

func (c *current) onDocumentFragment821(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonDocumentFragment821() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment821(stack["cells"])
}

func (c *current) onDocumentFragment873() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment873() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment873()
}

func (c *current) onDocumentFragment876() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment876() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment876()
}

func (c *current) onDocumentFragment897() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment897() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment897()
}

func (c *current) onDocumentFragment900() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment900() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment900()
}

func (c *current) onDocumentFragment916() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment916() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment916()
}

func (c *current) onDocumentFragment919() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment919() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment919()
}

func (c *current) onDocumentFragment910() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment910() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment910()
}

func (c *current) onDocumentFragment928() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment928() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment928()
}

func (c *current) onDocumentFragment934() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment934() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment934()
}

func (c *current) onDocumentFragment932(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonDocumentFragment932() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment932(stack["content"])
}

func (c *current) onDocumentFragment890(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonDocumentFragment890() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment890(stack["content"])
}

func (c *current) onDocumentFragment938() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment938() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment938()
}

func (c *current) onDocumentFragment887(cell interface{}) (interface{}, error) {
	return cell, nil

}

func (p *parser) callonDocumentFragment887() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment887(stack["cell"])
}

func (c *current) onDocumentFragment953() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment953() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment953()
}

func (c *current) onDocumentFragment956() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment956() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment956()
}

func (c *current) onDocumentFragment947() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment947() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment947()
}

func (c *current) onDocumentFragment968() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment968() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment968()
}

func (c *current) onDocumentFragment971() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment971() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment971()
}

func (c *current) onDocumentFragment866(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonDocumentFragment866() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment866(stack["cells"])
}

func (c *current) onDocumentFragment987() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment987() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment987()
}

func (c *current) onDocumentFragment990() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment990() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment990()
}

func (c *current) onDocumentFragment1008() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1008() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1008()
}

func (c *current) onDocumentFragment1011() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1011() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1011()
}

func (c *current) onDocumentFragment1027() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1027() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1027()
}

func (c *current) onDocumentFragment1030() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1030() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1030()
}

func (c *current) onDocumentFragment1021() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1021() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1021()
}

func (c *current) onDocumentFragment1039() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1039() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1039()
}

func (c *current) onDocumentFragment1045() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1045() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1045()
}

func (c *current) onDocumentFragment1043(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonDocumentFragment1043() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1043(stack["content"])
}

func (c *current) onDocumentFragment1001(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonDocumentFragment1001() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1001(stack["content"])
}

func (c *current) onDocumentFragment1049() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1049() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1049()
}

func (c *current) onDocumentFragment1063() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1063() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1063()
}

func (c *current) onDocumentFragment1066() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1066() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1066()
}

func (c *current) onDocumentFragment1057() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1057() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1057()
}

func (c *current) onDocumentFragment980(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonDocumentFragment980() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment980(stack["cells"])
}

func (c *current) onDocumentFragment1077() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1077() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1077()
}

func (c *current) onDocumentFragment1080() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1080() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1080()
}

func (c *current) onDocumentFragment805(header, rows interface{}) (interface{}, error) {
	return types.NewTable(header, rows.([]interface{}))

}

func (p *parser) callonDocumentFragment805() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment805(stack["header"], stack["rows"])
}

func (c *current) onDocumentFragment1095() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1095() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1095()
}

func (c *current) onDocumentFragment1099() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1099() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1099()
}

func (c *current) onDocumentFragment1089(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment1089() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1089(stack["content"])
}

func (c *current) onDocumentFragment1110() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonDocumentFragment1110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1110()
}

func (c *current) onDocumentFragment1112() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonDocumentFragment1112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1112()
}

func (c *current) onDocumentFragment1114() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonDocumentFragment1114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1114()
}

func (c *current) onDocumentFragment1116() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonDocumentFragment1116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1116()
}

func (c *current) onDocumentFragment1118() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonDocumentFragment1118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1118()
}

func (c *current) onDocumentFragment1125() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1125()
}

func (c *current) onDocumentFragment1128(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDocumentFragment1128() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1128(stack["content"])
}

func (c *current) onDocumentFragment1130() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1130()
}

func (c *current) onDocumentFragment1122(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1122(stack["content"])
}

func (c *current) onDocumentFragment1145() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1145()
}

func (c *current) onDocumentFragment1147() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1147()
}

func (c *current) onDocumentFragment1160() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1160()
}

func (c *current) onDocumentFragment1164() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1164()
}

func (c *current) onDocumentFragment1154(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment1154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1154(stack["content"])
}

func (c *current) onDocumentFragment1174() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1174()
}

func (c *current) onDocumentFragment1177(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDocumentFragment1177() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1177(stack["content"])
}

func (c *current) onDocumentFragment1179() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1179()
}

func (c *current) onDocumentFragment1171(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1171(stack["content"])
}

func (c *current) onDocumentFragment1139(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment1139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1139(stack["line"])
}

func (c *current) onDocumentFragment1106(kind, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(kind.(string), append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonDocumentFragment1106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1106(stack["kind"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentFragment1194() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1194()
}

func (c *current) onDocumentFragment1192() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1192()
}

func (c *current) onDocumentFragment1199(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDocumentFragment1199() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1199(stack["content"])
}

func (c *current) onDocumentFragment1201() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1201()
}

func (c *current) onDocumentFragment1189(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1189(stack["content"])
}

func (c *current) onDocumentFragment1217() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1217()
}

func (c *current) onDocumentFragment1221() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1221()
}

func (c *current) onDocumentFragment1211(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment1211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1211(stack["content"])
}

func (c *current) onDocumentFragment1231() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1231()
}

func (c *current) onDocumentFragment1234(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDocumentFragment1234() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1234(stack["content"])
}

func (c *current) onDocumentFragment1236() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1236()
}

func (c *current) onDocumentFragment1228(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1228(stack["content"])
}

func (c *current) onDocumentFragment1186(firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewLiteralParagraph(types.LiteralBlockWithSpacesOnFirstLine, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonDocumentFragment1186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1186(stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentFragment1245() (bool, error) {
	return c.isFrontMatterAllowed(), nil

}

func (p *parser) callonDocumentFragment1245() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1245()
}

func (c *current) onDocumentFragment1251() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1251()
}

func (c *current) onDocumentFragment1254() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1254()
}

func (c *current) onDocumentFragment1271() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1271()
}

func (c *current) onDocumentFragment1274() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1274() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1274()
}

func (c *current) onDocumentFragment1263() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1263()
}

func (c *current) onDocumentFragment1284() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1284() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1284()
}

func (c *current) onDocumentFragment1287() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1287()
}

func (c *current) onDocumentFragment1247(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonDocumentFragment1247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1247(stack["content"])
}

func (c *current) onDocumentFragment1243(frontmatter interface{}) (interface{}, error) {
	c.setFrontMatterAllowed(false) // not allowed anymore
	return frontmatter, nil

}

func (p *parser) callonDocumentFragment1243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1243(stack["frontmatter"])
}

func (c *current) onDocumentFragment1(attributes, element interface{}) (interface{}, error) {
	c.setFrontMatterAllowed(false)    // not allowed anymore
	c.setDocumentHeaderAllowed(false) // not allowed anymore

	if element, ok := element.(types.BlockWithAttributes); ok && attributes != nil {
		element.AddAttributes(attributes.(types.Attributes))
	}
	return element, nil

}

func (p *parser) callonDocumentFragment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1(stack["attributes"], stack["element"])
}

func (c *current) onDocumentFragmentWithinVerbatimBlock13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragmentWithinVerbatimBlock13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentWithinVerbatimBlock13()
}

func (c *current) onDocumentFragmentWithinVerbatimBlock17() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragmentWithinVerbatimBlock17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentWithinVerbatimBlock17()
}

func (c *current) onDocumentFragmentWithinVerbatimBlock7(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragmentWithinVerbatimBlock7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentWithinVerbatimBlock7(stack["content"])
}

func (c *current) onDocumentFragmentWithinVerbatimBlock1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonDocumentFragmentWithinVerbatimBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentWithinVerbatimBlock1(stack["elements"])
}

func (c *current) onDelimitedBlockElements10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlockElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements10()
}

func (c *current) onDelimitedBlockElements6(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDelimitedBlockElements6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements6(stack["ref"])
}

func (c *current) onDelimitedBlockElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonDelimitedBlockElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements1(stack["elements"])
}

func (c *current) onBlockAttributes16() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes16()
}

func (c *current) onBlockAttributes23() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes23()
}

func (c *current) onBlockAttributes19(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["ref"])
}

func (c *current) onBlockAttributes29() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonBlockAttributes29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes29()
}

func (c *current) onBlockAttributes36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes36()
}

func (c *current) onBlockAttributes48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes48()
}

func (c *current) onBlockAttributes50() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes50()
}

func (c *current) onBlockAttributes43(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes43(stack["start"])
}

func (c *current) onBlockAttributes32(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonBlockAttributes32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes32(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes58() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes58()
}

func (c *current) onBlockAttributes70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes70()
}

func (c *current) onBlockAttributes72() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes72()
}

func (c *current) onBlockAttributes65(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes65(stack["start"])
}

func (c *current) onBlockAttributes54(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonBlockAttributes54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes54(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes80()
}

func (c *current) onBlockAttributes76(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonBlockAttributes76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes76(stack["name"])
}

func (c *current) onBlockAttributes27(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonBlockAttributes27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes27(stack["element"])
}

func (c *current) onBlockAttributes86() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes86()
}

func (c *current) onBlockAttributes12(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonBlockAttributes12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes12(stack["elements"])
}

func (c *current) onBlockAttributes8(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonBlockAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes8(stack["id"])
}

func (c *current) onBlockAttributes90() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes90()
}

func (c *current) onBlockAttributes93() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes93()
}

func (c *current) onBlockAttributes5(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes5(stack["anchor"])
}

func (c *current) onBlockAttributes114() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes114()
}

func (c *current) onBlockAttributes121() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes121()
}

func (c *current) onBlockAttributes117(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonBlockAttributes117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes117(stack["ref"])
}

func (c *current) onBlockAttributes127() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonBlockAttributes127() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes127()
}

func (c *current) onBlockAttributes134() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes134()
}

func (c *current) onBlockAttributes146() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes146()
}

func (c *current) onBlockAttributes148() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes148()
}

func (c *current) onBlockAttributes141(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes141(stack["start"])
}

func (c *current) onBlockAttributes130(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonBlockAttributes130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes130(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes156() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes156()
}

func (c *current) onBlockAttributes168() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes168()
}

func (c *current) onBlockAttributes170() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes170()
}

func (c *current) onBlockAttributes163(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes163(stack["start"])
}

func (c *current) onBlockAttributes152(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonBlockAttributes152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes152(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes178() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes178()
}

func (c *current) onBlockAttributes174(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonBlockAttributes174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes174(stack["name"])
}

func (c *current) onBlockAttributes125(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonBlockAttributes125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes125(stack["element"])
}

func (c *current) onBlockAttributes184() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes184()
}

func (c *current) onBlockAttributes107(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonBlockAttributes107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes107(stack["elements"])
}

func (c *current) onBlockAttributes103(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonBlockAttributes103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes103(stack["title"])
}

func (c *current) onBlockAttributes187() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes187()
}

func (c *current) onBlockAttributes190() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes190()
}

func (c *current) onBlockAttributes100(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes100(stack["title"])
}

func (c *current) onBlockAttributes202() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes202()
}

func (c *current) onBlockAttributes205() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes205()
}

func (c *current) onBlockAttributes197(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes197(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	// c.unsetCurrentSubstitution()
	return types.MergeAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes6(attribute interface{}) (interface{}, error) {
	return attribute, nil

}

func (p *parser) callonInlineAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes6(stack["attribute"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onLongHandAttributes25() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes25()
}

func (c *current) onLongHandAttributes28() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes28()
}

func (c *current) onLongHandAttributes32() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes32() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes32()
}

func (c *current) onLongHandAttributes39() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes39()
}

func (c *current) onLongHandAttributes51() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes51()
}

func (c *current) onLongHandAttributes53() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes53()
}

func (c *current) onLongHandAttributes46(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes46(stack["start"])
}

func (c *current) onLongHandAttributes35(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes35(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes61()
}

func (c *current) onLongHandAttributes73() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes73()
}

func (c *current) onLongHandAttributes75() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes75()
}

func (c *current) onLongHandAttributes68(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes68(stack["start"])
}

func (c *current) onLongHandAttributes57(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes57(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes83()
}

func (c *current) onLongHandAttributes79(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes79(stack["name"])
}

func (c *current) onLongHandAttributes30(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes30(stack["element"])
}

func (c *current) onLongHandAttributes89() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonLongHandAttributes89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes89()
}

func (c *current) onLongHandAttributes93() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes93()
}

func (c *current) onLongHandAttributes95() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes95()
}

func (c *current) onLongHandAttributes21(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes21(stack["elements"])
}

func (c *current) onLongHandAttributes15(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes15(stack["content"])
}

func (c *current) onLongHandAttributes109() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes109()
}

func (c *current) onLongHandAttributes112() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes112()
}

func (c *current) onLongHandAttributes116() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes116() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes116()
}

func (c *current) onLongHandAttributes123() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes123()
}

func (c *current) onLongHandAttributes135() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes135()
}

func (c *current) onLongHandAttributes137() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes137()
}

func (c *current) onLongHandAttributes130(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes130(stack["start"])
}

func (c *current) onLongHandAttributes119(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes119(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes145() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes145()
}

func (c *current) onLongHandAttributes157() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes157()
}

func (c *current) onLongHandAttributes159() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes159()
}

func (c *current) onLongHandAttributes152(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes152(stack["start"])
}

func (c *current) onLongHandAttributes141(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes141(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes167() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes167()
}

func (c *current) onLongHandAttributes163(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes163(stack["name"])
}

func (c *current) onLongHandAttributes114(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes114(stack["element"])
}

func (c *current) onLongHandAttributes173() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonLongHandAttributes173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes173()
}

func (c *current) onLongHandAttributes178() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes178()
}

func (c *current) onLongHandAttributes180() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes180()
}

func (c *current) onLongHandAttributes105(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes105(stack["elements"])
}

func (c *current) onLongHandAttributes188() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes188()
}

func (c *current) onLongHandAttributes99(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes99(stack["content"])
}

func (c *current) onLongHandAttributes196() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes196()
}

func (c *current) onLongHandAttributes203() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLongHandAttributes203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes203()
}

func (c *current) onLongHandAttributes199(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonLongHandAttributes199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes199(stack["ref"])
}

func (c *current) onLongHandAttributes209() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes209() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes209()
}

func (c *current) onLongHandAttributes216() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes216()
}

func (c *current) onLongHandAttributes228() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes228()
}

func (c *current) onLongHandAttributes230() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes230()
}

func (c *current) onLongHandAttributes223(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes223(stack["start"])
}

func (c *current) onLongHandAttributes212(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes212(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes238() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes238()
}

func (c *current) onLongHandAttributes250() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes250() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes250()
}

func (c *current) onLongHandAttributes252() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes252()
}

func (c *current) onLongHandAttributes245(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes245() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes245(stack["start"])
}

func (c *current) onLongHandAttributes234(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes234(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes260() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes260()
}

func (c *current) onLongHandAttributes256(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes256(stack["name"])
}

func (c *current) onLongHandAttributes207(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes207(stack["element"])
}

func (c *current) onLongHandAttributes266() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes266()
}

func (c *current) onLongHandAttributes272() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes272() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes272()
}

func (c *current) onLongHandAttributes191(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonLongHandAttributes191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes191(stack["elements"])
}

func (c *current) onLongHandAttributes12(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonLongHandAttributes12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes12(stack["value"])
}

func (c *current) onLongHandAttributes300() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes300()
}

func (c *current) onLongHandAttributes303() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes303() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes303()
}

func (c *current) onLongHandAttributes307() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes307() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes307()
}

func (c *current) onLongHandAttributes314() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes314()
}

func (c *current) onLongHandAttributes326() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes326() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes326()
}

func (c *current) onLongHandAttributes328() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes328()
}

func (c *current) onLongHandAttributes321(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes321(stack["start"])
}

func (c *current) onLongHandAttributes310(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes310(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes336() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes336() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes336()
}

func (c *current) onLongHandAttributes348() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes348()
}

func (c *current) onLongHandAttributes350() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes350() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes350()
}

func (c *current) onLongHandAttributes343(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes343(stack["start"])
}

func (c *current) onLongHandAttributes332(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes332() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes332(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes358() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes358() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes358()
}

func (c *current) onLongHandAttributes354(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes354() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes354(stack["name"])
}

func (c *current) onLongHandAttributes305(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes305() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes305(stack["element"])
}

func (c *current) onLongHandAttributes364() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonLongHandAttributes364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes364()
}

func (c *current) onLongHandAttributes368() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes368() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes368()
}

func (c *current) onLongHandAttributes370() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes370()
}

func (c *current) onLongHandAttributes296(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes296(stack["elements"])
}

func (c *current) onLongHandAttributes290(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes290(stack["content"])
}

func (c *current) onLongHandAttributes384() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes384() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes384()
}

func (c *current) onLongHandAttributes387() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes387() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes387()
}

func (c *current) onLongHandAttributes391() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes391() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes391()
}

func (c *current) onLongHandAttributes398() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes398() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes398()
}

func (c *current) onLongHandAttributes410() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes410() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes410()
}

func (c *current) onLongHandAttributes412() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes412() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes412()
}

func (c *current) onLongHandAttributes405(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes405() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes405(stack["start"])
}

func (c *current) onLongHandAttributes394(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes394(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes420() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes420() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes420()
}

func (c *current) onLongHandAttributes432() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes432() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes432()
}

func (c *current) onLongHandAttributes434() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes434() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes434()
}

func (c *current) onLongHandAttributes427(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes427() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes427(stack["start"])
}

func (c *current) onLongHandAttributes416(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes416() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes416(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes442() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes442() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes442()
}

func (c *current) onLongHandAttributes438(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes438() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes438(stack["name"])
}

func (c *current) onLongHandAttributes389(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes389() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes389(stack["element"])
}

func (c *current) onLongHandAttributes448() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonLongHandAttributes448() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes448()
}

func (c *current) onLongHandAttributes453() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes453() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes453()
}

func (c *current) onLongHandAttributes455() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes455() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes455()
}

func (c *current) onLongHandAttributes380(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes380() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes380(stack["elements"])
}

func (c *current) onLongHandAttributes463() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes463() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes463()
}

func (c *current) onLongHandAttributes374(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes374(stack["content"])
}

func (c *current) onLongHandAttributes471() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes471() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes471()
}

func (c *current) onLongHandAttributes478() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLongHandAttributes478() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes478()
}

func (c *current) onLongHandAttributes474(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonLongHandAttributes474() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes474(stack["ref"])
}

func (c *current) onLongHandAttributes484() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes484() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes484()
}

func (c *current) onLongHandAttributes491() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes491() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes491()
}

func (c *current) onLongHandAttributes503() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes503() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes503()
}

func (c *current) onLongHandAttributes505() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes505() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes505()
}

func (c *current) onLongHandAttributes498(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes498() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes498(stack["start"])
}

func (c *current) onLongHandAttributes487(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes487() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes487(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes513() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes513() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes513()
}

func (c *current) onLongHandAttributes525() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes525() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes525()
}

func (c *current) onLongHandAttributes527() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes527() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes527()
}

func (c *current) onLongHandAttributes520(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes520() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes520(stack["start"])
}

func (c *current) onLongHandAttributes509(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes509() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes509(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes535() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes535() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes535()
}

func (c *current) onLongHandAttributes531(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes531() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes531(stack["name"])
}

func (c *current) onLongHandAttributes482(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes482() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes482(stack["element"])
}

func (c *current) onLongHandAttributes541() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes541() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes541()
}

func (c *current) onLongHandAttributes547() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes547() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes547()
}

func (c *current) onLongHandAttributes466(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonLongHandAttributes466() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes466(stack["elements"])
}

func (c *current) onLongHandAttributes285(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonLongHandAttributes285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes285(stack["id"])
}

func (c *current) onLongHandAttributes565() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes565() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes565()
}

func (c *current) onLongHandAttributes568() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes568() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes568()
}

func (c *current) onLongHandAttributes572() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes572() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes572()
}

func (c *current) onLongHandAttributes579() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes579() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes579()
}

func (c *current) onLongHandAttributes591() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes591() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes591()
}

func (c *current) onLongHandAttributes593() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes593() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes593()
}

func (c *current) onLongHandAttributes586(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes586() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes586(stack["start"])
}

func (c *current) onLongHandAttributes575(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes575() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes575(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes601() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes601() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes601()
}

func (c *current) onLongHandAttributes613() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes613() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes613()
}

func (c *current) onLongHandAttributes615() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes615() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes615()
}

func (c *current) onLongHandAttributes608(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes608() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes608(stack["start"])
}

func (c *current) onLongHandAttributes597(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes597() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes597(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes623() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes623() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes623()
}

func (c *current) onLongHandAttributes619(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes619() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes619(stack["name"])
}

func (c *current) onLongHandAttributes570(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes570() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes570(stack["element"])
}

func (c *current) onLongHandAttributes629() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonLongHandAttributes629() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes629()
}

func (c *current) onLongHandAttributes633() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes633() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes633()
}

func (c *current) onLongHandAttributes635() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes635() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes635()
}

func (c *current) onLongHandAttributes561(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes561() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes561(stack["elements"])
}

func (c *current) onLongHandAttributes555(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes555() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes555(stack["content"])
}

func (c *current) onLongHandAttributes649() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes649() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes649()
}

func (c *current) onLongHandAttributes652() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes652() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes652()
}

func (c *current) onLongHandAttributes656() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes656() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes656()
}

func (c *current) onLongHandAttributes663() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes663() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes663()
}

func (c *current) onLongHandAttributes675() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes675() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes675()
}

func (c *current) onLongHandAttributes677() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes677() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes677()
}

func (c *current) onLongHandAttributes670(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes670() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes670(stack["start"])
}

func (c *current) onLongHandAttributes659(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes659() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes659(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes685() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes685() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes685()
}

func (c *current) onLongHandAttributes697() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes697() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes697()
}

func (c *current) onLongHandAttributes699() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes699() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes699()
}

func (c *current) onLongHandAttributes692(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes692() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes692(stack["start"])
}

func (c *current) onLongHandAttributes681(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes681() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes681(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes707() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes707() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes707()
}

func (c *current) onLongHandAttributes703(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes703() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes703(stack["name"])
}

func (c *current) onLongHandAttributes654(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes654() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes654(stack["element"])
}

func (c *current) onLongHandAttributes713() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonLongHandAttributes713() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes713()
}

func (c *current) onLongHandAttributes718() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes718() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes718()
}

func (c *current) onLongHandAttributes720() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes720() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes720()
}

func (c *current) onLongHandAttributes645(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes645() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes645(stack["elements"])
}

func (c *current) onLongHandAttributes728() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes728() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes728()
}

func (c *current) onLongHandAttributes639(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes639() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes639(stack["content"])
}

func (c *current) onLongHandAttributes736() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes736() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes736()
}

func (c *current) onLongHandAttributes743() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLongHandAttributes743() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes743()
}

func (c *current) onLongHandAttributes739(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonLongHandAttributes739() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes739(stack["ref"])
}

func (c *current) onLongHandAttributes749() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes749() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes749()
}

func (c *current) onLongHandAttributes756() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes756() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes756()
}

func (c *current) onLongHandAttributes768() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes768() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes768()
}

func (c *current) onLongHandAttributes770() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes770() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes770()
}

func (c *current) onLongHandAttributes763(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes763() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes763(stack["start"])
}

func (c *current) onLongHandAttributes752(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes752() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes752(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes778() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes778() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes778()
}

func (c *current) onLongHandAttributes790() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes790() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes790()
}

func (c *current) onLongHandAttributes792() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes792() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes792()
}

func (c *current) onLongHandAttributes785(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes785() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes785(stack["start"])
}

func (c *current) onLongHandAttributes774(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes774() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes774(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes800() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes800() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes800()
}

func (c *current) onLongHandAttributes796(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes796() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes796(stack["name"])
}

func (c *current) onLongHandAttributes747(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes747() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes747(stack["element"])
}

func (c *current) onLongHandAttributes806() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes806() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes806()
}

func (c *current) onLongHandAttributes812() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes812() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes812()
}

func (c *current) onLongHandAttributes731(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonLongHandAttributes731() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes731(stack["elements"])
}

func (c *current) onLongHandAttributes550(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonLongHandAttributes550() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes550(stack["option"])
}

func (c *current) onLongHandAttributes830() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes830() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes830()
}

func (c *current) onLongHandAttributes833() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes833() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes833()
}

func (c *current) onLongHandAttributes837() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes837() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes837()
}

func (c *current) onLongHandAttributes844() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes844() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes844()
}

func (c *current) onLongHandAttributes856() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes856() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes856()
}

func (c *current) onLongHandAttributes858() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes858() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes858()
}

func (c *current) onLongHandAttributes851(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes851() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes851(stack["start"])
}

func (c *current) onLongHandAttributes840(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes840() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes840(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes866() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes866() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes866()
}

func (c *current) onLongHandAttributes878() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes878() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes878()
}

func (c *current) onLongHandAttributes880() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes880() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes880()
}

func (c *current) onLongHandAttributes873(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes873() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes873(stack["start"])
}

func (c *current) onLongHandAttributes862(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes862() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes862(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes888() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes888() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes888()
}

func (c *current) onLongHandAttributes884(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes884() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes884(stack["name"])
}

func (c *current) onLongHandAttributes835(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes835() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes835(stack["element"])
}

func (c *current) onLongHandAttributes894() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonLongHandAttributes894() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes894()
}

func (c *current) onLongHandAttributes898() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes898() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes898()
}

func (c *current) onLongHandAttributes900() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes900() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes900()
}

func (c *current) onLongHandAttributes826(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes826() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes826(stack["elements"])
}

func (c *current) onLongHandAttributes820(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes820() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes820(stack["content"])
}

func (c *current) onLongHandAttributes914() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes914() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes914()
}

func (c *current) onLongHandAttributes917() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes917() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes917()
}

func (c *current) onLongHandAttributes921() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes921() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes921()
}

func (c *current) onLongHandAttributes928() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes928() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes928()
}

func (c *current) onLongHandAttributes940() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes940() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes940()
}

func (c *current) onLongHandAttributes942() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes942() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes942()
}

func (c *current) onLongHandAttributes935(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes935() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes935(stack["start"])
}

func (c *current) onLongHandAttributes924(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes924() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes924(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes950() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes950() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes950()
}

func (c *current) onLongHandAttributes962() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes962() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes962()
}

func (c *current) onLongHandAttributes964() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes964() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes964()
}

func (c *current) onLongHandAttributes957(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes957() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes957(stack["start"])
}

func (c *current) onLongHandAttributes946(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes946() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes946(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes972() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes972() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes972()
}

func (c *current) onLongHandAttributes968(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes968() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes968(stack["name"])
}

func (c *current) onLongHandAttributes919(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes919() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes919(stack["element"])
}

func (c *current) onLongHandAttributes978() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonLongHandAttributes978() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes978()
}

func (c *current) onLongHandAttributes983() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes983() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes983()
}

func (c *current) onLongHandAttributes985() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes985() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes985()
}

func (c *current) onLongHandAttributes910(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes910() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes910(stack["elements"])
}

func (c *current) onLongHandAttributes993() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes993() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes993()
}

func (c *current) onLongHandAttributes904(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes904() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes904(stack["content"])
}

func (c *current) onLongHandAttributes1001() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes1001() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1001()
}

func (c *current) onLongHandAttributes1008() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLongHandAttributes1008() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1008()
}

func (c *current) onLongHandAttributes1004(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonLongHandAttributes1004() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1004(stack["ref"])
}

func (c *current) onLongHandAttributes1014() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes1014() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1014()
}

func (c *current) onLongHandAttributes1021() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1021() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1021()
}

func (c *current) onLongHandAttributes1033() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1033() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1033()
}

func (c *current) onLongHandAttributes1035() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes1035() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1035()
}

func (c *current) onLongHandAttributes1028(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes1028() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1028(stack["start"])
}

func (c *current) onLongHandAttributes1017(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes1017() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1017(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes1043() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1043() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1043()
}

func (c *current) onLongHandAttributes1055() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1055() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1055()
}

func (c *current) onLongHandAttributes1057() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes1057() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1057()
}

func (c *current) onLongHandAttributes1050(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes1050() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1050(stack["start"])
}

func (c *current) onLongHandAttributes1039(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes1039() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1039(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes1065() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1065() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1065()
}

func (c *current) onLongHandAttributes1061(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes1061() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1061(stack["name"])
}

func (c *current) onLongHandAttributes1012(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes1012() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1012(stack["element"])
}

func (c *current) onLongHandAttributes1071() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes1071() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1071()
}

func (c *current) onLongHandAttributes1077() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1077() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1077()
}

func (c *current) onLongHandAttributes996(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonLongHandAttributes996() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes996(stack["elements"])
}

func (c *current) onLongHandAttributes815(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonLongHandAttributes815() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes815(stack["role"])
}

func (c *current) onLongHandAttributes277(extra interface{}) (interface{}, error) {
	return extra, nil

}

func (p *parser) callonLongHandAttributes277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes277(stack["extra"])
}

func (c *current) onLongHandAttributes1084() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1084() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1084()
}

func (c *current) onLongHandAttributes1086(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonLongHandAttributes1086() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1086(stack["main"], stack["extras"])
}

func (c *current) onLongHandAttributes8(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	if len(extras.([]interface{})) > 0 {
		attrs = append(attrs, extras.([]interface{})...)
	}
	return attrs, nil

}

func (p *parser) callonLongHandAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes8(stack["main"], stack["extras"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	if len(otherAttributes.([]interface{})) > 0 {
		attributes = append(attributes, otherAttributes.([]interface{})...)
	}
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onPositionalAttribute11() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute11()
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	// TODO: see if we can just use `((",")? / &"]")` instead (ie, no need to check for Space*)
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute20() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute20()
}

func (c *current) onPositionalAttribute26() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute26()
}

func (c *current) onPositionalAttribute30(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in such a case, `c.text` contains the char sequence of the previous
	// rule that matched)
	return !types.AllNilEntries(value.([]interface{})), nil

}

func (p *parser) callonPositionalAttribute30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute30(stack["value"])
}

func (c *current) onPositionalAttribute15(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute15(stack["value"])
}

func (c *current) onNamedAttribute7() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute7()
}

func (c *current) onNamedAttribute12() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute12()
}

func (c *current) onNamedAttribute4() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonNamedAttribute4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute4()
}

func (c *current) onNamedAttribute16() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute16()
}

func (c *current) onNamedAttribute24() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute24()
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onAttributeRawValue15() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue15()
}

func (c *current) onAttributeRawValue18() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue18()
}

func (c *current) onAttributeRawValue22() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributeRawValue22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue22()
}

func (c *current) onAttributeRawValue29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue29()
}

func (c *current) onAttributeRawValue41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue41()
}

func (c *current) onAttributeRawValue43() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeRawValue43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue43()
}

func (c *current) onAttributeRawValue36(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeRawValue36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue36(stack["start"])
}

func (c *current) onAttributeRawValue25(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonAttributeRawValue25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue25(stack["name"], stack["start"])
}

func (c *current) onAttributeRawValue51() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue51()
}

func (c *current) onAttributeRawValue63() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue63()
}

func (c *current) onAttributeRawValue65() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeRawValue65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue65()
}

func (c *current) onAttributeRawValue58(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeRawValue58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue58(stack["start"])
}

func (c *current) onAttributeRawValue47(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonAttributeRawValue47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue47(stack["name"], stack["start"])
}

func (c *current) onAttributeRawValue73() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue73()
}

func (c *current) onAttributeRawValue69(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeRawValue69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue69(stack["name"])
}

func (c *current) onAttributeRawValue20(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributeRawValue20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue20(stack["element"])
}

func (c *current) onAttributeRawValue79() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonAttributeRawValue79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue79()
}

func (c *current) onAttributeRawValue83() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonAttributeRawValue83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue83()
}

func (c *current) onAttributeRawValue85() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeRawValue85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue85()
}

func (c *current) onAttributeRawValue11(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonAttributeRawValue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue11(stack["elements"])
}

func (c *current) onAttributeRawValue5(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonAttributeRawValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue5(stack["content"])
}

func (c *current) onAttributeRawValue99() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue99()
}

func (c *current) onAttributeRawValue102() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue102()
}

func (c *current) onAttributeRawValue106() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributeRawValue106() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue106()
}

func (c *current) onAttributeRawValue113() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue113()
}

func (c *current) onAttributeRawValue125() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue125()
}

func (c *current) onAttributeRawValue127() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeRawValue127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue127()
}

func (c *current) onAttributeRawValue120(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeRawValue120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue120(stack["start"])
}

func (c *current) onAttributeRawValue109(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonAttributeRawValue109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue109(stack["name"], stack["start"])
}

func (c *current) onAttributeRawValue135() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue135()
}

func (c *current) onAttributeRawValue147() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue147()
}

func (c *current) onAttributeRawValue149() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeRawValue149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue149()
}

func (c *current) onAttributeRawValue142(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeRawValue142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue142(stack["start"])
}

func (c *current) onAttributeRawValue131(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonAttributeRawValue131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue131(stack["name"], stack["start"])
}

func (c *current) onAttributeRawValue157() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue157()
}

func (c *current) onAttributeRawValue153(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeRawValue153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue153(stack["name"])
}

func (c *current) onAttributeRawValue104(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributeRawValue104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue104(stack["element"])
}

func (c *current) onAttributeRawValue163() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonAttributeRawValue163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue163()
}

func (c *current) onAttributeRawValue168() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonAttributeRawValue168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue168()
}

func (c *current) onAttributeRawValue170() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeRawValue170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue170()
}

func (c *current) onAttributeRawValue95(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonAttributeRawValue95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue95(stack["elements"])
}

func (c *current) onAttributeRawValue178() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue178()
}

func (c *current) onAttributeRawValue89(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonAttributeRawValue89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue89(stack["content"])
}

func (c *current) onAttributeRawValue186() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue186()
}

func (c *current) onAttributeRawValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeRawValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue1(stack["value"])
}

func (c *current) onUnquotedAttributeRawValue4() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue4()
}

func (c *current) onUnquotedAttributeRawValue17() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUnquotedAttributeRawValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue17()
}

func (c *current) onUnquotedAttributeRawValue13(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonUnquotedAttributeRawValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue13(stack["ref"])
}

func (c *current) onUnquotedAttributeRawValue23() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonUnquotedAttributeRawValue23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue23()
}

func (c *current) onUnquotedAttributeRawValue30() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue30()
}

func (c *current) onUnquotedAttributeRawValue42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue42()
}

func (c *current) onUnquotedAttributeRawValue44() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonUnquotedAttributeRawValue44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue44()
}

func (c *current) onUnquotedAttributeRawValue37(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonUnquotedAttributeRawValue37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue37(stack["start"])
}

func (c *current) onUnquotedAttributeRawValue26(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonUnquotedAttributeRawValue26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue26(stack["name"], stack["start"])
}

func (c *current) onUnquotedAttributeRawValue52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue52()
}

func (c *current) onUnquotedAttributeRawValue64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue64()
}

func (c *current) onUnquotedAttributeRawValue66() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonUnquotedAttributeRawValue66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue66()
}

func (c *current) onUnquotedAttributeRawValue59(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonUnquotedAttributeRawValue59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue59(stack["start"])
}

func (c *current) onUnquotedAttributeRawValue48(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonUnquotedAttributeRawValue48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue48(stack["name"], stack["start"])
}

func (c *current) onUnquotedAttributeRawValue74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue74()
}

func (c *current) onUnquotedAttributeRawValue70(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonUnquotedAttributeRawValue70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue70(stack["name"])
}

func (c *current) onUnquotedAttributeRawValue21(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonUnquotedAttributeRawValue21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue21(stack["element"])
}

func (c *current) onUnquotedAttributeRawValue80() (interface{}, error) {
	// not within brackets and stop on space
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue80()
}

func (c *current) onUnquotedAttributeRawValue83() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue83()
}

func (c *current) onUnquotedAttributeRawValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeRawValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue1(stack["elements"])
}

func (c *current) onCrossReference6() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonCrossReference6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference6()
}

func (c *current) onCrossReference10() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonCrossReference10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference10()
}

func (c *current) onCrossReference16() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReference16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference16()
}

func (c *current) onCrossReference23() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonCrossReference23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference23()
}

func (c *current) onCrossReference30() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference30()
}

func (c *current) onCrossReference42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference42()
}

func (c *current) onCrossReference44() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCrossReference44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference44()
}

func (c *current) onCrossReference37(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCrossReference37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference37(stack["start"])
}

func (c *current) onCrossReference26(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCrossReference26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference26(stack["name"], stack["start"])
}

func (c *current) onCrossReference52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference52()
}

func (c *current) onCrossReference64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference64()
}

func (c *current) onCrossReference66() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCrossReference66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference66()
}

func (c *current) onCrossReference59(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCrossReference59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference59(stack["start"])
}

func (c *current) onCrossReference48(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCrossReference48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference48(stack["name"], stack["start"])
}

func (c *current) onCrossReference74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference74()
}

func (c *current) onCrossReference70(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonCrossReference70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference70(stack["name"])
}

func (c *current) onCrossReference21(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonCrossReference21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference21(stack["element"])
}

func (c *current) onCrossReference80() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReference80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference80()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference87() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonCrossReference87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference87()
}

func (c *current) onCrossReference83(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonCrossReference83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference83(stack["id"])
}

func (c *current) onExternalCrossReference13() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference13()
}

func (c *current) onExternalCrossReference18() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonExternalCrossReference18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference18()
}

func (c *current) onExternalCrossReference25() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference25()
}

func (c *current) onExternalCrossReference37() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference37()
}

func (c *current) onExternalCrossReference39() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference39()
}

func (c *current) onExternalCrossReference32(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference32(stack["start"])
}

func (c *current) onExternalCrossReference21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonExternalCrossReference21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference21(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference47()
}

func (c *current) onExternalCrossReference59() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference59()
}

func (c *current) onExternalCrossReference61() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference61()
}

func (c *current) onExternalCrossReference54(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference54(stack["start"])
}

func (c *current) onExternalCrossReference43(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonExternalCrossReference43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference43(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference69()
}

func (c *current) onExternalCrossReference65(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonExternalCrossReference65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference65(stack["name"])
}

func (c *current) onExternalCrossReference16(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalCrossReference16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference16(stack["element"])
}

func (c *current) onExternalCrossReference77() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonExternalCrossReference77() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference77()
}

func (c *current) onExternalCrossReference86() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference86()
}

func (c *current) onExternalCrossReference90() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference90()
}

func (c *current) onExternalCrossReference96() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference96()
}

func (c *current) onExternalCrossReference103() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonExternalCrossReference103() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference103()
}

func (c *current) onExternalCrossReference110() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference110()
}

func (c *current) onExternalCrossReference122() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference122()
}

func (c *current) onExternalCrossReference124() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference124()
}

func (c *current) onExternalCrossReference117(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference117(stack["start"])
}

func (c *current) onExternalCrossReference106(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonExternalCrossReference106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference106(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference132() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference132()
}

func (c *current) onExternalCrossReference144() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference144()
}

func (c *current) onExternalCrossReference146() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference146()
}

func (c *current) onExternalCrossReference139(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference139(stack["start"])
}

func (c *current) onExternalCrossReference128(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonExternalCrossReference128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference128(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference154() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference154()
}

func (c *current) onExternalCrossReference150(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonExternalCrossReference150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference150(stack["name"])
}

func (c *current) onExternalCrossReference101(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalCrossReference101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference101(stack["element"])
}

func (c *current) onExternalCrossReference160() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference160()
}

func (c *current) onExternalCrossReference82(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonExternalCrossReference82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference82(stack["id"], stack["label"])
}

func (c *current) onExternalCrossReference167() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference167()
}

func (c *current) onExternalCrossReference163(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonExternalCrossReference163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference163(stack["id"])
}

func (c *current) onExternalCrossReference80() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference80()
}

func (c *current) onExternalCrossReference171() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonExternalCrossReference171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference171()
}

func (c *current) onExternalCrossReference75(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalCrossReference75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference75(stack["element"])
}

func (c *current) onExternalCrossReference173() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference173()
}

func (c *current) onExternalCrossReference9(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonExternalCrossReference9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference9(stack["elements"])
}

func (c *current) onExternalCrossReference179() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalCrossReference179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference179()
}

func (c *current) onExternalCrossReference175(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonExternalCrossReference175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference175(stack["ref"])
}

func (c *current) onExternalCrossReference5(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonExternalCrossReference5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference5(stack["path"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onDelimitedBlock4() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Comment), nil

}

func (p *parser) callonDelimitedBlock4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock4()
}

func (c *current) onDelimitedBlock7() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock7()
}

func (c *current) onDelimitedBlock10() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock10()
}

func (c *current) onDelimitedBlock17() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Comment)
	return true, nil

}

func (p *parser) callonDelimitedBlock17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock17()
}

func (c *current) onDelimitedBlock27() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock27()
}

func (c *current) onDelimitedBlock30() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock30()
}

func (c *current) onDelimitedBlock46() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock46()
}

func (c *current) onDelimitedBlock50() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock50()
}

func (c *current) onDelimitedBlock40(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDelimitedBlock40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock40(stack["content"])
}

func (c *current) onDelimitedBlock20(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDelimitedBlock20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock20(stack["line"])
}

func (c *current) onDelimitedBlock62() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock62()
}

func (c *current) onDelimitedBlock65() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock65()
}

func (c *current) onDelimitedBlock2(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDelimitedBlock2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock2(stack["content"])
}

func (c *current) onDelimitedBlock90() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock90()
}

func (c *current) onDelimitedBlock93() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock93()
}

func (c *current) onDelimitedBlock84() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDelimitedBlock84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock84()
}

func (c *current) onDelimitedBlock102() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock102()
}

func (c *current) onDelimitedBlock106() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock106()
}

func (c *current) onDelimitedBlock81(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDelimitedBlock81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock81(stack["content"])
}

func (c *current) onDelimitedBlock125() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock125()
}

func (c *current) onDelimitedBlock128() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock128()
}

func (c *current) onDelimitedBlock119() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDelimitedBlock119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock119()
}

func (c *current) onDelimitedBlock137() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock137()
}

func (c *current) onDelimitedBlock141() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock141()
}

func (c *current) onDelimitedBlock116(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDelimitedBlock116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock116(stack["content"])
}

func (c *current) onDelimitedBlock151() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock151()
}

func (c *current) onDelimitedBlock154(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDelimitedBlock154() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock154(stack["content"])
}

func (c *current) onDelimitedBlock156() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock156()
}

func (c *current) onDelimitedBlock148(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDelimitedBlock148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock148(stack["content"])
}

func (c *current) onDelimitedBlock78(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonDelimitedBlock78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock78(stack["firstLine"], stack["otherLines"])
}

func (c *current) onExampleBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Example), nil

}

func (p *parser) callonExampleBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock3()
}

func (c *current) onExampleBlock6() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExampleBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock6()
}

func (c *current) onExampleBlock9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExampleBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock9()
}

func (c *current) onExampleBlock16() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Example)
	return true, nil

}

func (p *parser) callonExampleBlock16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock16()
}

func (c *current) onExampleBlock23() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExampleBlock23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock23()
}

func (c *current) onExampleBlock26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExampleBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock26()
}

func (c *current) onExampleBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Example, content.([]interface{}))

}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["content"])
}

func (c *current) onExampleBlockContent9() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExampleBlockContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockContent9()
}

func (c *current) onExampleBlockContent12() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExampleBlockContent12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockContent12()
}

func (c *current) onExampleBlockContent30() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonExampleBlockContent30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockContent30()
}

func (c *current) onExampleBlockContent34() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExampleBlockContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockContent34()
}

func (c *current) onExampleBlockContent24(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonExampleBlockContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockContent24(stack["content"])
}

func (c *current) onExampleBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonExampleBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockContent2(stack["line"])
}

func (c *current) onFencedBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Fenced), nil

}

func (p *parser) callonFencedBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock3()
}

func (c *current) onFencedBlock6() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonFencedBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock6()
}

func (c *current) onFencedBlock9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFencedBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock9()
}

func (c *current) onFencedBlock16() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Fenced)
	return true, nil

}

func (p *parser) callonFencedBlock16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock16()
}

func (c *current) onFencedBlock23() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonFencedBlock23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock23()
}

func (c *current) onFencedBlock26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFencedBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock26()
}

func (c *current) onFencedBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}))

}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["content"])
}

func (c *current) onFencedBlockContent9() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonFencedBlockContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockContent9()
}

func (c *current) onFencedBlockContent12() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFencedBlockContent12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockContent12()
}

func (c *current) onFencedBlockContent30() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonFencedBlockContent30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockContent30()
}

func (c *current) onFencedBlockContent34() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFencedBlockContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockContent34()
}

func (c *current) onFencedBlockContent24(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonFencedBlockContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockContent24(stack["content"])
}

func (c *current) onFencedBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonFencedBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockContent2(stack["line"])
}

func (c *current) onListingBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Listing), nil

}

func (p *parser) callonListingBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock3()
}

func (c *current) onListingBlock6() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListingBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock6()
}

func (c *current) onListingBlock9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListingBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock9()
}

func (c *current) onListingBlock16() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Listing)
	return true, nil

}

func (p *parser) callonListingBlock16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock16()
}

func (c *current) onListingBlock23() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListingBlock23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock23()
}

func (c *current) onListingBlock26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListingBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock26()
}

func (c *current) onListingBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}))

}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["content"])
}

func (c *current) onListingBlockContent9() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListingBlockContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockContent9()
}

func (c *current) onListingBlockContent12() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListingBlockContent12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockContent12()
}

func (c *current) onListingBlockContent30() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListingBlockContent30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockContent30()
}

func (c *current) onListingBlockContent34() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListingBlockContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockContent34()
}

func (c *current) onListingBlockContent24(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListingBlockContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockContent24(stack["content"])
}

func (c *current) onListingBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListingBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockContent2(stack["line"])
}

func (c *current) onLiteralBlock5() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLiteralBlock5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock5()
}

func (c *current) onLiteralBlock8() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonLiteralBlock8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock8()
}

func (c *current) onLiteralBlock15() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Literal), nil

}

func (p *parser) callonLiteralBlock15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock15()
}

func (c *current) onLiteralBlock18(content interface{}) (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Literal)
	return true, nil

}

func (p *parser) callonLiteralBlock18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock18(stack["content"])
}

func (c *current) onLiteralBlock24() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLiteralBlock24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock24()
}

func (c *current) onLiteralBlock27() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonLiteralBlock27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock27()
}

func (c *current) onLiteralBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Literal, content.([]interface{}))

}

func (p *parser) callonLiteralBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock1(stack["content"])
}

func (c *current) onLiteralBlockContent9() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLiteralBlockContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockContent9()
}

func (c *current) onLiteralBlockContent12() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonLiteralBlockContent12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockContent12()
}

func (c *current) onLiteralBlockContent30() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonLiteralBlockContent30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockContent30()
}

func (c *current) onLiteralBlockContent34() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonLiteralBlockContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockContent34()
}

func (c *current) onLiteralBlockContent24(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonLiteralBlockContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockContent24(stack["content"])
}

func (c *current) onLiteralBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonLiteralBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockContent2(stack["line"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonMarkdownQuoteAttribution9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution9()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil

}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onPassthroughBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Passthrough), nil

}

func (p *parser) callonPassthroughBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock3()
}

func (c *current) onPassthroughBlock6() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonPassthroughBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock6()
}

func (c *current) onPassthroughBlock9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonPassthroughBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock9()
}

func (c *current) onPassthroughBlock16() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Passthrough)
	return true, nil

}

func (p *parser) callonPassthroughBlock16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock16()
}

func (c *current) onPassthroughBlock24() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonPassthroughBlock24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock24()
}

func (c *current) onPassthroughBlock27() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonPassthroughBlock27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock27()
}

func (c *current) onPassthroughBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}))

}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["content"])
}

func (c *current) onPassthroughBlockContent9() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonPassthroughBlockContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockContent9()
}

func (c *current) onPassthroughBlockContent12() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonPassthroughBlockContent12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockContent12()
}

func (c *current) onPassthroughBlockContent30() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonPassthroughBlockContent30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockContent30()
}

func (c *current) onPassthroughBlockContent34() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonPassthroughBlockContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockContent34()
}

func (c *current) onPassthroughBlockContent24(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonPassthroughBlockContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockContent24(stack["content"])
}

func (c *current) onPassthroughBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonPassthroughBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockContent2(stack["line"])
}

func (c *current) onQuoteBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Quote), nil

}

func (p *parser) callonQuoteBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock3()
}

func (c *current) onQuoteBlock6() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonQuoteBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock6()
}

func (c *current) onQuoteBlock9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonQuoteBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock9()
}

func (c *current) onQuoteBlock16() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Quote)
	return true, nil

}

func (p *parser) callonQuoteBlock16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock16()
}

func (c *current) onQuoteBlock23() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonQuoteBlock23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock23()
}

func (c *current) onQuoteBlock26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonQuoteBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock26()
}

func (c *current) onQuoteBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}))

}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["content"])
}

func (c *current) onQuoteBlockContent9() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonQuoteBlockContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockContent9()
}

func (c *current) onQuoteBlockContent12() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockContent12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockContent12()
}

func (c *current) onQuoteBlockContent30() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonQuoteBlockContent30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockContent30()
}

func (c *current) onQuoteBlockContent34() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockContent34()
}

func (c *current) onQuoteBlockContent24(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonQuoteBlockContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockContent24(stack["content"])
}

func (c *current) onQuoteBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonQuoteBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockContent2(stack["line"])
}

func (c *current) onSidebarBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Sidebar), nil

}

func (p *parser) callonSidebarBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock3()
}

func (c *current) onSidebarBlock6() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSidebarBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock6()
}

func (c *current) onSidebarBlock9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSidebarBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock9()
}

func (c *current) onSidebarBlock16() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Sidebar)
	return true, nil

}

func (p *parser) callonSidebarBlock16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock16()
}

func (c *current) onSidebarBlock23() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSidebarBlock23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock23()
}

func (c *current) onSidebarBlock26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSidebarBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock26()
}

func (c *current) onSidebarBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}))

}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockContent9() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSidebarBlockContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockContent9()
}

func (c *current) onSidebarBlockContent12() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockContent12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockContent12()
}

func (c *current) onSidebarBlockContent30() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonSidebarBlockContent30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockContent30()
}

func (c *current) onSidebarBlockContent34() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockContent34()
}

func (c *current) onSidebarBlockContent24(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonSidebarBlockContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockContent24(stack["content"])
}

func (c *current) onSidebarBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonSidebarBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockContent2(stack["line"])
}

func (c *current) onFileInclusion3() (bool, error) {
	// skip if disabled
	return c.isRuleEnabled(FileInclusion)

}

func (p *parser) callonFileInclusion3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion3()
}

func (c *current) onFileInclusion4() error {
	// force/enable attribute substitution
	// log.Debug("entering FileInclusion rule")
	return c.setCurrentSubstitution("attributes")

}

func (p *parser) callonFileInclusion4() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4()
}

func (c *current) onFileInclusion18() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion18()
}

func (c *current) onFileInclusion23() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonFileInclusion23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion23()
}

func (c *current) onFileInclusion30() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion30()
}

func (c *current) onFileInclusion42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion42()
}

func (c *current) onFileInclusion44() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion44()
}

func (c *current) onFileInclusion37(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion37(stack["start"])
}

func (c *current) onFileInclusion26(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonFileInclusion26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion26(stack["name"], stack["start"])
}

func (c *current) onFileInclusion52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion52()
}

func (c *current) onFileInclusion64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion64()
}

func (c *current) onFileInclusion66() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion66()
}

func (c *current) onFileInclusion59(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion59(stack["start"])
}

func (c *current) onFileInclusion48(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonFileInclusion48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion48(stack["name"], stack["start"])
}

func (c *current) onFileInclusion74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion74()
}

func (c *current) onFileInclusion70(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonFileInclusion70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion70(stack["name"])
}

func (c *current) onFileInclusion21(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileInclusion21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion21(stack["element"])
}

func (c *current) onFileInclusion82() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonFileInclusion82() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion82()
}

func (c *current) onFileInclusion91() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileInclusion91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion91()
}

func (c *current) onFileInclusion95() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonFileInclusion95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion95()
}

func (c *current) onFileInclusion101() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion101()
}

func (c *current) onFileInclusion108() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonFileInclusion108() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion108()
}

func (c *current) onFileInclusion115() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion115()
}

func (c *current) onFileInclusion127() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion127()
}

func (c *current) onFileInclusion129() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion129()
}

func (c *current) onFileInclusion122(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion122(stack["start"])
}

func (c *current) onFileInclusion111(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonFileInclusion111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion111(stack["name"], stack["start"])
}

func (c *current) onFileInclusion137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion137()
}

func (c *current) onFileInclusion149() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion149()
}

func (c *current) onFileInclusion151() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion151()
}

func (c *current) onFileInclusion144(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion144(stack["start"])
}

func (c *current) onFileInclusion133(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonFileInclusion133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion133(stack["name"], stack["start"])
}

func (c *current) onFileInclusion159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion159()
}

func (c *current) onFileInclusion155(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonFileInclusion155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion155(stack["name"])
}

func (c *current) onFileInclusion106(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileInclusion106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion106(stack["element"])
}

func (c *current) onFileInclusion165() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion165()
}

func (c *current) onFileInclusion87(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonFileInclusion87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion87(stack["id"], stack["label"])
}

func (c *current) onFileInclusion172() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileInclusion172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion172()
}

func (c *current) onFileInclusion168(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonFileInclusion168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion168(stack["id"])
}

func (c *current) onFileInclusion85() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion85()
}

func (c *current) onFileInclusion176() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonFileInclusion176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion176()
}

func (c *current) onFileInclusion80(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileInclusion80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion80(stack["element"])
}

func (c *current) onFileInclusion178() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion178()
}

func (c *current) onFileInclusion14(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFileInclusion14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion14(stack["elements"])
}

func (c *current) onFileInclusion184() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileInclusion184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion184()
}

func (c *current) onFileInclusion180(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonFileInclusion180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion180(stack["ref"])
}

func (c *current) onFileInclusion10(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileInclusion10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion10(stack["path"])
}

func (c *current) onFileInclusion6(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(*types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion6(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion191() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonFileInclusion191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion191()
}

func (c *current) onFileInclusion194() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFileInclusion194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion194()
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(*types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges17()
}

func (c *current) onLineRanges12() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges12()
}

func (c *current) onLineRanges26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges26()
}

func (c *current) onLineRanges21() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges21()
}

func (c *current) onLineRanges9(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges9(stack["start"], stack["end"])
}

func (c *current) onLineRanges35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges35()
}

func (c *current) onLineRanges30() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges30()
}

func (c *current) onLineRanges28(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges28(stack["singleline"])
}

func (c *current) onLineRanges52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges52()
}

func (c *current) onLineRanges47() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges47()
}

func (c *current) onLineRanges61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges61()
}

func (c *current) onLineRanges56() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges56()
}

func (c *current) onLineRanges44(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges44(stack["start"], stack["end"])
}

func (c *current) onLineRanges70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges70()
}

func (c *current) onLineRanges65() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges65()
}

func (c *current) onLineRanges63(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges63(stack["singleline"])
}

func (c *current) onLineRanges39(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonLineRanges39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges39(stack["other"])
}

func (c *current) onLineRanges5(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonLineRanges5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges5(stack["first"], stack["others"])
}

func (c *current) onLineRanges80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges80()
}

func (c *current) onLineRanges75() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges75()
}

func (c *current) onLineRanges89() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges89()
}

func (c *current) onLineRanges84() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges84()
}

func (c *current) onLineRanges72(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges72(stack["start"], stack["end"])
}

func (c *current) onLineRanges98() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges98()
}

func (c *current) onLineRanges93() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges93()
}

func (c *current) onLineRanges91(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges91(stack["singleline"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onTagRanges11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges11()
}

func (c *current) onTagRanges17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges17()
}

func (c *current) onTagRanges20(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges20(stack["stars"])
}

func (c *current) onTagRanges14(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges14(stack["stars"])
}

func (c *current) onTagRanges8(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRanges8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges8(stack["tag"])
}

func (c *current) onTagRanges26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges26()
}

func (c *current) onTagRanges32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges32()
}

func (c *current) onTagRanges35(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges35() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges35(stack["stars"])
}

func (c *current) onTagRanges29(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges29(stack["stars"])
}

func (c *current) onTagRanges21(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRanges21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges21(stack["tag"])
}

func (c *current) onTagRanges46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges46()
}

func (c *current) onTagRanges52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges52()
}

func (c *current) onTagRanges55(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges55(stack["stars"])
}

func (c *current) onTagRanges49(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges49(stack["stars"])
}

func (c *current) onTagRanges43(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRanges43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges43(stack["tag"])
}

func (c *current) onTagRanges61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges61()
}

func (c *current) onTagRanges67() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges67()
}

func (c *current) onTagRanges70(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges70(stack["stars"])
}

func (c *current) onTagRanges64(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges64(stack["stars"])
}

func (c *current) onTagRanges56(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRanges56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges56(stack["tag"])
}

func (c *current) onTagRanges38(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonTagRanges38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges38(stack["other"])
}

func (c *current) onTagRanges4(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonTagRanges4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges4(stack["first"], stack["others"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onIncludedFileLine11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIncludedFileLine11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine11()
}

func (c *current) onIncludedFileLine10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine10()
}

func (c *current) onIncludedFileLine6(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine6(stack["tag"])
}

func (c *current) onIncludedFileLine20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIncludedFileLine20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine20()
}

func (c *current) onIncludedFileLine19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine19()
}

func (c *current) onIncludedFileLine15(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileLine15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine15(stack["tag"])
}

func (c *current) onIncludedFileLine24() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine24()
}

func (c *current) onIncludedFileLine27() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine27()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onInlineElement9() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineElement9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement9()
}

func (c *current) onInlineElement14() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlineElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement14()
}

func (c *current) onInlineElement4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement4()
}

func (c *current) onInlineElement21() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonInlineElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement21()
}

func (c *current) onInlineElement26() (bool, error) {

	return c.isPreceededBySpace(), nil

}

func (p *parser) callonInlineElement26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement26()
}

func (c *current) onInlineElement29() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineElement29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement29()
}

func (c *current) onInlineElement33() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlineElement33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement33()
}

func (c *current) onInlineElement24() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonInlineElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement24()
}

func (c *current) onInlineElement43() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlineElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement43()
}

func (c *current) onInlineElement53() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonInlineElement53() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement53()
}

func (c *current) onInlineElement62() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement62()
}

func (c *current) onInlineElement66() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineElement66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement66()
}

func (c *current) onInlineElement72() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement72()
}

func (c *current) onInlineElement79() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonInlineElement79() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement79()
}

func (c *current) onInlineElement86() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement86()
}

func (c *current) onInlineElement98() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement98()
}

func (c *current) onInlineElement100() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement100()
}

func (c *current) onInlineElement93(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement93(stack["start"])
}

func (c *current) onInlineElement82(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonInlineElement82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement82(stack["name"], stack["start"])
}

func (c *current) onInlineElement108() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement108()
}

func (c *current) onInlineElement120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement120()
}

func (c *current) onInlineElement122() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement122()
}

func (c *current) onInlineElement115(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement115(stack["start"])
}

func (c *current) onInlineElement104(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonInlineElement104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement104(stack["name"], stack["start"])
}

func (c *current) onInlineElement130() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement130()
}

func (c *current) onInlineElement126(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonInlineElement126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement126(stack["name"])
}

func (c *current) onInlineElement77(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineElement77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement77(stack["element"])
}

func (c *current) onInlineElement136() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement136()
}

func (c *current) onInlineElement58(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInlineElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement58(stack["id"], stack["label"])
}

func (c *current) onInlineElement143() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement143()
}

func (c *current) onInlineElement139(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInlineElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement139(stack["id"])
}

func (c *current) onInlineElement56() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement56()
}

func (c *current) onInlineElement147() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonInlineElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement147()
}

func (c *current) onInlineElement51(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineElement51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement51(stack["element"])
}

func (c *current) onInlineElement152() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonInlineElement152() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement152()
}

func (c *current) onInlineElement159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement159()
}

func (c *current) onInlineElement171() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement171()
}

func (c *current) onInlineElement173() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement173()
}

func (c *current) onInlineElement166(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement166(stack["start"])
}

func (c *current) onInlineElement155(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonInlineElement155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement155(stack["name"], stack["start"])
}

func (c *current) onInlineElement181() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement181()
}

func (c *current) onInlineElement193() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement193()
}

func (c *current) onInlineElement195() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement195()
}

func (c *current) onInlineElement188(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement188(stack["start"])
}

func (c *current) onInlineElement177(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonInlineElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement177(stack["name"], stack["start"])
}

func (c *current) onInlineElement203() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement203()
}

func (c *current) onInlineElement199(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonInlineElement199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement199(stack["name"])
}

func (c *current) onInlineElement150(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement150(stack["element"])
}

func (c *current) onInlineElement210() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonInlineElement210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement210()
}

func (c *current) onInlineElement212() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonInlineElement212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement212()
}

func (c *current) onInlineElement214() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonInlineElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement214()
}

func (c *current) onInlineElement216() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonInlineElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement216()
}

func (c *current) onInlineElement218() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonInlineElement218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement218()
}

func (c *current) onInlineElement220() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonInlineElement220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement220()
}

func (c *current) onInlineElement230() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement230()
}

func (c *current) onInlineElement226(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonInlineElement226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement226(stack["ref"])
}

func (c *current) onInlineElement234() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement234()
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	c.trackSpaceSuffix(element)
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))

}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent5() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent5()
}

func (c *current) onIndexTermContent14() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent14()
}

func (c *current) onIndexTermContent25() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent25()
}

func (c *current) onIndexTermContent29() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonIndexTermContent29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent29()
}

func (c *current) onIndexTermContent38() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent38()
}

func (c *current) onIndexTermContent42() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent42()
}

func (c *current) onIndexTermContent48() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent48()
}

func (c *current) onIndexTermContent55() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonIndexTermContent55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent55()
}

func (c *current) onIndexTermContent62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent62()
}

func (c *current) onIndexTermContent74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent74()
}

func (c *current) onIndexTermContent76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonIndexTermContent76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent76()
}

func (c *current) onIndexTermContent69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonIndexTermContent69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent69(stack["start"])
}

func (c *current) onIndexTermContent58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonIndexTermContent58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent58(stack["name"], stack["start"])
}

func (c *current) onIndexTermContent84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent84()
}

func (c *current) onIndexTermContent96() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent96()
}

func (c *current) onIndexTermContent98() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonIndexTermContent98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent98()
}

func (c *current) onIndexTermContent91(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonIndexTermContent91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent91(stack["start"])
}

func (c *current) onIndexTermContent80(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonIndexTermContent80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent80(stack["name"], stack["start"])
}

func (c *current) onIndexTermContent106() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent106()
}

func (c *current) onIndexTermContent102(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonIndexTermContent102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent102(stack["name"])
}

func (c *current) onIndexTermContent53(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonIndexTermContent53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent53(stack["element"])
}

func (c *current) onIndexTermContent112() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent112()
}

func (c *current) onIndexTermContent34(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonIndexTermContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent34(stack["id"], stack["label"])
}

func (c *current) onIndexTermContent119() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent119()
}

func (c *current) onIndexTermContent115(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonIndexTermContent115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent115(stack["id"])
}

func (c *current) onIndexTermContent32() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent32()
}

func (c *current) onIndexTermContent123() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonIndexTermContent123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent123()
}

func (c *current) onIndexTermContent27(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonIndexTermContent27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent27(stack["element"])
}

func (c *current) onIndexTermContent129() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent129()
}

func (c *current) onIndexTermContent125(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonIndexTermContent125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent125(stack["ref"])
}

func (c *current) onIndexTermContent133() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent133()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onImageBlock3() (bool, error) {
	// AttrPositional1 must not be set
	return types.HasNotAttribute(c.globalStore.getAttributes(), types.AttrPositional1), nil

}

func (p *parser) callonImageBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock3()
}

func (c *current) onImageBlock23() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock23()
}

func (c *current) onImageBlock28() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonImageBlock28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock28()
}

func (c *current) onImageBlock35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock35()
}

func (c *current) onImageBlock47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock47()
}

func (c *current) onImageBlock49() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock49()
}

func (c *current) onImageBlock42(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock42(stack["start"])
}

func (c *current) onImageBlock31(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonImageBlock31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock31(stack["name"], stack["start"])
}

func (c *current) onImageBlock57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock57()
}

func (c *current) onImageBlock69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock69()
}

func (c *current) onImageBlock71() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock71()
}

func (c *current) onImageBlock64(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock64(stack["start"])
}

func (c *current) onImageBlock53(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonImageBlock53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock53(stack["name"], stack["start"])
}

func (c *current) onImageBlock79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock79()
}

func (c *current) onImageBlock75(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonImageBlock75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock75(stack["name"])
}

func (c *current) onImageBlock26(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonImageBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock26(stack["element"])
}

func (c *current) onImageBlock87() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonImageBlock87() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock87()
}

func (c *current) onImageBlock96() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonImageBlock96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock96()
}

func (c *current) onImageBlock100() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonImageBlock100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock100()
}

func (c *current) onImageBlock106() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock106()
}

func (c *current) onImageBlock113() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonImageBlock113() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock113()
}

func (c *current) onImageBlock120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock120()
}

func (c *current) onImageBlock132() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock132()
}

func (c *current) onImageBlock134() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock134()
}

func (c *current) onImageBlock127(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock127(stack["start"])
}

func (c *current) onImageBlock116(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonImageBlock116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock116(stack["name"], stack["start"])
}

func (c *current) onImageBlock142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock142()
}

func (c *current) onImageBlock154() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock154()
}

func (c *current) onImageBlock156() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock156()
}

func (c *current) onImageBlock149(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock149(stack["start"])
}

func (c *current) onImageBlock138(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonImageBlock138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock138(stack["name"], stack["start"])
}

func (c *current) onImageBlock164() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock164()
}

func (c *current) onImageBlock160(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonImageBlock160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock160(stack["name"])
}

func (c *current) onImageBlock111(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonImageBlock111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock111(stack["element"])
}

func (c *current) onImageBlock170() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock170()
}

func (c *current) onImageBlock92(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonImageBlock92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock92(stack["id"], stack["label"])
}

func (c *current) onImageBlock177() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonImageBlock177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock177()
}

func (c *current) onImageBlock173(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonImageBlock173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock173(stack["id"])
}

func (c *current) onImageBlock90() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock90()
}

func (c *current) onImageBlock181() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonImageBlock181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock181()
}

func (c *current) onImageBlock85(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonImageBlock85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock85(stack["element"])
}

func (c *current) onImageBlock183() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock183()
}

func (c *current) onImageBlock19(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonImageBlock19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock19(stack["elements"])
}

func (c *current) onImageBlock189() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImageBlock189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock189()
}

func (c *current) onImageBlock185(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonImageBlock185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock185(stack["ref"])
}

func (c *current) onImageBlock6(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonImageBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock6(stack["scheme"], stack["path"])
}

func (c *current) onImageBlock196() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonImageBlock196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock196()
}

func (c *current) onImageBlock199() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonImageBlock199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock199()
}

func (c *current) onImageBlock1(path, inlineAttributes interface{}) (interface{}, error) {
	// c.unsetCurrentSubstitution()
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore.getAttributes())

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage24() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage24()
}

func (c *current) onInlineImage29() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonInlineImage29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage29()
}

func (c *current) onInlineImage36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage36()
}

func (c *current) onInlineImage48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage48()
}

func (c *current) onInlineImage50() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage50()
}

func (c *current) onInlineImage43(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage43(stack["start"])
}

func (c *current) onInlineImage32(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonInlineImage32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage32(stack["name"], stack["start"])
}

func (c *current) onInlineImage58() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage58()
}

func (c *current) onInlineImage70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage70()
}

func (c *current) onInlineImage72() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage72()
}

func (c *current) onInlineImage65(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage65(stack["start"])
}

func (c *current) onInlineImage54(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonInlineImage54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage54(stack["name"], stack["start"])
}

func (c *current) onInlineImage80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage80()
}

func (c *current) onInlineImage76(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonInlineImage76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage76(stack["name"])
}

func (c *current) onInlineImage27(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineImage27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage27(stack["element"])
}

func (c *current) onInlineImage88() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonInlineImage88() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage88()
}

func (c *current) onInlineImage97() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineImage97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage97()
}

func (c *current) onInlineImage101() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineImage101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage101()
}

func (c *current) onInlineImage107() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage107()
}

func (c *current) onInlineImage114() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonInlineImage114() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage114()
}

func (c *current) onInlineImage121() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage121()
}

func (c *current) onInlineImage133() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage133()
}

func (c *current) onInlineImage135() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage135()
}

func (c *current) onInlineImage128(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage128(stack["start"])
}

func (c *current) onInlineImage117(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonInlineImage117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage117(stack["name"], stack["start"])
}

func (c *current) onInlineImage143() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage143()
}

func (c *current) onInlineImage155() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage155()
}

func (c *current) onInlineImage157() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage157()
}

func (c *current) onInlineImage150(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage150(stack["start"])
}

func (c *current) onInlineImage139(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonInlineImage139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage139(stack["name"], stack["start"])
}

func (c *current) onInlineImage165() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage165()
}

func (c *current) onInlineImage161(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonInlineImage161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage161(stack["name"])
}

func (c *current) onInlineImage112(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineImage112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage112(stack["element"])
}

func (c *current) onInlineImage171() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage171()
}

func (c *current) onInlineImage93(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInlineImage93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage93(stack["id"], stack["label"])
}

func (c *current) onInlineImage178() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineImage178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage178()
}

func (c *current) onInlineImage174(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInlineImage174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage174(stack["id"])
}

func (c *current) onInlineImage91() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage91()
}

func (c *current) onInlineImage182() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonInlineImage182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage182()
}

func (c *current) onInlineImage86(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineImage86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage86(stack["element"])
}

func (c *current) onInlineImage184() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage184()
}

func (c *current) onInlineImage20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineImage20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage20(stack["elements"])
}

func (c *current) onInlineImage190() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineImage190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage190()
}

func (c *current) onInlineImage186(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonInlineImage186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage186(stack["ref"])
}

func (c *current) onInlineImage7(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonInlineImage7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage7(stack["scheme"], stack["path"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content)

}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineFootnote12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote12()
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	// TODO: use only this rule with `ref:(FootnoteRef)?`
	return types.NewFootnote(ref.(string), content)

}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onPassthroughMacro7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacro7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro7()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro17() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacro17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro17()
}

func (c *current) onPassthroughMacro10(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro10(stack["content"])
}

func (c *current) onRelativeLink22() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink22()
}

func (c *current) onRelativeLink27() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonRelativeLink27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink27()
}

func (c *current) onRelativeLink34() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink34()
}

func (c *current) onRelativeLink46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink46()
}

func (c *current) onRelativeLink48() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink48()
}

func (c *current) onRelativeLink41(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink41(stack["start"])
}

func (c *current) onRelativeLink30(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonRelativeLink30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink30(stack["name"], stack["start"])
}

func (c *current) onRelativeLink56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink56()
}

func (c *current) onRelativeLink68() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink68()
}

func (c *current) onRelativeLink70() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink70()
}

func (c *current) onRelativeLink63(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink63(stack["start"])
}

func (c *current) onRelativeLink52(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonRelativeLink52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink52(stack["name"], stack["start"])
}

func (c *current) onRelativeLink78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink78()
}

func (c *current) onRelativeLink74(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonRelativeLink74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink74(stack["name"])
}

func (c *current) onRelativeLink25(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink25(stack["element"])
}

func (c *current) onRelativeLink86() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonRelativeLink86() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink86()
}

func (c *current) onRelativeLink95() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonRelativeLink95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink95()
}

func (c *current) onRelativeLink99() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonRelativeLink99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink99()
}

func (c *current) onRelativeLink105() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink105()
}

func (c *current) onRelativeLink112() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonRelativeLink112() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink112()
}

func (c *current) onRelativeLink119() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink119()
}

func (c *current) onRelativeLink131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink131()
}

func (c *current) onRelativeLink133() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink133()
}

func (c *current) onRelativeLink126(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink126(stack["start"])
}

func (c *current) onRelativeLink115(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonRelativeLink115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink115(stack["name"], stack["start"])
}

func (c *current) onRelativeLink141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink141()
}

func (c *current) onRelativeLink153() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink153()
}

func (c *current) onRelativeLink155() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink155()
}

func (c *current) onRelativeLink148(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink148(stack["start"])
}

func (c *current) onRelativeLink137(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonRelativeLink137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink137(stack["name"], stack["start"])
}

func (c *current) onRelativeLink163() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink163()
}

func (c *current) onRelativeLink159(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonRelativeLink159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink159(stack["name"])
}

func (c *current) onRelativeLink110(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink110(stack["element"])
}

func (c *current) onRelativeLink169() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink169()
}

func (c *current) onRelativeLink91(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonRelativeLink91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink91(stack["id"], stack["label"])
}

func (c *current) onRelativeLink176() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonRelativeLink176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink176()
}

func (c *current) onRelativeLink172(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonRelativeLink172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink172(stack["id"])
}

func (c *current) onRelativeLink89() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink89()
}

func (c *current) onRelativeLink180() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonRelativeLink180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink180()
}

func (c *current) onRelativeLink84(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink84(stack["element"])
}

func (c *current) onRelativeLink182() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink182()
}

func (c *current) onRelativeLink18(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonRelativeLink18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink18(stack["elements"])
}

func (c *current) onRelativeLink188() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink188()
}

func (c *current) onRelativeLink184(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonRelativeLink184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink184(stack["ref"])
}

func (c *current) onRelativeLink5(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonRelativeLink5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink5(stack["scheme"], stack["path"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink22() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink22()
}

func (c *current) onExternalLink27() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonExternalLink27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink27()
}

func (c *current) onExternalLink34() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink34()
}

func (c *current) onExternalLink46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink46()
}

func (c *current) onExternalLink48() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink48()
}

func (c *current) onExternalLink41(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink41(stack["start"])
}

func (c *current) onExternalLink30(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonExternalLink30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink30(stack["name"], stack["start"])
}

func (c *current) onExternalLink56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink56()
}

func (c *current) onExternalLink68() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink68()
}

func (c *current) onExternalLink70() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink70()
}

func (c *current) onExternalLink63(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink63(stack["start"])
}

func (c *current) onExternalLink52(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonExternalLink52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink52(stack["name"], stack["start"])
}

func (c *current) onExternalLink78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink78()
}

func (c *current) onExternalLink74(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonExternalLink74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink74(stack["name"])
}

func (c *current) onExternalLink25(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink25(stack["element"])
}

func (c *current) onExternalLink86() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonExternalLink86() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink86()
}

func (c *current) onExternalLink95() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalLink95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink95()
}

func (c *current) onExternalLink99() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExternalLink99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink99()
}

func (c *current) onExternalLink105() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink105()
}

func (c *current) onExternalLink112() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonExternalLink112() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink112()
}

func (c *current) onExternalLink119() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink119()
}

func (c *current) onExternalLink131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink131()
}

func (c *current) onExternalLink133() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink133()
}

func (c *current) onExternalLink126(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink126(stack["start"])
}

func (c *current) onExternalLink115(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonExternalLink115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink115(stack["name"], stack["start"])
}

func (c *current) onExternalLink141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink141()
}

func (c *current) onExternalLink153() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink153()
}

func (c *current) onExternalLink155() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink155()
}

func (c *current) onExternalLink148(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink148(stack["start"])
}

func (c *current) onExternalLink137(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonExternalLink137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink137(stack["name"], stack["start"])
}

func (c *current) onExternalLink163() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink163()
}

func (c *current) onExternalLink159(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonExternalLink159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink159(stack["name"])
}

func (c *current) onExternalLink110(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink110(stack["element"])
}

func (c *current) onExternalLink169() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink169()
}

func (c *current) onExternalLink91(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonExternalLink91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink91(stack["id"], stack["label"])
}

func (c *current) onExternalLink176() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalLink176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink176()
}

func (c *current) onExternalLink172(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonExternalLink172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink172(stack["id"])
}

func (c *current) onExternalLink89() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink89()
}

func (c *current) onExternalLink180() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonExternalLink180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink180()
}

func (c *current) onExternalLink84(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink84(stack["element"])
}

func (c *current) onExternalLink182() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink182()
}

func (c *current) onExternalLink18(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonExternalLink18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink18(stack["elements"])
}

func (c *current) onExternalLink188() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalLink188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink188()
}

func (c *current) onExternalLink184(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonExternalLink184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink184(stack["ref"])
}

func (c *current) onExternalLink4(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonExternalLink4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink4(stack["scheme"], stack["path"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes)

}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onListElements11() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements11()
}

func (c *current) onListElements18() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements18()
}

func (c *current) onListElements21(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements21(stack["depth"])
}

func (c *current) onListElements15(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElements15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements15(stack["depth"])
}

func (c *current) onListElements22() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElements22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements22()
}

func (c *current) onListElements27() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElements27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements27()
}

func (c *current) onListElements31() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElements31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements31()
}

func (c *current) onListElements35() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElements35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements35()
}

func (c *current) onListElements40() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElements40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements40()
}

func (c *current) onListElements45(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements45(stack["prefix"])
}

func (c *current) onListElements8(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements8(stack["prefix"])
}

func (c *current) onListElements52() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements52()
}

func (c *current) onListElements56() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements56()
}

func (c *current) onListElements49(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElements49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements49(stack["rawline"])
}

func (c *current) onListElements5(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonListElements5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements5(stack["prefix"], stack["content"])
}

func (c *current) onListElements69() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements69()
}

func (c *current) onListElements76() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements76()
}

func (c *current) onListElements79(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements79() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements79(stack["depth"])
}

func (c *current) onListElements73(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonListElements73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements73(stack["depth"])
}

func (c *current) onListElements81() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonListElements81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements81()
}

func (c *current) onListElements83(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements83(stack["prefix"])
}

func (c *current) onListElements66(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements66(stack["prefix"])
}

func (c *current) onListElements94() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonListElements94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements94()
}

func (c *current) onListElements96() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElements96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements96()
}

func (c *current) onListElements98() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElements98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements98()
}

func (c *current) onListElements100(style interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements100(stack["style"])
}

func (c *current) onListElements88(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonListElements88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements88(stack["style"])
}

func (c *current) onListElements107() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements107()
}

func (c *current) onListElements111() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements111()
}

func (c *current) onListElements104(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElements104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements104(stack["rawline"])
}

func (c *current) onListElements63(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonListElements63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements63(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onListElements125() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElements125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements125()
}

func (c *current) onListElements129(ref interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements129(stack["ref"])
}

func (c *current) onListElements121(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElements121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements121(stack["ref"])
}

func (c *current) onListElements136() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements136()
}

func (c *current) onListElements140() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements140()
}

func (c *current) onListElements133(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonListElements133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements133(stack["rawline"])
}

func (c *current) onListElements118(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonListElements118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements118(stack["ref"], stack["description"])
}

func (c *current) onListElements157() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements157()
}

func (c *current) onListElements160(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements160() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements160(stack["separator"])
}

func (c *current) onListElements154(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements154(stack["separator"])
}

func (c *current) onListElements163() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements163()
}

func (c *current) onListElements150() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements150()
}

func (c *current) onListElements175() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements175()
}

func (c *current) onListElements178(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements178() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements178(stack["separator"])
}

func (c *current) onListElements172(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements172(stack["separator"])
}

func (c *current) onListElements184() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements184()
}

func (c *current) onListElements187() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements187()
}

func (c *current) onListElements201() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements201()
}

func (c *current) onListElements204() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements204()
}

func (c *current) onListElements195() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElements195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements195()
}

func (c *current) onListElements222() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements222()
}

func (c *current) onListElements225() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements225()
}

func (c *current) onListElements216() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElements216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements216()
}

func (c *current) onListElements236() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements236()
}

func (c *current) onListElements238() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements238()
}

func (c *current) onListElements247() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements247()
}

func (c *current) onListElements254() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements254()
}

func (c *current) onListElements257(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements257() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements257(stack["depth"])
}

func (c *current) onListElements251(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElements251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements251(stack["depth"])
}

func (c *current) onListElements258() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElements258() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements258()
}

func (c *current) onListElements263() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElements263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements263()
}

func (c *current) onListElements267() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElements267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements267()
}

func (c *current) onListElements271() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElements271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements271()
}

func (c *current) onListElements276() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElements276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements276()
}

func (c *current) onListElements281(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements281() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements281(stack["prefix"])
}

func (c *current) onListElements244(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements244(stack["prefix"])
}

func (c *current) onListElements288() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements288() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements288()
}

func (c *current) onListElements295() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements295()
}

func (c *current) onListElements298(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements298() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements298(stack["depth"])
}

func (c *current) onListElements292(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonListElements292() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements292(stack["depth"])
}

func (c *current) onListElements300() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonListElements300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements300()
}

func (c *current) onListElements302(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements302(stack["prefix"])
}

func (c *current) onListElements285(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements285(stack["prefix"])
}

func (c *current) onListElements310() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElements310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements310()
}

func (c *current) onListElements314(ref interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements314(stack["ref"])
}

func (c *current) onListElements306(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElements306() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements306(stack["ref"])
}

func (c *current) onListElements326() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements326() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements326()
}

func (c *current) onListElements329(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements329() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements329(stack["separator"])
}

func (c *current) onListElements323(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements323() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements323(stack["separator"])
}

func (c *current) onListElements332() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements332() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements332()
}

func (c *current) onListElements319() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements319() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements319()
}

func (c *current) onListElements343() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements343()
}

func (c *current) onListElements346(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements346() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements346(stack["separator"])
}

func (c *current) onListElements340(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements340() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements340(stack["separator"])
}

func (c *current) onListElements357() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements357() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements357()
}

func (c *current) onListElements360() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements360() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements360()
}

func (c *current) onListElements370() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements370()
}

func (c *current) onListElements373() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements373() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements373()
}

func (c *current) onListElements383() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements383() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements383()
}

func (c *current) onListElements386() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements386() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements386()
}

func (c *current) onListElements396() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements396() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements396()
}

func (c *current) onListElements399() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements399() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements399()
}

func (c *current) onListElements409() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements409() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements409()
}

func (c *current) onListElements412() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements412() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements412()
}

func (c *current) onListElements422() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements422() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements422()
}

func (c *current) onListElements425() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements425() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements425()
}

func (c *current) onListElements435() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements435() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements435()
}

func (c *current) onListElements438() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements438() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements438()
}

func (c *current) onListElements448() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements448() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements448()
}

func (c *current) onListElements451() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements451() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements451()
}

func (c *current) onListElements348(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonListElements348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements348(stack["delimiter"])
}

func (c *current) onListElements459() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonListElements459() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements459()
}

func (c *current) onListElements463() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements463() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements463()
}

func (c *current) onListElements213(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElements213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements213(stack["content"])
}

func (c *current) onListElements181(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonListElements181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements181(stack["content"])
}

func (c *current) onListElements472() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements472() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements472()
}

func (c *current) onListElements476() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements476() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements476()
}

func (c *current) onListElements480() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements480() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements480()
}

func (c *current) onListElements470(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonListElements470() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements470(stack["content"])
}

func (c *current) onListElements147(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonListElements147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements147(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onListElements1(firstElement, extraElements interface{}) (interface{}, error) {
	return types.NewListElements(append([]interface{}{firstElement}, extraElements.([]interface{})...))

}

func (p *parser) callonListElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements1(stack["firstElement"], stack["extraElements"])
}

func (c *current) onExtraListElements1(elements interface{}) (interface{}, error) {
	return types.Flatten(elements.([]interface{})), nil
}

func (p *parser) callonExtraListElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElements1(stack["elements"])
}

func (c *current) onExtraListElement17() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement17()
}

func (c *current) onExtraListElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement20()
}

func (c *current) onExtraListElement11() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement11()
}

func (c *current) onExtraListElement34() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement34()
}

func (c *current) onExtraListElement41() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement41()
}

func (c *current) onExtraListElement44(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement44() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement44(stack["depth"])
}

func (c *current) onExtraListElement38(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement38(stack["depth"])
}

func (c *current) onExtraListElement45() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement45()
}

func (c *current) onExtraListElement50() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement50()
}

func (c *current) onExtraListElement54() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement54()
}

func (c *current) onExtraListElement58() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement58()
}

func (c *current) onExtraListElement63() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement63()
}

func (c *current) onExtraListElement68(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement68(stack["prefix"])
}

func (c *current) onExtraListElement31(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement31(stack["prefix"])
}

func (c *current) onExtraListElement75() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement75()
}

func (c *current) onExtraListElement79() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement79()
}

func (c *current) onExtraListElement72(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonExtraListElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement72(stack["rawline"])
}

func (c *current) onExtraListElement28(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonExtraListElement28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement28(stack["prefix"], stack["content"])
}

func (c *current) onExtraListElement8(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement8(stack["element"])
}

func (c *current) onExtraListElement98() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement98()
}

func (c *current) onExtraListElement105() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement105()
}

func (c *current) onExtraListElement108(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement108() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement108(stack["depth"])
}

func (c *current) onExtraListElement102(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement102(stack["depth"])
}

func (c *current) onExtraListElement109() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement109()
}

func (c *current) onExtraListElement114() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement114()
}

func (c *current) onExtraListElement118() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement118()
}

func (c *current) onExtraListElement122() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement122()
}

func (c *current) onExtraListElement127() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement127()
}

func (c *current) onExtraListElement132(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement132(stack["prefix"])
}

func (c *current) onExtraListElement95(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement95(stack["prefix"])
}

func (c *current) onExtraListElement139() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement139()
}

func (c *current) onExtraListElement143() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement143()
}

func (c *current) onExtraListElement136(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonExtraListElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement136(stack["rawline"])
}

func (c *current) onExtraListElement92(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonExtraListElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement92(stack["prefix"], stack["content"])
}

func (c *current) onExtraListElement86(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement86(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement159() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement159()
}

func (c *current) onExtraListElement162() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement162()
}

func (c *current) onExtraListElement153() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement153()
}

func (c *current) onExtraListElement176() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement176()
}

func (c *current) onExtraListElement183() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement183()
}

func (c *current) onExtraListElement186(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement186() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement186(stack["depth"])
}

func (c *current) onExtraListElement180(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement180(stack["depth"])
}

func (c *current) onExtraListElement188() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement188()
}

func (c *current) onExtraListElement190(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement190(stack["prefix"])
}

func (c *current) onExtraListElement173(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement173(stack["prefix"])
}

func (c *current) onExtraListElement201() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonExtraListElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement201()
}

func (c *current) onExtraListElement203() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement203()
}

func (c *current) onExtraListElement205() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement205()
}

func (c *current) onExtraListElement207(style interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement207(stack["style"])
}

func (c *current) onExtraListElement195(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonExtraListElement195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement195(stack["style"])
}

func (c *current) onExtraListElement214() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement214()
}

func (c *current) onExtraListElement218() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement218()
}

func (c *current) onExtraListElement211(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonExtraListElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement211(stack["rawline"])
}

func (c *current) onExtraListElement170(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonExtraListElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement170(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onExtraListElement150(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement150(stack["element"])
}

func (c *current) onExtraListElement237() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement237()
}

func (c *current) onExtraListElement244() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement244()
}

func (c *current) onExtraListElement247(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement247() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement247(stack["depth"])
}

func (c *current) onExtraListElement241(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement241(stack["depth"])
}

func (c *current) onExtraListElement249() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement249() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement249()
}

func (c *current) onExtraListElement251(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement251(stack["prefix"])
}

func (c *current) onExtraListElement234(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement234(stack["prefix"])
}

func (c *current) onExtraListElement262() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonExtraListElement262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement262()
}

func (c *current) onExtraListElement264() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement264()
}

func (c *current) onExtraListElement266() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement266()
}

func (c *current) onExtraListElement268(style interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement268(stack["style"])
}

func (c *current) onExtraListElement256(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonExtraListElement256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement256(stack["style"])
}

func (c *current) onExtraListElement275() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement275() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement275()
}

func (c *current) onExtraListElement279() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement279()
}

func (c *current) onExtraListElement272(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonExtraListElement272() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement272(stack["rawline"])
}

func (c *current) onExtraListElement231(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonExtraListElement231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement231(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onExtraListElement225(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement225(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement295() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement295()
}

func (c *current) onExtraListElement298() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement298()
}

func (c *current) onExtraListElement289() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement289() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement289()
}

func (c *current) onExtraListElement313() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement313()
}

func (c *current) onExtraListElement317(ref interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement317(stack["ref"])
}

func (c *current) onExtraListElement309(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement309() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement309(stack["ref"])
}

func (c *current) onExtraListElement324() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement324() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement324()
}

func (c *current) onExtraListElement328() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement328()
}

func (c *current) onExtraListElement321(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonExtraListElement321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement321(stack["rawline"])
}

func (c *current) onExtraListElement306(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonExtraListElement306() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement306(stack["ref"], stack["description"])
}

func (c *current) onExtraListElement286(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement286() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement286(stack["element"])
}

func (c *current) onExtraListElement348() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement348()
}

func (c *current) onExtraListElement352(ref interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement352() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement352(stack["ref"])
}

func (c *current) onExtraListElement344(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement344() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement344(stack["ref"])
}

func (c *current) onExtraListElement359() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement359() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement359()
}

func (c *current) onExtraListElement363() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement363() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement363()
}

func (c *current) onExtraListElement356(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonExtraListElement356() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement356(stack["rawline"])
}

func (c *current) onExtraListElement341(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonExtraListElement341() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement341(stack["ref"], stack["description"])
}

func (c *current) onExtraListElement335(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement335() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement335(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement380() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement380() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement380()
}

func (c *current) onExtraListElement383() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement383() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement383()
}

func (c *current) onExtraListElement374() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement374()
}

func (c *current) onExtraListElement401() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement401() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement401()
}

func (c *current) onExtraListElement404(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement404() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement404(stack["separator"])
}

func (c *current) onExtraListElement398(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement398() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement398(stack["separator"])
}

func (c *current) onExtraListElement407() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement407() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement407()
}

func (c *current) onExtraListElement394() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement394()
}

func (c *current) onExtraListElement419() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement419() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement419()
}

func (c *current) onExtraListElement422(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement422() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement422(stack["separator"])
}

func (c *current) onExtraListElement416(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement416() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement416(stack["separator"])
}

func (c *current) onExtraListElement428() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement428()
}

func (c *current) onExtraListElement431() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement431() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement431()
}

func (c *current) onExtraListElement445() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement445() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement445()
}

func (c *current) onExtraListElement448() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement448() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement448()
}

func (c *current) onExtraListElement439() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement439() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement439()
}

func (c *current) onExtraListElement466() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement466() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement466()
}

func (c *current) onExtraListElement469() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement469() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement469()
}

func (c *current) onExtraListElement460() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement460() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement460()
}

func (c *current) onExtraListElement480() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement480() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement480()
}

func (c *current) onExtraListElement482() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement482() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement482()
}

func (c *current) onExtraListElement491() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement491() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement491()
}

func (c *current) onExtraListElement498() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement498() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement498()
}

func (c *current) onExtraListElement501(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement501() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement501(stack["depth"])
}

func (c *current) onExtraListElement495(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement495() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement495(stack["depth"])
}

func (c *current) onExtraListElement502() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement502() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement502()
}

func (c *current) onExtraListElement507() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement507() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement507()
}

func (c *current) onExtraListElement511() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement511() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement511()
}

func (c *current) onExtraListElement515() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement515() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement515()
}

func (c *current) onExtraListElement520() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement520() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement520()
}

func (c *current) onExtraListElement525(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement525() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement525(stack["prefix"])
}

func (c *current) onExtraListElement488(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement488() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement488(stack["prefix"])
}

func (c *current) onExtraListElement532() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement532() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement532()
}

func (c *current) onExtraListElement539() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement539() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement539()
}

func (c *current) onExtraListElement542(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement542() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement542(stack["depth"])
}

func (c *current) onExtraListElement536(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement536() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement536(stack["depth"])
}

func (c *current) onExtraListElement544() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement544() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement544()
}

func (c *current) onExtraListElement546(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement546() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement546(stack["prefix"])
}

func (c *current) onExtraListElement529(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement529() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement529(stack["prefix"])
}

func (c *current) onExtraListElement554() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement554() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement554()
}

func (c *current) onExtraListElement558(ref interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement558() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement558(stack["ref"])
}

func (c *current) onExtraListElement550(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement550() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement550(stack["ref"])
}

func (c *current) onExtraListElement570() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement570() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement570()
}

func (c *current) onExtraListElement573(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement573() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement573(stack["separator"])
}

func (c *current) onExtraListElement567(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement567() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement567(stack["separator"])
}

func (c *current) onExtraListElement576() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement576() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement576()
}

func (c *current) onExtraListElement563() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement563() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement563()
}

func (c *current) onExtraListElement587() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement587() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement587()
}

func (c *current) onExtraListElement590(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement590() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement590(stack["separator"])
}

func (c *current) onExtraListElement584(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement584() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement584(stack["separator"])
}

func (c *current) onExtraListElement601() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement601() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement601()
}

func (c *current) onExtraListElement604() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement604() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement604()
}

func (c *current) onExtraListElement614() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement614() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement614()
}

func (c *current) onExtraListElement617() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement617() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement617()
}

func (c *current) onExtraListElement627() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement627() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement627()
}

func (c *current) onExtraListElement630() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement630() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement630()
}

func (c *current) onExtraListElement640() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement640() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement640()
}

func (c *current) onExtraListElement643() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement643() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement643()
}

func (c *current) onExtraListElement653() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement653() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement653()
}

func (c *current) onExtraListElement656() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement656() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement656()
}

func (c *current) onExtraListElement666() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement666() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement666()
}

func (c *current) onExtraListElement669() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement669() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement669()
}

func (c *current) onExtraListElement679() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement679() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement679()
}

func (c *current) onExtraListElement682() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement682() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement682()
}

func (c *current) onExtraListElement692() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement692() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement692()
}

func (c *current) onExtraListElement695() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement695() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement695()
}

func (c *current) onExtraListElement592(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonExtraListElement592() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement592(stack["delimiter"])
}

func (c *current) onExtraListElement703() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonExtraListElement703() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement703()
}

func (c *current) onExtraListElement707() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement707() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement707()
}

func (c *current) onExtraListElement457(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement457() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement457(stack["content"])
}

func (c *current) onExtraListElement425(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonExtraListElement425() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement425(stack["content"])
}

func (c *current) onExtraListElement716() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement716() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement716()
}

func (c *current) onExtraListElement720() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement720() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement720()
}

func (c *current) onExtraListElement724() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement724() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement724()
}

func (c *current) onExtraListElement714(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonExtraListElement714() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement714(stack["content"])
}

func (c *current) onExtraListElement391(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonExtraListElement391() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement391(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onExtraListElement371(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement371() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement371(stack["element"])
}

func (c *current) onExtraListElement747() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement747() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement747()
}

func (c *current) onExtraListElement750(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement750() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement750(stack["separator"])
}

func (c *current) onExtraListElement744(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement744() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement744(stack["separator"])
}

func (c *current) onExtraListElement753() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement753() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement753()
}

func (c *current) onExtraListElement740() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement740() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement740()
}

func (c *current) onExtraListElement765() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement765() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement765()
}

func (c *current) onExtraListElement768(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement768() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement768(stack["separator"])
}

func (c *current) onExtraListElement762(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement762() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement762(stack["separator"])
}

func (c *current) onExtraListElement774() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement774() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement774()
}

func (c *current) onExtraListElement777() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement777() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement777()
}

func (c *current) onExtraListElement791() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement791() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement791()
}

func (c *current) onExtraListElement794() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement794() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement794()
}

func (c *current) onExtraListElement785() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement785() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement785()
}

func (c *current) onExtraListElement812() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement812() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement812()
}

func (c *current) onExtraListElement815() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement815() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement815()
}

func (c *current) onExtraListElement806() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement806() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement806()
}

func (c *current) onExtraListElement826() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement826() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement826()
}

func (c *current) onExtraListElement828() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement828() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement828()
}

func (c *current) onExtraListElement837() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement837() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement837()
}

func (c *current) onExtraListElement844() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement844() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement844()
}

func (c *current) onExtraListElement847(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement847() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement847(stack["depth"])
}

func (c *current) onExtraListElement841(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement841() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement841(stack["depth"])
}

func (c *current) onExtraListElement848() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement848() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement848()
}

func (c *current) onExtraListElement853() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement853() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement853()
}

func (c *current) onExtraListElement857() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement857() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement857()
}

func (c *current) onExtraListElement861() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement861() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement861()
}

func (c *current) onExtraListElement866() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement866() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement866()
}

func (c *current) onExtraListElement871(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement871() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement871(stack["prefix"])
}

func (c *current) onExtraListElement834(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement834() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement834(stack["prefix"])
}

func (c *current) onExtraListElement878() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement878() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement878()
}

func (c *current) onExtraListElement885() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement885() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement885()
}

func (c *current) onExtraListElement888(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement888() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement888(stack["depth"])
}

func (c *current) onExtraListElement882(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement882() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement882(stack["depth"])
}

func (c *current) onExtraListElement890() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement890() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement890()
}

func (c *current) onExtraListElement892(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement892() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement892(stack["prefix"])
}

func (c *current) onExtraListElement875(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement875() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement875(stack["prefix"])
}

func (c *current) onExtraListElement900() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement900() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement900()
}

func (c *current) onExtraListElement904(ref interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement904() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement904(stack["ref"])
}

func (c *current) onExtraListElement896(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement896() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement896(stack["ref"])
}

func (c *current) onExtraListElement916() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement916() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement916()
}

func (c *current) onExtraListElement919(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement919() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement919(stack["separator"])
}

func (c *current) onExtraListElement913(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement913() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement913(stack["separator"])
}

func (c *current) onExtraListElement922() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement922() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement922()
}

func (c *current) onExtraListElement909() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement909() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement909()
}

func (c *current) onExtraListElement933() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement933() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement933()
}

func (c *current) onExtraListElement936(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement936() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement936(stack["separator"])
}

func (c *current) onExtraListElement930(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement930() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement930(stack["separator"])
}

func (c *current) onExtraListElement947() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement947() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement947()
}

func (c *current) onExtraListElement950() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement950() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement950()
}

func (c *current) onExtraListElement960() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement960() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement960()
}

func (c *current) onExtraListElement963() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement963() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement963()
}

func (c *current) onExtraListElement973() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement973() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement973()
}

func (c *current) onExtraListElement976() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement976() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement976()
}

func (c *current) onExtraListElement986() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement986() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement986()
}

func (c *current) onExtraListElement989() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement989() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement989()
}

func (c *current) onExtraListElement999() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement999() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement999()
}

func (c *current) onExtraListElement1002() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1002() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1002()
}

func (c *current) onExtraListElement1012() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1012() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1012()
}

func (c *current) onExtraListElement1015() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1015() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1015()
}

func (c *current) onExtraListElement1025() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1025() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1025()
}

func (c *current) onExtraListElement1028() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1028() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1028()
}

func (c *current) onExtraListElement1038() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1038() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1038()
}

func (c *current) onExtraListElement1041() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1041() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1041()
}

func (c *current) onExtraListElement938(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonExtraListElement938() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement938(stack["delimiter"])
}

func (c *current) onExtraListElement1049() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonExtraListElement1049() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1049()
}

func (c *current) onExtraListElement1053() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1053() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1053()
}

func (c *current) onExtraListElement803(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement803() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement803(stack["content"])
}

func (c *current) onExtraListElement771(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonExtraListElement771() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement771(stack["content"])
}

func (c *current) onExtraListElement1062() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1062() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1062()
}

func (c *current) onExtraListElement1066() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement1066() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1066()
}

func (c *current) onExtraListElement1070() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1070() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1070()
}

func (c *current) onExtraListElement1060(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonExtraListElement1060() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1060(stack["content"])
}

func (c *current) onExtraListElement737(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonExtraListElement737() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement737(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onExtraListElement731(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement731() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement731(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement1083() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1083() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1083()
}

func (c *current) onExtraListElement1087() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1087() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1087()
}

func (c *current) onExtraListElement1077(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonExtraListElement1077() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1077(stack["content"])
}

func (c *current) onExtraListElement1105() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1105()
}

func (c *current) onExtraListElement1108() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1108()
}

func (c *current) onExtraListElement1099() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement1099() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1099()
}

func (c *current) onExtraListElement1119() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1119()
}

func (c *current) onExtraListElement1121() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1121()
}

func (c *current) onExtraListElement1130() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1130()
}

func (c *current) onExtraListElement1137() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement1137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1137()
}

func (c *current) onExtraListElement1140(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement1140() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1140(stack["depth"])
}

func (c *current) onExtraListElement1134(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement1134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1134(stack["depth"])
}

func (c *current) onExtraListElement1141() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement1141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1141()
}

func (c *current) onExtraListElement1146() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement1146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1146()
}

func (c *current) onExtraListElement1150() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement1150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1150()
}

func (c *current) onExtraListElement1154() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement1154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1154()
}

func (c *current) onExtraListElement1159() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement1159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1159()
}

func (c *current) onExtraListElement1164(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1164(stack["prefix"])
}

func (c *current) onExtraListElement1127(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement1127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1127(stack["prefix"])
}

func (c *current) onExtraListElement1171() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1171()
}

func (c *current) onExtraListElement1178() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement1178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1178()
}

func (c *current) onExtraListElement1181(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement1181() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1181(stack["depth"])
}

func (c *current) onExtraListElement1175(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement1175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1175(stack["depth"])
}

func (c *current) onExtraListElement1183() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement1183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1183()
}

func (c *current) onExtraListElement1185(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1185(stack["prefix"])
}

func (c *current) onExtraListElement1168(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement1168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1168(stack["prefix"])
}

func (c *current) onExtraListElement1193() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement1193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1193()
}

func (c *current) onExtraListElement1197(ref interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1197(stack["ref"])
}

func (c *current) onExtraListElement1189(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement1189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1189(stack["ref"])
}

func (c *current) onExtraListElement1209() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement1209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1209()
}

func (c *current) onExtraListElement1212(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement1212() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1212(stack["separator"])
}

func (c *current) onExtraListElement1206(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement1206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1206(stack["separator"])
}

func (c *current) onExtraListElement1215() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1215()
}

func (c *current) onExtraListElement1202() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement1202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1202()
}

func (c *current) onExtraListElement1226() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement1226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1226()
}

func (c *current) onExtraListElement1229(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement1229() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1229(stack["separator"])
}

func (c *current) onExtraListElement1223(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement1223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1223(stack["separator"])
}

func (c *current) onExtraListElement1240() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1240()
}

func (c *current) onExtraListElement1243() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1243()
}

func (c *current) onExtraListElement1253() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1253()
}

func (c *current) onExtraListElement1256() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1256()
}

func (c *current) onExtraListElement1266() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1266()
}

func (c *current) onExtraListElement1269() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1269()
}

func (c *current) onExtraListElement1279() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1279()
}

func (c *current) onExtraListElement1282() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1282()
}

func (c *current) onExtraListElement1292() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1292() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1292()
}

func (c *current) onExtraListElement1295() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1295()
}

func (c *current) onExtraListElement1305() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1305() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1305()
}

func (c *current) onExtraListElement1308() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1308() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1308()
}

func (c *current) onExtraListElement1318() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1318() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1318()
}

func (c *current) onExtraListElement1321() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1321()
}

func (c *current) onExtraListElement1331() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1331() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1331()
}

func (c *current) onExtraListElement1334() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1334() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1334()
}

func (c *current) onExtraListElement1231(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonExtraListElement1231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1231(stack["delimiter"])
}

func (c *current) onExtraListElement1342() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonExtraListElement1342() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1342()
}

func (c *current) onExtraListElement1346() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1346() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1346()
}

func (c *current) onExtraListElement1096(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement1096() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1096(stack["content"])
}

func (c *current) onExtraListElement1094(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement1094() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1094(stack["element"])
}

func (c *current) onExtraListElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1(stack["element"])
}

func (c *current) onListElementContinuation7() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuation7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation7()
}

func (c *current) onListElementContinuation9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuation9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation9()
}

func (c *current) onListElementContinuation16() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuation16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation16()
}

func (c *current) onListElementContinuation18(offset interface{}) (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuation18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation18(stack["offset"])
}

func (c *current) onListElementContinuation1(offset, element interface{}) (interface{}, error) {
	return types.NewListElementContinuation(len(offset.([]interface{})), element)

}

func (p *parser) callonListElementContinuation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation1(stack["offset"], stack["element"])
}

func (c *current) onListElementContinuationElement14() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement14()
}

func (c *current) onListElementContinuationElement21() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElementContinuationElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement21()
}

func (c *current) onListElementContinuationElement24(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElementContinuationElement24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement24(stack["depth"])
}

func (c *current) onListElementContinuationElement18(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElementContinuationElement18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement18(stack["depth"])
}

func (c *current) onListElementContinuationElement25() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElementContinuationElement25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement25()
}

func (c *current) onListElementContinuationElement30() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElementContinuationElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement30()
}

func (c *current) onListElementContinuationElement34() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElementContinuationElement34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement34()
}

func (c *current) onListElementContinuationElement38() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElementContinuationElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement38()
}

func (c *current) onListElementContinuationElement43() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElementContinuationElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement43()
}

func (c *current) onListElementContinuationElement48(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement48(stack["prefix"])
}

func (c *current) onListElementContinuationElement11(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElementContinuationElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement11(stack["prefix"])
}

func (c *current) onListElementContinuationElement55() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElementContinuationElement55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement55()
}

func (c *current) onListElementContinuationElement59() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement59()
}

func (c *current) onListElementContinuationElement52(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElementContinuationElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement52(stack["rawline"])
}

func (c *current) onListElementContinuationElement8(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonListElementContinuationElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement8(stack["prefix"], stack["content"])
}

func (c *current) onListElementContinuationElement72() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement72()
}

func (c *current) onListElementContinuationElement79() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElementContinuationElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement79()
}

func (c *current) onListElementContinuationElement82(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElementContinuationElement82() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement82(stack["depth"])
}

func (c *current) onListElementContinuationElement76(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonListElementContinuationElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement76(stack["depth"])
}

func (c *current) onListElementContinuationElement84() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonListElementContinuationElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement84()
}

func (c *current) onListElementContinuationElement86(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement86(stack["prefix"])
}

func (c *current) onListElementContinuationElement69(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElementContinuationElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement69(stack["prefix"])
}

func (c *current) onListElementContinuationElement97() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonListElementContinuationElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement97()
}

func (c *current) onListElementContinuationElement99() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElementContinuationElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement99()
}

func (c *current) onListElementContinuationElement101() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElementContinuationElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement101()
}

func (c *current) onListElementContinuationElement103(style interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement103(stack["style"])
}

func (c *current) onListElementContinuationElement91(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonListElementContinuationElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement91(stack["style"])
}

func (c *current) onListElementContinuationElement110() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElementContinuationElement110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement110()
}

func (c *current) onListElementContinuationElement114() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement114()
}

func (c *current) onListElementContinuationElement107(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElementContinuationElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement107(stack["rawline"])
}

func (c *current) onListElementContinuationElement66(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonListElementContinuationElement66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement66(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onListElementContinuationElement128() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElementContinuationElement128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement128()
}

func (c *current) onListElementContinuationElement132(ref interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement132(stack["ref"])
}

func (c *current) onListElementContinuationElement124(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElementContinuationElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement124(stack["ref"])
}

func (c *current) onListElementContinuationElement139() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement139()
}

func (c *current) onListElementContinuationElement143() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement143()
}

func (c *current) onListElementContinuationElement136(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonListElementContinuationElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement136(stack["rawline"])
}

func (c *current) onListElementContinuationElement121(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonListElementContinuationElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement121(stack["ref"], stack["description"])
}

func (c *current) onListElementContinuationElement160() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement160()
}

func (c *current) onListElementContinuationElement163(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElementContinuationElement163() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement163(stack["separator"])
}

func (c *current) onListElementContinuationElement157(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElementContinuationElement157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement157(stack["separator"])
}

func (c *current) onListElementContinuationElement166() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement166()
}

func (c *current) onListElementContinuationElement153() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElementContinuationElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement153()
}

func (c *current) onListElementContinuationElement178() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement178()
}

func (c *current) onListElementContinuationElement181(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElementContinuationElement181() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement181(stack["separator"])
}

func (c *current) onListElementContinuationElement175(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElementContinuationElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement175(stack["separator"])
}

func (c *current) onListElementContinuationElement187() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement187()
}

func (c *current) onListElementContinuationElement190() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement190()
}

func (c *current) onListElementContinuationElement204() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement204()
}

func (c *current) onListElementContinuationElement207() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement207()
}

func (c *current) onListElementContinuationElement198() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement198()
}

func (c *current) onListElementContinuationElement225() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement225()
}

func (c *current) onListElementContinuationElement228() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement228()
}

func (c *current) onListElementContinuationElement219() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement219()
}

func (c *current) onListElementContinuationElement239() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement239()
}

func (c *current) onListElementContinuationElement241() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement241()
}

func (c *current) onListElementContinuationElement250() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement250() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement250()
}

func (c *current) onListElementContinuationElement257() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElementContinuationElement257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement257()
}

func (c *current) onListElementContinuationElement260(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElementContinuationElement260() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement260(stack["depth"])
}

func (c *current) onListElementContinuationElement254(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElementContinuationElement254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement254(stack["depth"])
}

func (c *current) onListElementContinuationElement261() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElementContinuationElement261() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement261()
}

func (c *current) onListElementContinuationElement266() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElementContinuationElement266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement266()
}

func (c *current) onListElementContinuationElement270() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElementContinuationElement270() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement270()
}

func (c *current) onListElementContinuationElement274() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElementContinuationElement274() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement274()
}

func (c *current) onListElementContinuationElement279() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElementContinuationElement279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement279()
}

func (c *current) onListElementContinuationElement284(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement284() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement284(stack["prefix"])
}

func (c *current) onListElementContinuationElement247(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElementContinuationElement247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement247(stack["prefix"])
}

func (c *current) onListElementContinuationElement291() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement291() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement291()
}

func (c *current) onListElementContinuationElement298() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElementContinuationElement298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement298()
}

func (c *current) onListElementContinuationElement301(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElementContinuationElement301() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement301(stack["depth"])
}

func (c *current) onListElementContinuationElement295(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonListElementContinuationElement295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement295(stack["depth"])
}

func (c *current) onListElementContinuationElement303() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonListElementContinuationElement303() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement303()
}

func (c *current) onListElementContinuationElement305(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement305() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement305(stack["prefix"])
}

func (c *current) onListElementContinuationElement288(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElementContinuationElement288() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement288(stack["prefix"])
}

func (c *current) onListElementContinuationElement313() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElementContinuationElement313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement313()
}

func (c *current) onListElementContinuationElement317(ref interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement317(stack["ref"])
}

func (c *current) onListElementContinuationElement309(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElementContinuationElement309() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement309(stack["ref"])
}

func (c *current) onListElementContinuationElement329() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement329() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement329()
}

func (c *current) onListElementContinuationElement332(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElementContinuationElement332() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement332(stack["separator"])
}

func (c *current) onListElementContinuationElement326(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElementContinuationElement326() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement326(stack["separator"])
}

func (c *current) onListElementContinuationElement335() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement335() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement335()
}

func (c *current) onListElementContinuationElement322() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElementContinuationElement322() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement322()
}

func (c *current) onListElementContinuationElement346() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement346() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement346()
}

func (c *current) onListElementContinuationElement349(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElementContinuationElement349() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement349(stack["separator"])
}

func (c *current) onListElementContinuationElement343(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElementContinuationElement343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement343(stack["separator"])
}

func (c *current) onListElementContinuationElement360() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement360() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement360()
}

func (c *current) onListElementContinuationElement363() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement363() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement363()
}

func (c *current) onListElementContinuationElement373() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement373() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement373()
}

func (c *current) onListElementContinuationElement376() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement376() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement376()
}

func (c *current) onListElementContinuationElement386() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement386() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement386()
}

func (c *current) onListElementContinuationElement389() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement389() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement389()
}

func (c *current) onListElementContinuationElement399() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement399() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement399()
}

func (c *current) onListElementContinuationElement402() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement402() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement402()
}

func (c *current) onListElementContinuationElement412() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement412() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement412()
}

func (c *current) onListElementContinuationElement415() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement415() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement415()
}

func (c *current) onListElementContinuationElement425() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement425() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement425()
}

func (c *current) onListElementContinuationElement428() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement428()
}

func (c *current) onListElementContinuationElement438() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement438() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement438()
}

func (c *current) onListElementContinuationElement441() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement441() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement441()
}

func (c *current) onListElementContinuationElement451() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement451() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement451()
}

func (c *current) onListElementContinuationElement454() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement454() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement454()
}

func (c *current) onListElementContinuationElement351(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonListElementContinuationElement351() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement351(stack["delimiter"])
}

func (c *current) onListElementContinuationElement462() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonListElementContinuationElement462() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement462()
}

func (c *current) onListElementContinuationElement466() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement466() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement466()
}

func (c *current) onListElementContinuationElement216(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement216(stack["content"])
}

func (c *current) onListElementContinuationElement184(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonListElementContinuationElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement184(stack["content"])
}

func (c *current) onListElementContinuationElement475() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement475() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement475()
}

func (c *current) onListElementContinuationElement479() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElementContinuationElement479() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement479()
}

func (c *current) onListElementContinuationElement483() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement483() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement483()
}

func (c *current) onListElementContinuationElement473(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonListElementContinuationElement473() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement473(stack["content"])
}

func (c *current) onListElementContinuationElement150(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonListElementContinuationElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement150(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onListElementContinuationElement501() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement501() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement501()
}

func (c *current) onListElementContinuationElement504() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement504() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement504()
}

func (c *current) onListElementContinuationElement495() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement495() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement495()
}

func (c *current) onListElementContinuationElement515() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement515() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement515()
}

func (c *current) onListElementContinuationElement525() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement525() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement525()
}

func (c *current) onListElementContinuationElement534() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement534() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement534()
}

func (c *current) onListElementContinuationElement543() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonListElementContinuationElement543() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement543()
}

func (c *current) onListElementContinuationElement548() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonListElementContinuationElement548() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement548()
}

func (c *current) onListElementContinuationElement555() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement555() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement555()
}

func (c *current) onListElementContinuationElement567() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement567() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement567()
}

func (c *current) onListElementContinuationElement569() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonListElementContinuationElement569() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement569()
}

func (c *current) onListElementContinuationElement562(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonListElementContinuationElement562() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement562(stack["start"])
}

func (c *current) onListElementContinuationElement551(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonListElementContinuationElement551() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement551(stack["name"], stack["start"])
}

func (c *current) onListElementContinuationElement577() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement577() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement577()
}

func (c *current) onListElementContinuationElement589() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement589() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement589()
}

func (c *current) onListElementContinuationElement591() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonListElementContinuationElement591() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement591()
}

func (c *current) onListElementContinuationElement584(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonListElementContinuationElement584() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement584(stack["start"])
}

func (c *current) onListElementContinuationElement573(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonListElementContinuationElement573() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement573(stack["name"], stack["start"])
}

func (c *current) onListElementContinuationElement599() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement599() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement599()
}

func (c *current) onListElementContinuationElement595(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonListElementContinuationElement595() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement595(stack["name"])
}

func (c *current) onListElementContinuationElement546(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonListElementContinuationElement546() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement546(stack["element"])
}

func (c *current) onListElementContinuationElement605() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonListElementContinuationElement605() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement605()
}

func (c *current) onListElementContinuationElement530(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonListElementContinuationElement530() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement530(stack["element"])
}

func (c *current) onListElementContinuationElement523(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonListElementContinuationElement523() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement523(stack["elements"])
}

func (c *current) onListElementContinuationElement608() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement608() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement608()
}

func (c *current) onListElementContinuationElement511(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	return d, nil

}

func (p *parser) callonListElementContinuationElement511() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement511(stack["name"], stack["value"])
}

func (c *current) onListElementContinuationElement619() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement619() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement619()
}

func (c *current) onListElementContinuationElement626() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement626() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement626()
}

func (c *current) onListElementContinuationElement629() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement629() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement629()
}

func (c *current) onListElementContinuationElement615(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonListElementContinuationElement615() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement615(stack["name"])
}

func (c *current) onListElementContinuationElement640() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement640() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement640()
}

func (c *current) onListElementContinuationElement647() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement647() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement647()
}

func (c *current) onListElementContinuationElement650() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement650() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement650()
}

func (c *current) onListElementContinuationElement636(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonListElementContinuationElement636() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement636(stack["name"])
}

func (c *current) onListElementContinuationElement658() (interface{}, error) {
	// TODO: Space* before EOF
	return types.NewThematicBreak()

}

func (p *parser) callonListElementContinuationElement658() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement658()
}

func (c *current) onListElementContinuationElement675() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement675() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement675()
}

func (c *current) onListElementContinuationElement678() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement678() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement678()
}

func (c *current) onListElementContinuationElement695() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement695() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement695()
}

func (c *current) onListElementContinuationElement701() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement701() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement701()
}

func (c *current) onListElementContinuationElement699(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonListElementContinuationElement699() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement699(stack["content"])
}

func (c *current) onListElementContinuationElement691(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonListElementContinuationElement691() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement691(stack["content"])
}

func (c *current) onListElementContinuationElement705() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement705() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement705()
}

func (c *current) onListElementContinuationElement719() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement719() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement719()
}

func (c *current) onListElementContinuationElement722() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement722() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement722()
}

func (c *current) onListElementContinuationElement713() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement713() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement713()
}

func (c *current) onListElementContinuationElement687(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonListElementContinuationElement687() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement687(stack["cells"])
}

func (c *current) onListElementContinuationElement739() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement739() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement739()
}

func (c *current) onListElementContinuationElement742() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement742() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement742()
}

func (c *current) onListElementContinuationElement763() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement763() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement763()
}

func (c *current) onListElementContinuationElement766() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement766() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement766()
}

func (c *current) onListElementContinuationElement782() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement782() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement782()
}

func (c *current) onListElementContinuationElement785() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement785() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement785()
}

func (c *current) onListElementContinuationElement776() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement776() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement776()
}

func (c *current) onListElementContinuationElement794() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement794() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement794()
}

func (c *current) onListElementContinuationElement800() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement800() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement800()
}

func (c *current) onListElementContinuationElement798(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonListElementContinuationElement798() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement798(stack["content"])
}

func (c *current) onListElementContinuationElement756(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonListElementContinuationElement756() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement756(stack["content"])
}

func (c *current) onListElementContinuationElement804() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement804() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement804()
}

func (c *current) onListElementContinuationElement753(cell interface{}) (interface{}, error) {
	return cell, nil

}

func (p *parser) callonListElementContinuationElement753() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement753(stack["cell"])
}

func (c *current) onListElementContinuationElement819() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement819() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement819()
}

func (c *current) onListElementContinuationElement822() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement822() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement822()
}

func (c *current) onListElementContinuationElement813() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement813() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement813()
}

func (c *current) onListElementContinuationElement834() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement834() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement834()
}

func (c *current) onListElementContinuationElement837() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement837() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement837()
}

func (c *current) onListElementContinuationElement732(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonListElementContinuationElement732() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement732(stack["cells"])
}

func (c *current) onListElementContinuationElement853() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement853() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement853()
}

func (c *current) onListElementContinuationElement856() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement856() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement856()
}

func (c *current) onListElementContinuationElement874() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement874() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement874()
}

func (c *current) onListElementContinuationElement877() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement877() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement877()
}

func (c *current) onListElementContinuationElement893() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement893() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement893()
}

func (c *current) onListElementContinuationElement896() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement896() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement896()
}

func (c *current) onListElementContinuationElement887() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement887() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement887()
}

func (c *current) onListElementContinuationElement905() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement905() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement905()
}

func (c *current) onListElementContinuationElement911() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement911() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement911()
}

func (c *current) onListElementContinuationElement909(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonListElementContinuationElement909() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement909(stack["content"])
}

func (c *current) onListElementContinuationElement867(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonListElementContinuationElement867() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement867(stack["content"])
}

func (c *current) onListElementContinuationElement915() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement915() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement915()
}

func (c *current) onListElementContinuationElement929() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement929() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement929()
}

func (c *current) onListElementContinuationElement932() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement932() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement932()
}

func (c *current) onListElementContinuationElement923() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement923() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement923()
}

func (c *current) onListElementContinuationElement846(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonListElementContinuationElement846() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement846(stack["cells"])
}

func (c *current) onListElementContinuationElement943() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement943() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement943()
}

func (c *current) onListElementContinuationElement946() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement946() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement946()
}

func (c *current) onListElementContinuationElement671(header, rows interface{}) (interface{}, error) {
	return types.NewTable(header, rows.([]interface{}))

}

func (p *parser) callonListElementContinuationElement671() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement671(stack["header"], stack["rows"])
}

func (c *current) onListElementContinuationElement961() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement961() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement961()
}

func (c *current) onListElementContinuationElement965() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement965() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement965()
}

func (c *current) onListElementContinuationElement955(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElementContinuationElement955() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement955(stack["content"])
}

func (c *current) onListElementContinuationElement976() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonListElementContinuationElement976() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement976()
}

func (c *current) onListElementContinuationElement978() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonListElementContinuationElement978() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement978()
}

func (c *current) onListElementContinuationElement980() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonListElementContinuationElement980() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement980()
}

func (c *current) onListElementContinuationElement982() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonListElementContinuationElement982() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement982()
}

func (c *current) onListElementContinuationElement984() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonListElementContinuationElement984() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement984()
}

func (c *current) onListElementContinuationElement991() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement991() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement991()
}

func (c *current) onListElementContinuationElement994(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonListElementContinuationElement994() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement994(stack["content"])
}

func (c *current) onListElementContinuationElement996() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement996() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement996()
}

func (c *current) onListElementContinuationElement988(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement988() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement988(stack["content"])
}

func (c *current) onListElementContinuationElement1011() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1011() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1011()
}

func (c *current) onListElementContinuationElement1013() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1013() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1013()
}

func (c *current) onListElementContinuationElement1026() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1026() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1026()
}

func (c *current) onListElementContinuationElement1030() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1030() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1030()
}

func (c *current) onListElementContinuationElement1020(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElementContinuationElement1020() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1020(stack["content"])
}

func (c *current) onListElementContinuationElement1040() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1040() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1040()
}

func (c *current) onListElementContinuationElement1043(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonListElementContinuationElement1043() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1043(stack["content"])
}

func (c *current) onListElementContinuationElement1045() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1045() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1045()
}

func (c *current) onListElementContinuationElement1037(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1037() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1037(stack["content"])
}

func (c *current) onListElementContinuationElement1005(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement1005() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1005(stack["line"])
}

func (c *current) onListElementContinuationElement972(kind, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(kind.(string), append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonListElementContinuationElement972() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement972(stack["kind"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onListElementContinuationElement1060() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1060() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1060()
}

func (c *current) onListElementContinuationElement1058() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1058() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1058()
}

func (c *current) onListElementContinuationElement1065(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonListElementContinuationElement1065() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1065(stack["content"])
}

func (c *current) onListElementContinuationElement1067() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1067() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1067()
}

func (c *current) onListElementContinuationElement1055(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1055() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1055(stack["content"])
}

func (c *current) onListElementContinuationElement1083() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1083() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1083()
}

func (c *current) onListElementContinuationElement1087() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1087() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1087()
}

func (c *current) onListElementContinuationElement1077(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElementContinuationElement1077() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1077(stack["content"])
}

func (c *current) onListElementContinuationElement1097() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1097() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1097()
}

func (c *current) onListElementContinuationElement1100(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonListElementContinuationElement1100() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1100(stack["content"])
}

func (c *current) onListElementContinuationElement1102() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1102()
}

func (c *current) onListElementContinuationElement1094(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1094() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1094(stack["content"])
}

func (c *current) onListElementContinuationElement1052(firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewLiteralParagraph(types.LiteralBlockWithSpacesOnFirstLine, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonListElementContinuationElement1052() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1052(stack["firstLine"], stack["otherLines"])
}

func (c *current) onListElementContinuationElement1112() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1112()
}

func (c *current) onListElementContinuationElement1116() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1116()
}

func (c *current) onListElementContinuationElement1109(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewParagraph(types.RawLine(content.(string)))

}

func (p *parser) callonListElementContinuationElement1109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1109(stack["content"])
}

func (c *current) onListElementContinuationElement1(attributes, element interface{}) (interface{}, error) {
	if element, ok := element.(types.BlockWithAttributes); ok && attributes != nil {
		element.AddAttributes(attributes.(types.Attributes))
	}
	// if log.IsLevelEnabled(log.DebugLevel) {
	//     log.Debugf("returning element '%s'\n", spew.Sdump(element))
	// }
	return element, nil

}

func (p *parser) callonListElementContinuationElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1(stack["attributes"], stack["element"])
}

func (c *current) onCallout3() (bool, error) {
	return c.isSubstitutionEnabled(Callouts)

}

func (p *parser) callonCallout3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout3()
}

func (c *current) onCallout6() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout6()
}

func (c *current) onCallout11() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonCallout11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout11()
}

func (c *current) onCallout15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonCallout15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout15()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onShortcutParagraph10() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph10()
}

func (c *current) onShortcutParagraph17() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonShortcutParagraph17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph17()
}

func (c *current) onShortcutParagraph20(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonShortcutParagraph20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph20(stack["depth"])
}

func (c *current) onShortcutParagraph14(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonShortcutParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph14(stack["depth"])
}

func (c *current) onShortcutParagraph21() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonShortcutParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph21()
}

func (c *current) onShortcutParagraph26() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonShortcutParagraph26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph26()
}

func (c *current) onShortcutParagraph30() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonShortcutParagraph30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph30()
}

func (c *current) onShortcutParagraph34() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonShortcutParagraph34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph34()
}

func (c *current) onShortcutParagraph39() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonShortcutParagraph39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph39()
}

func (c *current) onShortcutParagraph44(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph44(stack["prefix"])
}

func (c *current) onShortcutParagraph7(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonShortcutParagraph7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph7(stack["prefix"])
}

func (c *current) onShortcutParagraph52() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph52()
}

func (c *current) onShortcutParagraph59() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonShortcutParagraph59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph59()
}

func (c *current) onShortcutParagraph62(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonShortcutParagraph62() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph62(stack["depth"])
}

func (c *current) onShortcutParagraph56(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonShortcutParagraph56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph56(stack["depth"])
}

func (c *current) onShortcutParagraph64() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonShortcutParagraph64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph64()
}

func (c *current) onShortcutParagraph66(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph66(stack["prefix"])
}

func (c *current) onShortcutParagraph49(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonShortcutParagraph49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph49(stack["prefix"])
}

func (c *current) onShortcutParagraph72() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonShortcutParagraph72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph72()
}

func (c *current) onShortcutParagraph74() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonShortcutParagraph74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph74()
}

func (c *current) onShortcutParagraph76() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonShortcutParagraph76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph76()
}

func (c *current) onShortcutParagraph78() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonShortcutParagraph78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph78()
}

func (c *current) onShortcutParagraph80() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonShortcutParagraph80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph80()
}

func (c *current) onShortcutParagraph86() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph86()
}

func (c *current) onShortcutParagraph89(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonShortcutParagraph89() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph89(stack["content"])
}

func (c *current) onShortcutParagraph91() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph91()
}

func (c *current) onShortcutParagraph83(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonShortcutParagraph83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph83(stack["content"])
}

func (c *current) onShortcutParagraph98(firstLine interface{}) (bool, error) {
	// also, make sure that there is no LabeledListElement delimiter (`::` - `::::`)
	//   in the middle of the line (with space afterwards)
	//   or at the end of the line
	return !strings.Contains(string(firstLine.(types.RawLine)), ":: ") &&
		!strings.HasSuffix(string(firstLine.(types.RawLine)), "::"), nil

}

func (p *parser) callonShortcutParagraph98() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph98(stack["firstLine"])
}

func (c *current) onShortcutParagraph113() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph113()
}

func (c *current) onShortcutParagraph116() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph116()
}

func (c *current) onShortcutParagraph107() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonShortcutParagraph107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph107()
}

func (c *current) onShortcutParagraph129() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph129()
}

func (c *current) onShortcutParagraph131() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph131()
}

func (c *current) onShortcutParagraph144() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph144()
}

func (c *current) onShortcutParagraph148() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph148()
}

func (c *current) onShortcutParagraph138(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonShortcutParagraph138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph138(stack["content"])
}

func (c *current) onShortcutParagraph158() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph158()
}

func (c *current) onShortcutParagraph161(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonShortcutParagraph161() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph161(stack["content"])
}

func (c *current) onShortcutParagraph163() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph163()
}

func (c *current) onShortcutParagraph155(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonShortcutParagraph155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph155(stack["content"])
}

func (c *current) onShortcutParagraph101(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonShortcutParagraph101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph101(stack["line"])
}

func (c *current) onShortcutParagraph1(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...)...)

}

func (p *parser) callonShortcutParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraph7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraph7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph7()
}

func (c *current) onParagraph10(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonParagraph10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph10(stack["content"])
}

func (c *current) onParagraph12() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph12()
}

func (c *current) onParagraph4(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonParagraph4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph4(stack["content"])
}

func (c *current) onParagraph33() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonParagraph33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph33()
}

func (c *current) onParagraph36() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph36()
}

func (c *current) onParagraph27() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonParagraph27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph27()
}

func (c *current) onParagraph49() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonParagraph49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph49()
}

func (c *current) onParagraph51() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph51()
}

func (c *current) onParagraph64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraph64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph64()
}

func (c *current) onParagraph68() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph68()
}

func (c *current) onParagraph58(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonParagraph58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph58(stack["content"])
}

func (c *current) onParagraph78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraph78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph78()
}

func (c *current) onParagraph81(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonParagraph81() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph81(stack["content"])
}

func (c *current) onParagraph83() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph83()
}

func (c *current) onParagraph75(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonParagraph75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph75(stack["content"])
}

func (c *current) onParagraph21(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph21(stack["line"])
}

func (c *current) onParagraph1(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...)...)

}

func (p *parser) callonParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onQuotedText2(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText2(stack["attributes"], stack["text"])
}

func (c *current) onEscapedQuotedText1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonEscapedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText1(stack["element"])
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement13() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement13()
}

func (c *current) onDoubleQuoteBoldTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement7()
}

func (c *current) onDoubleQuoteBoldTextElement16() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement16()
}

func (c *current) onDoubleQuoteBoldTextElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement20()
}

func (c *current) onDoubleQuoteBoldTextElement26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement26()
}

func (c *current) onDoubleQuoteBoldTextElement33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteBoldTextElement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement33()
}

func (c *current) onDoubleQuoteBoldTextElement40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement40()
}

func (c *current) onDoubleQuoteBoldTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement52()
}

func (c *current) onDoubleQuoteBoldTextElement54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement54()
}

func (c *current) onDoubleQuoteBoldTextElement47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement47(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteBoldTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement36(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement62()
}

func (c *current) onDoubleQuoteBoldTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement74()
}

func (c *current) onDoubleQuoteBoldTextElement76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement76()
}

func (c *current) onDoubleQuoteBoldTextElement69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement69(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteBoldTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement58(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement84()
}

func (c *current) onDoubleQuoteBoldTextElement80(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteBoldTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement80(stack["name"])
}

func (c *current) onDoubleQuoteBoldTextElement31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement31(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement92() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonDoubleQuoteBoldTextElement92() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement92()
}

func (c *current) onDoubleQuoteBoldTextElement101() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement101()
}

func (c *current) onDoubleQuoteBoldTextElement105() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement105()
}

func (c *current) onDoubleQuoteBoldTextElement111() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement111()
}

func (c *current) onDoubleQuoteBoldTextElement118() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteBoldTextElement118() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement118()
}

func (c *current) onDoubleQuoteBoldTextElement125() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement125()
}

func (c *current) onDoubleQuoteBoldTextElement137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement137()
}

func (c *current) onDoubleQuoteBoldTextElement139() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement139()
}

func (c *current) onDoubleQuoteBoldTextElement132(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement132(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement121(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteBoldTextElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement121(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement147() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement147()
}

func (c *current) onDoubleQuoteBoldTextElement159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement159()
}

func (c *current) onDoubleQuoteBoldTextElement161() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement161()
}

func (c *current) onDoubleQuoteBoldTextElement154(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement154(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement143(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteBoldTextElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement143(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement169() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement169()
}

func (c *current) onDoubleQuoteBoldTextElement165(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteBoldTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement165(stack["name"])
}

func (c *current) onDoubleQuoteBoldTextElement116(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement116(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement175() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement175()
}

func (c *current) onDoubleQuoteBoldTextElement97(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteBoldTextElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement97(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteBoldTextElement182() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement182()
}

func (c *current) onDoubleQuoteBoldTextElement178(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteBoldTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement178(stack["id"])
}

func (c *current) onDoubleQuoteBoldTextElement95() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement95()
}

func (c *current) onDoubleQuoteBoldTextElement186() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement186()
}

func (c *current) onDoubleQuoteBoldTextElement90(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement90(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement188() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteBoldTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement188()
}

func (c *current) onDoubleQuoteBoldTextElement190() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteBoldTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement190()
}

func (c *current) onDoubleQuoteBoldTextElement192() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteBoldTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement192()
}

func (c *current) onDoubleQuoteBoldTextElement194() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteBoldTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement194()
}

func (c *current) onDoubleQuoteBoldTextElement196() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteBoldTextElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement196()
}

func (c *current) onDoubleQuoteBoldTextElement198() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonDoubleQuoteBoldTextElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement198()
}

func (c *current) onDoubleQuoteBoldTextElement211() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement211()
}

func (c *current) onDoubleQuoteBoldTextElement207(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteBoldTextElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement207(stack["ref"])
}

func (c *current) onDoubleQuoteBoldTextElement219() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement219()
}

func (c *current) onDoubleQuoteBoldTextElement216() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement216()
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText1(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElements7() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements7()
}

func (c *current) onSingleQuoteBoldTextElements12(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteBoldTextElements12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements12(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteBoldTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElement8() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement8()
}

func (c *current) onSingleQuoteBoldTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement2()
}

func (c *current) onSingleQuoteBoldTextElement11() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement11()
}

func (c *current) onSingleQuoteBoldTextElement15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement15()
}

func (c *current) onSingleQuoteBoldTextElement21() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement21()
}

func (c *current) onSingleQuoteBoldTextElement28() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteBoldTextElement28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement28()
}

func (c *current) onSingleQuoteBoldTextElement35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement35()
}

func (c *current) onSingleQuoteBoldTextElement47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement47()
}

func (c *current) onSingleQuoteBoldTextElement49() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement49()
}

func (c *current) onSingleQuoteBoldTextElement42(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement42(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement31(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteBoldTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement31(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement57()
}

func (c *current) onSingleQuoteBoldTextElement69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement69()
}

func (c *current) onSingleQuoteBoldTextElement71() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement71()
}

func (c *current) onSingleQuoteBoldTextElement64(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement64(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement53(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteBoldTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement53(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement79()
}

func (c *current) onSingleQuoteBoldTextElement75(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteBoldTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement75(stack["name"])
}

func (c *current) onSingleQuoteBoldTextElement26(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement26(stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement87() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSingleQuoteBoldTextElement87() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement87()
}

func (c *current) onSingleQuoteBoldTextElement96() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement96()
}

func (c *current) onSingleQuoteBoldTextElement100() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement100()
}

func (c *current) onSingleQuoteBoldTextElement106() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement106()
}

func (c *current) onSingleQuoteBoldTextElement113() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteBoldTextElement113() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement113()
}

func (c *current) onSingleQuoteBoldTextElement120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement120()
}

func (c *current) onSingleQuoteBoldTextElement132() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement132()
}

func (c *current) onSingleQuoteBoldTextElement134() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement134()
}

func (c *current) onSingleQuoteBoldTextElement127(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement127(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement116(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteBoldTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement116(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement142()
}

func (c *current) onSingleQuoteBoldTextElement154() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement154()
}

func (c *current) onSingleQuoteBoldTextElement156() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement156()
}

func (c *current) onSingleQuoteBoldTextElement149(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement149(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement138(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteBoldTextElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement138(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement164() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement164()
}

func (c *current) onSingleQuoteBoldTextElement160(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteBoldTextElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement160(stack["name"])
}

func (c *current) onSingleQuoteBoldTextElement111(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement111(stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement170() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement170()
}

func (c *current) onSingleQuoteBoldTextElement92(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteBoldTextElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement92(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteBoldTextElement177() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement177()
}

func (c *current) onSingleQuoteBoldTextElement173(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteBoldTextElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement173(stack["id"])
}

func (c *current) onSingleQuoteBoldTextElement90() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement90()
}

func (c *current) onSingleQuoteBoldTextElement181() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement181()
}

func (c *current) onSingleQuoteBoldTextElement85(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement85(stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement183() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteBoldTextElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement183()
}

func (c *current) onSingleQuoteBoldTextElement185() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteBoldTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement185()
}

func (c *current) onSingleQuoteBoldTextElement187() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteBoldTextElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement187()
}

func (c *current) onSingleQuoteBoldTextElement189() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteBoldTextElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement189()
}

func (c *current) onSingleQuoteBoldTextElement191() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteBoldTextElement191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement191()
}

func (c *current) onSingleQuoteBoldTextElement193() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonSingleQuoteBoldTextElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement193()
}

func (c *current) onSingleQuoteBoldTextElement206() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement206()
}

func (c *current) onSingleQuoteBoldTextElement202(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteBoldTextElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement202(stack["ref"])
}

func (c *current) onSingleQuoteBoldTextElement214() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement214()
}

func (c *current) onSingleQuoteBoldTextElement211() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement211()
}

func (c *current) onQuotedTextInSingleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedBoldText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText5()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText17()
}

func (c *current) onEscapedBoldText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText27()
}

func (c *current) onEscapedBoldText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement13() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement13()
}

func (c *current) onDoubleQuoteItalicTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement7()
}

func (c *current) onDoubleQuoteItalicTextElement16() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement16()
}

func (c *current) onDoubleQuoteItalicTextElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement20()
}

func (c *current) onDoubleQuoteItalicTextElement26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement26()
}

func (c *current) onDoubleQuoteItalicTextElement33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteItalicTextElement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement33()
}

func (c *current) onDoubleQuoteItalicTextElement40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement40()
}

func (c *current) onDoubleQuoteItalicTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement52()
}

func (c *current) onDoubleQuoteItalicTextElement54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement54()
}

func (c *current) onDoubleQuoteItalicTextElement47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement47(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteItalicTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement36(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement62()
}

func (c *current) onDoubleQuoteItalicTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement74()
}

func (c *current) onDoubleQuoteItalicTextElement76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement76()
}

func (c *current) onDoubleQuoteItalicTextElement69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement69(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteItalicTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement58(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement84()
}

func (c *current) onDoubleQuoteItalicTextElement80(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteItalicTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement80(stack["name"])
}

func (c *current) onDoubleQuoteItalicTextElement31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement31(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement92() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonDoubleQuoteItalicTextElement92() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement92()
}

func (c *current) onDoubleQuoteItalicTextElement101() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement101()
}

func (c *current) onDoubleQuoteItalicTextElement105() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement105()
}

func (c *current) onDoubleQuoteItalicTextElement111() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement111()
}

func (c *current) onDoubleQuoteItalicTextElement118() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteItalicTextElement118() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement118()
}

func (c *current) onDoubleQuoteItalicTextElement125() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement125()
}

func (c *current) onDoubleQuoteItalicTextElement137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement137()
}

func (c *current) onDoubleQuoteItalicTextElement139() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement139()
}

func (c *current) onDoubleQuoteItalicTextElement132(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement132(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement121(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteItalicTextElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement121(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement147() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement147()
}

func (c *current) onDoubleQuoteItalicTextElement159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement159()
}

func (c *current) onDoubleQuoteItalicTextElement161() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement161()
}

func (c *current) onDoubleQuoteItalicTextElement154(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement154(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement143(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteItalicTextElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement143(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement169() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement169()
}

func (c *current) onDoubleQuoteItalicTextElement165(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteItalicTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement165(stack["name"])
}

func (c *current) onDoubleQuoteItalicTextElement116(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement116(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement175() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement175()
}

func (c *current) onDoubleQuoteItalicTextElement97(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteItalicTextElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement97(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteItalicTextElement182() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement182()
}

func (c *current) onDoubleQuoteItalicTextElement178(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteItalicTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement178(stack["id"])
}

func (c *current) onDoubleQuoteItalicTextElement95() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement95()
}

func (c *current) onDoubleQuoteItalicTextElement186() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement186()
}

func (c *current) onDoubleQuoteItalicTextElement90(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement90(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement188() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteItalicTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement188()
}

func (c *current) onDoubleQuoteItalicTextElement190() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteItalicTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement190()
}

func (c *current) onDoubleQuoteItalicTextElement192() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteItalicTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement192()
}

func (c *current) onDoubleQuoteItalicTextElement194() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteItalicTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement194()
}

func (c *current) onDoubleQuoteItalicTextElement196() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteItalicTextElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement196()
}

func (c *current) onDoubleQuoteItalicTextElement198() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonDoubleQuoteItalicTextElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement198()
}

func (c *current) onDoubleQuoteItalicTextElement211() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement211()
}

func (c *current) onDoubleQuoteItalicTextElement207(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteItalicTextElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement207(stack["ref"])
}

func (c *current) onDoubleQuoteItalicTextElement219() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement219()
}

func (c *current) onDoubleQuoteItalicTextElement216() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement216()
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteItalicText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText1(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements7() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements7()
}

func (c *current) onSingleQuoteItalicTextElements12(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteItalicTextElements12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements12(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteItalicTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElement8() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement8()
}

func (c *current) onSingleQuoteItalicTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement2()
}

func (c *current) onSingleQuoteItalicTextElement11() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement11()
}

func (c *current) onSingleQuoteItalicTextElement15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement15()
}

func (c *current) onSingleQuoteItalicTextElement21() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement21()
}

func (c *current) onSingleQuoteItalicTextElement28() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteItalicTextElement28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement28()
}

func (c *current) onSingleQuoteItalicTextElement35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement35()
}

func (c *current) onSingleQuoteItalicTextElement47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement47()
}

func (c *current) onSingleQuoteItalicTextElement49() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement49()
}

func (c *current) onSingleQuoteItalicTextElement42(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement42(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement31(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteItalicTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement31(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement57()
}

func (c *current) onSingleQuoteItalicTextElement69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement69()
}

func (c *current) onSingleQuoteItalicTextElement71() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement71()
}

func (c *current) onSingleQuoteItalicTextElement64(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement64(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement53(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteItalicTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement53(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement79()
}

func (c *current) onSingleQuoteItalicTextElement75(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteItalicTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement75(stack["name"])
}

func (c *current) onSingleQuoteItalicTextElement26(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement26(stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement87() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSingleQuoteItalicTextElement87() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement87()
}

func (c *current) onSingleQuoteItalicTextElement96() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement96()
}

func (c *current) onSingleQuoteItalicTextElement100() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement100()
}

func (c *current) onSingleQuoteItalicTextElement106() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement106()
}

func (c *current) onSingleQuoteItalicTextElement113() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteItalicTextElement113() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement113()
}

func (c *current) onSingleQuoteItalicTextElement120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement120()
}

func (c *current) onSingleQuoteItalicTextElement132() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement132()
}

func (c *current) onSingleQuoteItalicTextElement134() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement134()
}

func (c *current) onSingleQuoteItalicTextElement127(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement127(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement116(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteItalicTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement116(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement142()
}

func (c *current) onSingleQuoteItalicTextElement154() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement154()
}

func (c *current) onSingleQuoteItalicTextElement156() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement156()
}

func (c *current) onSingleQuoteItalicTextElement149(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement149(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement138(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteItalicTextElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement138(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement164() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement164()
}

func (c *current) onSingleQuoteItalicTextElement160(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteItalicTextElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement160(stack["name"])
}

func (c *current) onSingleQuoteItalicTextElement111(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement111(stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement170() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement170()
}

func (c *current) onSingleQuoteItalicTextElement92(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteItalicTextElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement92(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteItalicTextElement177() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement177()
}

func (c *current) onSingleQuoteItalicTextElement173(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteItalicTextElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement173(stack["id"])
}

func (c *current) onSingleQuoteItalicTextElement90() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement90()
}

func (c *current) onSingleQuoteItalicTextElement181() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement181()
}

func (c *current) onSingleQuoteItalicTextElement85(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement85(stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement183() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteItalicTextElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement183()
}

func (c *current) onSingleQuoteItalicTextElement185() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteItalicTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement185()
}

func (c *current) onSingleQuoteItalicTextElement187() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteItalicTextElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement187()
}

func (c *current) onSingleQuoteItalicTextElement189() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteItalicTextElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement189()
}

func (c *current) onSingleQuoteItalicTextElement191() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteItalicTextElement191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement191()
}

func (c *current) onSingleQuoteItalicTextElement193() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonSingleQuoteItalicTextElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement193()
}

func (c *current) onSingleQuoteItalicTextElement206() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement206()
}

func (c *current) onSingleQuoteItalicTextElement202(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteItalicTextElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement202(stack["ref"])
}

func (c *current) onSingleQuoteItalicTextElement214() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement214()
}

func (c *current) onSingleQuoteItalicTextElement211() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement211()
}

func (c *current) onQuotedTextInSingleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedItalicText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText5()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText17()
}

func (c *current) onEscapedItalicText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText27()
}

func (c *current) onEscapedItalicText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement13() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement13()
}

func (c *current) onDoubleQuoteMonospaceTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement7()
}

func (c *current) onDoubleQuoteMonospaceTextElement16() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement16()
}

func (c *current) onDoubleQuoteMonospaceTextElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement20()
}

func (c *current) onDoubleQuoteMonospaceTextElement26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement26()
}

func (c *current) onDoubleQuoteMonospaceTextElement33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement33()
}

func (c *current) onDoubleQuoteMonospaceTextElement40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement40()
}

func (c *current) onDoubleQuoteMonospaceTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement52()
}

func (c *current) onDoubleQuoteMonospaceTextElement54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement54()
}

func (c *current) onDoubleQuoteMonospaceTextElement47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement47(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteMonospaceTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement36(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement62()
}

func (c *current) onDoubleQuoteMonospaceTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement74()
}

func (c *current) onDoubleQuoteMonospaceTextElement76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement76()
}

func (c *current) onDoubleQuoteMonospaceTextElement69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement69(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteMonospaceTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement58(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement84()
}

func (c *current) onDoubleQuoteMonospaceTextElement80(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement80(stack["name"])
}

func (c *current) onDoubleQuoteMonospaceTextElement31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement31(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement92() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement92() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement92()
}

func (c *current) onDoubleQuoteMonospaceTextElement101() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement101()
}

func (c *current) onDoubleQuoteMonospaceTextElement105() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement105()
}

func (c *current) onDoubleQuoteMonospaceTextElement111() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement111()
}

func (c *current) onDoubleQuoteMonospaceTextElement118() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement118() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement118()
}

func (c *current) onDoubleQuoteMonospaceTextElement125() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement125()
}

func (c *current) onDoubleQuoteMonospaceTextElement137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement137()
}

func (c *current) onDoubleQuoteMonospaceTextElement139() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement139()
}

func (c *current) onDoubleQuoteMonospaceTextElement132(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement132(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement121(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteMonospaceTextElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement121(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement147() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement147()
}

func (c *current) onDoubleQuoteMonospaceTextElement159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement159()
}

func (c *current) onDoubleQuoteMonospaceTextElement161() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement161()
}

func (c *current) onDoubleQuoteMonospaceTextElement154(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement154(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement143(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteMonospaceTextElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement143(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement169() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement169()
}

func (c *current) onDoubleQuoteMonospaceTextElement165(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement165(stack["name"])
}

func (c *current) onDoubleQuoteMonospaceTextElement116(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement116(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement175() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement175()
}

func (c *current) onDoubleQuoteMonospaceTextElement97(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement97(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteMonospaceTextElement182() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement182()
}

func (c *current) onDoubleQuoteMonospaceTextElement178(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement178(stack["id"])
}

func (c *current) onDoubleQuoteMonospaceTextElement95() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement95()
}

func (c *current) onDoubleQuoteMonospaceTextElement186() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement186()
}

func (c *current) onDoubleQuoteMonospaceTextElement90(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement90(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement188() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement188()
}

func (c *current) onDoubleQuoteMonospaceTextElement190() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement190()
}

func (c *current) onDoubleQuoteMonospaceTextElement192() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement192()
}

func (c *current) onDoubleQuoteMonospaceTextElement194() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement194()
}

func (c *current) onDoubleQuoteMonospaceTextElement196() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement196()
}

func (c *current) onDoubleQuoteMonospaceTextElement198() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement198()
}

func (c *current) onDoubleQuoteMonospaceTextElement212() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement212()
}

func (c *current) onDoubleQuoteMonospaceTextElement208(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement208(stack["ref"])
}

func (c *current) onDoubleQuoteMonospaceTextElement220() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement220()
}

func (c *current) onDoubleQuoteMonospaceTextElement217() (interface{}, error) {
	// ` or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement217()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMonospaceText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElements7() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements7()
}

func (c *current) onSingleQuoteMonospaceTextElements12(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteMonospaceTextElements12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements12(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement2()
}

func (c *current) onSingleQuoteMonospaceTextElement11() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement11()
}

func (c *current) onSingleQuoteMonospaceTextElement20() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement20()
}

func (c *current) onSingleQuoteMonospaceTextElement24() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement24()
}

func (c *current) onSingleQuoteMonospaceTextElement30() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement30()
}

func (c *current) onSingleQuoteMonospaceTextElement37() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteMonospaceTextElement37() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement37()
}

func (c *current) onSingleQuoteMonospaceTextElement44() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement44()
}

func (c *current) onSingleQuoteMonospaceTextElement56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement56()
}

func (c *current) onSingleQuoteMonospaceTextElement58() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement58()
}

func (c *current) onSingleQuoteMonospaceTextElement51(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement51(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement40(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteMonospaceTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement40(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement66() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement66()
}

func (c *current) onSingleQuoteMonospaceTextElement78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement78()
}

func (c *current) onSingleQuoteMonospaceTextElement80() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement80()
}

func (c *current) onSingleQuoteMonospaceTextElement73(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement73(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement62(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteMonospaceTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement62(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement88() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement88()
}

func (c *current) onSingleQuoteMonospaceTextElement84(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteMonospaceTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement84(stack["name"])
}

func (c *current) onSingleQuoteMonospaceTextElement35(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement35(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement96() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSingleQuoteMonospaceTextElement96() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement96()
}

func (c *current) onSingleQuoteMonospaceTextElement105() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement105()
}

func (c *current) onSingleQuoteMonospaceTextElement109() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement109()
}

func (c *current) onSingleQuoteMonospaceTextElement115() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement115()
}

func (c *current) onSingleQuoteMonospaceTextElement122() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteMonospaceTextElement122() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement122()
}

func (c *current) onSingleQuoteMonospaceTextElement129() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement129()
}

func (c *current) onSingleQuoteMonospaceTextElement141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement141()
}

func (c *current) onSingleQuoteMonospaceTextElement143() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement143()
}

func (c *current) onSingleQuoteMonospaceTextElement136(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement136(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement125(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteMonospaceTextElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement125(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement151() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement151()
}

func (c *current) onSingleQuoteMonospaceTextElement163() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement163()
}

func (c *current) onSingleQuoteMonospaceTextElement165() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement165()
}

func (c *current) onSingleQuoteMonospaceTextElement158(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement158(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement147(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteMonospaceTextElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement147(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement173() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement173()
}

func (c *current) onSingleQuoteMonospaceTextElement169(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteMonospaceTextElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement169(stack["name"])
}

func (c *current) onSingleQuoteMonospaceTextElement120(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement120(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement179() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement179()
}

func (c *current) onSingleQuoteMonospaceTextElement101(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteMonospaceTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement101(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteMonospaceTextElement186() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement186()
}

func (c *current) onSingleQuoteMonospaceTextElement182(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteMonospaceTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement182(stack["id"])
}

func (c *current) onSingleQuoteMonospaceTextElement99() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement99()
}

func (c *current) onSingleQuoteMonospaceTextElement190() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement190()
}

func (c *current) onSingleQuoteMonospaceTextElement94(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement94(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement192() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteMonospaceTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement192()
}

func (c *current) onSingleQuoteMonospaceTextElement194() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteMonospaceTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement194()
}

func (c *current) onSingleQuoteMonospaceTextElement196() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteMonospaceTextElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement196()
}

func (c *current) onSingleQuoteMonospaceTextElement198() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteMonospaceTextElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement198()
}

func (c *current) onSingleQuoteMonospaceTextElement200() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteMonospaceTextElement200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement200()
}

func (c *current) onSingleQuoteMonospaceTextElement202() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonSingleQuoteMonospaceTextElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement202()
}

func (c *current) onSingleQuoteMonospaceTextElement216() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement216()
}

func (c *current) onSingleQuoteMonospaceTextElement212(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteMonospaceTextElement212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement212(stack["ref"])
}

func (c *current) onSingleQuoteMonospaceTextElement225() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement225()
}

func (c *current) onSingleQuoteMonospaceTextElement220() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement220()
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedMonospaceText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText5()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText17()
}

func (c *current) onEscapedMonospaceText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText27()
}

func (c *current) onEscapedMonospaceText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextElement13() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement13()
}

func (c *current) onDoubleQuoteMarkedTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement7()
}

func (c *current) onDoubleQuoteMarkedTextElement16() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement16()
}

func (c *current) onDoubleQuoteMarkedTextElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement20()
}

func (c *current) onDoubleQuoteMarkedTextElement26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement26()
}

func (c *current) onDoubleQuoteMarkedTextElement33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteMarkedTextElement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement33()
}

func (c *current) onDoubleQuoteMarkedTextElement40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement40()
}

func (c *current) onDoubleQuoteMarkedTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement52()
}

func (c *current) onDoubleQuoteMarkedTextElement54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement54()
}

func (c *current) onDoubleQuoteMarkedTextElement47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement47(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteMarkedTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement36(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement62()
}

func (c *current) onDoubleQuoteMarkedTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement74()
}

func (c *current) onDoubleQuoteMarkedTextElement76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement76()
}

func (c *current) onDoubleQuoteMarkedTextElement69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement69(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteMarkedTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement58(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement84()
}

func (c *current) onDoubleQuoteMarkedTextElement80(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteMarkedTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement80(stack["name"])
}

func (c *current) onDoubleQuoteMarkedTextElement31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement31(stack["element"])
}

func (c *current) onDoubleQuoteMarkedTextElement92() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonDoubleQuoteMarkedTextElement92() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement92()
}

func (c *current) onDoubleQuoteMarkedTextElement101() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement101()
}

func (c *current) onDoubleQuoteMarkedTextElement105() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement105()
}

func (c *current) onDoubleQuoteMarkedTextElement111() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement111()
}

func (c *current) onDoubleQuoteMarkedTextElement118() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteMarkedTextElement118() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement118()
}

func (c *current) onDoubleQuoteMarkedTextElement125() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement125()
}

func (c *current) onDoubleQuoteMarkedTextElement137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement137()
}

func (c *current) onDoubleQuoteMarkedTextElement139() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement139()
}

func (c *current) onDoubleQuoteMarkedTextElement132(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement132(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement121(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteMarkedTextElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement121(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement147() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement147()
}

func (c *current) onDoubleQuoteMarkedTextElement159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement159()
}

func (c *current) onDoubleQuoteMarkedTextElement161() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement161()
}

func (c *current) onDoubleQuoteMarkedTextElement154(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement154(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement143(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteMarkedTextElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement143(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement169() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement169()
}

func (c *current) onDoubleQuoteMarkedTextElement165(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteMarkedTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement165(stack["name"])
}

func (c *current) onDoubleQuoteMarkedTextElement116(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement116(stack["element"])
}

func (c *current) onDoubleQuoteMarkedTextElement175() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement175()
}

func (c *current) onDoubleQuoteMarkedTextElement97(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteMarkedTextElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement97(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteMarkedTextElement182() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement182()
}

func (c *current) onDoubleQuoteMarkedTextElement178(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteMarkedTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement178(stack["id"])
}

func (c *current) onDoubleQuoteMarkedTextElement95() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement95()
}

func (c *current) onDoubleQuoteMarkedTextElement186() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement186()
}

func (c *current) onDoubleQuoteMarkedTextElement90(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement90(stack["element"])
}

func (c *current) onDoubleQuoteMarkedTextElement188() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteMarkedTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement188()
}

func (c *current) onDoubleQuoteMarkedTextElement190() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteMarkedTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement190()
}

func (c *current) onDoubleQuoteMarkedTextElement192() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteMarkedTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement192()
}

func (c *current) onDoubleQuoteMarkedTextElement194() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteMarkedTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement194()
}

func (c *current) onDoubleQuoteMarkedTextElement196() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteMarkedTextElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement196()
}

func (c *current) onDoubleQuoteMarkedTextElement198() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonDoubleQuoteMarkedTextElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement198()
}

func (c *current) onDoubleQuoteMarkedTextElement211() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement211()
}

func (c *current) onDoubleQuoteMarkedTextElement207(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteMarkedTextElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement207(stack["ref"])
}

func (c *current) onDoubleQuoteMarkedTextElement219() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement219()
}

func (c *current) onDoubleQuoteMarkedTextElement216() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement216()
}

func (c *current) onDoubleQuoteMarkedTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleMarkedBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleMarkedBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleMarkedBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMarkedText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText1(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElements7() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements7()
}

func (c *current) onSingleQuoteMarkedTextElements12(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteMarkedTextElements12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements12(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteMarkedTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElement8() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement8()
}

func (c *current) onSingleQuoteMarkedTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement2()
}

func (c *current) onSingleQuoteMarkedTextElement11() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement11()
}

func (c *current) onSingleQuoteMarkedTextElement15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement15()
}

func (c *current) onSingleQuoteMarkedTextElement21() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement21()
}

func (c *current) onSingleQuoteMarkedTextElement28() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteMarkedTextElement28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement28()
}

func (c *current) onSingleQuoteMarkedTextElement35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement35()
}

func (c *current) onSingleQuoteMarkedTextElement47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement47()
}

func (c *current) onSingleQuoteMarkedTextElement49() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement49()
}

func (c *current) onSingleQuoteMarkedTextElement42(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement42(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement31(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteMarkedTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement31(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement57()
}

func (c *current) onSingleQuoteMarkedTextElement69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement69()
}

func (c *current) onSingleQuoteMarkedTextElement71() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement71()
}

func (c *current) onSingleQuoteMarkedTextElement64(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement64(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement53(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteMarkedTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement53(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement79()
}

func (c *current) onSingleQuoteMarkedTextElement75(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteMarkedTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement75(stack["name"])
}

func (c *current) onSingleQuoteMarkedTextElement26(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement26(stack["element"])
}

func (c *current) onSingleQuoteMarkedTextElement87() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSingleQuoteMarkedTextElement87() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement87()
}

func (c *current) onSingleQuoteMarkedTextElement96() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement96()
}

func (c *current) onSingleQuoteMarkedTextElement100() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement100()
}

func (c *current) onSingleQuoteMarkedTextElement106() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement106()
}

func (c *current) onSingleQuoteMarkedTextElement113() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteMarkedTextElement113() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement113()
}

func (c *current) onSingleQuoteMarkedTextElement120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement120()
}

func (c *current) onSingleQuoteMarkedTextElement132() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement132()
}

func (c *current) onSingleQuoteMarkedTextElement134() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement134()
}

func (c *current) onSingleQuoteMarkedTextElement127(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement127(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement116(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteMarkedTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement116(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement142()
}

func (c *current) onSingleQuoteMarkedTextElement154() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement154()
}

func (c *current) onSingleQuoteMarkedTextElement156() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement156()
}

func (c *current) onSingleQuoteMarkedTextElement149(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement149(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement138(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteMarkedTextElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement138(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement164() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement164()
}

func (c *current) onSingleQuoteMarkedTextElement160(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteMarkedTextElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement160(stack["name"])
}

func (c *current) onSingleQuoteMarkedTextElement111(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement111(stack["element"])
}

func (c *current) onSingleQuoteMarkedTextElement170() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement170()
}

func (c *current) onSingleQuoteMarkedTextElement92(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteMarkedTextElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement92(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteMarkedTextElement177() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement177()
}

func (c *current) onSingleQuoteMarkedTextElement173(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteMarkedTextElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement173(stack["id"])
}

func (c *current) onSingleQuoteMarkedTextElement90() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement90()
}

func (c *current) onSingleQuoteMarkedTextElement181() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement181()
}

func (c *current) onSingleQuoteMarkedTextElement85(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement85(stack["element"])
}

func (c *current) onSingleQuoteMarkedTextElement183() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteMarkedTextElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement183()
}

func (c *current) onSingleQuoteMarkedTextElement185() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteMarkedTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement185()
}

func (c *current) onSingleQuoteMarkedTextElement187() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteMarkedTextElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement187()
}

func (c *current) onSingleQuoteMarkedTextElement189() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteMarkedTextElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement189()
}

func (c *current) onSingleQuoteMarkedTextElement191() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteMarkedTextElement191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement191()
}

func (c *current) onSingleQuoteMarkedTextElement193() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonSingleQuoteMarkedTextElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement193()
}

func (c *current) onSingleQuoteMarkedTextElement206() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement206()
}

func (c *current) onSingleQuoteMarkedTextElement202(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteMarkedTextElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement202(stack["ref"])
}

func (c *current) onSingleQuoteMarkedTextElement214() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement214()
}

func (c *current) onSingleQuoteMarkedTextElement211() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement211()
}

func (c *current) onQuotedTextInSingleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedMarkedText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText5()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText17()
}

func (c *current) onEscapedMarkedText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText27()
}

func (c *current) onEscapedMarkedText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText24(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onSubscriptTextElement3() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonSubscriptTextElement3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextElement3()
}

func (c *current) onEscapedSubscriptText4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedSubscriptText4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText4()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onSuperscriptTextElement3() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonSuperscriptTextElement3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextElement3()
}

func (c *current) onEscapedSuperscriptText4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedSuperscriptText4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText4()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))

}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	c.resetSpaceSuffixTracking()
	return types.NewInlineElements(elements)

}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement13() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement13()
}

func (c *current) onSingleQuotedStringElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement7()
}

func (c *current) onSingleQuotedStringElement17() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement17()
}

func (c *current) onSingleQuotedStringElement22() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedStringElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement22()
}

func (c *current) onSingleQuotedStringElement28() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedStringElement28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement28()
}

func (c *current) onSingleQuotedStringElement35() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuotedStringElement35() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement35()
}

func (c *current) onSingleQuotedStringElement42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement42()
}

func (c *current) onSingleQuotedStringElement54() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement54()
}

func (c *current) onSingleQuotedStringElement56() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement56()
}

func (c *current) onSingleQuotedStringElement49(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedStringElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement49(stack["start"])
}

func (c *current) onSingleQuotedStringElement38(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuotedStringElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement38(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedStringElement64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement64()
}

func (c *current) onSingleQuotedStringElement76() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement76()
}

func (c *current) onSingleQuotedStringElement78() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement78()
}

func (c *current) onSingleQuotedStringElement71(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedStringElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement71(stack["start"])
}

func (c *current) onSingleQuotedStringElement60(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuotedStringElement60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement60(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedStringElement86() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement86()
}

func (c *current) onSingleQuotedStringElement82(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuotedStringElement82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement82(stack["name"])
}

func (c *current) onSingleQuotedStringElement33(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement33(stack["element"])
}

func (c *current) onSingleQuotedStringElement94() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSingleQuotedStringElement94() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement94()
}

func (c *current) onSingleQuotedStringElement103() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement103()
}

func (c *current) onSingleQuotedStringElement107() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement107()
}

func (c *current) onSingleQuotedStringElement113() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement113()
}

func (c *current) onSingleQuotedStringElement120() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuotedStringElement120() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement120()
}

func (c *current) onSingleQuotedStringElement127() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement127()
}

func (c *current) onSingleQuotedStringElement139() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement139()
}

func (c *current) onSingleQuotedStringElement141() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement141()
}

func (c *current) onSingleQuotedStringElement134(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedStringElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement134(stack["start"])
}

func (c *current) onSingleQuotedStringElement123(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuotedStringElement123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement123(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedStringElement149() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement149()
}

func (c *current) onSingleQuotedStringElement161() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement161()
}

func (c *current) onSingleQuotedStringElement163() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement163()
}

func (c *current) onSingleQuotedStringElement156(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedStringElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement156(stack["start"])
}

func (c *current) onSingleQuotedStringElement145(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuotedStringElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement145(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedStringElement171() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement171()
}

func (c *current) onSingleQuotedStringElement167(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuotedStringElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement167(stack["name"])
}

func (c *current) onSingleQuotedStringElement118(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement118(stack["element"])
}

func (c *current) onSingleQuotedStringElement177() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement177()
}

func (c *current) onSingleQuotedStringElement99(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuotedStringElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement99(stack["id"], stack["label"])
}

func (c *current) onSingleQuotedStringElement184() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement184()
}

func (c *current) onSingleQuotedStringElement180(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuotedStringElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement180(stack["id"])
}

func (c *current) onSingleQuotedStringElement97() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement97()
}

func (c *current) onSingleQuotedStringElement188() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement188()
}

func (c *current) onSingleQuotedStringElement92(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement92(stack["element"])
}

func (c *current) onSingleQuotedStringElement194() (bool, error) {

	return c.isPreceededBySpace(), nil

}

func (p *parser) callonSingleQuotedStringElement194() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement194()
}

func (c *current) onSingleQuotedStringElement197() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement197()
}

func (c *current) onSingleQuotedStringElement201() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedStringElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement201()
}

func (c *current) onSingleQuotedStringElement192() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonSingleQuotedStringElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement192()
}

func (c *current) onSingleQuotedStringElement210() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuotedStringElement210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement210()
}

func (c *current) onSingleQuotedStringElement212() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuotedStringElement212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement212()
}

func (c *current) onSingleQuotedStringElement214() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuotedStringElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement214()
}

func (c *current) onSingleQuotedStringElement216() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuotedStringElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement216()
}

func (c *current) onSingleQuotedStringElement218() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuotedStringElement218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement218()
}

func (c *current) onSingleQuotedStringElement220() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonSingleQuotedStringElement220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement220()
}

func (c *current) onSingleQuotedStringElement229() (interface{}, error) {
	// '
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement229()
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	c.trackSpaceSuffix(element)
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInSingleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))

}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	c.resetSpaceSuffixTracking()
	return types.NewInlineElements(elements)

}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement13() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement13()
}

func (c *current) onDoubleQuotedStringElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement7()
}

func (c *current) onDoubleQuotedStringElement17() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement17()
}

func (c *current) onDoubleQuotedStringElement22() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedStringElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement22()
}

func (c *current) onDoubleQuotedStringElement28() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedStringElement28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement28()
}

func (c *current) onDoubleQuotedStringElement36() (bool, error) {

	return c.isPreceededBySpace(), nil

}

func (p *parser) callonDoubleQuotedStringElement36() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement36()
}

func (c *current) onDoubleQuotedStringElement39() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement39()
}

func (c *current) onDoubleQuotedStringElement43() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedStringElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement43()
}

func (c *current) onDoubleQuotedStringElement34() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonDoubleQuotedStringElement34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement34()
}

func (c *current) onDoubleQuotedStringElement54() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuotedStringElement54() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement54()
}

func (c *current) onDoubleQuotedStringElement61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement61()
}

func (c *current) onDoubleQuotedStringElement73() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement73()
}

func (c *current) onDoubleQuotedStringElement75() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement75()
}

func (c *current) onDoubleQuotedStringElement68(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedStringElement68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement68(stack["start"])
}

func (c *current) onDoubleQuotedStringElement57(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuotedStringElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement57(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedStringElement83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement83()
}

func (c *current) onDoubleQuotedStringElement95() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement95()
}

func (c *current) onDoubleQuotedStringElement97() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement97()
}

func (c *current) onDoubleQuotedStringElement90(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedStringElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement90(stack["start"])
}

func (c *current) onDoubleQuotedStringElement79(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuotedStringElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement79(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedStringElement105() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement105()
}

func (c *current) onDoubleQuotedStringElement101(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuotedStringElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement101(stack["name"])
}

func (c *current) onDoubleQuotedStringElement52(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement52(stack["element"])
}

func (c *current) onDoubleQuotedStringElement113() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonDoubleQuotedStringElement113() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement113()
}

func (c *current) onDoubleQuotedStringElement122() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement122()
}

func (c *current) onDoubleQuotedStringElement126() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement126()
}

func (c *current) onDoubleQuotedStringElement132() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement132()
}

func (c *current) onDoubleQuotedStringElement139() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuotedStringElement139() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement139()
}

func (c *current) onDoubleQuotedStringElement146() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement146()
}

func (c *current) onDoubleQuotedStringElement158() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement158()
}

func (c *current) onDoubleQuotedStringElement160() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement160()
}

func (c *current) onDoubleQuotedStringElement153(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedStringElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement153(stack["start"])
}

func (c *current) onDoubleQuotedStringElement142(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuotedStringElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement142(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedStringElement168() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement168()
}

func (c *current) onDoubleQuotedStringElement180() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement180()
}

func (c *current) onDoubleQuotedStringElement182() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement182()
}

func (c *current) onDoubleQuotedStringElement175(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedStringElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement175(stack["start"])
}

func (c *current) onDoubleQuotedStringElement164(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuotedStringElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement164(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedStringElement190() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement190()
}

func (c *current) onDoubleQuotedStringElement186(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuotedStringElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement186(stack["name"])
}

func (c *current) onDoubleQuotedStringElement137(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement137(stack["element"])
}

func (c *current) onDoubleQuotedStringElement196() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement196()
}

func (c *current) onDoubleQuotedStringElement118(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuotedStringElement118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement118(stack["id"], stack["label"])
}

func (c *current) onDoubleQuotedStringElement203() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement203()
}

func (c *current) onDoubleQuotedStringElement199(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuotedStringElement199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement199(stack["id"])
}

func (c *current) onDoubleQuotedStringElement116() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement116()
}

func (c *current) onDoubleQuotedStringElement207() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement207()
}

func (c *current) onDoubleQuotedStringElement111(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement111(stack["element"])
}

func (c *current) onDoubleQuotedStringElement212() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement212()
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	c.trackSpaceSuffix(element)
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInDoubleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onAttributesGroup6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup6()
}

func (c *current) onAttributesGroup9() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup9()
}

func (c *current) onAttributesGroup13() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonAttributesGroup13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup13()
}

func (c *current) onAttributesGroup22() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup22()
}

func (c *current) onAttributesGroup26() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup26()
}

func (c *current) onAttributesGroup32() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributesGroup32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup32()
}

func (c *current) onAttributesGroup39() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributesGroup39() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup39()
}

func (c *current) onAttributesGroup46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup46()
}

func (c *current) onAttributesGroup58() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup58()
}

func (c *current) onAttributesGroup60() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributesGroup60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup60()
}

func (c *current) onAttributesGroup53(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributesGroup53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup53(stack["start"])
}

func (c *current) onAttributesGroup42(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonAttributesGroup42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup42(stack["name"], stack["start"])
}

func (c *current) onAttributesGroup68() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup68()
}

func (c *current) onAttributesGroup80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup80()
}

func (c *current) onAttributesGroup82() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributesGroup82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup82()
}

func (c *current) onAttributesGroup75(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributesGroup75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup75(stack["start"])
}

func (c *current) onAttributesGroup64(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonAttributesGroup64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup64(stack["name"], stack["start"])
}

func (c *current) onAttributesGroup90() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup90()
}

func (c *current) onAttributesGroup86(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributesGroup86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup86(stack["name"])
}

func (c *current) onAttributesGroup37(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributesGroup37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup37(stack["element"])
}

func (c *current) onAttributesGroup96() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributesGroup96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup96()
}

func (c *current) onAttributesGroup18(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonAttributesGroup18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup18(stack["id"], stack["label"])
}

func (c *current) onAttributesGroup103() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup103()
}

func (c *current) onAttributesGroup99(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonAttributesGroup99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup99(stack["id"])
}

func (c *current) onAttributesGroup16() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributesGroup16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup16()
}

func (c *current) onAttributesGroup107() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonAttributesGroup107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup107()
}

func (c *current) onAttributesGroup11(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributesGroup11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup11(stack["element"])
}

func (c *current) onAttributesGroup113() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributesGroup113() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup113()
}

func (c *current) onAttributesGroup120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup120()
}

func (c *current) onAttributesGroup132() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup132()
}

func (c *current) onAttributesGroup134() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributesGroup134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup134()
}

func (c *current) onAttributesGroup127(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributesGroup127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup127(stack["start"])
}

func (c *current) onAttributesGroup116(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonAttributesGroup116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup116(stack["name"], stack["start"])
}

func (c *current) onAttributesGroup142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup142()
}

func (c *current) onAttributesGroup154() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup154()
}

func (c *current) onAttributesGroup156() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributesGroup156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup156()
}

func (c *current) onAttributesGroup149(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributesGroup149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup149(stack["start"])
}

func (c *current) onAttributesGroup138(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonAttributesGroup138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup138(stack["name"], stack["start"])
}

func (c *current) onAttributesGroup164() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup164()
}

func (c *current) onAttributesGroup160(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributesGroup160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup160(stack["name"])
}

func (c *current) onAttributesGroup111(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributesGroup111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup111(stack["element"])
}

func (c *current) onAttributesGroup174() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributesGroup174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup174()
}

func (c *current) onAttributesGroup170(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonAttributesGroup170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup170(stack["ref"])
}

func (c *current) onAttributesGroup178() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributesGroup178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup178()
}

func (c *current) onAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup1(stack["elements"])
}

func (c *current) onElementAttributesGroup11() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup11()
}

func (c *current) onElementAttributesGroup16() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonElementAttributesGroup16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup16()
}

func (c *current) onElementAttributesGroup6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementAttributesGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup6()
}

func (c *current) onElementAttributesGroup23() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup23()
}

func (c *current) onElementAttributesGroup27() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonElementAttributesGroup27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup27()
}

func (c *current) onElementAttributesGroup34() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup34()
}

func (c *current) onElementAttributesGroup46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup46()
}

func (c *current) onElementAttributesGroup48() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonElementAttributesGroup48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup48()
}

func (c *current) onElementAttributesGroup41(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonElementAttributesGroup41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup41(stack["start"])
}

func (c *current) onElementAttributesGroup30(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonElementAttributesGroup30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup30(stack["name"], stack["start"])
}

func (c *current) onElementAttributesGroup56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup56()
}

func (c *current) onElementAttributesGroup68() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup68()
}

func (c *current) onElementAttributesGroup70() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonElementAttributesGroup70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup70()
}

func (c *current) onElementAttributesGroup63(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonElementAttributesGroup63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup63(stack["start"])
}

func (c *current) onElementAttributesGroup52(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonElementAttributesGroup52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup52(stack["name"], stack["start"])
}

func (c *current) onElementAttributesGroup78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup78()
}

func (c *current) onElementAttributesGroup74(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonElementAttributesGroup74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup74(stack["name"])
}

func (c *current) onElementAttributesGroup25(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonElementAttributesGroup25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup25(stack["element"])
}

func (c *current) onElementAttributesGroup87() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonElementAttributesGroup87() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup87()
}

func (c *current) onElementAttributesGroup96() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup96()
}

func (c *current) onElementAttributesGroup100() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup100()
}

func (c *current) onElementAttributesGroup106() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementAttributesGroup106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup106()
}

func (c *current) onElementAttributesGroup113() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonElementAttributesGroup113() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup113()
}

func (c *current) onElementAttributesGroup120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup120()
}

func (c *current) onElementAttributesGroup132() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup132()
}

func (c *current) onElementAttributesGroup134() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonElementAttributesGroup134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup134()
}

func (c *current) onElementAttributesGroup127(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonElementAttributesGroup127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup127(stack["start"])
}

func (c *current) onElementAttributesGroup116(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonElementAttributesGroup116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup116(stack["name"], stack["start"])
}

func (c *current) onElementAttributesGroup142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup142()
}

func (c *current) onElementAttributesGroup154() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup154()
}

func (c *current) onElementAttributesGroup156() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonElementAttributesGroup156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup156()
}

func (c *current) onElementAttributesGroup149(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonElementAttributesGroup149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup149(stack["start"])
}

func (c *current) onElementAttributesGroup138(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonElementAttributesGroup138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup138(stack["name"], stack["start"])
}

func (c *current) onElementAttributesGroup164() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup164()
}

func (c *current) onElementAttributesGroup160(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonElementAttributesGroup160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup160(stack["name"])
}

func (c *current) onElementAttributesGroup111(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonElementAttributesGroup111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup111(stack["element"])
}

func (c *current) onElementAttributesGroup170() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementAttributesGroup170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup170()
}

func (c *current) onElementAttributesGroup92(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonElementAttributesGroup92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup92(stack["id"], stack["label"])
}

func (c *current) onElementAttributesGroup177() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup177()
}

func (c *current) onElementAttributesGroup173(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonElementAttributesGroup173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup173(stack["id"])
}

func (c *current) onElementAttributesGroup90() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementAttributesGroup90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup90()
}

func (c *current) onElementAttributesGroup181() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonElementAttributesGroup181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup181()
}

func (c *current) onElementAttributesGroup85(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonElementAttributesGroup85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup85(stack["element"])
}

func (c *current) onElementAttributesGroup187() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementAttributesGroup187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup187()
}

func (c *current) onElementAttributesGroup183(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementAttributesGroup183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup183(stack["ref"])
}

func (c *current) onElementAttributesGroup191() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementAttributesGroup191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup191()
}

func (c *current) onElementAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonElementAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup1(stack["elements"])
}

func (c *current) onHeaderGroup1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonHeaderGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup1(stack["elements"])
}

func (c *current) onHeaderGroupElement13() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement13()
}

func (c *current) onHeaderGroupElement18() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonHeaderGroupElement18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement18()
}

func (c *current) onHeaderGroupElement8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement8()
}

func (c *current) onHeaderGroupElement25() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement25()
}

func (c *current) onHeaderGroupElement30() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonHeaderGroupElement30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement30()
}

func (c *current) onHeaderGroupElement39() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement39()
}

func (c *current) onHeaderGroupElement43() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement43()
}

func (c *current) onHeaderGroupElement49() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement49()
}

func (c *current) onHeaderGroupElement56() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonHeaderGroupElement56() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement56()
}

func (c *current) onHeaderGroupElement63() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement63()
}

func (c *current) onHeaderGroupElement75() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement75()
}

func (c *current) onHeaderGroupElement77() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement77()
}

func (c *current) onHeaderGroupElement70(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement70(stack["start"])
}

func (c *current) onHeaderGroupElement59(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonHeaderGroupElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement59(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement85() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement85()
}

func (c *current) onHeaderGroupElement97() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement97()
}

func (c *current) onHeaderGroupElement99() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement99()
}

func (c *current) onHeaderGroupElement92(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement92(stack["start"])
}

func (c *current) onHeaderGroupElement81(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonHeaderGroupElement81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement81(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement107() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement107()
}

func (c *current) onHeaderGroupElement103(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonHeaderGroupElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement103(stack["name"])
}

func (c *current) onHeaderGroupElement54(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement54(stack["element"])
}

func (c *current) onHeaderGroupElement113() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement113()
}

func (c *current) onHeaderGroupElement35(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonHeaderGroupElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement35(stack["id"], stack["label"])
}

func (c *current) onHeaderGroupElement120() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement120()
}

func (c *current) onHeaderGroupElement116(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonHeaderGroupElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement116(stack["id"])
}

func (c *current) onHeaderGroupElement33() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement33()
}

func (c *current) onHeaderGroupElement124() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonHeaderGroupElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement124()
}

func (c *current) onHeaderGroupElement28(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement28(stack["element"])
}

func (c *current) onHeaderGroupElement131() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonHeaderGroupElement131() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement131()
}

func (c *current) onHeaderGroupElement138() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement138()
}

func (c *current) onHeaderGroupElement150() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement150()
}

func (c *current) onHeaderGroupElement152() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement152()
}

func (c *current) onHeaderGroupElement145(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement145(stack["start"])
}

func (c *current) onHeaderGroupElement134(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonHeaderGroupElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement134(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement160() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement160()
}

func (c *current) onHeaderGroupElement172() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement172()
}

func (c *current) onHeaderGroupElement174() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement174()
}

func (c *current) onHeaderGroupElement167(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement167(stack["start"])
}

func (c *current) onHeaderGroupElement156(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonHeaderGroupElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement156(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement182() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement182()
}

func (c *current) onHeaderGroupElement178(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonHeaderGroupElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement178(stack["name"])
}

func (c *current) onHeaderGroupElement129(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement129(stack["element"])
}

func (c *current) onHeaderGroupElement192() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHeaderGroupElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement192()
}

func (c *current) onHeaderGroupElement188(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonHeaderGroupElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement188(stack["ref"])
}

func (c *current) onHeaderGroupElement198() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonHeaderGroupElement198() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement198()
}

func (c *current) onHeaderGroupElement201() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonHeaderGroupElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement201()
}

func (c *current) onHeaderGroupElement203() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonHeaderGroupElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement203()
}

func (c *current) onHeaderGroupElement205() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonHeaderGroupElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement205()
}

func (c *current) onHeaderGroupElement207() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonHeaderGroupElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement207()
}

func (c *current) onHeaderGroupElement209() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonHeaderGroupElement209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement209()
}

func (c *current) onHeaderGroupElement211() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonHeaderGroupElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement211()
}

func (c *current) onHeaderGroupElement196(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement196(stack["element"])
}

func (c *current) onHeaderGroupElement225() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement225()
}

func (c *current) onHeaderGroupElement232() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHeaderGroupElement232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement232()
}

func (c *current) onHeaderGroupElement228(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonHeaderGroupElement228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement228(stack["ref"])
}

func (c *current) onHeaderGroupElement238() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonHeaderGroupElement238() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement238()
}

func (c *current) onHeaderGroupElement245() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement245() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement245()
}

func (c *current) onHeaderGroupElement257() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement257()
}

func (c *current) onHeaderGroupElement259() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement259() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement259()
}

func (c *current) onHeaderGroupElement252(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement252(stack["start"])
}

func (c *current) onHeaderGroupElement241(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonHeaderGroupElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement241(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement267() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement267()
}

func (c *current) onHeaderGroupElement279() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement279()
}

func (c *current) onHeaderGroupElement281() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement281() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement281()
}

func (c *current) onHeaderGroupElement274(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement274() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement274(stack["start"])
}

func (c *current) onHeaderGroupElement263(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonHeaderGroupElement263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement263(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement289() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement289() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement289()
}

func (c *current) onHeaderGroupElement285(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonHeaderGroupElement285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement285(stack["name"])
}

func (c *current) onHeaderGroupElement236(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement236(stack["element"])
}

func (c *current) onHeaderGroupElement295() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement295()
}

func (c *current) onHeaderGroupElement221(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonHeaderGroupElement221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement221(stack["elements"])
}

func (c *current) onHeaderGroupElement217(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonHeaderGroupElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement217(stack["id"])
}

func (c *current) onHeaderGroupElement299() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement299() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement299()
}

func (c *current) onHeaderGroupElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement1(stack["element"])
}

func (c *current) onMacrosGroup11() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonMacrosGroup11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup11()
}

func (c *current) onMacrosGroup16() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonMacrosGroup16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup16()
}

func (c *current) onMacrosGroup6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonMacrosGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup6()
}

func (c *current) onMacrosGroup28() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMacrosGroup28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup28()
}

func (c *current) onMacrosGroup24(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonMacrosGroup24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup24(stack["ref"])
}

func (c *current) onMacrosGroup32() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonMacrosGroup32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup32()
}

func (c *current) onMacrosGroup1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonMacrosGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup1(stack["elements"])
}

func (c *current) onNoneGroup18() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonNoneGroup18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup18()
}

func (c *current) onNoneGroup23() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNoneGroup23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup23()
}

func (c *current) onNoneGroup13() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneGroup13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup13()
}

func (c *current) onNoneGroup34() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNoneGroup34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup34()
}

func (c *current) onNoneGroup30(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonNoneGroup30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup30(stack["ref"])
}

func (c *current) onNoneGroup38() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneGroup38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup38()
}

func (c *current) onNoneGroup5(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonNoneGroup5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup5(stack["element"])
}

func (c *current) onNoneGroup1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonNoneGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup1(stack["elements"])
}

func (c *current) onNormalGroup1(elements interface{}) (interface{}, error) {

	c.resetSpaceSuffixTracking()
	return types.NewInlineElements(elements)

}

func (p *parser) callonNormalGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup1(stack["elements"])
}

func (c *current) onNormalGroupElement13() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement13()
}

func (c *current) onNormalGroupElement18() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNormalGroupElement18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement18()
}

func (c *current) onNormalGroupElement8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement8()
}

func (c *current) onNormalGroupElement25() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement25()
}

func (c *current) onNormalGroupElement27() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNormalGroupElement27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement27()
}

func (c *current) onNormalGroupElement36() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNormalGroupElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement36()
}

func (c *current) onNormalGroupElement32(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonNormalGroupElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement32(stack["ref"])
}

func (c *current) onNormalGroupElement42() (bool, error) {

	return c.isPreceededBySpace(), nil

}

func (p *parser) callonNormalGroupElement42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement42()
}

func (c *current) onNormalGroupElement45() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement45()
}

func (c *current) onNormalGroupElement49() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNormalGroupElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement49()
}

func (c *current) onNormalGroupElement40() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonNormalGroupElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement40()
}

func (c *current) onNormalGroupElement61() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement61()
}

func (c *current) onNormalGroupElement63() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNormalGroupElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement63()
}

func (c *current) onNormalGroupElement56() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNormalGroupElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement56()
}

func (c *current) onNormalGroupElement75() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonNormalGroupElement75() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement75()
}

func (c *current) onNormalGroupElement84() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement84()
}

func (c *current) onNormalGroupElement88() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement88()
}

func (c *current) onNormalGroupElement94() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement94()
}

func (c *current) onNormalGroupElement101() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonNormalGroupElement101() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement101()
}

func (c *current) onNormalGroupElement108() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement108()
}

func (c *current) onNormalGroupElement120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement120()
}

func (c *current) onNormalGroupElement122() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNormalGroupElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement122()
}

func (c *current) onNormalGroupElement115(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonNormalGroupElement115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement115(stack["start"])
}

func (c *current) onNormalGroupElement104(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonNormalGroupElement104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement104(stack["name"], stack["start"])
}

func (c *current) onNormalGroupElement130() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement130()
}

func (c *current) onNormalGroupElement142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement142()
}

func (c *current) onNormalGroupElement144() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNormalGroupElement144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement144()
}

func (c *current) onNormalGroupElement137(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonNormalGroupElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement137(stack["start"])
}

func (c *current) onNormalGroupElement126(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonNormalGroupElement126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement126(stack["name"], stack["start"])
}

func (c *current) onNormalGroupElement152() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement152()
}

func (c *current) onNormalGroupElement148(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonNormalGroupElement148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement148(stack["name"])
}

func (c *current) onNormalGroupElement99(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement99(stack["element"])
}

func (c *current) onNormalGroupElement158() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement158()
}

func (c *current) onNormalGroupElement80(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonNormalGroupElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement80(stack["id"], stack["label"])
}

func (c *current) onNormalGroupElement165() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement165()
}

func (c *current) onNormalGroupElement161(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonNormalGroupElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement161(stack["id"])
}

func (c *current) onNormalGroupElement78() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement78()
}

func (c *current) onNormalGroupElement169() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonNormalGroupElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement169()
}

func (c *current) onNormalGroupElement73(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement73(stack["element"])
}

func (c *current) onNormalGroupElement173() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonNormalGroupElement173() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement173()
}

func (c *current) onNormalGroupElement180() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement180()
}

func (c *current) onNormalGroupElement192() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement192()
}

func (c *current) onNormalGroupElement194() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNormalGroupElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement194()
}

func (c *current) onNormalGroupElement187(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonNormalGroupElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement187(stack["start"])
}

func (c *current) onNormalGroupElement176(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonNormalGroupElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement176(stack["name"], stack["start"])
}

func (c *current) onNormalGroupElement202() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement202()
}

func (c *current) onNormalGroupElement214() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement214()
}

func (c *current) onNormalGroupElement216() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNormalGroupElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement216()
}

func (c *current) onNormalGroupElement209(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonNormalGroupElement209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement209(stack["start"])
}

func (c *current) onNormalGroupElement198(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonNormalGroupElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement198(stack["name"], stack["start"])
}

func (c *current) onNormalGroupElement224() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement224()
}

func (c *current) onNormalGroupElement220(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonNormalGroupElement220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement220(stack["name"])
}

func (c *current) onNormalGroupElement171(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement171(stack["element"])
}

func (c *current) onNormalGroupElement230() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonNormalGroupElement230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement230()
}

func (c *current) onNormalGroupElement232() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonNormalGroupElement232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement232()
}

func (c *current) onNormalGroupElement234() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonNormalGroupElement234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement234()
}

func (c *current) onNormalGroupElement236() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonNormalGroupElement236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement236()
}

func (c *current) onNormalGroupElement238() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonNormalGroupElement238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement238()
}

func (c *current) onNormalGroupElement240() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonNormalGroupElement240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement240()
}

func (c *current) onNormalGroupElement246() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement246()
}

func (c *current) onNormalGroupElement1(element interface{}) (interface{}, error) {
	c.trackSpaceSuffix(element)
	return element, nil

}

func (p *parser) callonNormalGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement1(stack["element"])
}

func (c *current) onPostReplacementsGroup17() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonPostReplacementsGroup17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup17()
}

func (c *current) onPostReplacementsGroup22() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonPostReplacementsGroup22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup22()
}

func (c *current) onPostReplacementsGroup12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPostReplacementsGroup12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup12()
}

func (c *current) onPostReplacementsGroup29() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonPostReplacementsGroup29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup29()
}

func (c *current) onPostReplacementsGroup33() (bool, error) {

	return c.isPreceededBySpace(), nil

}

func (p *parser) callonPostReplacementsGroup33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup33()
}

func (c *current) onPostReplacementsGroup36() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonPostReplacementsGroup36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup36()
}

func (c *current) onPostReplacementsGroup40() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonPostReplacementsGroup40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup40()
}

func (c *current) onPostReplacementsGroup31() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonPostReplacementsGroup31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup31()
}

func (c *current) onPostReplacementsGroup47() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonPostReplacementsGroup47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup47()
}

func (c *current) onPostReplacementsGroup56() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPostReplacementsGroup56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup56()
}

func (c *current) onPostReplacementsGroup52(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonPostReplacementsGroup52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup52(stack["ref"])
}

func (c *current) onPostReplacementsGroup60() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPostReplacementsGroup60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup60()
}

func (c *current) onPostReplacementsGroup5(element interface{}) (interface{}, error) {
	c.trackSpaceSuffix(element)
	return element, nil

}

func (p *parser) callonPostReplacementsGroup5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup5(stack["element"])
}

func (c *current) onPostReplacementsGroup1(elements interface{}) (interface{}, error) {
	c.resetSpaceSuffixTracking()
	return types.NewInlineElements(elements)

}

func (p *parser) callonPostReplacementsGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup1(stack["elements"])
}

func (c *current) onQuotesGroup11() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonQuotesGroup11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup11()
}

func (c *current) onQuotesGroup16() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonQuotesGroup16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup16()
}

func (c *current) onQuotesGroup6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonQuotesGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup6()
}

func (c *current) onQuotesGroup28() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuotesGroup28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup28()
}

func (c *current) onQuotesGroup24(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonQuotesGroup24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup24(stack["ref"])
}

func (c *current) onQuotesGroup32() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonQuotesGroup32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup32()
}

func (c *current) onQuotesGroup1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonQuotesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup1(stack["elements"])
}

func (c *current) onReplacementsGroup11() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonReplacementsGroup11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup11()
}

func (c *current) onReplacementsGroup16() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonReplacementsGroup16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup16()
}

func (c *current) onReplacementsGroup6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonReplacementsGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup6()
}

func (c *current) onReplacementsGroup25() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonReplacementsGroup25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup25()
}

func (c *current) onReplacementsGroup28() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonReplacementsGroup28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup28()
}

func (c *current) onReplacementsGroup30() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonReplacementsGroup30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup30()
}

func (c *current) onReplacementsGroup32() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonReplacementsGroup32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup32()
}

func (c *current) onReplacementsGroup34() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonReplacementsGroup34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup34()
}

func (c *current) onReplacementsGroup36() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonReplacementsGroup36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup36()
}

func (c *current) onReplacementsGroup38() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonReplacementsGroup38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup38()
}

func (c *current) onReplacementsGroup23(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonReplacementsGroup23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup23(stack["element"])
}

func (c *current) onReplacementsGroup48() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonReplacementsGroup48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup48()
}

func (c *current) onReplacementsGroup44(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonReplacementsGroup44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup44(stack["ref"])
}

func (c *current) onReplacementsGroup52() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonReplacementsGroup52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup52()
}

func (c *current) onReplacementsGroup1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonReplacementsGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup1(stack["elements"])
}

func (c *current) onSpecialCharactersGroup11() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup11()
}

func (c *current) onSpecialCharactersGroup16() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSpecialCharactersGroup16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup16()
}

func (c *current) onSpecialCharactersGroup6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup6()
}

func (c *current) onSpecialCharactersGroup25() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSpecialCharactersGroup25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup25()
}

func (c *current) onSpecialCharactersGroup34() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup34()
}

func (c *current) onSpecialCharactersGroup38() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup38()
}

func (c *current) onSpecialCharactersGroup44() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup44()
}

func (c *current) onSpecialCharactersGroup51() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSpecialCharactersGroup51() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup51()
}

func (c *current) onSpecialCharactersGroup58() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup58()
}

func (c *current) onSpecialCharactersGroup70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup70()
}

func (c *current) onSpecialCharactersGroup72() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup72()
}

func (c *current) onSpecialCharactersGroup65(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSpecialCharactersGroup65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup65(stack["start"])
}

func (c *current) onSpecialCharactersGroup54(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSpecialCharactersGroup54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup54(stack["name"], stack["start"])
}

func (c *current) onSpecialCharactersGroup80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup80()
}

func (c *current) onSpecialCharactersGroup92() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup92()
}

func (c *current) onSpecialCharactersGroup94() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup94()
}

func (c *current) onSpecialCharactersGroup87(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSpecialCharactersGroup87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup87(stack["start"])
}

func (c *current) onSpecialCharactersGroup76(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSpecialCharactersGroup76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup76(stack["name"], stack["start"])
}

func (c *current) onSpecialCharactersGroup102() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup102()
}

func (c *current) onSpecialCharactersGroup98(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSpecialCharactersGroup98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup98(stack["name"])
}

func (c *current) onSpecialCharactersGroup49(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSpecialCharactersGroup49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup49(stack["element"])
}

func (c *current) onSpecialCharactersGroup108() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup108()
}

func (c *current) onSpecialCharactersGroup30(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSpecialCharactersGroup30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup30(stack["id"], stack["label"])
}

func (c *current) onSpecialCharactersGroup115() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup115()
}

func (c *current) onSpecialCharactersGroup111(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSpecialCharactersGroup111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup111(stack["id"])
}

func (c *current) onSpecialCharactersGroup28() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup28()
}

func (c *current) onSpecialCharactersGroup119() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup119()
}

func (c *current) onSpecialCharactersGroup23(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSpecialCharactersGroup23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup23(stack["element"])
}

func (c *current) onSpecialCharactersGroup125() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpecialCharactersGroup125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup125()
}

func (c *current) onSpecialCharactersGroup121(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSpecialCharactersGroup121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup121(stack["ref"])
}

func (c *current) onSpecialCharactersGroup129() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup129()
}

func (c *current) onSpecialCharactersGroup1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonSpecialCharactersGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup1(stack["elements"])
}

func (c *current) onVerbatimGroup11() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup11()
}

func (c *current) onVerbatimGroup16() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonVerbatimGroup16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup16()
}

func (c *current) onVerbatimGroup6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup6()
}

func (c *current) onVerbatimGroup26() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonVerbatimGroup26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup26()
}

func (c *current) onVerbatimGroup35() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup35()
}

func (c *current) onVerbatimGroup39() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup39()
}

func (c *current) onVerbatimGroup45() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup45()
}

func (c *current) onVerbatimGroup52() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonVerbatimGroup52() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup52()
}

func (c *current) onVerbatimGroup59() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup59()
}

func (c *current) onVerbatimGroup71() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup71()
}

func (c *current) onVerbatimGroup73() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonVerbatimGroup73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup73()
}

func (c *current) onVerbatimGroup66(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonVerbatimGroup66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup66(stack["start"])
}

func (c *current) onVerbatimGroup55(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonVerbatimGroup55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup55(stack["name"], stack["start"])
}

func (c *current) onVerbatimGroup81() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup81()
}

func (c *current) onVerbatimGroup93() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup93()
}

func (c *current) onVerbatimGroup95() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonVerbatimGroup95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup95()
}

func (c *current) onVerbatimGroup88(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonVerbatimGroup88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup88(stack["start"])
}

func (c *current) onVerbatimGroup77(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonVerbatimGroup77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup77(stack["name"], stack["start"])
}

func (c *current) onVerbatimGroup103() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup103()
}

func (c *current) onVerbatimGroup99(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonVerbatimGroup99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup99(stack["name"])
}

func (c *current) onVerbatimGroup50(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonVerbatimGroup50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup50(stack["element"])
}

func (c *current) onVerbatimGroup109() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup109()
}

func (c *current) onVerbatimGroup31(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonVerbatimGroup31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup31(stack["id"], stack["label"])
}

func (c *current) onVerbatimGroup116() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup116()
}

func (c *current) onVerbatimGroup112(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonVerbatimGroup112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup112(stack["id"])
}

func (c *current) onVerbatimGroup29() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup29()
}

func (c *current) onVerbatimGroup120() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonVerbatimGroup120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup120()
}

func (c *current) onVerbatimGroup24(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonVerbatimGroup24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup24(stack["element"])
}

func (c *current) onVerbatimGroup126() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimGroup126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup126()
}

func (c *current) onVerbatimGroup122(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonVerbatimGroup122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup122(stack["ref"])
}

func (c *current) onVerbatimGroup130() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup130()
}

func (c *current) onVerbatimGroup1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonVerbatimGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup1(stack["elements"])
}

func (c *current) onInlineMacro3() (bool, error) {
	return c.isSubstitutionEnabled(Macros)

}

func (p *parser) callonInlineMacro3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro3()
}

func (c *current) onInlineMacro17() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineMacro17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro17()
}

func (c *current) onInlineMacro22() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineMacro22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro22()
}

func (c *current) onInlineMacro13(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineMacro13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro13(stack["id"])
}

func (c *current) onInlineMacro32() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineMacro32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro32()
}

func (c *current) onInlineMacro28() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro28()
}

func (c *current) onInlineMacro39() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineMacro39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro39()
}

func (c *current) onInlineMacro43() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineMacro43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro43()
}

func (c *current) onInlineMacro50() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineMacro50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro50()
}

func (c *current) onInlineMacro46() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro46()
}

func (c *current) onInlineMacro36(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonInlineMacro36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro36(stack["content"])
}

func (c *current) onInlineMacro57() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineMacro57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro57()
}

func (c *current) onInlineMacro61() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineMacro61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro61()
}

func (c *current) onInlineMacro68() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineMacro68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro68()
}

func (c *current) onInlineMacro64() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro64()
}

func (c *current) onInlineMacro54(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonInlineMacro54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro54(stack["content"])
}

func (c *current) onInlineMacro24(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonInlineMacro24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro24(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onInlineMacro1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro1(stack["element"])
}

func (c *current) onInlinePassthrough3() (bool, error) {
	return c.isSubstitutionEnabled(InlinePassthroughs)

}

func (p *parser) callonInlinePassthrough3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough3()
}

func (c *current) onInlinePassthrough11() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough11()
}

func (c *current) onInlinePassthrough21() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough21()
}

func (c *current) onInlinePassthrough24() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough24()
}

func (c *current) onInlinePassthrough17() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough17()
}

func (c *current) onInlinePassthrough6(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonInlinePassthrough6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough6(stack["content"])
}

func (c *current) onInlinePassthrough45() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough45()
}

func (c *current) onInlinePassthrough48() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough48()
}

func (c *current) onInlinePassthrough58() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough58()
}

func (c *current) onInlinePassthrough65() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough65()
}

func (c *current) onInlinePassthrough40() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough40()
}

func (c *current) onInlinePassthrough74() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough74()
}

func (c *current) onInlinePassthrough77() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough77()
}

func (c *current) onInlinePassthrough71() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough71()
}

func (c *current) onInlinePassthrough35(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonInlinePassthrough35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough35(stack["content"])
}

func (c *current) onInlinePassthrough1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlinePassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["element"])
}

func (c *current) onQuote3() (bool, error) {
	return c.isSubstitutionEnabled(Quotes)

}

func (p *parser) callonQuote3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote3()
}

func (c *current) onQuote1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["element"])
}

func (c *current) onTableColumnsAttribute20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTableColumnsAttribute20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute20()
}

func (c *current) onTableColumnsAttribute15() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonTableColumnsAttribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute15()
}

func (c *current) onTableColumnsAttribute12(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTableColumnsAttribute12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute12(stack["n"])
}

func (c *current) onTableColumnsAttribute26() (interface{}, error) {
	return types.HAlignLeft, nil
}

func (p *parser) callonTableColumnsAttribute26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute26()
}

func (c *current) onTableColumnsAttribute28() (interface{}, error) {
	return types.HAlignRight, nil
}

func (p *parser) callonTableColumnsAttribute28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute28()
}

func (c *current) onTableColumnsAttribute30() (interface{}, error) {
	return types.HAlignCenter, nil
}

func (p *parser) callonTableColumnsAttribute30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute30()
}

func (c *current) onTableColumnsAttribute35() (interface{}, error) {
	return types.VAlignTop, nil
}

func (p *parser) callonTableColumnsAttribute35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute35()
}

func (c *current) onTableColumnsAttribute37() (interface{}, error) {
	return types.VAlignBottom, nil
}

func (p *parser) callonTableColumnsAttribute37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute37()
}

func (c *current) onTableColumnsAttribute39() (interface{}, error) {
	return types.VAlignMiddle, nil
}

func (p *parser) callonTableColumnsAttribute39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute39()
}

func (c *current) onTableColumnsAttribute49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTableColumnsAttribute49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute49()
}

func (c *current) onTableColumnsAttribute44() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonTableColumnsAttribute44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute44()
}

func (c *current) onTableColumnsAttribute51() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableColumnsAttribute51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute51()
}

func (c *current) onTableColumnsAttribute55() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableColumnsAttribute55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute55()
}

func (c *current) onTableColumnsAttribute60(multiplier, halign, valign, weight, style, comma interface{}) (bool, error) {
	// make sure that at least something was set
	// (otherwise the parser will run indefinitely)
	return multiplier != nil ||
		halign != nil ||
		valign != nil ||
		weight != nil ||
		style != nil ||
		comma != nil, nil

}

func (p *parser) callonTableColumnsAttribute60() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute60(stack["multiplier"], stack["halign"], stack["valign"], stack["weight"], stack["style"], stack["comma"])
}

func (c *current) onTableColumnsAttribute5(multiplier, halign, valign, weight, style, comma interface{}) (interface{}, error) {
	return types.NewTableColumn(multiplier, halign, valign, weight, style)

}

func (p *parser) callonTableColumnsAttribute5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute5(stack["multiplier"], stack["halign"], stack["valign"], stack["weight"], stack["style"], stack["comma"])
}

func (c *current) onTableColumnsAttribute1(cols interface{}) (interface{}, error) {
	return cols, nil

}

func (p *parser) callonTableColumnsAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute1(stack["cols"])
}

func (c *current) onUserMacroBlock4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroBlock4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock4()
}

func (c *current) onUserMacroBlock7(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock7(stack["name"])
}

func (c *current) onUserMacroBlock10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroBlock10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock10()
}

func (c *current) onUserMacroBlock16() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonUserMacroBlock16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock16()
}

func (c *current) onUserMacroBlock1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onInlineUserMacro4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineUserMacro4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro4()
}

func (c *current) onInlineUserMacro7(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro7(stack["name"])
}

func (c *current) onInlineUserMacro10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineUserMacro10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro10()
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onFileLocation9() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation9()
}

func (c *current) onFileLocation14() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonFileLocation14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation14()
}

func (c *current) onFileLocation21() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation21()
}

func (c *current) onFileLocation33() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation33()
}

func (c *current) onFileLocation35() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation35()
}

func (c *current) onFileLocation28(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation28(stack["start"])
}

func (c *current) onFileLocation17(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonFileLocation17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation17(stack["name"], stack["start"])
}

func (c *current) onFileLocation43() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation43()
}

func (c *current) onFileLocation55() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation55()
}

func (c *current) onFileLocation57() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation57()
}

func (c *current) onFileLocation50(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation50(stack["start"])
}

func (c *current) onFileLocation39(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonFileLocation39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation39(stack["name"], stack["start"])
}

func (c *current) onFileLocation65() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation65()
}

func (c *current) onFileLocation61(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonFileLocation61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation61(stack["name"])
}

func (c *current) onFileLocation12(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileLocation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation12(stack["element"])
}

func (c *current) onFileLocation73() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonFileLocation73() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation73()
}

func (c *current) onFileLocation82() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileLocation82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation82()
}

func (c *current) onFileLocation86() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonFileLocation86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation86()
}

func (c *current) onFileLocation92() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation92()
}

func (c *current) onFileLocation99() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonFileLocation99() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation99()
}

func (c *current) onFileLocation106() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation106()
}

func (c *current) onFileLocation118() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation118()
}

func (c *current) onFileLocation120() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation120()
}

func (c *current) onFileLocation113(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation113(stack["start"])
}

func (c *current) onFileLocation102(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonFileLocation102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation102(stack["name"], stack["start"])
}

func (c *current) onFileLocation128() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation128()
}

func (c *current) onFileLocation140() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation140()
}

func (c *current) onFileLocation142() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation142()
}

func (c *current) onFileLocation135(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation135(stack["start"])
}

func (c *current) onFileLocation124(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonFileLocation124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation124(stack["name"], stack["start"])
}

func (c *current) onFileLocation150() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation150()
}

func (c *current) onFileLocation146(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonFileLocation146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation146(stack["name"])
}

func (c *current) onFileLocation97(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileLocation97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation97(stack["element"])
}

func (c *current) onFileLocation156() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation156()
}

func (c *current) onFileLocation78(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonFileLocation78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation78(stack["id"], stack["label"])
}

func (c *current) onFileLocation163() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileLocation163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation163()
}

func (c *current) onFileLocation159(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonFileLocation159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation159(stack["id"])
}

func (c *current) onFileLocation76() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation76()
}

func (c *current) onFileLocation167() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonFileLocation167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation167()
}

func (c *current) onFileLocation71(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileLocation71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation71(stack["element"])
}

func (c *current) onFileLocation169() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation169()
}

func (c *current) onFileLocation5(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFileLocation5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation5(stack["elements"])
}

func (c *current) onFileLocation175() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileLocation175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation175()
}

func (c *current) onFileLocation171(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonFileLocation171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation171(stack["ref"])
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
		p.restoreState(state)
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
