// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 348},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 368},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 368},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 368},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 381},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 381},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 395},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 403},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 427},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 21, col: 1, offset: 511},
			expr: &actionExpr{
				pos: position{line: 21, col: 21, offset: 531},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 21, col: 21, offset: 531},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 21, offset: 531},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 29, offset: 539},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 50, offset: 560},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 26, col: 1, offset: 665},
			expr: &actionExpr{
				pos: position{line: 26, col: 17, offset: 681},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 26, col: 17, offset: 681},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 17, offset: 681},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 25, offset: 689},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 45, offset: 709},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 33, col: 1, offset: 899},
			expr: &actionExpr{
				pos: position{line: 33, col: 27, offset: 925},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 33, col: 27, offset: 925},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 27, offset: 925},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 35, offset: 933},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 35, offset: 933},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 52, offset: 950},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 33, col: 60, offset: 958},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 60, offset: 958},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 42, col: 1, offset: 1216},
			expr: &choiceExpr{
				pos: position{line: 43, col: 9, offset: 1243},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 43, col: 9, offset: 1243},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 11, offset: 1309},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 11, offset: 1336},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 46, col: 11, offset: 1389},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1408},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 11, offset: 1434},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 11, offset: 1459},
						name: "VerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1514},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1536},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1561},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1588},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1618},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1645},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1681},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1706},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1739},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1766},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1804},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1830},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 62, col: 11, offset: 1862},
						name: "Paragraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 64, col: 1, offset: 1875},
			expr: &labeledExpr{
				pos:   position{line: 64, col: 47, offset: 1921},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 64, col: 54, offset: 1928},
					expr: &ruleRefExpr{
						pos:  position{line: 64, col: 55, offset: 1929},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 66, col: 1, offset: 1968},
			expr: &actionExpr{
				pos: position{line: 66, col: 38, offset: 2005},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 66, col: 38, offset: 2005},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 66, col: 38, offset: 2005},
							expr: &ruleRefExpr{
								pos:  position{line: 66, col: 39, offset: 2006},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 67, col: 5, offset: 2016},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 67, col: 12, offset: 2023},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 67, col: 12, offset: 2023},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 2049},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2101},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2126},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2152},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2174},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2199},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2226},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2256},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2283},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2319},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2344},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2377},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2404},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 11, offset: 2442},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 11, offset: 2468},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 86, col: 1, offset: 2510},
			expr: &labeledExpr{
				pos:   position{line: 86, col: 23, offset: 2532},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 86, col: 30, offset: 2539},
					expr: &ruleRefExpr{
						pos:  position{line: 86, col: 31, offset: 2540},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 88, col: 1, offset: 2563},
			expr: &actionExpr{
				pos: position{line: 88, col: 22, offset: 2584},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 88, col: 22, offset: 2584},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 88, col: 22, offset: 2584},
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 23, offset: 2585},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 89, col: 5, offset: 2595},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 89, col: 12, offset: 2602},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 89, col: 12, offset: 2602},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 89, col: 24, offset: 2614},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 96, col: 1, offset: 2767},
			expr: &ruleRefExpr{
				pos:  position{line: 96, col: 16, offset: 2782},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 98, col: 1, offset: 2802},
			expr: &actionExpr{
				pos: position{line: 98, col: 20, offset: 2821},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 98, col: 20, offset: 2821},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 98, col: 20, offset: 2821},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 98, col: 41, offset: 2842},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 98, col: 49, offset: 2850},
								expr: &ruleRefExpr{
									pos:  position{line: 98, col: 50, offset: 2851},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 98, col: 75, offset: 2876},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 102, col: 1, offset: 2960},
			expr: &seqExpr{
				pos: position{line: 102, col: 26, offset: 2985},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 102, col: 26, offset: 2985},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 102, col: 32, offset: 2991},
						expr: &ruleRefExpr{
							pos:  position{line: 102, col: 32, offset: 2991},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 102, col: 39, offset: 2998},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 104, col: 1, offset: 3005},
			expr: &actionExpr{
				pos: position{line: 104, col: 27, offset: 3031},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 104, col: 27, offset: 3031},
					expr: &oneOrMoreExpr{
						pos: position{line: 104, col: 28, offset: 3032},
						expr: &seqExpr{
							pos: position{line: 104, col: 29, offset: 3033},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 104, col: 29, offset: 3033},
									expr: &ruleRefExpr{
										pos:  position{line: 104, col: 30, offset: 3034},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 104, col: 51, offset: 3055,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 111, col: 1, offset: 3228},
			expr: &actionExpr{
				pos: position{line: 111, col: 19, offset: 3246},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 111, col: 19, offset: 3246},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 111, col: 19, offset: 3246},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 111, col: 23, offset: 3250},
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 23, offset: 3250},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 30, offset: 3257},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 37, offset: 3264},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 52, offset: 3279},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 111, col: 56, offset: 3283},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 56, offset: 3283},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 111, col: 74, offset: 3301},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 112, col: 9, offset: 3314},
							expr: &choiceExpr{
								pos: position{line: 112, col: 10, offset: 3315},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 112, col: 10, offset: 3315},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 112, col: 30, offset: 3335},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 9, offset: 3359},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 113, col: 18, offset: 3368},
								expr: &ruleRefExpr{
									pos:  position{line: 113, col: 18, offset: 3368},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 114, col: 9, offset: 3396},
							expr: &choiceExpr{
								pos: position{line: 114, col: 10, offset: 3397},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 114, col: 10, offset: 3397},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 30, offset: 3417},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 115, col: 9, offset: 3441},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 115, col: 19, offset: 3451},
								expr: &ruleRefExpr{
									pos:  position{line: 115, col: 19, offset: 3451},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 119, col: 1, offset: 3556},
			expr: &choiceExpr{
				pos: position{line: 119, col: 20, offset: 3575},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 119, col: 20, offset: 3575},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 119, col: 48, offset: 3603},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 121, col: 1, offset: 3635},
			expr: &actionExpr{
				pos: position{line: 121, col: 30, offset: 3664},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 121, col: 30, offset: 3664},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 121, col: 30, offset: 3664},
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 30, offset: 3664},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 121, col: 37, offset: 3671},
							expr: &litMatcher{
								pos:        position{line: 121, col: 38, offset: 3672},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 121, col: 42, offset: 3676},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 121, col: 51, offset: 3685},
								expr: &ruleRefExpr{
									pos:  position{line: 121, col: 51, offset: 3685},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 121, col: 68, offset: 3702},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 125, col: 1, offset: 3776},
			expr: &actionExpr{
				pos: position{line: 125, col: 33, offset: 3808},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 125, col: 33, offset: 3808},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 33, offset: 3808},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 33, offset: 3808},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 125, col: 40, offset: 3815},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 125, col: 51, offset: 3826},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 59, offset: 3834},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 75, offset: 3850},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 129, col: 1, offset: 3933},
			expr: &actionExpr{
				pos: position{line: 129, col: 19, offset: 3951},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 129, col: 19, offset: 3951},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 19, offset: 3951},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 19, offset: 3951},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 26, offset: 3958},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 36, offset: 3968},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 56, offset: 3988},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 129, col: 62, offset: 3994},
								expr: &ruleRefExpr{
									pos:  position{line: 129, col: 63, offset: 3995},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 85, offset: 4017},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 85, offset: 4017},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 129, col: 92, offset: 4024},
							expr: &litMatcher{
								pos:        position{line: 129, col: 92, offset: 4024},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 97, offset: 4029},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 97, offset: 4029},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 134, col: 1, offset: 4179},
			expr: &actionExpr{
				pos: position{line: 134, col: 23, offset: 4201},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 134, col: 23, offset: 4201},
					expr: &charClassMatcher{
						pos:        position{line: 134, col: 23, offset: 4201},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 138, col: 1, offset: 4252},
			expr: &actionExpr{
				pos: position{line: 138, col: 24, offset: 4275},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 138, col: 24, offset: 4275},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 138, col: 24, offset: 4275},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 138, col: 28, offset: 4279},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 138, col: 35, offset: 4286},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 138, col: 36, offset: 4287},
									expr: &charClassMatcher{
										pos:        position{line: 138, col: 36, offset: 4287},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 140, col: 4, offset: 4336},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 146, col: 1, offset: 4503},
			expr: &actionExpr{
				pos: position{line: 146, col: 21, offset: 4523},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 146, col: 21, offset: 4523},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 146, col: 21, offset: 4523},
							expr: &ruleRefExpr{
								pos:  position{line: 146, col: 21, offset: 4523},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 146, col: 28, offset: 4530},
							expr: &litMatcher{
								pos:        position{line: 146, col: 29, offset: 4531},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 146, col: 33, offset: 4535},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 147, col: 9, offset: 4555},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 147, col: 10, offset: 4556},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 147, col: 10, offset: 4556},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 147, col: 10, offset: 4556},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 147, col: 21, offset: 4567},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 147, col: 45, offset: 4591},
													expr: &litMatcher{
														pos:        position{line: 147, col: 45, offset: 4591},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 147, col: 50, offset: 4596},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 147, col: 58, offset: 4604},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 59, offset: 4605},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 147, col: 82, offset: 4628},
													expr: &litMatcher{
														pos:        position{line: 147, col: 82, offset: 4628},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 147, col: 87, offset: 4633},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 147, col: 97, offset: 4643},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 98, offset: 4644},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 149, col: 15, offset: 4763},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 149, col: 15, offset: 4763},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 149, col: 15, offset: 4763},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 149, col: 24, offset: 4772},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 149, col: 46, offset: 4794},
													expr: &litMatcher{
														pos:        position{line: 149, col: 46, offset: 4794},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 149, col: 51, offset: 4799},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 149, col: 61, offset: 4809},
														expr: &ruleRefExpr{
															pos:  position{line: 149, col: 62, offset: 4810},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 151, col: 13, offset: 4921},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 156, col: 1, offset: 5056},
			expr: &choiceExpr{
				pos: position{line: 156, col: 27, offset: 5082},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 156, col: 27, offset: 5082},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 156, col: 27, offset: 5082},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 156, col: 27, offset: 5082},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 156, col: 32, offset: 5087},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 156, col: 39, offset: 5094},
									expr: &charClassMatcher{
										pos:        position{line: 156, col: 39, offset: 5094},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 158, col: 5, offset: 5144},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 158, col: 5, offset: 5144},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 158, col: 5, offset: 5144},
									expr: &litMatcher{
										pos:        position{line: 158, col: 5, offset: 5144},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 158, col: 11, offset: 5150},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 158, col: 18, offset: 5157},
									expr: &charClassMatcher{
										pos:        position{line: 158, col: 18, offset: 5157},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 158, col: 29, offset: 5168},
									expr: &ruleRefExpr{
										pos:  position{line: 158, col: 29, offset: 5168},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 158, col: 36, offset: 5175},
									expr: &litMatcher{
										pos:        position{line: 158, col: 37, offset: 5176},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 162, col: 1, offset: 5220},
			expr: &actionExpr{
				pos: position{line: 162, col: 25, offset: 5244},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 162, col: 25, offset: 5244},
					expr: &charClassMatcher{
						pos:        position{line: 162, col: 25, offset: 5244},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 166, col: 1, offset: 5294},
			expr: &actionExpr{
				pos: position{line: 166, col: 27, offset: 5320},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 166, col: 27, offset: 5320},
					expr: &charClassMatcher{
						pos:        position{line: 166, col: 27, offset: 5320},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 173, col: 1, offset: 5480},
			expr: &actionExpr{
				pos: position{line: 173, col: 25, offset: 5504},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 173, col: 25, offset: 5504},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 173, col: 25, offset: 5504},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 173, col: 29, offset: 5508},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 35, offset: 5514},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 173, col: 50, offset: 5529},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 174, col: 9, offset: 5543},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 174, col: 15, offset: 5549},
								expr: &actionExpr{
									pos: position{line: 174, col: 16, offset: 5550},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 174, col: 17, offset: 5551},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 174, col: 17, offset: 5551},
												expr: &ruleRefExpr{
													pos:  position{line: 174, col: 17, offset: 5551},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 174, col: 24, offset: 5558},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 174, col: 31, offset: 5565},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 176, col: 13, offset: 5641},
							expr: &ruleRefExpr{
								pos:  position{line: 176, col: 13, offset: 5641},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 176, col: 20, offset: 5648},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 183, col: 1, offset: 5895},
			expr: &actionExpr{
				pos: position{line: 183, col: 18, offset: 5912},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 183, col: 18, offset: 5912},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 183, col: 18, offset: 5912},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 183, col: 28, offset: 5922},
							expr: &charClassMatcher{
								pos:        position{line: 183, col: 29, offset: 5923},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 187, col: 1, offset: 5975},
			expr: &actionExpr{
				pos: position{line: 187, col: 30, offset: 6004},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 187, col: 30, offset: 6004},
					expr: &charClassMatcher{
						pos:        position{line: 187, col: 30, offset: 6004},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 191, col: 1, offset: 6053},
			expr: &choiceExpr{
				pos: position{line: 191, col: 19, offset: 6071},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 191, col: 19, offset: 6071},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 191, col: 19, offset: 6071},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 191, col: 19, offset: 6071},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 191, col: 24, offset: 6076},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 30, offset: 6082},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 191, col: 45, offset: 6097},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 191, col: 49, offset: 6101},
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 49, offset: 6101},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 191, col: 56, offset: 6108},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 193, col: 5, offset: 6170},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 193, col: 5, offset: 6170},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 193, col: 5, offset: 6170},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 193, col: 9, offset: 6174},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 15, offset: 6180},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 193, col: 30, offset: 6195},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 193, col: 35, offset: 6200},
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 35, offset: 6200},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 193, col: 42, offset: 6207},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 197, col: 1, offset: 6270},
			expr: &actionExpr{
				pos: position{line: 197, col: 26, offset: 6295},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 197, col: 26, offset: 6295},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 197, col: 26, offset: 6295},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 197, col: 30, offset: 6299},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 197, col: 36, offset: 6305},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 197, col: 51, offset: 6320},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 201, col: 1, offset: 6390},
			expr: &actionExpr{
				pos: position{line: 201, col: 15, offset: 6404},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 201, col: 15, offset: 6404},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 201, col: 15, offset: 6404},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 201, col: 21, offset: 6410},
								expr: &ruleRefExpr{
									pos:  position{line: 201, col: 22, offset: 6411},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 201, col: 41, offset: 6430},
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 41, offset: 6430},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 205, col: 1, offset: 6504},
			expr: &actionExpr{
				pos: position{line: 205, col: 21, offset: 6524},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 205, col: 21, offset: 6524},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 205, col: 21, offset: 6524},
							expr: &choiceExpr{
								pos: position{line: 205, col: 23, offset: 6526},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 205, col: 23, offset: 6526},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 205, col: 29, offset: 6532},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&litMatcher{
										pos:        position{line: 205, col: 35, offset: 6538},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 206, col: 5, offset: 6615},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 206, col: 11, offset: 6621},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 206, col: 11, offset: 6621},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 207, col: 9, offset: 6643},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 208, col: 9, offset: 6668},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 209, col: 9, offset: 6706},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 9, offset: 6735},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 211, col: 9, offset: 6764},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 212, col: 9, offset: 6792},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 213, col: 9, offset: 6820},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 214, col: 9, offset: 6858},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 215, col: 9, offset: 6895},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 220, col: 1, offset: 7083},
			expr: &choiceExpr{
				pos: position{line: 220, col: 24, offset: 7106},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 220, col: 24, offset: 7106},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 220, col: 42, offset: 7124},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 222, col: 1, offset: 7143},
			expr: &actionExpr{
				pos: position{line: 222, col: 14, offset: 7156},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 222, col: 14, offset: 7156},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 222, col: 14, offset: 7156},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 222, col: 19, offset: 7161},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 23, offset: 7165},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 222, col: 27, offset: 7169},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 222, col: 32, offset: 7174},
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 32, offset: 7174},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 222, col: 39, offset: 7181},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 226, col: 1, offset: 7237},
			expr: &actionExpr{
				pos: position{line: 226, col: 20, offset: 7256},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 226, col: 20, offset: 7256},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 226, col: 20, offset: 7256},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 226, col: 25, offset: 7261},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 29, offset: 7265},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 226, col: 33, offset: 7269},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 226, col: 38, offset: 7274},
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 38, offset: 7274},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 232, col: 1, offset: 7557},
			expr: &actionExpr{
				pos: position{line: 232, col: 17, offset: 7573},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 232, col: 17, offset: 7573},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 232, col: 17, offset: 7573},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 232, col: 21, offset: 7577},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 28, offset: 7584},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 232, col: 49, offset: 7605},
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 49, offset: 7605},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 56, offset: 7612},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 236, col: 1, offset: 7674},
			expr: &actionExpr{
				pos: position{line: 236, col: 24, offset: 7697},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 236, col: 24, offset: 7697},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 236, col: 24, offset: 7697},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 236, col: 32, offset: 7705},
							expr: &charClassMatcher{
								pos:        position{line: 236, col: 32, offset: 7705},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 242, col: 1, offset: 7964},
			expr: &actionExpr{
				pos: position{line: 242, col: 31, offset: 7994},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 242, col: 31, offset: 7994},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 242, col: 31, offset: 7994},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 242, col: 35, offset: 7998},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 242, col: 42, offset: 8005},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 242, col: 42, offset: 8005},
										expr: &ruleRefExpr{
											pos:  position{line: 242, col: 42, offset: 8005},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 242, col: 57, offset: 8020},
										expr: &ruleRefExpr{
											pos:  position{line: 242, col: 57, offset: 8020},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 242, col: 69, offset: 8032},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 242, col: 73, offset: 8036},
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 73, offset: 8036},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 242, col: 80, offset: 8043},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrs",
			pos:  position{line: 246, col: 1, offset: 8101},
			expr: &choiceExpr{
				pos: position{line: 246, col: 15, offset: 8115},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 246, col: 15, offset: 8115},
						name: "BlockAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 246, col: 31, offset: 8131},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 246, col: 46, offset: 8146},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttrList",
			pos:  position{line: 250, col: 1, offset: 8378},
			expr: &actionExpr{
				pos: position{line: 250, col: 18, offset: 8395},
				run: (*parser).callonBlockAttrList1,
				expr: &seqExpr{
					pos: position{line: 250, col: 18, offset: 8395},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 250, col: 18, offset: 8395},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 250, col: 22, offset: 8399},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 250, col: 29, offset: 8406},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 250, col: 29, offset: 8406},
										expr: &ruleRefExpr{
											pos:  position{line: 250, col: 29, offset: 8406},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 250, col: 45, offset: 8422},
										expr: &ruleRefExpr{
											pos:  position{line: 250, col: 45, offset: 8422},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 250, col: 60, offset: 8437},
										expr: &ruleRefExpr{
											pos:  position{line: 250, col: 60, offset: 8437},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 250, col: 82, offset: 8459},
										expr: &ruleRefExpr{
											pos:  position{line: 250, col: 82, offset: 8459},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 250, col: 104, offset: 8481},
										expr: &ruleRefExpr{
											pos:  position{line: 250, col: 104, offset: 8481},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 250, col: 116, offset: 8493},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 250, col: 120, offset: 8497},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 254, col: 1, offset: 8555},
			expr: &actionExpr{
				pos: position{line: 254, col: 19, offset: 8573},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 254, col: 19, offset: 8573},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 254, col: 25, offset: 8579},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 258, col: 1, offset: 8653},
			expr: &actionExpr{
				pos: position{line: 258, col: 25, offset: 8677},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 258, col: 25, offset: 8677},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 258, col: 25, offset: 8677},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&labeledExpr{
							pos:   position{line: 258, col: 29, offset: 8681},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 35, offset: 8687},
								name: "PositionalValue",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 262, col: 1, offset: 8781},
			expr: &actionExpr{
				pos: position{line: 262, col: 25, offset: 8805},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 262, col: 25, offset: 8805},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 262, col: 25, offset: 8805},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&labeledExpr{
							pos:   position{line: 262, col: 29, offset: 8809},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 262, col: 35, offset: 8815},
								name: "PositionalValue",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 266, col: 1, offset: 8909},
			expr: &actionExpr{
				pos: position{line: 266, col: 21, offset: 8929},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 266, col: 21, offset: 8929},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 266, col: 21, offset: 8929},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 266, col: 33, offset: 8941},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 33, offset: 8941},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 266, col: 40, offset: 8948},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 270, col: 1, offset: 9004},
			expr: &actionExpr{
				pos: position{line: 270, col: 30, offset: 9033},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 270, col: 30, offset: 9033},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 270, col: 30, offset: 9033},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 270, col: 39, offset: 9042},
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 39, offset: 9042},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 270, col: 46, offset: 9049},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 275, col: 1, offset: 9195},
			expr: &actionExpr{
				pos: position{line: 275, col: 30, offset: 9224},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 275, col: 30, offset: 9224},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 275, col: 30, offset: 9224},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 275, col: 34, offset: 9228},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 275, col: 37, offset: 9231},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 275, col: 53, offset: 9247},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 275, col: 57, offset: 9251},
							expr: &ruleRefExpr{
								pos:  position{line: 275, col: 57, offset: 9251},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 275, col: 64, offset: 9258},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 280, col: 1, offset: 9418},
			expr: &actionExpr{
				pos: position{line: 280, col: 21, offset: 9438},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 280, col: 21, offset: 9438},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 280, col: 21, offset: 9438},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 281, col: 5, offset: 9454},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 281, col: 14, offset: 9463},
								expr: &actionExpr{
									pos: position{line: 281, col: 15, offset: 9464},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 281, col: 15, offset: 9464},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 281, col: 15, offset: 9464},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 281, col: 19, offset: 9468},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 281, col: 24, offset: 9473},
													expr: &ruleRefExpr{
														pos:  position{line: 281, col: 25, offset: 9474},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 282, col: 5, offset: 9530},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 282, col: 12, offset: 9537},
								expr: &actionExpr{
									pos: position{line: 282, col: 13, offset: 9538},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 282, col: 13, offset: 9538},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 282, col: 13, offset: 9538},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 282, col: 17, offset: 9542},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 282, col: 22, offset: 9547},
													expr: &ruleRefExpr{
														pos:  position{line: 282, col: 23, offset: 9548},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 283, col: 5, offset: 9596},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 9, offset: 9600},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 9, offset: 9600},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 283, col: 16, offset: 9607},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 288, col: 1, offset: 9763},
			expr: &actionExpr{
				pos: position{line: 288, col: 19, offset: 9781},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 288, col: 19, offset: 9781},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 288, col: 19, offset: 9781},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 288, col: 23, offset: 9785},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 288, col: 34, offset: 9796},
								expr: &ruleRefExpr{
									pos:  position{line: 288, col: 35, offset: 9797},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 288, col: 54, offset: 9816},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 288, col: 58, offset: 9820},
							expr: &ruleRefExpr{
								pos:  position{line: 288, col: 58, offset: 9820},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 288, col: 65, offset: 9827},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 292, col: 1, offset: 9903},
			expr: &choiceExpr{
				pos: position{line: 292, col: 21, offset: 9923},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 292, col: 21, offset: 9923},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 292, col: 49, offset: 9951},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 294, col: 1, offset: 9983},
			expr: &actionExpr{
				pos: position{line: 294, col: 30, offset: 10012},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 294, col: 30, offset: 10012},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 294, col: 30, offset: 10012},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 294, col: 35, offset: 10017},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 294, col: 49, offset: 10031},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 294, col: 53, offset: 10035},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 294, col: 59, offset: 10041},
								expr: &ruleRefExpr{
									pos:  position{line: 294, col: 60, offset: 10042},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 294, col: 77, offset: 10059},
							expr: &litMatcher{
								pos:        position{line: 294, col: 77, offset: 10059},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 294, col: 82, offset: 10064},
							expr: &ruleRefExpr{
								pos:  position{line: 294, col: 82, offset: 10064},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 298, col: 1, offset: 10167},
			expr: &actionExpr{
				pos: position{line: 298, col: 33, offset: 10199},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 298, col: 33, offset: 10199},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 298, col: 33, offset: 10199},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 38, offset: 10204},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 298, col: 52, offset: 10218},
							expr: &litMatcher{
								pos:        position{line: 298, col: 52, offset: 10218},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 298, col: 57, offset: 10223},
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 57, offset: 10223},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 302, col: 1, offset: 10315},
			expr: &actionExpr{
				pos: position{line: 302, col: 17, offset: 10331},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 302, col: 17, offset: 10331},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 302, col: 17, offset: 10331},
							expr: &litMatcher{
								pos:        position{line: 302, col: 18, offset: 10332},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 302, col: 26, offset: 10340},
							expr: &litMatcher{
								pos:        position{line: 302, col: 27, offset: 10341},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 302, col: 35, offset: 10349},
							expr: &litMatcher{
								pos:        position{line: 302, col: 36, offset: 10350},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 302, col: 46, offset: 10360},
							expr: &oneOrMoreExpr{
								pos: position{line: 302, col: 48, offset: 10362},
								expr: &ruleRefExpr{
									pos:  position{line: 302, col: 48, offset: 10362},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 302, col: 56, offset: 10370},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 302, col: 61, offset: 10375},
								expr: &charClassMatcher{
									pos:        position{line: 302, col: 61, offset: 10375},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 302, col: 75, offset: 10389},
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 75, offset: 10389},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 306, col: 1, offset: 10436},
			expr: &actionExpr{
				pos: position{line: 306, col: 19, offset: 10454},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 306, col: 19, offset: 10454},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 306, col: 26, offset: 10461},
						expr: &charClassMatcher{
							pos:        position{line: 306, col: 26, offset: 10461},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 310, col: 1, offset: 10516},
			expr: &actionExpr{
				pos: position{line: 310, col: 29, offset: 10544},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 310, col: 29, offset: 10544},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 310, col: 29, offset: 10544},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 310, col: 36, offset: 10551},
								expr: &charClassMatcher{
									pos:        position{line: 310, col: 36, offset: 10551},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 310, col: 50, offset: 10565},
							expr: &litMatcher{
								pos:        position{line: 310, col: 51, offset: 10566},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 314, col: 1, offset: 10736},
			expr: &actionExpr{
				pos: position{line: 314, col: 20, offset: 10755},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 314, col: 20, offset: 10755},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 314, col: 20, offset: 10755},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 314, col: 29, offset: 10764},
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 29, offset: 10764},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 314, col: 36, offset: 10771},
							expr: &litMatcher{
								pos:        position{line: 314, col: 36, offset: 10771},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 314, col: 41, offset: 10776},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 314, col: 48, offset: 10783},
								expr: &ruleRefExpr{
									pos:  position{line: 314, col: 49, offset: 10784},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 314, col: 66, offset: 10801},
							expr: &litMatcher{
								pos:        position{line: 314, col: 66, offset: 10801},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 314, col: 71, offset: 10806},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 314, col: 77, offset: 10812},
								expr: &ruleRefExpr{
									pos:  position{line: 314, col: 78, offset: 10813},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 314, col: 95, offset: 10830},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 314, col: 99, offset: 10834},
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 99, offset: 10834},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 106, offset: 10841},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 318, col: 1, offset: 10914},
			expr: &actionExpr{
				pos: position{line: 318, col: 20, offset: 10933},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 318, col: 20, offset: 10933},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 318, col: 20, offset: 10933},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 318, col: 29, offset: 10942},
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 29, offset: 10942},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 318, col: 36, offset: 10949},
							expr: &litMatcher{
								pos:        position{line: 318, col: 36, offset: 10949},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 41, offset: 10954},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 318, col: 48, offset: 10961},
								expr: &ruleRefExpr{
									pos:  position{line: 318, col: 49, offset: 10962},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 318, col: 66, offset: 10979},
							expr: &litMatcher{
								pos:        position{line: 318, col: 66, offset: 10979},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 71, offset: 10984},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 318, col: 77, offset: 10990},
								expr: &ruleRefExpr{
									pos:  position{line: 318, col: 78, offset: 10991},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 318, col: 95, offset: 11008},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 318, col: 99, offset: 11012},
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 99, offset: 11012},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 318, col: 106, offset: 11019},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 322, col: 1, offset: 11110},
			expr: &actionExpr{
				pos: position{line: 322, col: 19, offset: 11128},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 322, col: 20, offset: 11129},
					expr: &charClassMatcher{
						pos:        position{line: 322, col: 20, offset: 11129},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 326, col: 1, offset: 11182},
			expr: &actionExpr{
				pos: position{line: 326, col: 21, offset: 11202},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 326, col: 21, offset: 11202},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 326, col: 21, offset: 11202},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 326, col: 25, offset: 11206},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 326, col: 31, offset: 11212},
								expr: &ruleRefExpr{
									pos:  position{line: 326, col: 32, offset: 11213},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 326, col: 51, offset: 11232},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 330, col: 1, offset: 11308},
			expr: &actionExpr{
				pos: position{line: 330, col: 20, offset: 11327},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &seqExpr{
					pos: position{line: 330, col: 20, offset: 11327},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 330, col: 20, offset: 11327},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 330, col: 24, offset: 11331},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 330, col: 31, offset: 11338},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 330, col: 31, offset: 11338},
										expr: &ruleRefExpr{
											pos:  position{line: 330, col: 31, offset: 11338},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 330, col: 51, offset: 11358},
										expr: &ruleRefExpr{
											pos:  position{line: 330, col: 51, offset: 11358},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 330, col: 66, offset: 11373},
										expr: &ruleRefExpr{
											pos:  position{line: 330, col: 66, offset: 11373},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 330, col: 78, offset: 11385},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 334, col: 1, offset: 11443},
			expr: &actionExpr{
				pos: position{line: 334, col: 23, offset: 11465},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &labeledExpr{
					pos:   position{line: 334, col: 23, offset: 11465},
					label: "role",
					expr: &ruleRefExpr{
						pos:  position{line: 334, col: 28, offset: 11470},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 338, col: 1, offset: 11542},
			expr: &actionExpr{
				pos: position{line: 338, col: 25, offset: 11566},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 338, col: 25, offset: 11566},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 338, col: 25, offset: 11566},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 338, col: 36, offset: 11577},
								expr: &ruleRefExpr{
									pos:  position{line: 338, col: 37, offset: 11578},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 338, col: 56, offset: 11597},
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 56, offset: 11597},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 338, col: 67, offset: 11608},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 342, col: 1, offset: 11720},
			expr: &choiceExpr{
				pos: position{line: 342, col: 18, offset: 11737},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 342, col: 18, offset: 11737},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 342, col: 36, offset: 11755},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 342, col: 58, offset: 11777},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 344, col: 1, offset: 11798},
			expr: &actionExpr{
				pos: position{line: 344, col: 24, offset: 11821},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 344, col: 24, offset: 11821},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 344, col: 24, offset: 11821},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 344, col: 28, offset: 11825},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 35, offset: 11832},
								name: "ShortHandValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 348, col: 1, offset: 11907},
			expr: &actionExpr{
				pos: position{line: 348, col: 20, offset: 11926},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 348, col: 20, offset: 11926},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 348, col: 20, offset: 11926},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 348, col: 24, offset: 11930},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 348, col: 27, offset: 11933},
								name: "ShortHandValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 352, col: 1, offset: 12000},
			expr: &actionExpr{
				pos: position{line: 352, col: 22, offset: 12021},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 352, col: 22, offset: 12021},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 352, col: 22, offset: 12021},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 352, col: 26, offset: 12025},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 352, col: 31, offset: 12030},
								name: "ShortHandValue",
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 357, col: 1, offset: 12146},
			expr: &actionExpr{
				pos: position{line: 357, col: 20, offset: 12165},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 357, col: 20, offset: 12165},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 357, col: 20, offset: 12165},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 26, offset: 12171},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 357, col: 41, offset: 12186},
							expr: &charClassMatcher{
								pos:        position{line: 357, col: 42, offset: 12187},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 361, col: 1, offset: 12236},
			expr: &choiceExpr{
				pos: position{line: 361, col: 19, offset: 12254},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 361, col: 19, offset: 12254},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 361, col: 41, offset: 12276},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 361, col: 65, offset: 12300},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 365, col: 1, offset: 12502},
			expr: &actionExpr{
				pos: position{line: 365, col: 24, offset: 12525},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 365, col: 24, offset: 12525},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 365, col: 24, offset: 12525},
							val:        "[^,\\r\\n\"' \\t.#%=\\]]",
							chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
							ignoreCase: false,
							inverted:   true,
						},
						&zeroOrMoreExpr{
							pos: position{line: 365, col: 43, offset: 12544},
							expr: &charClassMatcher{
								pos:        position{line: 365, col: 43, offset: 12544},
								val:        "[^,\\r\\n\"'.#%=\\]]",
								chars:      []rune{',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttr",
			pos:  position{line: 369, col: 1, offset: 12602},
			expr: &actionExpr{
				pos: position{line: 369, col: 13, offset: 12614},
				run: (*parser).callonNamedAttr1,
				expr: &seqExpr{
					pos: position{line: 369, col: 13, offset: 12614},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 369, col: 13, offset: 12614},
							expr: &seqExpr{
								pos: position{line: 369, col: 15, offset: 12616},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 369, col: 15, offset: 12616},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 369, col: 19, offset: 12620},
										expr: &ruleRefExpr{
											pos:  position{line: 369, col: 19, offset: 12620},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 369, col: 29, offset: 12630},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 369, col: 33, offset: 12634},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 369, col: 46, offset: 12647},
							expr: &ruleRefExpr{
								pos:  position{line: 369, col: 46, offset: 12647},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 369, col: 53, offset: 12654},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 369, col: 57, offset: 12658},
							expr: &ruleRefExpr{
								pos:  position{line: 369, col: 57, offset: 12658},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 369, col: 64, offset: 12665},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 369, col: 70, offset: 12671},
								name: "NamedAttrValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 369, col: 85, offset: 12686},
							expr: &ruleRefExpr{
								pos:  position{line: 369, col: 85, offset: 12686},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrKey",
			pos:  position{line: 374, col: 1, offset: 12881},
			expr: &actionExpr{
				pos: position{line: 374, col: 17, offset: 12897},
				run: (*parser).callonNamedAttrKey1,
				expr: &seqExpr{
					pos: position{line: 374, col: 17, offset: 12897},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 374, col: 17, offset: 12897},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 374, col: 26, offset: 12906},
							expr: &charClassMatcher{
								pos:        position{line: 374, col: 26, offset: 12906},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrValue",
			pos:  position{line: 378, col: 1, offset: 12958},
			expr: &choiceExpr{
				pos: position{line: 378, col: 19, offset: 12976},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 378, col: 19, offset: 12976},
						name: "AttrValueNone",
					},
					&ruleRefExpr{
						pos:  position{line: 378, col: 35, offset: 12992},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 378, col: 59, offset: 13016},
						name: "AttrValueDoubleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 378, col: 83, offset: 13040},
						name: "AttrValuePlain",
					},
				},
			},
		},
		{
			name: "AttrValuePlain",
			pos:  position{line: 380, col: 1, offset: 13058},
			expr: &actionExpr{
				pos: position{line: 380, col: 19, offset: 13076},
				run: (*parser).callonAttrValuePlain1,
				expr: &oneOrMoreExpr{
					pos: position{line: 380, col: 19, offset: 13076},
					expr: &charClassMatcher{
						pos:        position{line: 380, col: 19, offset: 13076},
						val:        "[^,\\r\\n\"' \\t\\]]",
						chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 384, col: 1, offset: 13133},
			expr: &actionExpr{
				pos: position{line: 384, col: 26, offset: 13158},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 384, col: 26, offset: 13158},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 384, col: 26, offset: 13158},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 384, col: 30, offset: 13162},
							expr: &charClassMatcher{
								pos:        position{line: 384, col: 30, offset: 13162},
								val:        "[^'\\r\\n]",
								chars:      []rune{'\'', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 384, col: 40, offset: 13172},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 388, col: 1, offset: 13233},
			expr: &actionExpr{
				pos: position{line: 388, col: 26, offset: 13258},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 388, col: 26, offset: 13258},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 388, col: 26, offset: 13258},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 388, col: 31, offset: 13263},
							expr: &charClassMatcher{
								pos:        position{line: 388, col: 31, offset: 13263},
								val:        "[^\"\\r\\n]",
								chars:      []rune{'"', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 388, col: 41, offset: 13273},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueNone",
			pos:  position{line: 394, col: 1, offset: 13533},
			expr: &actionExpr{
				pos: position{line: 394, col: 18, offset: 13550},
				run: (*parser).callonAttrValueNone1,
				expr: &litMatcher{
					pos:        position{line: 394, col: 18, offset: 13550},
					val:        "None",
					ignoreCase: false,
					want:       "\"None\"",
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 402, col: 1, offset: 13740},
			expr: &choiceExpr{
				pos: position{line: 402, col: 17, offset: 13756},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 402, col: 17, offset: 13756},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 402, col: 38, offset: 13777},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 404, col: 1, offset: 13799},
			expr: &actionExpr{
				pos: position{line: 404, col: 23, offset: 13821},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 404, col: 23, offset: 13821},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 404, col: 23, offset: 13821},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 404, col: 46, offset: 13844},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 404, col: 55, offset: 13853},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 404, col: 82, offset: 13880},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 408, col: 1, offset: 13988},
			expr: &actionExpr{
				pos: position{line: 408, col: 31, offset: 14018},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 408, col: 31, offset: 14018},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 408, col: 41, offset: 14028},
						expr: &ruleRefExpr{
							pos:  position{line: 408, col: 41, offset: 14028},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 412, col: 1, offset: 14110},
			expr: &seqExpr{
				pos: position{line: 412, col: 27, offset: 14136},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 412, col: 27, offset: 14136},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 412, col: 32, offset: 14141},
						expr: &charClassMatcher{
							pos:        position{line: 412, col: 33, offset: 14142},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 414, col: 1, offset: 14155},
			expr: &litMatcher{
				pos:        position{line: 414, col: 25, offset: 14179},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 417, col: 1, offset: 14270},
			expr: &actionExpr{
				pos: position{line: 417, col: 30, offset: 14299},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 417, col: 30, offset: 14299},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 418, col: 9, offset: 14318},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 418, col: 9, offset: 14318},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 418, col: 9, offset: 14318},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 418, col: 19, offset: 14328},
										expr: &ruleRefExpr{
											pos:  position{line: 418, col: 20, offset: 14329},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 419, col: 11, offset: 14386},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 419, col: 11, offset: 14386},
										expr: &ruleRefExpr{
											pos:  position{line: 419, col: 11, offset: 14386},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 419, col: 18, offset: 14393},
										expr: &ruleRefExpr{
											pos:  position{line: 419, col: 19, offset: 14394},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 420, col: 11, offset: 14426},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 420, col: 11, offset: 14426},
										expr: &litMatcher{
											pos:        position{line: 420, col: 12, offset: 14427},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 420, col: 16, offset: 14431},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 421, col: 11, offset: 14480},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 422, col: 11, offset: 14502},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 423, col: 11, offset: 14525},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 424, col: 11, offset: 14551},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 425, col: 11, offset: 14580},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 426, col: 11, offset: 14596},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 427, col: 11, offset: 14629},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 428, col: 11, offset: 14649},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 429, col: 11, offset: 14671},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 430, col: 11, offset: 14693},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 431, col: 11, offset: 14718},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 432, col: 11, offset: 14745},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 432, col: 11, offset: 14745},
										expr: &litMatcher{
											pos:        position{line: 432, col: 12, offset: 14746},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 432, col: 17, offset: 14751},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 433, col: 11, offset: 14776},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 434, col: 11, offset: 14806},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 435, col: 11, offset: 14835},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 439, col: 1, offset: 14905},
			expr: &choiceExpr{
				pos: position{line: 439, col: 41, offset: 14945},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 439, col: 41, offset: 14945},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 439, col: 55, offset: 14959},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 439, col: 55, offset: 14959},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 439, col: 55, offset: 14959},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 439, col: 59, offset: 14963},
									expr: &litMatcher{
										pos:        position{line: 439, col: 60, offset: 14964},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 443, col: 1, offset: 15027},
			expr: &actionExpr{
				pos: position{line: 443, col: 23, offset: 15049},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 443, col: 23, offset: 15049},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 443, col: 23, offset: 15049},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 443, col: 46, offset: 15072},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 443, col: 55, offset: 15081},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 443, col: 82, offset: 15108},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 447, col: 1, offset: 15216},
			expr: &actionExpr{
				pos: position{line: 447, col: 31, offset: 15246},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 447, col: 31, offset: 15246},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 447, col: 41, offset: 15256},
						expr: &ruleRefExpr{
							pos:  position{line: 447, col: 41, offset: 15256},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 452, col: 1, offset: 15421},
			expr: &actionExpr{
				pos: position{line: 452, col: 30, offset: 15450},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 452, col: 30, offset: 15450},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 453, col: 9, offset: 15469},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 453, col: 9, offset: 15469},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 453, col: 9, offset: 15469},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 453, col: 19, offset: 15479},
										expr: &ruleRefExpr{
											pos:  position{line: 453, col: 20, offset: 15480},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 454, col: 11, offset: 15537},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 454, col: 11, offset: 15537},
										expr: &ruleRefExpr{
											pos:  position{line: 454, col: 11, offset: 15537},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 454, col: 18, offset: 15544},
										expr: &ruleRefExpr{
											pos:  position{line: 454, col: 19, offset: 15545},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 455, col: 11, offset: 15577},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 456, col: 11, offset: 15595},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 457, col: 11, offset: 15617},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 458, col: 11, offset: 15640},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 459, col: 11, offset: 15666},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 460, col: 11, offset: 15695},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 461, col: 11, offset: 15711},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 462, col: 11, offset: 15744},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 463, col: 11, offset: 15764},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 464, col: 11, offset: 15786},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 465, col: 11, offset: 15808},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 466, col: 11, offset: 15833},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 467, col: 11, offset: 15860},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 467, col: 11, offset: 15860},
										expr: &litMatcher{
											pos:        position{line: 467, col: 12, offset: 15861},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 467, col: 18, offset: 15867},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 468, col: 11, offset: 15892},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 469, col: 11, offset: 15922},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 470, col: 11, offset: 15951},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 474, col: 1, offset: 16029},
			expr: &seqExpr{
				pos: position{line: 474, col: 27, offset: 16055},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 474, col: 27, offset: 16055},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 474, col: 33, offset: 16061},
						expr: &charClassMatcher{
							pos:        position{line: 474, col: 34, offset: 16062},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 476, col: 1, offset: 16075},
			expr: &litMatcher{
				pos:        position{line: 476, col: 25, offset: 16099},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 478, col: 1, offset: 16108},
			expr: &actionExpr{
				pos: position{line: 478, col: 41, offset: 16148},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 478, col: 42, offset: 16149},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 478, col: 42, offset: 16149},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 478, col: 56, offset: 16163},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 478, col: 56, offset: 16163},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 478, col: 60, offset: 16167},
									expr: &litMatcher{
										pos:        position{line: 478, col: 61, offset: 16168},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 485, col: 1, offset: 16340},
			expr: &actionExpr{
				pos: position{line: 485, col: 12, offset: 16351},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 485, col: 12, offset: 16351},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 485, col: 12, offset: 16351},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 485, col: 23, offset: 16362},
								expr: &ruleRefExpr{
									pos:  position{line: 485, col: 24, offset: 16363},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 486, col: 5, offset: 16381},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 486, col: 12, offset: 16388},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 486, col: 12, offset: 16388},
									expr: &litMatcher{
										pos:        position{line: 486, col: 13, offset: 16389},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 490, col: 5, offset: 16484},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 494, col: 5, offset: 16640},
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 5, offset: 16640},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 494, col: 12, offset: 16647},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 19, offset: 16654},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 494, col: 34, offset: 16669},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 494, col: 38, offset: 16673},
								expr: &ruleRefExpr{
									pos:  position{line: 494, col: 38, offset: 16673},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 494, col: 56, offset: 16691},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 498, col: 1, offset: 16801},
			expr: &actionExpr{
				pos: position{line: 498, col: 18, offset: 16818},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 498, col: 18, offset: 16818},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 498, col: 27, offset: 16827},
						expr: &seqExpr{
							pos: position{line: 498, col: 28, offset: 16828},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 498, col: 28, offset: 16828},
									expr: &ruleRefExpr{
										pos:  position{line: 498, col: 29, offset: 16829},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 498, col: 37, offset: 16837},
									expr: &ruleRefExpr{
										pos:  position{line: 498, col: 38, offset: 16838},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 498, col: 54, offset: 16854},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 502, col: 1, offset: 16979},
			expr: &actionExpr{
				pos: position{line: 502, col: 17, offset: 16995},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 502, col: 17, offset: 16995},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 502, col: 26, offset: 17004},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 502, col: 26, offset: 17004},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 503, col: 11, offset: 17020},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 504, col: 11, offset: 17066},
								expr: &ruleRefExpr{
									pos:  position{line: 504, col: 11, offset: 17066},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 505, col: 11, offset: 17085},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 506, col: 11, offset: 17111},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 507, col: 11, offset: 17140},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 508, col: 11, offset: 17162},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 509, col: 11, offset: 17185},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 510, col: 11, offset: 17201},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 511, col: 11, offset: 17227},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 512, col: 11, offset: 17251},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 513, col: 11, offset: 17273},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 514, col: 11, offset: 17291},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 515, col: 11, offset: 17324},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 516, col: 11, offset: 17353},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 523, col: 1, offset: 17511},
			expr: &seqExpr{
				pos: position{line: 523, col: 31, offset: 17541},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 523, col: 31, offset: 17541},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 523, col: 41, offset: 17551},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 528, col: 1, offset: 17667},
			expr: &actionExpr{
				pos: position{line: 528, col: 19, offset: 17685},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 528, col: 19, offset: 17685},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 528, col: 19, offset: 17685},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 25, offset: 17691},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 528, col: 40, offset: 17706},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 528, col: 45, offset: 17711},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 52, offset: 17718},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 528, col: 68, offset: 17734},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 75, offset: 17741},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 532, col: 1, offset: 17860},
			expr: &actionExpr{
				pos: position{line: 532, col: 20, offset: 17879},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 532, col: 20, offset: 17879},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 532, col: 20, offset: 17879},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 532, col: 26, offset: 17885},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 532, col: 41, offset: 17900},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 532, col: 45, offset: 17904},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 532, col: 52, offset: 17911},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 532, col: 68, offset: 17927},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 532, col: 75, offset: 17934},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 536, col: 1, offset: 18054},
			expr: &actionExpr{
				pos: position{line: 536, col: 18, offset: 18071},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 536, col: 19, offset: 18072},
					expr: &charClassMatcher{
						pos:        position{line: 536, col: 19, offset: 18072},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 540, col: 1, offset: 18125},
			expr: &actionExpr{
				pos: position{line: 540, col: 19, offset: 18143},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 540, col: 19, offset: 18143},
					expr: &charClassMatcher{
						pos:        position{line: 540, col: 19, offset: 18143},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 544, col: 1, offset: 18195},
			expr: &actionExpr{
				pos: position{line: 544, col: 24, offset: 18218},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 544, col: 24, offset: 18218},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 544, col: 24, offset: 18218},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 544, col: 28, offset: 18222},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 544, col: 34, offset: 18228},
								expr: &ruleRefExpr{
									pos:  position{line: 544, col: 35, offset: 18229},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 544, col: 54, offset: 18248},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 551, col: 1, offset: 18437},
			expr: &actionExpr{
				pos: position{line: 551, col: 18, offset: 18454},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 551, col: 18, offset: 18454},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 551, col: 18, offset: 18454},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 551, col: 24, offset: 18460},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 551, col: 24, offset: 18460},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 551, col: 24, offset: 18460},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 551, col: 36, offset: 18472},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 551, col: 42, offset: 18478},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 551, col: 56, offset: 18492},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 551, col: 74, offset: 18510},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 553, col: 8, offset: 18659},
							expr: &ruleRefExpr{
								pos:  position{line: 553, col: 8, offset: 18659},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 553, col: 15, offset: 18666},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 557, col: 1, offset: 18722},
			expr: &actionExpr{
				pos: position{line: 557, col: 26, offset: 18747},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 557, col: 26, offset: 18747},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 557, col: 26, offset: 18747},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 557, col: 30, offset: 18751},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 557, col: 36, offset: 18757},
								expr: &choiceExpr{
									pos: position{line: 557, col: 37, offset: 18758},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 557, col: 37, offset: 18758},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 557, col: 59, offset: 18780},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 557, col: 80, offset: 18801},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 557, col: 99, offset: 18820},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 561, col: 1, offset: 18896},
			expr: &actionExpr{
				pos: position{line: 561, col: 24, offset: 18919},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 561, col: 24, offset: 18919},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 561, col: 24, offset: 18919},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 561, col: 33, offset: 18928},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 40, offset: 18935},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 561, col: 66, offset: 18961},
							expr: &litMatcher{
								pos:        position{line: 561, col: 66, offset: 18961},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 565, col: 1, offset: 19024},
			expr: &actionExpr{
				pos: position{line: 565, col: 29, offset: 19052},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 565, col: 29, offset: 19052},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 565, col: 29, offset: 19052},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 565, col: 36, offset: 19059},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 565, col: 36, offset: 19059},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 566, col: 11, offset: 19177},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 567, col: 11, offset: 19214},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 568, col: 11, offset: 19241},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 569, col: 11, offset: 19274},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 570, col: 11, offset: 19307},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 571, col: 11, offset: 19335},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 571, col: 31, offset: 19355},
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 31, offset: 19355},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 571, col: 39, offset: 19363},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 571, col: 39, offset: 19363},
									expr: &litMatcher{
										pos:        position{line: 571, col: 40, offset: 19364},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 571, col: 46, offset: 19370},
									expr: &litMatcher{
										pos:        position{line: 571, col: 47, offset: 19371},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 575, col: 1, offset: 19407},
			expr: &actionExpr{
				pos: position{line: 575, col: 23, offset: 19429},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 575, col: 23, offset: 19429},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 575, col: 23, offset: 19429},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 575, col: 30, offset: 19436},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 575, col: 30, offset: 19436},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 575, col: 47, offset: 19453},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 576, col: 5, offset: 19476},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 576, col: 12, offset: 19483},
								expr: &actionExpr{
									pos: position{line: 576, col: 13, offset: 19484},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 576, col: 13, offset: 19484},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 576, col: 13, offset: 19484},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 576, col: 17, offset: 19488},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 576, col: 24, offset: 19495},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 576, col: 24, offset: 19495},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 576, col: 41, offset: 19512},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 582, col: 1, offset: 19656},
			expr: &actionExpr{
				pos: position{line: 582, col: 29, offset: 19684},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 582, col: 29, offset: 19684},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 582, col: 29, offset: 19684},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 582, col: 34, offset: 19689},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 582, col: 41, offset: 19696},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 582, col: 41, offset: 19696},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 582, col: 58, offset: 19713},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 583, col: 5, offset: 19736},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 583, col: 12, offset: 19743},
								expr: &actionExpr{
									pos: position{line: 583, col: 13, offset: 19744},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 583, col: 13, offset: 19744},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 583, col: 13, offset: 19744},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 583, col: 17, offset: 19748},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 583, col: 24, offset: 19755},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 583, col: 24, offset: 19755},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 583, col: 41, offset: 19772},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 585, col: 9, offset: 19827},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 589, col: 1, offset: 19921},
			expr: &actionExpr{
				pos: position{line: 589, col: 19, offset: 19939},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 589, col: 19, offset: 19939},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 589, col: 19, offset: 19939},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 589, col: 26, offset: 19946},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 589, col: 34, offset: 19954},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 589, col: 39, offset: 19959},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 589, col: 44, offset: 19964},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 593, col: 1, offset: 20056},
			expr: &actionExpr{
				pos: position{line: 593, col: 25, offset: 20080},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 593, col: 25, offset: 20080},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 593, col: 25, offset: 20080},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 593, col: 30, offset: 20085},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 37, offset: 20092},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 593, col: 45, offset: 20100},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 593, col: 50, offset: 20105},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 55, offset: 20110},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 593, col: 63, offset: 20118},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 597, col: 1, offset: 20207},
			expr: &actionExpr{
				pos: position{line: 597, col: 20, offset: 20226},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 597, col: 20, offset: 20226},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 597, col: 32, offset: 20238},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 601, col: 1, offset: 20337},
			expr: &actionExpr{
				pos: position{line: 601, col: 26, offset: 20362},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 601, col: 26, offset: 20362},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 601, col: 26, offset: 20362},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 601, col: 31, offset: 20367},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 601, col: 43, offset: 20379},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 601, col: 51, offset: 20387},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 605, col: 1, offset: 20483},
			expr: &actionExpr{
				pos: position{line: 605, col: 23, offset: 20505},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 605, col: 23, offset: 20505},
					expr: &charClassMatcher{
						pos:        position{line: 605, col: 23, offset: 20505},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 609, col: 1, offset: 20554},
			expr: &actionExpr{
				pos: position{line: 609, col: 23, offset: 20576},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 609, col: 23, offset: 20576},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 609, col: 24, offset: 20577},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 609, col: 24, offset: 20577},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 609, col: 34, offset: 20587},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 609, col: 42, offset: 20595},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 48, offset: 20601},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 609, col: 73, offset: 20626},
							expr: &litMatcher{
								pos:        position{line: 609, col: 73, offset: 20626},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 613, col: 1, offset: 20779},
			expr: &actionExpr{
				pos: position{line: 613, col: 28, offset: 20806},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 613, col: 28, offset: 20806},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 613, col: 28, offset: 20806},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 613, col: 35, offset: 20813},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 613, col: 54, offset: 20832},
							expr: &ruleRefExpr{
								pos:  position{line: 613, col: 54, offset: 20832},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 613, col: 62, offset: 20840},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 613, col: 62, offset: 20840},
									expr: &litMatcher{
										pos:        position{line: 613, col: 63, offset: 20841},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 613, col: 69, offset: 20847},
									expr: &litMatcher{
										pos:        position{line: 613, col: 70, offset: 20848},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 617, col: 1, offset: 20884},
			expr: &actionExpr{
				pos: position{line: 617, col: 22, offset: 20905},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 617, col: 22, offset: 20905},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 617, col: 22, offset: 20905},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 617, col: 29, offset: 20912},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 618, col: 5, offset: 20927},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 618, col: 12, offset: 20934},
								expr: &actionExpr{
									pos: position{line: 618, col: 13, offset: 20935},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 618, col: 13, offset: 20935},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 618, col: 13, offset: 20935},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 618, col: 17, offset: 20939},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 618, col: 24, offset: 20946},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 624, col: 1, offset: 21083},
			expr: &choiceExpr{
				pos: position{line: 624, col: 13, offset: 21095},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 624, col: 13, offset: 21095},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 624, col: 13, offset: 21095},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 624, col: 18, offset: 21100},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 624, col: 18, offset: 21100},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 624, col: 30, offset: 21112},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 626, col: 5, offset: 21182},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 626, col: 5, offset: 21182},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 626, col: 5, offset: 21182},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 626, col: 9, offset: 21186},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 626, col: 14, offset: 21191},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 626, col: 14, offset: 21191},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 626, col: 26, offset: 21203},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 630, col: 1, offset: 21275},
			expr: &actionExpr{
				pos: position{line: 630, col: 16, offset: 21290},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 630, col: 16, offset: 21290},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 630, col: 16, offset: 21290},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 630, col: 23, offset: 21297},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 630, col: 23, offset: 21297},
									expr: &litMatcher{
										pos:        position{line: 630, col: 24, offset: 21298},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 633, col: 5, offset: 21355},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileContent",
			pos:  position{line: 641, col: 1, offset: 21605},
			expr: &zeroOrMoreExpr{
				pos: position{line: 641, col: 24, offset: 21628},
				expr: &choiceExpr{
					pos: position{line: 641, col: 25, offset: 21629},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 641, col: 25, offset: 21629},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 641, col: 41, offset: 21645},
							name: "VerbatimFileLine",
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 643, col: 1, offset: 21667},
			expr: &actionExpr{
				pos: position{line: 643, col: 21, offset: 21687},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 643, col: 21, offset: 21687},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 643, col: 21, offset: 21687},
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 22, offset: 21688},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 643, col: 26, offset: 21692},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 643, col: 35, offset: 21701},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 643, col: 35, offset: 21701},
									expr: &charClassMatcher{
										pos:        position{line: 643, col: 35, offset: 21701},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 645, col: 12, offset: 21765},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 652, col: 1, offset: 21971},
			expr: &actionExpr{
				pos: position{line: 652, col: 21, offset: 21991},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 652, col: 21, offset: 21991},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 652, col: 21, offset: 21991},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 652, col: 29, offset: 21999},
								expr: &choiceExpr{
									pos: position{line: 652, col: 30, offset: 22000},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 652, col: 30, offset: 22000},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 652, col: 53, offset: 22023},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 652, col: 74, offset: 22044},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 652, col: 74, offset: 22044,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 652, col: 107, offset: 22077},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 656, col: 1, offset: 22152},
			expr: &actionExpr{
				pos: position{line: 656, col: 25, offset: 22176},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 656, col: 25, offset: 22176},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 656, col: 25, offset: 22176},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 656, col: 33, offset: 22184},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 656, col: 38, offset: 22189},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 656, col: 38, offset: 22189},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 656, col: 78, offset: 22229},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 660, col: 1, offset: 22298},
			expr: &actionExpr{
				pos: position{line: 660, col: 23, offset: 22320},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 660, col: 23, offset: 22320},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 660, col: 23, offset: 22320},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 660, col: 31, offset: 22328},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 660, col: 36, offset: 22333},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 660, col: 36, offset: 22333},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 660, col: 76, offset: 22373},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 667, col: 1, offset: 22544},
			expr: &choiceExpr{
				pos: position{line: 667, col: 18, offset: 22561},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 667, col: 18, offset: 22561},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 667, col: 18, offset: 22561},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 667, col: 27, offset: 22570},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 669, col: 9, offset: 22629},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 669, col: 9, offset: 22629},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 669, col: 15, offset: 22635},
								expr: &ruleRefExpr{
									pos:  position{line: 669, col: 16, offset: 22636},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 673, col: 1, offset: 22732},
			expr: &actionExpr{
				pos: position{line: 673, col: 22, offset: 22753},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 673, col: 22, offset: 22753},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 673, col: 22, offset: 22753},
							expr: &ruleRefExpr{
								pos:  position{line: 673, col: 23, offset: 22754},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 674, col: 5, offset: 22763},
							expr: &ruleRefExpr{
								pos:  position{line: 674, col: 6, offset: 22764},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 675, col: 5, offset: 22780},
							expr: &ruleRefExpr{
								pos:  position{line: 675, col: 6, offset: 22781},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 676, col: 5, offset: 22804},
							expr: &ruleRefExpr{
								pos:  position{line: 676, col: 6, offset: 22805},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 677, col: 5, offset: 22832},
							expr: &ruleRefExpr{
								pos:  position{line: 677, col: 6, offset: 22833},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 678, col: 5, offset: 22862},
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 6, offset: 22863},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 679, col: 5, offset: 22890},
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 6, offset: 22891},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 680, col: 5, offset: 22917},
							expr: &ruleRefExpr{
								pos:  position{line: 680, col: 6, offset: 22918},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 681, col: 5, offset: 22940},
							expr: &ruleRefExpr{
								pos:  position{line: 681, col: 6, offset: 22941},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 682, col: 5, offset: 22961},
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 6, offset: 22962},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 683, col: 5, offset: 22990},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 683, col: 11, offset: 22996},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 683, col: 11, offset: 22996},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 683, col: 20, offset: 23005},
										expr: &ruleRefExpr{
											pos:  position{line: 683, col: 21, offset: 23006},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 685, col: 12, offset: 23107},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 689, col: 1, offset: 23150},
			expr: &seqExpr{
				pos: position{line: 689, col: 25, offset: 23174},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 689, col: 25, offset: 23174},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 689, col: 29, offset: 23178},
						expr: &ruleRefExpr{
							pos:  position{line: 689, col: 29, offset: 23178},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 689, col: 36, offset: 23185},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 691, col: 1, offset: 23259},
			expr: &actionExpr{
				pos: position{line: 691, col: 29, offset: 23287},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 691, col: 29, offset: 23287},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 691, col: 29, offset: 23287},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 691, col: 50, offset: 23308},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 691, col: 58, offset: 23316},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 695, col: 1, offset: 23426},
			expr: &actionExpr{
				pos: position{line: 695, col: 29, offset: 23454},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 695, col: 29, offset: 23454},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 695, col: 29, offset: 23454},
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 30, offset: 23455},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 696, col: 5, offset: 23465},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 696, col: 14, offset: 23474},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 696, col: 14, offset: 23474},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 697, col: 11, offset: 23500},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 698, col: 11, offset: 23525},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 699, col: 11, offset: 23580},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 700, col: 11, offset: 23602},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 701, col: 11, offset: 23627},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 702, col: 11, offset: 23655},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 703, col: 11, offset: 23685},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 705, col: 11, offset: 23752},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 706, col: 11, offset: 23804},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 707, col: 11, offset: 23829},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 708, col: 11, offset: 23862},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 709, col: 11, offset: 23889},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 710, col: 11, offset: 23927},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 711, col: 11, offset: 23953},
										name: "ContinuedParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 718, col: 1, offset: 24123},
			expr: &actionExpr{
				pos: position{line: 718, col: 20, offset: 24142},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 718, col: 20, offset: 24142},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 718, col: 20, offset: 24142},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 718, col: 26, offset: 24148},
								expr: &ruleRefExpr{
									pos:  position{line: 718, col: 27, offset: 24149},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 718, col: 40, offset: 24162},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 718, col: 48, offset: 24170},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 718, col: 71, offset: 24193},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 718, col: 80, offset: 24202},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 722, col: 1, offset: 24341},
			expr: &actionExpr{
				pos: position{line: 723, col: 5, offset: 24372},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 723, col: 5, offset: 24372},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 723, col: 5, offset: 24372},
							expr: &ruleRefExpr{
								pos:  position{line: 723, col: 5, offset: 24372},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 723, col: 12, offset: 24379},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 725, col: 9, offset: 24444},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 725, col: 9, offset: 24444},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 725, col: 9, offset: 24444},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 725, col: 9, offset: 24444},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 725, col: 16, offset: 24451},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 725, col: 16, offset: 24451},
															expr: &litMatcher{
																pos:        position{line: 725, col: 17, offset: 24452},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 729, col: 9, offset: 24556},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 748, col: 11, offset: 25292},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 748, col: 11, offset: 25292},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 748, col: 11, offset: 25292},
													expr: &charClassMatcher{
														pos:        position{line: 748, col: 12, offset: 25293},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 748, col: 20, offset: 25301},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 750, col: 13, offset: 25414},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 750, col: 13, offset: 25414},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 750, col: 14, offset: 25415},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 750, col: 21, offset: 25422},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 752, col: 13, offset: 25538},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 752, col: 13, offset: 25538},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 752, col: 14, offset: 25539},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 752, col: 21, offset: 25546},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 754, col: 13, offset: 25662},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 754, col: 13, offset: 25662},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 754, col: 13, offset: 25662},
													expr: &charClassMatcher{
														pos:        position{line: 754, col: 14, offset: 25663},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 754, col: 22, offset: 25671},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 756, col: 13, offset: 25787},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 756, col: 13, offset: 25787},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 756, col: 13, offset: 25787},
													expr: &charClassMatcher{
														pos:        position{line: 756, col: 14, offset: 25788},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 756, col: 22, offset: 25796},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 758, col: 12, offset: 25911},
							expr: &ruleRefExpr{
								pos:  position{line: 758, col: 12, offset: 25911},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 762, col: 1, offset: 25950},
			expr: &actionExpr{
				pos: position{line: 762, col: 27, offset: 25976},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 762, col: 27, offset: 25976},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 762, col: 37, offset: 25986},
						expr: &ruleRefExpr{
							pos:  position{line: 762, col: 37, offset: 25986},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 769, col: 1, offset: 26193},
			expr: &actionExpr{
				pos: position{line: 769, col: 22, offset: 26214},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 769, col: 22, offset: 26214},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 769, col: 22, offset: 26214},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 769, col: 28, offset: 26220},
								expr: &ruleRefExpr{
									pos:  position{line: 769, col: 29, offset: 26221},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 769, col: 42, offset: 26234},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 769, col: 50, offset: 26242},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 769, col: 75, offset: 26267},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 769, col: 86, offset: 26278},
								expr: &ruleRefExpr{
									pos:  position{line: 769, col: 87, offset: 26279},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 769, col: 117, offset: 26309},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 769, col: 126, offset: 26318},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 773, col: 1, offset: 26475},
			expr: &actionExpr{
				pos: position{line: 774, col: 5, offset: 26508},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 774, col: 5, offset: 26508},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 774, col: 5, offset: 26508},
							expr: &ruleRefExpr{
								pos:  position{line: 774, col: 5, offset: 26508},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 774, col: 12, offset: 26515},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 774, col: 20, offset: 26523},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 776, col: 9, offset: 26582},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 776, col: 9, offset: 26582},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 776, col: 9, offset: 26582},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 776, col: 16, offset: 26589},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 776, col: 16, offset: 26589},
															expr: &litMatcher{
																pos:        position{line: 776, col: 17, offset: 26590},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 780, col: 9, offset: 26694},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 797, col: 14, offset: 27418},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 797, col: 21, offset: 27425},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 797, col: 22, offset: 27426},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 799, col: 13, offset: 27514},
							expr: &ruleRefExpr{
								pos:  position{line: 799, col: 13, offset: 27514},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 803, col: 1, offset: 27554},
			expr: &actionExpr{
				pos: position{line: 803, col: 32, offset: 27585},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 803, col: 32, offset: 27585},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 803, col: 32, offset: 27585},
							expr: &litMatcher{
								pos:        position{line: 803, col: 33, offset: 27586},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 803, col: 37, offset: 27590},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 804, col: 7, offset: 27605},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 804, col: 7, offset: 27605},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 804, col: 7, offset: 27605},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 805, col: 7, offset: 27651},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 805, col: 7, offset: 27651},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 806, col: 7, offset: 27695},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 806, col: 7, offset: 27695},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 807, col: 7, offset: 27738},
							expr: &ruleRefExpr{
								pos:  position{line: 807, col: 7, offset: 27738},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 811, col: 1, offset: 27784},
			expr: &actionExpr{
				pos: position{line: 811, col: 29, offset: 27812},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 811, col: 29, offset: 27812},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 811, col: 39, offset: 27822},
						expr: &ruleRefExpr{
							pos:  position{line: 811, col: 39, offset: 27822},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 818, col: 1, offset: 28145},
			expr: &actionExpr{
				pos: position{line: 818, col: 20, offset: 28164},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 818, col: 20, offset: 28164},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 818, col: 20, offset: 28164},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 818, col: 26, offset: 28170},
								expr: &ruleRefExpr{
									pos:  position{line: 818, col: 27, offset: 28171},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 818, col: 40, offset: 28184},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 818, col: 46, offset: 28190},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 818, col: 75, offset: 28219},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 818, col: 86, offset: 28230},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 818, col: 112, offset: 28256},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 818, col: 124, offset: 28268},
								expr: &ruleRefExpr{
									pos:  position{line: 818, col: 125, offset: 28269},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 822, col: 1, offset: 28414},
			expr: &seqExpr{
				pos: position{line: 822, col: 26, offset: 28439},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 822, col: 26, offset: 28439},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 822, col: 54, offset: 28467},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 824, col: 1, offset: 28495},
			expr: &choiceExpr{
				pos: position{line: 824, col: 33, offset: 28527},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 824, col: 33, offset: 28527},
						expr: &charClassMatcher{
							pos:        position{line: 824, col: 33, offset: 28527},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 824, col: 45, offset: 28539},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 824, col: 45, offset: 28539},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 824, col: 49, offset: 28543},
								expr: &litMatcher{
									pos:        position{line: 824, col: 50, offset: 28544},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 825, col: 1, offset: 28549},
			expr: &actionExpr{
				pos: position{line: 825, col: 32, offset: 28580},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 825, col: 32, offset: 28580},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 825, col: 42, offset: 28590},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 825, col: 42, offset: 28590},
							expr: &ruleRefExpr{
								pos:  position{line: 825, col: 42, offset: 28590},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 831, col: 1, offset: 28751},
			expr: &actionExpr{
				pos: position{line: 831, col: 24, offset: 28774},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 831, col: 24, offset: 28774},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 831, col: 33, offset: 28783},
						expr: &seqExpr{
							pos: position{line: 831, col: 34, offset: 28784},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 831, col: 34, offset: 28784},
									expr: &ruleRefExpr{
										pos:  position{line: 831, col: 35, offset: 28785},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 831, col: 43, offset: 28793},
									expr: &litMatcher{
										pos:        position{line: 831, col: 44, offset: 28794},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 831, col: 49, offset: 28799},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 835, col: 1, offset: 28930},
			expr: &actionExpr{
				pos: position{line: 835, col: 31, offset: 28960},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 835, col: 31, offset: 28960},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 835, col: 40, offset: 28969},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 835, col: 40, offset: 28969},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 836, col: 11, offset: 28985},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 837, col: 11, offset: 29035},
								expr: &ruleRefExpr{
									pos:  position{line: 837, col: 11, offset: 29035},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 838, col: 11, offset: 29054},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 839, col: 11, offset: 29080},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 840, col: 11, offset: 29110},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 841, col: 11, offset: 29131},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 842, col: 11, offset: 29160},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 843, col: 11, offset: 29182},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 844, col: 11, offset: 29206},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 845, col: 11, offset: 29222},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 846, col: 11, offset: 29248},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 847, col: 11, offset: 29272},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 848, col: 11, offset: 29294},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 849, col: 11, offset: 29312},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 850, col: 11, offset: 29345},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 851, col: 11, offset: 29374},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 855, col: 1, offset: 29417},
			expr: &actionExpr{
				pos: position{line: 856, col: 5, offset: 29451},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 856, col: 5, offset: 29451},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 856, col: 5, offset: 29451},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 856, col: 16, offset: 29462},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 856, col: 16, offset: 29462},
									expr: &litMatcher{
										pos:        position{line: 856, col: 17, offset: 29463},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 859, col: 5, offset: 29524},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 863, col: 6, offset: 29704},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 863, col: 6, offset: 29704},
									expr: &choiceExpr{
										pos: position{line: 863, col: 7, offset: 29705},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 863, col: 7, offset: 29705},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 863, col: 15, offset: 29713},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 863, col: 27, offset: 29725},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 867, col: 1, offset: 29769},
			expr: &actionExpr{
				pos: position{line: 867, col: 31, offset: 29799},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 867, col: 31, offset: 29799},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 867, col: 40, offset: 29808},
						expr: &ruleRefExpr{
							pos:  position{line: 867, col: 41, offset: 29809},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 874, col: 1, offset: 30007},
			expr: &choiceExpr{
				pos: position{line: 874, col: 19, offset: 30025},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 874, col: 19, offset: 30025},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 874, col: 19, offset: 30025},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 876, col: 9, offset: 30073},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 876, col: 9, offset: 30073},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 878, col: 9, offset: 30123},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 878, col: 9, offset: 30123},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 880, col: 9, offset: 30183},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 880, col: 9, offset: 30183},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 882, col: 9, offset: 30239},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 882, col: 9, offset: 30239},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 891, col: 1, offset: 30555},
			expr: &choiceExpr{
				pos: position{line: 893, col: 5, offset: 30604},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 893, col: 5, offset: 30604},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 893, col: 5, offset: 30604},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 893, col: 5, offset: 30604},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 893, col: 16, offset: 30615},
										expr: &ruleRefExpr{
											pos:  position{line: 893, col: 17, offset: 30616},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 893, col: 30, offset: 30629},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 893, col: 33, offset: 30632},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 893, col: 49, offset: 30648},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 893, col: 54, offset: 30653},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 893, col: 60, offset: 30659},
										expr: &ruleRefExpr{
											pos:  position{line: 893, col: 61, offset: 30660},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 897, col: 5, offset: 30845},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 897, col: 5, offset: 30845},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 897, col: 5, offset: 30845},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 897, col: 16, offset: 30856},
										expr: &ruleRefExpr{
											pos:  position{line: 897, col: 17, offset: 30857},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 897, col: 30, offset: 30870},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 897, col: 35, offset: 30875},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 897, col: 44, offset: 30884},
										name: "MarkdownQuoteBlockVerbatimContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 901, col: 5, offset: 31083},
						run: (*parser).callonParagraph21,
						expr: &seqExpr{
							pos: position{line: 901, col: 5, offset: 31083},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 901, col: 5, offset: 31083},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 901, col: 16, offset: 31094},
										expr: &ruleRefExpr{
											pos:  position{line: 901, col: 17, offset: 31095},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 901, col: 30, offset: 31108},
									run: (*parser).callonParagraph26,
								},
								&notExpr{
									pos: position{line: 908, col: 7, offset: 31394},
									expr: &ruleRefExpr{
										pos:  position{line: 908, col: 8, offset: 31395},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 908, col: 23, offset: 31410},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 908, col: 32, offset: 31419},
										name: "OpenPassthroughParagraphContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 912, col: 5, offset: 31620},
						run: (*parser).callonParagraph31,
						expr: &seqExpr{
							pos: position{line: 912, col: 5, offset: 31620},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 912, col: 5, offset: 31620},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 912, col: 16, offset: 31631},
										expr: &ruleRefExpr{
											pos:  position{line: 912, col: 17, offset: 31632},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 912, col: 30, offset: 31645},
									expr: &ruleRefExpr{
										pos:  position{line: 912, col: 31, offset: 31646},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 912, col: 46, offset: 31661},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 912, col: 52, offset: 31667},
										expr: &ruleRefExpr{
											pos:  position{line: 912, col: 53, offset: 31668},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockVerbatimContent",
			pos:  position{line: 916, col: 1, offset: 31768},
			expr: &oneOrMoreExpr{
				pos: position{line: 916, col: 38, offset: 31805},
				expr: &actionExpr{
					pos: position{line: 916, col: 39, offset: 31806},
					run: (*parser).callonMarkdownQuoteBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 916, col: 39, offset: 31806},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 916, col: 39, offset: 31806},
								expr: &ruleRefExpr{
									pos:  position{line: 916, col: 40, offset: 31807},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 916, col: 50, offset: 31817},
								expr: &litMatcher{
									pos:        position{line: 916, col: 50, offset: 31817},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 916, col: 56, offset: 31823},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 916, col: 65, offset: 31832},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 920, col: 1, offset: 31977},
			expr: &actionExpr{
				pos: position{line: 920, col: 34, offset: 32010},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 920, col: 34, offset: 32010},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 920, col: 34, offset: 32010},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 920, col: 40, offset: 32016},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 920, col: 48, offset: 32024},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 920, col: 49, offset: 32025},
									expr: &charClassMatcher{
										pos:        position{line: 920, col: 49, offset: 32025},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 922, col: 8, offset: 32077},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 926, col: 1, offset: 32113},
			expr: &oneOrMoreExpr{
				pos: position{line: 926, col: 36, offset: 32148},
				expr: &actionExpr{
					pos: position{line: 926, col: 37, offset: 32149},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 926, col: 37, offset: 32149},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 926, col: 37, offset: 32149},
								expr: &ruleRefExpr{
									pos:  position{line: 926, col: 38, offset: 32150},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 926, col: 48, offset: 32160},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 926, col: 57, offset: 32169},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 931, col: 1, offset: 32387},
			expr: &actionExpr{
				pos: position{line: 931, col: 20, offset: 32406},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 931, col: 20, offset: 32406},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 931, col: 20, offset: 32406},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 931, col: 31, offset: 32417},
								expr: &ruleRefExpr{
									pos:  position{line: 931, col: 32, offset: 32418},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 932, col: 5, offset: 32437},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 940, col: 5, offset: 32731},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 940, col: 16, offset: 32742},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 941, col: 5, offset: 32766},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 941, col: 16, offset: 32777},
								expr: &ruleRefExpr{
									pos:  position{line: 941, col: 17, offset: 32778},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 945, col: 1, offset: 32916},
			expr: &actionExpr{
				pos: position{line: 946, col: 5, offset: 32944},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 946, col: 5, offset: 32944},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 946, col: 5, offset: 32944},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 946, col: 15, offset: 32954},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 946, col: 15, offset: 32954},
										name: "Word",
									},
									&zeroOrMoreExpr{
										pos: position{line: 946, col: 20, offset: 32959},
										expr: &ruleRefExpr{
											pos:  position{line: 946, col: 20, offset: 32959},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 946, col: 36, offset: 32975},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 950, col: 1, offset: 33050},
			expr: &actionExpr{
				pos: position{line: 950, col: 23, offset: 33072},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 950, col: 23, offset: 33072},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 950, col: 33, offset: 33082},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "ContinuedParagraph",
			pos:  position{line: 955, col: 1, offset: 33207},
			expr: &choiceExpr{
				pos: position{line: 957, col: 5, offset: 33265},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 957, col: 5, offset: 33265},
						run: (*parser).callonContinuedParagraph2,
						expr: &seqExpr{
							pos: position{line: 957, col: 5, offset: 33265},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 957, col: 5, offset: 33265},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 957, col: 16, offset: 33276},
										expr: &ruleRefExpr{
											pos:  position{line: 957, col: 17, offset: 33277},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 957, col: 30, offset: 33290},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 957, col: 33, offset: 33293},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 957, col: 49, offset: 33309},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 957, col: 54, offset: 33314},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 957, col: 61, offset: 33321},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 961, col: 5, offset: 33525},
						run: (*parser).callonContinuedParagraph12,
						expr: &seqExpr{
							pos: position{line: 961, col: 5, offset: 33525},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 961, col: 5, offset: 33525},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 961, col: 16, offset: 33536},
										expr: &ruleRefExpr{
											pos:  position{line: 961, col: 17, offset: 33537},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 961, col: 30, offset: 33550},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 961, col: 37, offset: 33557},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraphLines",
			pos:  position{line: 965, col: 1, offset: 33662},
			expr: &actionExpr{
				pos: position{line: 965, col: 28, offset: 33689},
				run: (*parser).callonContinuedParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 965, col: 28, offset: 33689},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 965, col: 28, offset: 33689},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 965, col: 39, offset: 33700},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 965, col: 59, offset: 33720},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 965, col: 70, offset: 33731},
								expr: &seqExpr{
									pos: position{line: 965, col: 71, offset: 33732},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 965, col: 71, offset: 33732},
											expr: &ruleRefExpr{
												pos:  position{line: 965, col: 72, offset: 33733},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 965, col: 93, offset: 33754},
											name: "OtherParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 969, col: 1, offset: 33864},
			expr: &choiceExpr{
				pos: position{line: 971, col: 5, offset: 33918},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 971, col: 5, offset: 33918},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 971, col: 5, offset: 33918},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 971, col: 5, offset: 33918},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 971, col: 16, offset: 33929},
										expr: &ruleRefExpr{
											pos:  position{line: 971, col: 17, offset: 33930},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 972, col: 5, offset: 33948},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 979, col: 5, offset: 34160},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 979, col: 8, offset: 34163},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 979, col: 24, offset: 34179},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 979, col: 29, offset: 34184},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 979, col: 35, offset: 34190},
										expr: &ruleRefExpr{
											pos:  position{line: 979, col: 36, offset: 34191},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 983, col: 5, offset: 34387},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 983, col: 5, offset: 34387},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 983, col: 5, offset: 34387},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 983, col: 16, offset: 34398},
										expr: &ruleRefExpr{
											pos:  position{line: 983, col: 17, offset: 34399},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 984, col: 5, offset: 34417},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 991, col: 5, offset: 34629},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 991, col: 11, offset: 34635},
										expr: &ruleRefExpr{
											pos:  position{line: 991, col: 12, offset: 34636},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 995, col: 1, offset: 34741},
			expr: &actionExpr{
				pos: position{line: 995, col: 19, offset: 34759},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 995, col: 19, offset: 34759},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 995, col: 19, offset: 34759},
							expr: &ruleRefExpr{
								pos:  position{line: 995, col: 20, offset: 34760},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 996, col: 5, offset: 34775},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 996, col: 15, offset: 34785},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 996, col: 15, offset: 34785},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 996, col: 15, offset: 34785},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 996, col: 24, offset: 34794},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 998, col: 9, offset: 34888},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 998, col: 9, offset: 34888},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 998, col: 9, offset: 34888},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 998, col: 18, offset: 34897},
														expr: &ruleRefExpr{
															pos:  position{line: 998, col: 19, offset: 34898},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 998, col: 35, offset: 34914},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1004, col: 1, offset: 35037},
			expr: &actionExpr{
				pos: position{line: 1005, col: 5, offset: 35061},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1005, col: 5, offset: 35061},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1005, col: 14, offset: 35070},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1005, col: 14, offset: 35070},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 1006, col: 11, offset: 35122},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 1007, col: 11, offset: 35168},
								expr: &ruleRefExpr{
									pos:  position{line: 1007, col: 11, offset: 35168},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 1008, col: 11, offset: 35187},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1008, col: 11, offset: 35187},
										expr: &ruleRefExpr{
											pos:  position{line: 1008, col: 12, offset: 35188},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 1009, col: 13, offset: 35207},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1009, col: 13, offset: 35207},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 1010, col: 15, offset: 35235},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1011, col: 15, offset: 35261},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 1012, col: 15, offset: 35283},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 1013, col: 15, offset: 35309},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 1014, col: 15, offset: 35337},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 1015, col: 15, offset: 35358},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 1016, col: 15, offset: 35392},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 1017, col: 15, offset: 35423},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 1018, col: 15, offset: 35454},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 1019, col: 15, offset: 35486},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1020, col: 15, offset: 35524},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 1021, col: 15, offset: 35555},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1022, col: 15, offset: 35589},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1023, col: 15, offset: 35614},
												name: "ImpliedApostrophe",
											},
											&ruleRefExpr{
												pos:  position{line: 1024, col: 15, offset: 35647},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1031, col: 1, offset: 35877},
			expr: &actionExpr{
				pos: position{line: 1031, col: 14, offset: 35890},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1031, col: 14, offset: 35890},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1031, col: 14, offset: 35890},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 1031, col: 20, offset: 35896},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1031, col: 24, offset: 35900},
							expr: &ruleRefExpr{
								pos:  position{line: 1031, col: 24, offset: 35900},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1031, col: 31, offset: 35907},
							expr: &ruleRefExpr{
								pos:  position{line: 1031, col: 32, offset: 35908},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1038, col: 1, offset: 36199},
			expr: &choiceExpr{
				pos: position{line: 1038, col: 15, offset: 36213},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1038, col: 15, offset: 36213},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1038, col: 41, offset: 36239},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1038, col: 65, offset: 36263},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1040, col: 1, offset: 36284},
			expr: &choiceExpr{
				pos: position{line: 1040, col: 32, offset: 36315},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1040, col: 32, offset: 36315},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1040, col: 32, offset: 36315},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1040, col: 36, offset: 36319},
								expr: &litMatcher{
									pos:        position{line: 1040, col: 37, offset: 36320},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1040, col: 43, offset: 36326},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1040, col: 43, offset: 36326},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1040, col: 47, offset: 36330},
								expr: &litMatcher{
									pos:        position{line: 1040, col: 48, offset: 36331},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1040, col: 54, offset: 36337},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1040, col: 54, offset: 36337},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1040, col: 58, offset: 36341},
								expr: &litMatcher{
									pos:        position{line: 1040, col: 59, offset: 36342},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1040, col: 65, offset: 36348},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1040, col: 65, offset: 36348},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1040, col: 69, offset: 36352},
								expr: &litMatcher{
									pos:        position{line: 1040, col: 70, offset: 36353},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1042, col: 1, offset: 36360},
			expr: &choiceExpr{
				pos: position{line: 1042, col: 34, offset: 36393},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1042, col: 34, offset: 36393},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1042, col: 41, offset: 36400},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1042, col: 48, offset: 36407},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1042, col: 55, offset: 36414},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1042, col: 62, offset: 36421},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1042, col: 68, offset: 36427},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1044, col: 1, offset: 36434},
			expr: &actionExpr{
				pos: position{line: 1044, col: 26, offset: 36459},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1044, col: 26, offset: 36459},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1044, col: 32, offset: 36465},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1044, col: 32, offset: 36465},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1045, col: 15, offset: 36501},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1046, col: 15, offset: 36538},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1047, col: 15, offset: 36575},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1048, col: 15, offset: 36616},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1049, col: 15, offset: 36646},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1050, col: 15, offset: 36678},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1054, col: 1, offset: 36836},
			expr: &choiceExpr{
				pos: position{line: 1054, col: 28, offset: 36863},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1054, col: 28, offset: 36863},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1055, col: 15, offset: 36898},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1056, col: 15, offset: 36935},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1057, col: 15, offset: 36972},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1059, col: 1, offset: 37000},
			expr: &choiceExpr{
				pos: position{line: 1059, col: 22, offset: 37021},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1059, col: 22, offset: 37021},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1060, col: 15, offset: 37053},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1061, col: 15, offset: 37086},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1062, col: 15, offset: 37119},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1063, col: 15, offset: 37156},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1064, col: 15, offset: 37193},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1066, col: 1, offset: 37219},
			expr: &choiceExpr{
				pos: position{line: 1066, col: 33, offset: 37251},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1066, col: 33, offset: 37251},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1066, col: 39, offset: 37257},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1066, col: 39, offset: 37257},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1070, col: 1, offset: 37394},
			expr: &actionExpr{
				pos: position{line: 1070, col: 25, offset: 37418},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1070, col: 25, offset: 37418},
					expr: &litMatcher{
						pos:        position{line: 1070, col: 25, offset: 37418},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1074, col: 1, offset: 37463},
			expr: &actionExpr{
				pos: position{line: 1074, col: 25, offset: 37487},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1074, col: 25, offset: 37487},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1074, col: 25, offset: 37487},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1074, col: 30, offset: 37492},
							expr: &litMatcher{
								pos:        position{line: 1074, col: 30, offset: 37492},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1082, col: 1, offset: 37597},
			expr: &choiceExpr{
				pos: position{line: 1082, col: 13, offset: 37609},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1082, col: 13, offset: 37609},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1082, col: 35, offset: 37631},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1084, col: 1, offset: 37700},
			expr: &actionExpr{
				pos: position{line: 1084, col: 24, offset: 37723},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1084, col: 24, offset: 37723},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1084, col: 24, offset: 37723},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1084, col: 30, offset: 37729},
								expr: &ruleRefExpr{
									pos:  position{line: 1084, col: 31, offset: 37730},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1084, col: 49, offset: 37748},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1084, col: 54, offset: 37753},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1084, col: 64, offset: 37763},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1084, col: 93, offset: 37792},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1088, col: 1, offset: 37883},
			expr: &seqExpr{
				pos: position{line: 1088, col: 32, offset: 37914},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1088, col: 32, offset: 37914},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1088, col: 59, offset: 37941},
						expr: &seqExpr{
							pos: position{line: 1088, col: 60, offset: 37942},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1088, col: 60, offset: 37942},
									expr: &litMatcher{
										pos:        position{line: 1088, col: 62, offset: 37944},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1088, col: 69, offset: 37951},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1088, col: 69, offset: 37951},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1088, col: 77, offset: 37959},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1090, col: 1, offset: 38026},
			expr: &choiceExpr{
				pos: position{line: 1090, col: 31, offset: 38056},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1090, col: 31, offset: 38056},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1091, col: 11, offset: 38072},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1091, col: 11, offset: 38072},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1091, col: 19, offset: 38080},
								expr: &ruleRefExpr{
									pos:  position{line: 1091, col: 20, offset: 38081},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1092, col: 11, offset: 38100},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1093, col: 11, offset: 38131},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1094, col: 11, offset: 38155},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1095, col: 11, offset: 38177},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1096, col: 11, offset: 38199},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1097, col: 11, offset: 38224},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1098, col: 11, offset: 38249},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1099, col: 11, offset: 38276},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1100, col: 11, offset: 38294},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1101, col: 11, offset: 38316},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1102, col: 11, offset: 38339},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1103, col: 11, offset: 38355},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1104, col: 11, offset: 38384},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1105, col: 11, offset: 38417},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1106, col: 11, offset: 38446},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1109, col: 1, offset: 38488},
			expr: &choiceExpr{
				pos: position{line: 1110, col: 5, offset: 38533},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1110, col: 5, offset: 38533},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1111, col: 7, offset: 38631},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1111, col: 7, offset: 38631},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1111, col: 7, offset: 38631},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1111, col: 12, offset: 38636},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1115, col: 1, offset: 38803},
			expr: &choiceExpr{
				pos: position{line: 1115, col: 24, offset: 38826},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1115, col: 24, offset: 38826},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1115, col: 24, offset: 38826},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1115, col: 24, offset: 38826},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1115, col: 30, offset: 38832},
										expr: &ruleRefExpr{
											pos:  position{line: 1115, col: 31, offset: 38833},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1115, col: 51, offset: 38853},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1115, col: 51, offset: 38853},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1115, col: 55, offset: 38857},
											expr: &litMatcher{
												pos:        position{line: 1115, col: 56, offset: 38858},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1115, col: 61, offset: 38863},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1115, col: 71, offset: 38873},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1115, col: 100, offset: 38902},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1115, col: 104, offset: 38906},
									expr: &notExpr{
										pos: position{line: 1115, col: 106, offset: 38908},
										expr: &ruleRefExpr{
											pos:  position{line: 1115, col: 107, offset: 38909},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1117, col: 5, offset: 39105},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1117, col: 5, offset: 39105},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1117, col: 5, offset: 39105},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1117, col: 11, offset: 39111},
										expr: &ruleRefExpr{
											pos:  position{line: 1117, col: 12, offset: 39112},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1117, col: 30, offset: 39130},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1117, col: 34, offset: 39134},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1117, col: 44, offset: 39144},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1117, col: 44, offset: 39144},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1117, col: 48, offset: 39148},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1117, col: 77, offset: 39177},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1121, col: 1, offset: 39387},
			expr: &seqExpr{
				pos: position{line: 1121, col: 32, offset: 39418},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1121, col: 32, offset: 39418},
						expr: &ruleRefExpr{
							pos:  position{line: 1121, col: 33, offset: 39419},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1121, col: 39, offset: 39425},
						expr: &ruleRefExpr{
							pos:  position{line: 1121, col: 39, offset: 39425},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1123, col: 1, offset: 39456},
			expr: &choiceExpr{
				pos: position{line: 1123, col: 31, offset: 39486},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1123, col: 31, offset: 39486},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1124, col: 11, offset: 39502},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1124, col: 11, offset: 39502},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1124, col: 19, offset: 39510},
								expr: &ruleRefExpr{
									pos:  position{line: 1124, col: 20, offset: 39511},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1125, col: 11, offset: 39530},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1126, col: 11, offset: 39561},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1127, col: 11, offset: 39585},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1127, col: 11, offset: 39585},
								expr: &ruleRefExpr{
									pos:  position{line: 1127, col: 11, offset: 39585},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1127, col: 18, offset: 39592},
								expr: &seqExpr{
									pos: position{line: 1127, col: 19, offset: 39593},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1127, col: 19, offset: 39593},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1127, col: 23, offset: 39597},
											expr: &litMatcher{
												pos:        position{line: 1127, col: 24, offset: 39598},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1128, col: 11, offset: 39615},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1129, col: 11, offset: 39637},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1130, col: 11, offset: 39659},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1131, col: 11, offset: 39684},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1132, col: 11, offset: 39709},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1133, col: 11, offset: 39736},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1134, col: 11, offset: 39754},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1135, col: 11, offset: 39776},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1136, col: 11, offset: 39800},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1137, col: 11, offset: 39818},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1138, col: 11, offset: 39847},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1139, col: 11, offset: 39880},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1140, col: 11, offset: 39909},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1142, col: 1, offset: 39949},
			expr: &choiceExpr{
				pos: position{line: 1143, col: 5, offset: 39994},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1143, col: 5, offset: 39994},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1144, col: 7, offset: 40092},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1144, col: 7, offset: 40092},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1144, col: 7, offset: 40092},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1144, col: 11, offset: 40096},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1148, col: 1, offset: 40263},
			expr: &choiceExpr{
				pos: position{line: 1149, col: 5, offset: 40288},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1149, col: 5, offset: 40288},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1149, col: 5, offset: 40288},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1149, col: 5, offset: 40288},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1149, col: 18, offset: 40301},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1149, col: 40, offset: 40323},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1149, col: 45, offset: 40328},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1149, col: 55, offset: 40338},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1149, col: 84, offset: 40367},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1151, col: 9, offset: 40526},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1151, col: 9, offset: 40526},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1151, col: 9, offset: 40526},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1151, col: 22, offset: 40539},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1151, col: 44, offset: 40561},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1151, col: 49, offset: 40566},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1151, col: 59, offset: 40576},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1151, col: 88, offset: 40605},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1154, col: 9, offset: 40808},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1154, col: 9, offset: 40808},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1154, col: 9, offset: 40808},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1154, col: 22, offset: 40821},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1154, col: 44, offset: 40843},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1154, col: 48, offset: 40847},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1154, col: 58, offset: 40857},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1154, col: 87, offset: 40886},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1162, col: 1, offset: 41102},
			expr: &choiceExpr{
				pos: position{line: 1162, col: 15, offset: 41116},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1162, col: 15, offset: 41116},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1162, col: 39, offset: 41140},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1164, col: 1, offset: 41165},
			expr: &actionExpr{
				pos: position{line: 1164, col: 26, offset: 41190},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1164, col: 26, offset: 41190},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1164, col: 26, offset: 41190},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1164, col: 32, offset: 41196},
								expr: &ruleRefExpr{
									pos:  position{line: 1164, col: 33, offset: 41197},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1164, col: 51, offset: 41215},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1164, col: 56, offset: 41220},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1164, col: 66, offset: 41230},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1164, col: 97, offset: 41261},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1168, col: 1, offset: 41399},
			expr: &seqExpr{
				pos: position{line: 1168, col: 34, offset: 41432},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1168, col: 34, offset: 41432},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1168, col: 63, offset: 41461},
						expr: &seqExpr{
							pos: position{line: 1168, col: 64, offset: 41462},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1168, col: 64, offset: 41462},
									expr: &litMatcher{
										pos:        position{line: 1168, col: 66, offset: 41464},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1168, col: 73, offset: 41471},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1168, col: 73, offset: 41471},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1168, col: 81, offset: 41479},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1170, col: 1, offset: 41548},
			expr: &choiceExpr{
				pos: position{line: 1170, col: 33, offset: 41580},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1170, col: 33, offset: 41580},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1171, col: 11, offset: 41596},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1171, col: 11, offset: 41596},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1171, col: 19, offset: 41604},
								expr: &ruleRefExpr{
									pos:  position{line: 1171, col: 20, offset: 41605},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1172, col: 11, offset: 41624},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1173, col: 11, offset: 41657},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1174, col: 11, offset: 41681},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1175, col: 11, offset: 41701},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1176, col: 11, offset: 41723},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1177, col: 11, offset: 41748},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1178, col: 11, offset: 41773},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1179, col: 11, offset: 41800},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1180, col: 11, offset: 41818},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1181, col: 11, offset: 41840},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1182, col: 11, offset: 41864},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1183, col: 11, offset: 41881},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1184, col: 11, offset: 41910},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1185, col: 11, offset: 41939},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1187, col: 1, offset: 41981},
			expr: &choiceExpr{
				pos: position{line: 1188, col: 5, offset: 42028},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1188, col: 5, offset: 42028},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1189, col: 7, offset: 42128},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1189, col: 7, offset: 42128},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1189, col: 7, offset: 42128},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1189, col: 12, offset: 42133},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1193, col: 1, offset: 42302},
			expr: &choiceExpr{
				pos: position{line: 1193, col: 26, offset: 42327},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1193, col: 26, offset: 42327},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1193, col: 26, offset: 42327},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1193, col: 26, offset: 42327},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1193, col: 32, offset: 42333},
										expr: &ruleRefExpr{
											pos:  position{line: 1193, col: 33, offset: 42334},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1193, col: 52, offset: 42353},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1193, col: 52, offset: 42353},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1193, col: 56, offset: 42357},
											expr: &litMatcher{
												pos:        position{line: 1193, col: 57, offset: 42358},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1193, col: 62, offset: 42363},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1193, col: 72, offset: 42373},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1193, col: 103, offset: 42404},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1195, col: 5, offset: 42596},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1195, col: 5, offset: 42596},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1195, col: 5, offset: 42596},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1195, col: 11, offset: 42602},
										expr: &ruleRefExpr{
											pos:  position{line: 1195, col: 12, offset: 42603},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1195, col: 30, offset: 42621},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1195, col: 34, offset: 42625},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1195, col: 44, offset: 42635},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1195, col: 44, offset: 42635},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1195, col: 48, offset: 42639},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1195, col: 79, offset: 42670},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1199, col: 1, offset: 42884},
			expr: &seqExpr{
				pos: position{line: 1199, col: 34, offset: 42917},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1199, col: 34, offset: 42917},
						expr: &ruleRefExpr{
							pos:  position{line: 1199, col: 35, offset: 42918},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1199, col: 41, offset: 42924},
						expr: &ruleRefExpr{
							pos:  position{line: 1199, col: 41, offset: 42924},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1201, col: 1, offset: 42957},
			expr: &choiceExpr{
				pos: position{line: 1201, col: 33, offset: 42989},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1201, col: 33, offset: 42989},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1202, col: 11, offset: 43005},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1202, col: 11, offset: 43005},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1202, col: 19, offset: 43013},
								expr: &ruleRefExpr{
									pos:  position{line: 1202, col: 20, offset: 43014},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1203, col: 11, offset: 43033},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1204, col: 11, offset: 43066},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1205, col: 11, offset: 43090},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1205, col: 11, offset: 43090},
								expr: &ruleRefExpr{
									pos:  position{line: 1205, col: 11, offset: 43090},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1205, col: 18, offset: 43097},
								expr: &seqExpr{
									pos: position{line: 1205, col: 19, offset: 43098},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1205, col: 19, offset: 43098},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1205, col: 23, offset: 43102},
											expr: &litMatcher{
												pos:        position{line: 1205, col: 24, offset: 43103},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1206, col: 11, offset: 43120},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1207, col: 11, offset: 43140},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 11, offset: 43162},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1209, col: 11, offset: 43187},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1210, col: 11, offset: 43212},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1211, col: 11, offset: 43239},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1212, col: 11, offset: 43257},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1213, col: 11, offset: 43279},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 11, offset: 43303},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 11, offset: 43321},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1216, col: 11, offset: 43351},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1217, col: 11, offset: 43384},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1218, col: 11, offset: 43413},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1220, col: 1, offset: 43455},
			expr: &choiceExpr{
				pos: position{line: 1221, col: 5, offset: 43502},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1221, col: 5, offset: 43502},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1222, col: 7, offset: 43602},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1222, col: 7, offset: 43602},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1222, col: 7, offset: 43602},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1222, col: 11, offset: 43606},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1226, col: 1, offset: 43776},
			expr: &choiceExpr{
				pos: position{line: 1227, col: 5, offset: 43803},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1227, col: 5, offset: 43803},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1227, col: 5, offset: 43803},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1227, col: 5, offset: 43803},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1227, col: 18, offset: 43816},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1227, col: 40, offset: 43838},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1227, col: 45, offset: 43843},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1227, col: 55, offset: 43853},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1227, col: 86, offset: 43884},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1229, col: 9, offset: 44043},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1229, col: 9, offset: 44043},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1229, col: 9, offset: 44043},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1229, col: 22, offset: 44056},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1229, col: 44, offset: 44078},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1229, col: 49, offset: 44083},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1229, col: 59, offset: 44093},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1229, col: 90, offset: 44124},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1232, col: 9, offset: 44327},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1232, col: 9, offset: 44327},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1232, col: 9, offset: 44327},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1232, col: 22, offset: 44340},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1232, col: 44, offset: 44362},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1232, col: 48, offset: 44366},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1232, col: 58, offset: 44376},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1232, col: 89, offset: 44407},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1239, col: 1, offset: 44624},
			expr: &choiceExpr{
				pos: position{line: 1239, col: 18, offset: 44641},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1239, col: 18, offset: 44641},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1239, col: 45, offset: 44668},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1241, col: 1, offset: 44696},
			expr: &actionExpr{
				pos: position{line: 1241, col: 29, offset: 44724},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1241, col: 29, offset: 44724},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1241, col: 29, offset: 44724},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1241, col: 35, offset: 44730},
								expr: &ruleRefExpr{
									pos:  position{line: 1241, col: 36, offset: 44731},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1241, col: 54, offset: 44749},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1241, col: 59, offset: 44754},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1241, col: 69, offset: 44764},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1241, col: 103, offset: 44798},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1245, col: 1, offset: 44939},
			expr: &seqExpr{
				pos: position{line: 1245, col: 37, offset: 44975},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1245, col: 37, offset: 44975},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1245, col: 69, offset: 45007},
						expr: &seqExpr{
							pos: position{line: 1245, col: 70, offset: 45008},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1245, col: 70, offset: 45008},
									expr: &litMatcher{
										pos:        position{line: 1245, col: 72, offset: 45010},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1245, col: 79, offset: 45017},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1245, col: 79, offset: 45017},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1245, col: 87, offset: 45025},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1247, col: 1, offset: 45096},
			expr: &choiceExpr{
				pos: position{line: 1247, col: 36, offset: 45131},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1247, col: 36, offset: 45131},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1248, col: 11, offset: 45147},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1248, col: 11, offset: 45147},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1248, col: 19, offset: 45155},
								expr: &ruleRefExpr{
									pos:  position{line: 1248, col: 20, offset: 45156},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1249, col: 11, offset: 45175},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1250, col: 11, offset: 45193},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1251, col: 11, offset: 45229},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1252, col: 11, offset: 45253},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1253, col: 11, offset: 45273},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1254, col: 11, offset: 45295},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1255, col: 11, offset: 45317},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 11, offset: 45342},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1257, col: 11, offset: 45369},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1258, col: 11, offset: 45391},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1259, col: 11, offset: 45414},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1260, col: 11, offset: 45430},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1261, col: 11, offset: 45460},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1262, col: 11, offset: 45489},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1264, col: 1, offset: 45534},
			expr: &choiceExpr{
				pos: position{line: 1265, col: 5, offset: 45584},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1265, col: 5, offset: 45584},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1266, col: 7, offset: 45687},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1266, col: 7, offset: 45687},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1266, col: 7, offset: 45687},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1266, col: 12, offset: 45692},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1270, col: 1, offset: 45864},
			expr: &choiceExpr{
				pos: position{line: 1270, col: 29, offset: 45892},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1270, col: 29, offset: 45892},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1270, col: 29, offset: 45892},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1270, col: 29, offset: 45892},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1270, col: 35, offset: 45898},
										expr: &ruleRefExpr{
											pos:  position{line: 1270, col: 36, offset: 45899},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1270, col: 55, offset: 45918},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1270, col: 55, offset: 45918},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1270, col: 59, offset: 45922},
											expr: &litMatcher{
												pos:        position{line: 1270, col: 60, offset: 45923},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1270, col: 65, offset: 45928},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1270, col: 75, offset: 45938},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1270, col: 109, offset: 45972},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1272, col: 5, offset: 46167},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1272, col: 5, offset: 46167},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1272, col: 5, offset: 46167},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1272, col: 11, offset: 46173},
										expr: &ruleRefExpr{
											pos:  position{line: 1272, col: 12, offset: 46174},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1272, col: 30, offset: 46192},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1272, col: 34, offset: 46196},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1272, col: 44, offset: 46206},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1272, col: 44, offset: 46206},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1272, col: 48, offset: 46210},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1272, col: 82, offset: 46244},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1276, col: 1, offset: 46462},
			expr: &seqExpr{
				pos: position{line: 1276, col: 37, offset: 46498},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1276, col: 37, offset: 46498},
						expr: &ruleRefExpr{
							pos:  position{line: 1276, col: 38, offset: 46499},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1276, col: 44, offset: 46505},
						expr: &ruleRefExpr{
							pos:  position{line: 1276, col: 44, offset: 46505},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1278, col: 1, offset: 46541},
			expr: &choiceExpr{
				pos: position{line: 1278, col: 37, offset: 46577},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1278, col: 37, offset: 46577},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1279, col: 11, offset: 46593},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1279, col: 11, offset: 46593},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1279, col: 19, offset: 46601},
								expr: &ruleRefExpr{
									pos:  position{line: 1279, col: 20, offset: 46602},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1280, col: 11, offset: 46621},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1281, col: 11, offset: 46657},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1282, col: 11, offset: 46681},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1282, col: 11, offset: 46681},
								expr: &ruleRefExpr{
									pos:  position{line: 1282, col: 11, offset: 46681},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1282, col: 18, offset: 46688},
								expr: &seqExpr{
									pos: position{line: 1282, col: 19, offset: 46689},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1282, col: 19, offset: 46689},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1282, col: 23, offset: 46693},
											expr: &litMatcher{
												pos:        position{line: 1282, col: 24, offset: 46694},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1283, col: 11, offset: 46823},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1284, col: 11, offset: 46843},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1285, col: 11, offset: 46865},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1286, col: 11, offset: 46887},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1287, col: 11, offset: 46912},
						name: "SuperscriptText",
					},
					&seqExpr{
						pos: position{line: 1288, col: 11, offset: 46939},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1288, col: 11, offset: 46939},
								expr: &litMatcher{
									pos:        position{line: 1288, col: 12, offset: 46940},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1288, col: 16, offset: 46944},
								name: "Symbol",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 11, offset: 46962},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1290, col: 11, offset: 46984},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1291, col: 11, offset: 47008},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1292, col: 11, offset: 47025},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1293, col: 11, offset: 47055},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1294, col: 11, offset: 47088},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1295, col: 11, offset: 47117},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1297, col: 1, offset: 47162},
			expr: &choiceExpr{
				pos: position{line: 1298, col: 5, offset: 47212},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1298, col: 5, offset: 47212},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1299, col: 7, offset: 47315},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1299, col: 7, offset: 47315},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1299, col: 7, offset: 47315},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1299, col: 11, offset: 47319},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1303, col: 1, offset: 47492},
			expr: &choiceExpr{
				pos: position{line: 1304, col: 5, offset: 47522},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1304, col: 5, offset: 47522},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1304, col: 5, offset: 47522},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1304, col: 5, offset: 47522},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1304, col: 18, offset: 47535},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1304, col: 40, offset: 47557},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1304, col: 45, offset: 47562},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1304, col: 55, offset: 47572},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1304, col: 89, offset: 47606},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1306, col: 9, offset: 47765},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1306, col: 9, offset: 47765},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1306, col: 9, offset: 47765},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1306, col: 22, offset: 47778},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1306, col: 44, offset: 47800},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1306, col: 49, offset: 47805},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1306, col: 59, offset: 47815},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1306, col: 93, offset: 47849},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1309, col: 9, offset: 48052},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1309, col: 9, offset: 48052},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1309, col: 9, offset: 48052},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1309, col: 22, offset: 48065},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1309, col: 44, offset: 48087},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1309, col: 48, offset: 48091},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1309, col: 58, offset: 48101},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1309, col: 92, offset: 48135},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1317, col: 1, offset: 48351},
			expr: &choiceExpr{
				pos: position{line: 1317, col: 15, offset: 48365},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1317, col: 15, offset: 48365},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1317, col: 39, offset: 48389},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1319, col: 1, offset: 48414},
			expr: &actionExpr{
				pos: position{line: 1319, col: 26, offset: 48439},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1319, col: 26, offset: 48439},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1319, col: 26, offset: 48439},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1319, col: 32, offset: 48445},
								expr: &ruleRefExpr{
									pos:  position{line: 1319, col: 33, offset: 48446},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1319, col: 51, offset: 48464},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1319, col: 56, offset: 48469},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1319, col: 66, offset: 48479},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1319, col: 97, offset: 48510},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1323, col: 1, offset: 48648},
			expr: &seqExpr{
				pos: position{line: 1323, col: 34, offset: 48681},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1323, col: 34, offset: 48681},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1323, col: 63, offset: 48710},
						expr: &seqExpr{
							pos: position{line: 1323, col: 64, offset: 48711},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1323, col: 64, offset: 48711},
									expr: &litMatcher{
										pos:        position{line: 1323, col: 66, offset: 48713},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1323, col: 73, offset: 48720},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1323, col: 73, offset: 48720},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1323, col: 81, offset: 48728},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1325, col: 1, offset: 48797},
			expr: &choiceExpr{
				pos: position{line: 1325, col: 33, offset: 48829},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1325, col: 33, offset: 48829},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1326, col: 11, offset: 48845},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1327, col: 11, offset: 48878},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1327, col: 11, offset: 48878},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1327, col: 19, offset: 48886},
								expr: &ruleRefExpr{
									pos:  position{line: 1327, col: 20, offset: 48887},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1328, col: 11, offset: 48906},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1329, col: 11, offset: 48930},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 11, offset: 48950},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1331, col: 11, offset: 48972},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 11, offset: 48997},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 11, offset: 49022},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1334, col: 11, offset: 49049},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1335, col: 11, offset: 49067},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1336, col: 11, offset: 49089},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1337, col: 11, offset: 49112},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1338, col: 11, offset: 49128},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1339, col: 11, offset: 49157},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1340, col: 11, offset: 49186},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1342, col: 1, offset: 49228},
			expr: &choiceExpr{
				pos: position{line: 1343, col: 5, offset: 49275},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1343, col: 5, offset: 49275},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1344, col: 7, offset: 49375},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1344, col: 7, offset: 49375},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1344, col: 7, offset: 49375},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1344, col: 12, offset: 49380},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1348, col: 1, offset: 49549},
			expr: &choiceExpr{
				pos: position{line: 1348, col: 26, offset: 49574},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1348, col: 26, offset: 49574},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1348, col: 26, offset: 49574},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1348, col: 26, offset: 49574},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1348, col: 32, offset: 49580},
										expr: &ruleRefExpr{
											pos:  position{line: 1348, col: 33, offset: 49581},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1348, col: 52, offset: 49600},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1348, col: 52, offset: 49600},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1348, col: 56, offset: 49604},
											expr: &litMatcher{
												pos:        position{line: 1348, col: 57, offset: 49605},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1348, col: 62, offset: 49610},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1348, col: 72, offset: 49620},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1348, col: 103, offset: 49651},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1350, col: 5, offset: 49843},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1350, col: 5, offset: 49843},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1350, col: 5, offset: 49843},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1350, col: 11, offset: 49849},
										expr: &ruleRefExpr{
											pos:  position{line: 1350, col: 12, offset: 49850},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1350, col: 30, offset: 49868},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1350, col: 34, offset: 49872},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1350, col: 44, offset: 49882},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1350, col: 44, offset: 49882},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1350, col: 48, offset: 49886},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1350, col: 79, offset: 49917},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1354, col: 1, offset: 50130},
			expr: &seqExpr{
				pos: position{line: 1354, col: 34, offset: 50163},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1354, col: 34, offset: 50163},
						expr: &ruleRefExpr{
							pos:  position{line: 1354, col: 35, offset: 50164},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1354, col: 41, offset: 50170},
						expr: &ruleRefExpr{
							pos:  position{line: 1354, col: 41, offset: 50170},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1356, col: 1, offset: 50203},
			expr: &choiceExpr{
				pos: position{line: 1356, col: 33, offset: 50235},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1356, col: 33, offset: 50235},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1357, col: 11, offset: 50251},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1358, col: 11, offset: 50284},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1358, col: 11, offset: 50284},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1358, col: 19, offset: 50292},
								expr: &ruleRefExpr{
									pos:  position{line: 1358, col: 20, offset: 50293},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1359, col: 11, offset: 50312},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1360, col: 11, offset: 50336},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1360, col: 11, offset: 50336},
								expr: &ruleRefExpr{
									pos:  position{line: 1360, col: 11, offset: 50336},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1360, col: 18, offset: 50343},
								expr: &seqExpr{
									pos: position{line: 1360, col: 19, offset: 50344},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1360, col: 19, offset: 50344},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1360, col: 23, offset: 50348},
											expr: &litMatcher{
												pos:        position{line: 1360, col: 24, offset: 50349},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1361, col: 11, offset: 50366},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1362, col: 11, offset: 50386},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1363, col: 11, offset: 50408},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1364, col: 11, offset: 50433},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1365, col: 11, offset: 50458},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1366, col: 11, offset: 50485},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1367, col: 11, offset: 50503},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1368, col: 11, offset: 50525},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1369, col: 11, offset: 50548},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1370, col: 11, offset: 50564},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1371, col: 11, offset: 50593},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1372, col: 11, offset: 50626},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1373, col: 11, offset: 50655},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1375, col: 1, offset: 50697},
			expr: &choiceExpr{
				pos: position{line: 1376, col: 5, offset: 50744},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1376, col: 5, offset: 50744},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1377, col: 7, offset: 50842},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1377, col: 7, offset: 50842},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1377, col: 7, offset: 50842},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1377, col: 11, offset: 50846},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1381, col: 1, offset: 51013},
			expr: &choiceExpr{
				pos: position{line: 1382, col: 5, offset: 51039},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1382, col: 5, offset: 51039},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1382, col: 5, offset: 51039},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1382, col: 5, offset: 51039},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1382, col: 18, offset: 51052},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1382, col: 40, offset: 51074},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1382, col: 45, offset: 51079},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1382, col: 55, offset: 51089},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1382, col: 86, offset: 51120},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1384, col: 9, offset: 51279},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1384, col: 9, offset: 51279},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1384, col: 9, offset: 51279},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1384, col: 22, offset: 51292},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1384, col: 44, offset: 51314},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1384, col: 49, offset: 51319},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1384, col: 59, offset: 51329},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1384, col: 90, offset: 51360},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1387, col: 9, offset: 51563},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1387, col: 9, offset: 51563},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1387, col: 9, offset: 51563},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1387, col: 22, offset: 51576},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1387, col: 44, offset: 51598},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1387, col: 48, offset: 51602},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1387, col: 58, offset: 51612},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1387, col: 89, offset: 51643},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1392, col: 1, offset: 51798},
			expr: &actionExpr{
				pos: position{line: 1392, col: 18, offset: 51815},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1392, col: 18, offset: 51815},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1392, col: 18, offset: 51815},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1392, col: 24, offset: 51821},
								expr: &ruleRefExpr{
									pos:  position{line: 1392, col: 25, offset: 51822},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1392, col: 43, offset: 51840},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1392, col: 47, offset: 51844},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1392, col: 56, offset: 51853},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1392, col: 78, offset: 51875},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1396, col: 1, offset: 51975},
			expr: &choiceExpr{
				pos: position{line: 1396, col: 25, offset: 51999},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1396, col: 25, offset: 51999},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1396, col: 38, offset: 52012},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1398, col: 1, offset: 52033},
			expr: &actionExpr{
				pos: position{line: 1398, col: 21, offset: 52053},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1398, col: 21, offset: 52053},
					expr: &charClassMatcher{
						pos:        position{line: 1398, col: 21, offset: 52053},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1402, col: 1, offset: 52134},
			expr: &actionExpr{
				pos: position{line: 1402, col: 25, offset: 52158},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1402, col: 25, offset: 52158},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1402, col: 25, offset: 52158},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1402, col: 38, offset: 52171},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1402, col: 60, offset: 52193},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1402, col: 64, offset: 52197},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1402, col: 73, offset: 52206},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1402, col: 95, offset: 52228},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1406, col: 1, offset: 52361},
			expr: &actionExpr{
				pos: position{line: 1406, col: 20, offset: 52380},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1406, col: 20, offset: 52380},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1406, col: 20, offset: 52380},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1406, col: 26, offset: 52386},
								expr: &ruleRefExpr{
									pos:  position{line: 1406, col: 27, offset: 52387},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1406, col: 45, offset: 52405},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1406, col: 49, offset: 52409},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1406, col: 58, offset: 52418},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1406, col: 82, offset: 52442},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1410, col: 1, offset: 52544},
			expr: &choiceExpr{
				pos: position{line: 1410, col: 27, offset: 52570},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1410, col: 27, offset: 52570},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1410, col: 40, offset: 52583},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1412, col: 1, offset: 52606},
			expr: &actionExpr{
				pos: position{line: 1412, col: 23, offset: 52628},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1412, col: 23, offset: 52628},
					expr: &charClassMatcher{
						pos:        position{line: 1412, col: 23, offset: 52628},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1416, col: 1, offset: 52709},
			expr: &actionExpr{
				pos: position{line: 1416, col: 27, offset: 52735},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1416, col: 27, offset: 52735},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1416, col: 27, offset: 52735},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1416, col: 40, offset: 52748},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1416, col: 62, offset: 52770},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1416, col: 66, offset: 52774},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1416, col: 75, offset: 52783},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1416, col: 99, offset: 52807},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1423, col: 1, offset: 53056},
			expr: &choiceExpr{
				pos: position{line: 1423, col: 22, offset: 53077},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1423, col: 22, offset: 53077},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1423, col: 46, offset: 53101},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1423, col: 70, offset: 53125},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1425, col: 1, offset: 53145},
			expr: &litMatcher{
				pos:        position{line: 1425, col: 32, offset: 53176},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1427, col: 1, offset: 53183},
			expr: &actionExpr{
				pos: position{line: 1427, col: 26, offset: 53208},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1427, col: 26, offset: 53208},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1427, col: 26, offset: 53208},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1427, col: 54, offset: 53236},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1427, col: 63, offset: 53245},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1427, col: 93, offset: 53275},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1427, col: 121, offset: 53303},
							expr: &ruleRefExpr{
								pos:  position{line: 1427, col: 122, offset: 53304},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1431, col: 1, offset: 53413},
			expr: &choiceExpr{
				pos: position{line: 1431, col: 33, offset: 53445},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1431, col: 34, offset: 53446},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1431, col: 34, offset: 53446},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1431, col: 35, offset: 53447},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1431, col: 35, offset: 53447},
											expr: &ruleRefExpr{
												pos:  position{line: 1431, col: 36, offset: 53448},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1431, col: 64, offset: 53476},
											expr: &ruleRefExpr{
												pos:  position{line: 1431, col: 65, offset: 53477},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1431, col: 71, offset: 53483},
											expr: &ruleRefExpr{
												pos:  position{line: 1431, col: 72, offset: 53484},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1431, col: 80, offset: 53492,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1431, col: 83, offset: 53495},
									expr: &seqExpr{
										pos: position{line: 1431, col: 84, offset: 53496},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1431, col: 84, offset: 53496},
												expr: &seqExpr{
													pos: position{line: 1431, col: 86, offset: 53498},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1431, col: 86, offset: 53498},
															expr: &ruleRefExpr{
																pos:  position{line: 1431, col: 86, offset: 53498},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1431, col: 93, offset: 53505},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1431, col: 122, offset: 53534},
												expr: &ruleRefExpr{
													pos:  position{line: 1431, col: 123, offset: 53535},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1431, col: 151, offset: 53563},
												expr: &ruleRefExpr{
													pos:  position{line: 1431, col: 152, offset: 53564},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1431, col: 160, offset: 53572,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1433, col: 7, offset: 53716},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1433, col: 8, offset: 53717},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1433, col: 8, offset: 53717},
									expr: &ruleRefExpr{
										pos:  position{line: 1433, col: 9, offset: 53718},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1433, col: 15, offset: 53724},
									expr: &ruleRefExpr{
										pos:  position{line: 1433, col: 16, offset: 53725},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1433, col: 24, offset: 53733},
									expr: &ruleRefExpr{
										pos:  position{line: 1433, col: 25, offset: 53734},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1433, col: 53, offset: 53762,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1437, col: 1, offset: 53848},
			expr: &litMatcher{
				pos:        position{line: 1437, col: 32, offset: 53879},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1439, col: 1, offset: 53888},
			expr: &actionExpr{
				pos: position{line: 1439, col: 26, offset: 53913},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1439, col: 26, offset: 53913},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1439, col: 26, offset: 53913},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1439, col: 54, offset: 53941},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1439, col: 63, offset: 53950},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1439, col: 93, offset: 53980},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1439, col: 121, offset: 54008},
							expr: &ruleRefExpr{
								pos:  position{line: 1439, col: 122, offset: 54009},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1443, col: 1, offset: 54118},
			expr: &choiceExpr{
				pos: position{line: 1443, col: 33, offset: 54150},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1443, col: 34, offset: 54151},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1443, col: 34, offset: 54151},
							expr: &seqExpr{
								pos: position{line: 1443, col: 35, offset: 54152},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1443, col: 35, offset: 54152},
										expr: &ruleRefExpr{
											pos:  position{line: 1443, col: 36, offset: 54153},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1443, col: 64, offset: 54181,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1445, col: 7, offset: 54348},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1445, col: 7, offset: 54348},
							expr: &seqExpr{
								pos: position{line: 1445, col: 8, offset: 54349},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1445, col: 8, offset: 54349},
										expr: &ruleRefExpr{
											pos:  position{line: 1445, col: 9, offset: 54350},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1445, col: 15, offset: 54356},
										expr: &ruleRefExpr{
											pos:  position{line: 1445, col: 16, offset: 54357},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1445, col: 24, offset: 54365},
										expr: &ruleRefExpr{
											pos:  position{line: 1445, col: 25, offset: 54366},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1445, col: 53, offset: 54394,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1449, col: 1, offset: 54481},
			expr: &choiceExpr{
				pos: position{line: 1449, col: 21, offset: 54501},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1449, col: 21, offset: 54501},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1449, col: 21, offset: 54501},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1449, col: 21, offset: 54501},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1449, col: 30, offset: 54510},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1449, col: 38, offset: 54518},
										expr: &ruleRefExpr{
											pos:  position{line: 1449, col: 39, offset: 54519},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1449, col: 67, offset: 54547},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1451, col: 5, offset: 54645},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1451, col: 5, offset: 54645},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1451, col: 5, offset: 54645},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1451, col: 15, offset: 54655},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1451, col: 23, offset: 54663},
										expr: &choiceExpr{
											pos: position{line: 1451, col: 24, offset: 54664},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1451, col: 24, offset: 54664},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1451, col: 37, offset: 54677},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1451, col: 65, offset: 54705},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1455, col: 1, offset: 54805},
			expr: &actionExpr{
				pos: position{line: 1455, col: 30, offset: 54834},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1455, col: 30, offset: 54834},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1462, col: 1, offset: 55014},
			expr: &choiceExpr{
				pos: position{line: 1462, col: 19, offset: 55032},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1462, col: 19, offset: 55032},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1462, col: 44, offset: 55057},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1464, col: 1, offset: 55084},
			expr: &choiceExpr{
				pos: position{line: 1464, col: 27, offset: 55110},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1464, col: 27, offset: 55110},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1464, col: 27, offset: 55110},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1464, col: 27, offset: 55110},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1464, col: 32, offset: 55115},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1464, col: 36, offset: 55119},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1464, col: 40, offset: 55123},
									expr: &ruleRefExpr{
										pos:  position{line: 1464, col: 40, offset: 55123},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1464, col: 47, offset: 55130},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1464, col: 51, offset: 55134},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1464, col: 58, offset: 55141},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1464, col: 79, offset: 55162},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1466, col: 5, offset: 55247},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1466, col: 5, offset: 55247},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1466, col: 5, offset: 55247},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1466, col: 10, offset: 55252},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1466, col: 14, offset: 55256},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1466, col: 18, offset: 55260},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1470, col: 1, offset: 55336},
			expr: &actionExpr{
				pos: position{line: 1470, col: 27, offset: 55362},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1470, col: 27, offset: 55362},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1470, col: 27, offset: 55362},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1470, col: 35, offset: 55370},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1470, col: 40, offset: 55375},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1470, col: 54, offset: 55389},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1470, col: 72, offset: 55407},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1474, col: 1, offset: 55534},
			expr: &ruleRefExpr{
				pos:  position{line: 1474, col: 24, offset: 55557},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1479, col: 1, offset: 55684},
			expr: &choiceExpr{
				pos: position{line: 1479, col: 9, offset: 55692},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1479, col: 9, offset: 55692},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1479, col: 24, offset: 55707},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1482, col: 1, offset: 55791},
			expr: &actionExpr{
				pos: position{line: 1482, col: 17, offset: 55807},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1482, col: 17, offset: 55807},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1482, col: 17, offset: 55807},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1482, col: 25, offset: 55815},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1482, col: 30, offset: 55820},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1482, col: 40, offset: 55830},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1482, col: 58, offset: 55848},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1486, col: 1, offset: 55963},
			expr: &actionExpr{
				pos: position{line: 1486, col: 17, offset: 55979},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1486, col: 17, offset: 55979},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1486, col: 17, offset: 55979},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1486, col: 22, offset: 55984},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1486, col: 42, offset: 56004},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1486, col: 59, offset: 56021},
								expr: &ruleRefExpr{
									pos:  position{line: 1486, col: 60, offset: 56022},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1490, col: 1, offset: 56119},
			expr: &actionExpr{
				pos: position{line: 1490, col: 19, offset: 56137},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1490, col: 19, offset: 56137},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1490, col: 19, offset: 56137},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1490, col: 23, offset: 56141},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1490, col: 33, offset: 56151},
								expr: &ruleRefExpr{
									pos:  position{line: 1490, col: 34, offset: 56152},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1491, col: 5, offset: 56185},
							expr: &ruleRefExpr{
								pos:  position{line: 1491, col: 5, offset: 56185},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1491, col: 12, offset: 56192},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1491, col: 23, offset: 56203},
								expr: &ruleRefExpr{
									pos:  position{line: 1491, col: 24, offset: 56204},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1491, col: 43, offset: 56223},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1495, col: 1, offset: 56344},
			expr: &actionExpr{
				pos: position{line: 1495, col: 30, offset: 56373},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1495, col: 30, offset: 56373},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1497, col: 5, offset: 56426},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1497, col: 6, offset: 56427},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1497, col: 6, offset: 56427},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1497, col: 6, offset: 56427},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1497, col: 11, offset: 56432},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1497, col: 20, offset: 56441},
												expr: &choiceExpr{
													pos: position{line: 1497, col: 21, offset: 56442},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1497, col: 21, offset: 56442},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1497, col: 36, offset: 56457},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1497, col: 49, offset: 56470},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1497, col: 71, offset: 56492},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1497, col: 76, offset: 56497},
											expr: &notExpr{
												pos: position{line: 1497, col: 78, offset: 56499},
												expr: &litMatcher{
													pos:        position{line: 1497, col: 79, offset: 56500},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1497, col: 84, offset: 56505},
											expr: &litMatcher{
												pos:        position{line: 1497, col: 84, offset: 56505},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1501, col: 6, offset: 56636},
								run: (*parser).callonFirstLinkAttributeElement19,
								expr: &seqExpr{
									pos: position{line: 1501, col: 6, offset: 56636},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1501, col: 6, offset: 56636},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1501, col: 15, offset: 56645},
												expr: &choiceExpr{
													pos: position{line: 1501, col: 16, offset: 56646},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1501, col: 16, offset: 56646},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1501, col: 31, offset: 56661},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1501, col: 44, offset: 56674},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1501, col: 68, offset: 56698},
											expr: &notExpr{
												pos: position{line: 1501, col: 70, offset: 56700},
												expr: &litMatcher{
													pos:        position{line: 1501, col: 71, offset: 56701},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1501, col: 76, offset: 56706},
											expr: &litMatcher{
												pos:        position{line: 1501, col: 76, offset: 56706},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1507, col: 1, offset: 56826},
			expr: &actionExpr{
				pos: position{line: 1507, col: 18, offset: 56843},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1507, col: 18, offset: 56843},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1511, col: 1, offset: 56933},
			expr: &actionExpr{
				pos: position{line: 1511, col: 24, offset: 56956},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1511, col: 24, offset: 56956},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1515, col: 1, offset: 57053},
			expr: &actionExpr{
				pos: position{line: 1515, col: 26, offset: 57078},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1515, col: 26, offset: 57078},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1520, col: 1, offset: 57239},
			expr: &actionExpr{
				pos: position{line: 1521, col: 5, offset: 57259},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1521, col: 5, offset: 57259},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1521, col: 5, offset: 57259},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1521, col: 14, offset: 57268},
								expr: &choiceExpr{
									pos: position{line: 1521, col: 15, offset: 57269},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1521, col: 15, offset: 57269},
											name: "Word",
										},
										&ruleRefExpr{
											pos:  position{line: 1522, col: 11, offset: 57285},
											name: "Symbol",
										},
										&oneOrMoreExpr{
											pos: position{line: 1523, col: 11, offset: 57303},
											expr: &ruleRefExpr{
												pos:  position{line: 1523, col: 11, offset: 57303},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1524, col: 11, offset: 57322},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1525, col: 11, offset: 57347},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1526, col: 11, offset: 57370},
											name: "ImpliedApostrophe",
										},
										&ruleRefExpr{
											pos:  position{line: 1527, col: 11, offset: 57399},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1528, col: 11, offset: 57418},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1528, col: 21, offset: 57428},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1532, col: 1, offset: 57502},
			expr: &choiceExpr{
				pos: position{line: 1532, col: 17, offset: 57518},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1532, col: 17, offset: 57518},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1532, col: 40, offset: 57541},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1535, col: 1, offset: 57672},
			expr: &actionExpr{
				pos: position{line: 1535, col: 25, offset: 57696},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1535, col: 25, offset: 57696},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1535, col: 25, offset: 57696},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1535, col: 33, offset: 57704},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1535, col: 38, offset: 57709},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1535, col: 38, offset: 57709},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1535, col: 57, offset: 57728},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1535, col: 79, offset: 57750},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1535, col: 97, offset: 57768},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1539, col: 1, offset: 57883},
			expr: &actionExpr{
				pos: position{line: 1539, col: 25, offset: 57907},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1539, col: 25, offset: 57907},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1539, col: 25, offset: 57907},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1539, col: 30, offset: 57912},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1539, col: 48, offset: 57930},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1539, col: 65, offset: 57947},
								expr: &ruleRefExpr{
									pos:  position{line: 1539, col: 66, offset: 57948},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1546, col: 1, offset: 58150},
			expr: &actionExpr{
				pos: position{line: 1546, col: 15, offset: 58164},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1546, col: 15, offset: 58164},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1546, col: 15, offset: 58164},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1546, col: 26, offset: 58175},
								expr: &ruleRefExpr{
									pos:  position{line: 1546, col: 27, offset: 58176},
									name: "Attributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1546, col: 40, offset: 58189},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1546, col: 50, offset: 58199},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1546, col: 56, offset: 58205},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1546, col: 66, offset: 58215},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1546, col: 84, offset: 58233},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1546, col: 101, offset: 58250},
							expr: &ruleRefExpr{
								pos:  position{line: 1546, col: 101, offset: 58250},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1546, col: 108, offset: 58257},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1550, col: 1, offset: 58373},
			expr: &actionExpr{
				pos: position{line: 1550, col: 16, offset: 58388},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1550, col: 16, offset: 58388},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1550, col: 16, offset: 58388},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1550, col: 25, offset: 58397},
							expr: &litMatcher{
								pos:        position{line: 1550, col: 26, offset: 58398},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1550, col: 30, offset: 58402},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1550, col: 36, offset: 58408},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1550, col: 46, offset: 58418},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1550, col: 64, offset: 58436},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1554, col: 1, offset: 58554},
			expr: &actionExpr{
				pos: position{line: 1554, col: 20, offset: 58573},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1554, col: 20, offset: 58573},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1554, col: 20, offset: 58573},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1554, col: 24, offset: 58577},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1554, col: 28, offset: 58581},
								expr: &ruleRefExpr{
									pos:  position{line: 1554, col: 29, offset: 58582},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1554, col: 56, offset: 58609},
							expr: &litMatcher{
								pos:        position{line: 1554, col: 56, offset: 58609},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1554, col: 61, offset: 58614},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1554, col: 67, offset: 58620},
								expr: &ruleRefExpr{
									pos:  position{line: 1554, col: 68, offset: 58621},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1554, col: 95, offset: 58648},
							expr: &litMatcher{
								pos:        position{line: 1554, col: 95, offset: 58648},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1554, col: 100, offset: 58653},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1554, col: 107, offset: 58660},
								expr: &ruleRefExpr{
									pos:  position{line: 1554, col: 108, offset: 58661},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1554, col: 135, offset: 58688},
							expr: &litMatcher{
								pos:        position{line: 1554, col: 135, offset: 58688},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1554, col: 140, offset: 58693},
							expr: &ruleRefExpr{
								pos:  position{line: 1554, col: 140, offset: 58693},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1554, col: 147, offset: 58700},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1554, col: 158, offset: 58711},
								expr: &ruleRefExpr{
									pos:  position{line: 1554, col: 159, offset: 58712},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1554, col: 178, offset: 58731},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1561, col: 1, offset: 59023},
			expr: &actionExpr{
				pos: position{line: 1561, col: 15, offset: 59037},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1561, col: 15, offset: 59037},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1561, col: 15, offset: 59037},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1561, col: 23, offset: 59045},
							label: "iconClass",
							expr: &actionExpr{
								pos: position{line: 1561, col: 34, offset: 59056},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1561, col: 34, offset: 59056},
									expr: &charClassMatcher{
										pos:        position{line: 1561, col: 34, offset: 59056},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1561, col: 78, offset: 59100},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1561, col: 96, offset: 59118},
								name: "IconAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttributes",
			pos:  position{line: 1565, col: 1, offset: 59225},
			expr: &actionExpr{
				pos: position{line: 1565, col: 19, offset: 59243},
				run: (*parser).callonIconAttributes1,
				expr: &seqExpr{
					pos: position{line: 1565, col: 19, offset: 59243},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1565, col: 19, offset: 59243},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1565, col: 23, offset: 59247},
							label: "size",
							expr: &zeroOrOneExpr{
								pos: position{line: 1565, col: 28, offset: 59252},
								expr: &ruleRefExpr{
									pos:  position{line: 1565, col: 29, offset: 59253},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1565, col: 56, offset: 59280},
							expr: &litMatcher{
								pos:        position{line: 1565, col: 56, offset: 59280},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1565, col: 61, offset: 59285},
							expr: &ruleRefExpr{
								pos:  position{line: 1565, col: 61, offset: 59285},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1565, col: 68, offset: 59292},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1565, col: 75, offset: 59299},
								expr: &ruleRefExpr{
									pos:  position{line: 1565, col: 76, offset: 59300},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1565, col: 95, offset: 59319},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1572, col: 1, offset: 59597},
			expr: &choiceExpr{
				pos: position{line: 1572, col: 19, offset: 59615},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1572, col: 19, offset: 59615},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1572, col: 19, offset: 59615},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1572, col: 19, offset: 59615},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1572, col: 32, offset: 59628},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1572, col: 41, offset: 59637},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1572, col: 58, offset: 59654},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1574, col: 5, offset: 59724},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1574, col: 5, offset: 59724},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1574, col: 5, offset: 59724},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1574, col: 17, offset: 59736},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1574, col: 22, offset: 59741},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1574, col: 35, offset: 59754},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1574, col: 39, offset: 59758},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1574, col: 47, offset: 59766},
										expr: &ruleRefExpr{
											pos:  position{line: 1574, col: 48, offset: 59767},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1574, col: 66, offset: 59785},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1578, col: 1, offset: 59850},
			expr: &ruleRefExpr{
				pos:  position{line: 1578, col: 16, offset: 59865},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1580, col: 1, offset: 59878},
			expr: &actionExpr{
				pos: position{line: 1580, col: 20, offset: 59897},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1580, col: 20, offset: 59897},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1580, col: 29, offset: 59906},
						expr: &seqExpr{
							pos: position{line: 1580, col: 30, offset: 59907},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1580, col: 30, offset: 59907},
									expr: &litMatcher{
										pos:        position{line: 1580, col: 31, offset: 59908},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1580, col: 35, offset: 59912},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1587, col: 1, offset: 60243},
			expr: &actionExpr{
				pos: position{line: 1587, col: 19, offset: 60261},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1587, col: 19, offset: 60261},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1587, col: 19, offset: 60261},
							expr: &ruleRefExpr{
								pos:  position{line: 1587, col: 20, offset: 60262},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1588, col: 5, offset: 60351},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1588, col: 12, offset: 60358},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1588, col: 12, offset: 60358},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1589, col: 11, offset: 60382},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1590, col: 11, offset: 60407},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1591, col: 11, offset: 60432},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1592, col: 11, offset: 60454},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1593, col: 11, offset: 60478},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1594, col: 11, offset: 60507},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1595, col: 11, offset: 60535},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1596, col: 11, offset: 60552},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1600, col: 1, offset: 60597},
			expr: &choiceExpr{
				pos: position{line: 1600, col: 19, offset: 60615},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1600, col: 19, offset: 60615},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1600, col: 19, offset: 60615},
								expr: &ruleRefExpr{
									pos:  position{line: 1600, col: 21, offset: 60617},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1600, col: 31, offset: 60627},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1601, col: 19, offset: 60699},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1602, col: 19, offset: 60740},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1603, col: 19, offset: 60782},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1604, col: 19, offset: 60824},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1605, col: 19, offset: 60866},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1606, col: 19, offset: 60905},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1607, col: 19, offset: 60946},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1609, col: 1, offset: 60975},
			expr: &choiceExpr{
				pos: position{line: 1609, col: 20, offset: 60994},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1609, col: 20, offset: 60994},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1609, col: 36, offset: 61010},
						name: "VerbatimLine",
					},
				},
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1611, col: 1, offset: 61026},
			expr: &actionExpr{
				pos: position{line: 1611, col: 17, offset: 61042},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1611, col: 17, offset: 61042},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1611, col: 17, offset: 61042},
							expr: &ruleRefExpr{
								pos:  position{line: 1611, col: 18, offset: 61043},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1611, col: 22, offset: 61047},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1611, col: 31, offset: 61056},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1611, col: 52, offset: 61077},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1611, col: 61, offset: 61086},
								expr: &ruleRefExpr{
									pos:  position{line: 1611, col: 62, offset: 61087},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1611, col: 73, offset: 61098},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1615, col: 1, offset: 61172},
			expr: &actionExpr{
				pos: position{line: 1615, col: 24, offset: 61195},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1615, col: 24, offset: 61195},
					expr: &seqExpr{
						pos: position{line: 1615, col: 25, offset: 61196},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1615, col: 25, offset: 61196},
								expr: &ruleRefExpr{
									pos:  position{line: 1615, col: 26, offset: 61197},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1615, col: 36, offset: 61207},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1615, col: 36, offset: 61207},
										expr: &ruleRefExpr{
											pos:  position{line: 1615, col: 36, offset: 61207},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1615, col: 45, offset: 61216},
										expr: &charClassMatcher{
											pos:        position{line: 1615, col: 45, offset: 61216},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1619, col: 1, offset: 61270},
			expr: &oneOrMoreExpr{
				pos: position{line: 1619, col: 13, offset: 61282},
				expr: &ruleRefExpr{
					pos:  position{line: 1619, col: 13, offset: 61282},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1621, col: 1, offset: 61294},
			expr: &actionExpr{
				pos: position{line: 1621, col: 12, offset: 61305},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1621, col: 12, offset: 61305},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1621, col: 12, offset: 61305},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1621, col: 16, offset: 61309},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1621, col: 21, offset: 61314},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1621, col: 21, offset: 61314},
									expr: &charClassMatcher{
										pos:        position{line: 1621, col: 21, offset: 61314},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1621, col: 69, offset: 61362},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1621, col: 73, offset: 61366},
							expr: &ruleRefExpr{
								pos:  position{line: 1621, col: 73, offset: 61366},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1621, col: 80, offset: 61373},
							expr: &choiceExpr{
								pos: position{line: 1621, col: 82, offset: 61375},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1621, col: 82, offset: 61375},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1621, col: 88, offset: 61381},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1625, col: 1, offset: 61438},
			expr: &actionExpr{
				pos: position{line: 1625, col: 20, offset: 61457},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1625, col: 20, offset: 61457},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1625, col: 20, offset: 61457},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1625, col: 25, offset: 61462},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1625, col: 48, offset: 61485},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1625, col: 61, offset: 61498},
								expr: &ruleRefExpr{
									pos:  position{line: 1625, col: 61, offset: 61498},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1629, col: 1, offset: 61599},
			expr: &actionExpr{
				pos: position{line: 1629, col: 26, offset: 61624},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1629, col: 26, offset: 61624},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1629, col: 26, offset: 61624},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1629, col: 30, offset: 61628},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1629, col: 35, offset: 61633},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1629, col: 35, offset: 61633},
									expr: &charClassMatcher{
										pos:        position{line: 1629, col: 35, offset: 61633},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1629, col: 83, offset: 61681},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1629, col: 87, offset: 61685},
							expr: &ruleRefExpr{
								pos:  position{line: 1629, col: 87, offset: 61685},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1636, col: 1, offset: 61919},
			expr: &seqExpr{
				pos: position{line: 1636, col: 25, offset: 61943},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1636, col: 25, offset: 61943},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1636, col: 31, offset: 61949},
						expr: &ruleRefExpr{
							pos:  position{line: 1636, col: 31, offset: 61949},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1636, col: 38, offset: 61956},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1638, col: 1, offset: 62018},
			expr: &seqExpr{
				pos: position{line: 1638, col: 30, offset: 62047},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1638, col: 30, offset: 62047},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1638, col: 36, offset: 62053},
						expr: &ruleRefExpr{
							pos:  position{line: 1638, col: 36, offset: 62053},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1638, col: 43, offset: 62060},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1640, col: 1, offset: 62067},
			expr: &choiceExpr{
				pos: position{line: 1640, col: 28, offset: 62094},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1640, col: 29, offset: 62095},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1640, col: 29, offset: 62095},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1640, col: 35, offset: 62101},
								expr: &ruleRefExpr{
									pos:  position{line: 1640, col: 35, offset: 62101},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1640, col: 42, offset: 62108},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1640, col: 49, offset: 62115},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1642, col: 1, offset: 62122},
			expr: &actionExpr{
				pos: position{line: 1642, col: 16, offset: 62137},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1642, col: 16, offset: 62137},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1642, col: 16, offset: 62137},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1642, col: 27, offset: 62148},
								expr: &ruleRefExpr{
									pos:  position{line: 1642, col: 28, offset: 62149},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1642, col: 41, offset: 62162},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1642, col: 67, offset: 62188},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1642, col: 76, offset: 62197},
								name: "FencedBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1642, col: 104, offset: 62225},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockVerbatimContent",
			pos:  position{line: 1646, col: 1, offset: 62344},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1646, col: 31, offset: 62374},
				expr: &actionExpr{
					pos: position{line: 1646, col: 32, offset: 62375},
					run: (*parser).callonFencedBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1646, col: 32, offset: 62375},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1646, col: 32, offset: 62375},
								expr: &ruleRefExpr{
									pos:  position{line: 1646, col: 33, offset: 62376},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1646, col: 57, offset: 62400},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1646, col: 66, offset: 62409},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1653, col: 1, offset: 62753},
			expr: &seqExpr{
				pos: position{line: 1653, col: 26, offset: 62778},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1653, col: 26, offset: 62778},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1653, col: 33, offset: 62785},
						expr: &ruleRefExpr{
							pos:  position{line: 1653, col: 33, offset: 62785},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1653, col: 40, offset: 62792},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1655, col: 1, offset: 62799},
			expr: &seqExpr{
				pos: position{line: 1655, col: 31, offset: 62829},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1655, col: 31, offset: 62829},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1655, col: 38, offset: 62836},
						expr: &ruleRefExpr{
							pos:  position{line: 1655, col: 38, offset: 62836},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1655, col: 45, offset: 62843},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1657, col: 1, offset: 62850},
			expr: &choiceExpr{
				pos: position{line: 1657, col: 29, offset: 62878},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1657, col: 30, offset: 62879},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1657, col: 30, offset: 62879},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1657, col: 37, offset: 62886},
								expr: &ruleRefExpr{
									pos:  position{line: 1657, col: 37, offset: 62886},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1657, col: 44, offset: 62893},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1657, col: 51, offset: 62900},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1659, col: 1, offset: 62907},
			expr: &actionExpr{
				pos: position{line: 1659, col: 17, offset: 62923},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1659, col: 17, offset: 62923},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1659, col: 17, offset: 62923},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1659, col: 28, offset: 62934},
								expr: &ruleRefExpr{
									pos:  position{line: 1659, col: 29, offset: 62935},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1659, col: 42, offset: 62948},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1659, col: 69, offset: 62975},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1659, col: 78, offset: 62984},
								name: "ListingBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1659, col: 107, offset: 63013},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockVerbatimContent",
			pos:  position{line: 1663, col: 1, offset: 63134},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1663, col: 32, offset: 63165},
				expr: &actionExpr{
					pos: position{line: 1663, col: 33, offset: 63166},
					run: (*parser).callonListingBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1663, col: 33, offset: 63166},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1663, col: 33, offset: 63166},
								expr: &ruleRefExpr{
									pos:  position{line: 1663, col: 34, offset: 63167},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1663, col: 59, offset: 63192},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1663, col: 68, offset: 63201},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1670, col: 1, offset: 63545},
			expr: &seqExpr{
				pos: position{line: 1670, col: 26, offset: 63570},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1670, col: 26, offset: 63570},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1670, col: 33, offset: 63577},
						expr: &ruleRefExpr{
							pos:  position{line: 1670, col: 33, offset: 63577},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1670, col: 40, offset: 63584},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1672, col: 1, offset: 63591},
			expr: &seqExpr{
				pos: position{line: 1672, col: 31, offset: 63621},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1672, col: 31, offset: 63621},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1672, col: 38, offset: 63628},
						expr: &ruleRefExpr{
							pos:  position{line: 1672, col: 38, offset: 63628},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1672, col: 45, offset: 63635},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1674, col: 1, offset: 63642},
			expr: &choiceExpr{
				pos: position{line: 1674, col: 29, offset: 63670},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1674, col: 30, offset: 63671},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1674, col: 30, offset: 63671},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1674, col: 37, offset: 63678},
								expr: &ruleRefExpr{
									pos:  position{line: 1674, col: 37, offset: 63678},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1674, col: 44, offset: 63685},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1674, col: 51, offset: 63692},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1676, col: 1, offset: 63699},
			expr: &actionExpr{
				pos: position{line: 1676, col: 17, offset: 63715},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1676, col: 17, offset: 63715},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1676, col: 17, offset: 63715},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1676, col: 28, offset: 63726},
								expr: &ruleRefExpr{
									pos:  position{line: 1676, col: 29, offset: 63727},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1676, col: 42, offset: 63740},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1676, col: 69, offset: 63767},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1676, col: 78, offset: 63776},
								name: "ExampleBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1676, col: 107, offset: 63805},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockVerbatimContent",
			pos:  position{line: 1680, col: 1, offset: 63926},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1680, col: 32, offset: 63957},
				expr: &actionExpr{
					pos: position{line: 1680, col: 33, offset: 63958},
					run: (*parser).callonExampleBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1680, col: 33, offset: 63958},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1680, col: 33, offset: 63958},
								expr: &ruleRefExpr{
									pos:  position{line: 1680, col: 34, offset: 63959},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1680, col: 59, offset: 63984},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1680, col: 68, offset: 63993},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1687, col: 1, offset: 64335},
			expr: &seqExpr{
				pos: position{line: 1687, col: 24, offset: 64358},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1687, col: 24, offset: 64358},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1687, col: 31, offset: 64365},
						expr: &ruleRefExpr{
							pos:  position{line: 1687, col: 31, offset: 64365},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1687, col: 38, offset: 64372},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1689, col: 1, offset: 64404},
			expr: &seqExpr{
				pos: position{line: 1689, col: 29, offset: 64432},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1689, col: 29, offset: 64432},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1689, col: 36, offset: 64439},
						expr: &ruleRefExpr{
							pos:  position{line: 1689, col: 36, offset: 64439},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1689, col: 43, offset: 64446},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1691, col: 1, offset: 64478},
			expr: &choiceExpr{
				pos: position{line: 1691, col: 27, offset: 64504},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1691, col: 28, offset: 64505},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1691, col: 28, offset: 64505},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1691, col: 35, offset: 64512},
								expr: &ruleRefExpr{
									pos:  position{line: 1691, col: 35, offset: 64512},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1691, col: 42, offset: 64519},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1691, col: 49, offset: 64526},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1693, col: 1, offset: 64558},
			expr: &actionExpr{
				pos: position{line: 1693, col: 15, offset: 64572},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1693, col: 15, offset: 64572},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1693, col: 15, offset: 64572},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1693, col: 26, offset: 64583},
								expr: &ruleRefExpr{
									pos:  position{line: 1693, col: 27, offset: 64584},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1693, col: 40, offset: 64597},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1693, col: 65, offset: 64622},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1693, col: 74, offset: 64631},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1693, col: 101, offset: 64658},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1697, col: 1, offset: 64775},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1697, col: 30, offset: 64804},
				expr: &actionExpr{
					pos: position{line: 1697, col: 31, offset: 64805},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1697, col: 31, offset: 64805},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1697, col: 31, offset: 64805},
								expr: &ruleRefExpr{
									pos:  position{line: 1697, col: 32, offset: 64806},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1697, col: 55, offset: 64829},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1697, col: 64, offset: 64838},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1704, col: 1, offset: 65182},
			expr: &seqExpr{
				pos: position{line: 1704, col: 26, offset: 65207},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1704, col: 26, offset: 65207},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1704, col: 33, offset: 65214},
						expr: &ruleRefExpr{
							pos:  position{line: 1704, col: 33, offset: 65214},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1704, col: 40, offset: 65221},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1706, col: 1, offset: 65228},
			expr: &seqExpr{
				pos: position{line: 1706, col: 31, offset: 65258},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1706, col: 31, offset: 65258},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1706, col: 38, offset: 65265},
						expr: &ruleRefExpr{
							pos:  position{line: 1706, col: 38, offset: 65265},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1706, col: 45, offset: 65272},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1708, col: 1, offset: 65279},
			expr: &choiceExpr{
				pos: position{line: 1708, col: 29, offset: 65307},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1708, col: 30, offset: 65308},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1708, col: 30, offset: 65308},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1708, col: 37, offset: 65315},
								expr: &ruleRefExpr{
									pos:  position{line: 1708, col: 37, offset: 65315},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1708, col: 44, offset: 65322},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1708, col: 51, offset: 65329},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1710, col: 1, offset: 65336},
			expr: &actionExpr{
				pos: position{line: 1710, col: 17, offset: 65352},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1710, col: 17, offset: 65352},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1710, col: 17, offset: 65352},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1710, col: 28, offset: 65363},
								expr: &ruleRefExpr{
									pos:  position{line: 1710, col: 29, offset: 65364},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1710, col: 42, offset: 65377},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1710, col: 69, offset: 65404},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1710, col: 78, offset: 65413},
								name: "SidebarBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1710, col: 107, offset: 65442},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockVerbatimContent",
			pos:  position{line: 1714, col: 1, offset: 65563},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1714, col: 32, offset: 65594},
				expr: &actionExpr{
					pos: position{line: 1714, col: 33, offset: 65595},
					run: (*parser).callonSidebarBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1714, col: 33, offset: 65595},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1714, col: 33, offset: 65595},
								expr: &ruleRefExpr{
									pos:  position{line: 1714, col: 34, offset: 65596},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1714, col: 59, offset: 65621},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1714, col: 68, offset: 65630},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1721, col: 1, offset: 65978},
			expr: &seqExpr{
				pos: position{line: 1721, col: 30, offset: 66007},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1721, col: 30, offset: 66007},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1721, col: 37, offset: 66014},
						expr: &ruleRefExpr{
							pos:  position{line: 1721, col: 37, offset: 66014},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1721, col: 44, offset: 66021},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1723, col: 1, offset: 66028},
			expr: &seqExpr{
				pos: position{line: 1723, col: 35, offset: 66062},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1723, col: 35, offset: 66062},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1723, col: 42, offset: 66069},
						expr: &ruleRefExpr{
							pos:  position{line: 1723, col: 42, offset: 66069},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1723, col: 49, offset: 66076},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1725, col: 1, offset: 66083},
			expr: &choiceExpr{
				pos: position{line: 1725, col: 33, offset: 66115},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1725, col: 34, offset: 66116},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1725, col: 34, offset: 66116},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1725, col: 41, offset: 66123},
								expr: &ruleRefExpr{
									pos:  position{line: 1725, col: 41, offset: 66123},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1725, col: 48, offset: 66130},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1725, col: 55, offset: 66137},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1727, col: 1, offset: 66144},
			expr: &actionExpr{
				pos: position{line: 1727, col: 21, offset: 66164},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1727, col: 21, offset: 66164},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1727, col: 21, offset: 66164},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1727, col: 32, offset: 66175},
								expr: &ruleRefExpr{
									pos:  position{line: 1727, col: 33, offset: 66176},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1727, col: 46, offset: 66189},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1727, col: 77, offset: 66220},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1727, col: 86, offset: 66229},
								name: "PassthroughBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1727, col: 119, offset: 66262},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockVerbatimContent",
			pos:  position{line: 1731, col: 1, offset: 66391},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1731, col: 36, offset: 66426},
				expr: &actionExpr{
					pos: position{line: 1731, col: 37, offset: 66427},
					run: (*parser).callonPassthroughBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1731, col: 37, offset: 66427},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1731, col: 37, offset: 66427},
								expr: &ruleRefExpr{
									pos:  position{line: 1731, col: 38, offset: 66428},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1731, col: 67, offset: 66457},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1731, col: 76, offset: 66466},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1736, col: 1, offset: 66630},
			expr: &actionExpr{
				pos: position{line: 1736, col: 18, offset: 66647},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1736, col: 18, offset: 66647},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1736, col: 19, offset: 66648},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1736, col: 19, offset: 66648},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1736, col: 27, offset: 66656},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1736, col: 37, offset: 66666},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1736, col: 45, offset: 66674},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1736, col: 55, offset: 66684},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1736, col: 63, offset: 66692},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1736, col: 72, offset: 66701},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1744, col: 1, offset: 66959},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1744, col: 23, offset: 66981},
				expr: &ruleRefExpr{
					pos:  position{line: 1744, col: 23, offset: 66981},
					name: "NormalBlockElement",
				},
			},
		},
		{
			name: "NormalBlockElement",
			pos:  position{line: 1746, col: 1, offset: 67004},
			expr: &actionExpr{
				pos: position{line: 1747, col: 5, offset: 67032},
				run: (*parser).callonNormalBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1747, col: 5, offset: 67032},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1747, col: 5, offset: 67032},
							expr: &ruleRefExpr{
								pos:  position{line: 1747, col: 6, offset: 67033},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1747, col: 10, offset: 67037},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1747, col: 19, offset: 67046},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1747, col: 19, offset: 67046},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1748, col: 15, offset: 67072},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1749, col: 15, offset: 67101},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1750, col: 15, offset: 67127},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 1751, col: 15, offset: 67156},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1752, col: 15, offset: 67188},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1753, col: 15, offset: 67222},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1754, col: 15, offset: 67254},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1755, col: 15, offset: 67294},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1756, col: 15, offset: 67324},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1757, col: 15, offset: 67353},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1758, col: 15, offset: 67390},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1759, col: 15, offset: 67421},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1760, col: 15, offset: 67463},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1764, col: 1, offset: 67516},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1764, col: 22, offset: 67537},
				expr: &ruleRefExpr{
					pos:  position{line: 1764, col: 22, offset: 67537},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1766, col: 1, offset: 67559},
			expr: &actionExpr{
				pos: position{line: 1766, col: 22, offset: 67580},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1766, col: 22, offset: 67580},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1766, col: 22, offset: 67580},
							expr: &ruleRefExpr{
								pos:  position{line: 1766, col: 23, offset: 67581},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1766, col: 27, offset: 67585},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1766, col: 36, offset: 67594},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1766, col: 36, offset: 67594},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1766, col: 48, offset: 67606},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1770, col: 1, offset: 67660},
			expr: &actionExpr{
				pos: position{line: 1770, col: 24, offset: 67683},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1770, col: 24, offset: 67683},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1770, col: 30, offset: 67689},
						expr: &ruleRefExpr{
							pos:  position{line: 1770, col: 31, offset: 67690},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1774, col: 1, offset: 67784},
			expr: &actionExpr{
				pos: position{line: 1774, col: 28, offset: 67811},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1774, col: 28, offset: 67811},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1774, col: 28, offset: 67811},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1774, col: 37, offset: 67820},
								expr: &ruleRefExpr{
									pos:  position{line: 1774, col: 38, offset: 67821},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1774, col: 54, offset: 67837},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1781, col: 1, offset: 68086},
			expr: &actionExpr{
				pos: position{line: 1781, col: 10, offset: 68095},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1781, col: 10, offset: 68095},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1781, col: 10, offset: 68095},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1781, col: 16, offset: 68101},
								expr: &zeroOrMoreExpr{
									pos: position{line: 1781, col: 17, offset: 68102},
									expr: &ruleRefExpr{
										pos:  position{line: 1781, col: 17, offset: 68102},
										name: "BlockAttrs",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1781, col: 31, offset: 68116},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1782, col: 5, offset: 68136},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1782, col: 12, offset: 68143},
								expr: &ruleRefExpr{
									pos:  position{line: 1782, col: 13, offset: 68144},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1783, col: 5, offset: 68167},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1783, col: 11, offset: 68173},
								expr: &ruleRefExpr{
									pos:  position{line: 1783, col: 12, offset: 68174},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1784, col: 6, offset: 68192},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1784, col: 6, offset: 68192},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1784, col: 23, offset: 68209},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1788, col: 1, offset: 68323},
			expr: &seqExpr{
				pos: position{line: 1788, col: 23, offset: 68345},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1788, col: 23, offset: 68345},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1788, col: 27, offset: 68349},
						expr: &ruleRefExpr{
							pos:  position{line: 1788, col: 27, offset: 68349},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1790, col: 1, offset: 68359},
			expr: &seqExpr{
				pos: position{line: 1790, col: 19, offset: 68377},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1790, col: 19, offset: 68377},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1790, col: 26, offset: 68384},
						expr: &ruleRefExpr{
							pos:  position{line: 1790, col: 26, offset: 68384},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1790, col: 33, offset: 68391},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1793, col: 1, offset: 68462},
			expr: &actionExpr{
				pos: position{line: 1793, col: 20, offset: 68481},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1793, col: 20, offset: 68481},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1793, col: 20, offset: 68481},
							expr: &ruleRefExpr{
								pos:  position{line: 1793, col: 21, offset: 68482},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1793, col: 36, offset: 68497},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1793, col: 42, offset: 68503},
								expr: &ruleRefExpr{
									pos:  position{line: 1793, col: 43, offset: 68504},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1793, col: 55, offset: 68516},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1793, col: 59, offset: 68520},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1797, col: 1, offset: 68592},
			expr: &actionExpr{
				pos: position{line: 1797, col: 14, offset: 68605},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1797, col: 14, offset: 68605},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1797, col: 14, offset: 68605},
							expr: &ruleRefExpr{
								pos:  position{line: 1797, col: 15, offset: 68606},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1797, col: 30, offset: 68621},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1797, col: 36, offset: 68627},
								expr: &ruleRefExpr{
									pos:  position{line: 1797, col: 37, offset: 68628},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1797, col: 49, offset: 68640},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1797, col: 53, offset: 68644},
							expr: &ruleRefExpr{
								pos:  position{line: 1797, col: 53, offset: 68644},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1801, col: 1, offset: 68717},
			expr: &actionExpr{
				pos: position{line: 1801, col: 14, offset: 68730},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1801, col: 14, offset: 68730},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1801, col: 14, offset: 68730},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1801, col: 33, offset: 68749},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1801, col: 42, offset: 68758},
								expr: &seqExpr{
									pos: position{line: 1801, col: 43, offset: 68759},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1801, col: 43, offset: 68759},
											expr: &ruleRefExpr{
												pos:  position{line: 1801, col: 44, offset: 68760},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1801, col: 63, offset: 68779},
											expr: &ruleRefExpr{
												pos:  position{line: 1801, col: 64, offset: 68780},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1801, col: 68, offset: 68784},
											expr: &ruleRefExpr{
												pos:  position{line: 1801, col: 68, offset: 68784},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1801, col: 75, offset: 68791},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1801, col: 89, offset: 68805},
											expr: &ruleRefExpr{
												pos:  position{line: 1801, col: 89, offset: 68805},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1808, col: 1, offset: 69061},
			expr: &seqExpr{
				pos: position{line: 1808, col: 26, offset: 69086},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1808, col: 26, offset: 69086},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1808, col: 33, offset: 69093},
						expr: &ruleRefExpr{
							pos:  position{line: 1808, col: 33, offset: 69093},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1808, col: 40, offset: 69100},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1810, col: 1, offset: 69107},
			expr: &seqExpr{
				pos: position{line: 1810, col: 31, offset: 69137},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1810, col: 31, offset: 69137},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1810, col: 38, offset: 69144},
						expr: &ruleRefExpr{
							pos:  position{line: 1810, col: 38, offset: 69144},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1810, col: 45, offset: 69151},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1812, col: 1, offset: 69158},
			expr: &choiceExpr{
				pos: position{line: 1812, col: 29, offset: 69186},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1812, col: 30, offset: 69187},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1812, col: 30, offset: 69187},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1812, col: 37, offset: 69194},
								expr: &ruleRefExpr{
									pos:  position{line: 1812, col: 37, offset: 69194},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1812, col: 44, offset: 69201},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1812, col: 51, offset: 69208},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1814, col: 1, offset: 69215},
			expr: &actionExpr{
				pos: position{line: 1814, col: 17, offset: 69231},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1814, col: 17, offset: 69231},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1814, col: 17, offset: 69231},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1814, col: 44, offset: 69258},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1814, col: 53, offset: 69267},
								name: "CommentBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1814, col: 83, offset: 69297},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockVerbatimContent",
			pos:  position{line: 1818, col: 1, offset: 69411},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1818, col: 32, offset: 69442},
				expr: &actionExpr{
					pos: position{line: 1818, col: 33, offset: 69443},
					run: (*parser).callonCommentBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1818, col: 33, offset: 69443},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1818, col: 33, offset: 69443},
								expr: &ruleRefExpr{
									pos:  position{line: 1818, col: 34, offset: 69444},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1818, col: 59, offset: 69469},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1818, col: 68, offset: 69478},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1822, col: 1, offset: 69623},
			expr: &actionExpr{
				pos: position{line: 1822, col: 22, offset: 69644},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1822, col: 22, offset: 69644},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1822, col: 22, offset: 69644},
							expr: &ruleRefExpr{
								pos:  position{line: 1822, col: 23, offset: 69645},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1822, col: 45, offset: 69667},
							expr: &ruleRefExpr{
								pos:  position{line: 1822, col: 45, offset: 69667},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1822, col: 52, offset: 69674},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1822, col: 57, offset: 69679},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1822, col: 66, offset: 69688},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1822, col: 92, offset: 69714},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1826, col: 1, offset: 69783},
			expr: &actionExpr{
				pos: position{line: 1826, col: 29, offset: 69811},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1826, col: 29, offset: 69811},
					expr: &charClassMatcher{
						pos:        position{line: 1826, col: 29, offset: 69811},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1834, col: 1, offset: 70132},
			expr: &choiceExpr{
				pos: position{line: 1834, col: 17, offset: 70148},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1834, col: 17, offset: 70148},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1834, col: 49, offset: 70180},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1834, col: 78, offset: 70209},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1836, col: 1, offset: 70247},
			expr: &litMatcher{
				pos:        position{line: 1836, col: 26, offset: 70272},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1839, col: 1, offset: 70347},
			expr: &actionExpr{
				pos: position{line: 1839, col: 31, offset: 70377},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1839, col: 31, offset: 70377},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1839, col: 31, offset: 70377},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1839, col: 42, offset: 70388},
								expr: &ruleRefExpr{
									pos:  position{line: 1839, col: 43, offset: 70389},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1839, col: 56, offset: 70402},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1839, col: 63, offset: 70409},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1844, col: 1, offset: 70644},
			expr: &actionExpr{
				pos: position{line: 1845, col: 5, offset: 70685},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1845, col: 5, offset: 70685},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1845, col: 5, offset: 70685},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1845, col: 16, offset: 70696},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1845, col: 16, offset: 70696},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1845, col: 16, offset: 70696},
											expr: &ruleRefExpr{
												pos:  position{line: 1845, col: 16, offset: 70696},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1845, col: 23, offset: 70703},
											expr: &charClassMatcher{
												pos:        position{line: 1845, col: 23, offset: 70703},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1847, col: 8, offset: 70758},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1848, col: 5, offset: 70822},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1848, col: 16, offset: 70833},
								expr: &actionExpr{
									pos: position{line: 1849, col: 9, offset: 70844},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 1849, col: 9, offset: 70844},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1849, col: 9, offset: 70844},
												expr: &ruleRefExpr{
													pos:  position{line: 1849, col: 10, offset: 70845},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1850, col: 9, offset: 70865},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1850, col: 20, offset: 70876},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 1850, col: 20, offset: 70876},
														expr: &charClassMatcher{
															pos:        position{line: 1850, col: 20, offset: 70876},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1852, col: 12, offset: 70939},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1859, col: 1, offset: 71176},
			expr: &actionExpr{
				pos: position{line: 1859, col: 39, offset: 71214},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1859, col: 39, offset: 71214},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1859, col: 39, offset: 71214},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1859, col: 50, offset: 71225},
								expr: &ruleRefExpr{
									pos:  position{line: 1859, col: 51, offset: 71226},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1860, col: 9, offset: 71248},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1860, col: 31, offset: 71270},
							expr: &ruleRefExpr{
								pos:  position{line: 1860, col: 31, offset: 71270},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1860, col: 38, offset: 71277},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1860, col: 46, offset: 71285},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1860, col: 53, offset: 71292},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1860, col: 95, offset: 71334},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1860, col: 96, offset: 71335},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1860, col: 96, offset: 71335},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1860, col: 118, offset: 71357},
											expr: &ruleRefExpr{
												pos:  position{line: 1860, col: 118, offset: 71357},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1860, col: 125, offset: 71364},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1860, col: 132, offset: 71371},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1865, col: 1, offset: 71535},
			expr: &actionExpr{
				pos: position{line: 1865, col: 44, offset: 71578},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1865, col: 44, offset: 71578},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1865, col: 50, offset: 71584},
						expr: &ruleRefExpr{
							pos:  position{line: 1865, col: 51, offset: 71585},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1869, col: 1, offset: 71673},
			expr: &actionExpr{
				pos: position{line: 1870, col: 5, offset: 71729},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1870, col: 5, offset: 71729},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1870, col: 5, offset: 71729},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1870, col: 11, offset: 71735},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 1870, col: 11, offset: 71735},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1870, col: 11, offset: 71735},
											expr: &ruleRefExpr{
												pos:  position{line: 1870, col: 12, offset: 71736},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1870, col: 34, offset: 71758},
											expr: &charClassMatcher{
												pos:        position{line: 1870, col: 34, offset: 71758},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1872, col: 8, offset: 71813},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1877, col: 1, offset: 71944},
			expr: &actionExpr{
				pos: position{line: 1878, col: 5, offset: 71983},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1878, col: 5, offset: 71983},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1878, col: 5, offset: 71983},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1878, col: 16, offset: 71994},
								expr: &ruleRefExpr{
									pos:  position{line: 1878, col: 17, offset: 71995},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1879, col: 5, offset: 72013},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1886, col: 5, offset: 72227},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1886, col: 12, offset: 72234},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1890, col: 1, offset: 72388},
			expr: &actionExpr{
				pos: position{line: 1890, col: 16, offset: 72403},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1890, col: 16, offset: 72403},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1895, col: 1, offset: 72491},
			expr: &actionExpr{
				pos: position{line: 1895, col: 39, offset: 72529},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1895, col: 39, offset: 72529},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1895, col: 45, offset: 72535},
						expr: &ruleRefExpr{
							pos:  position{line: 1895, col: 46, offset: 72536},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1899, col: 1, offset: 72620},
			expr: &actionExpr{
				pos: position{line: 1899, col: 38, offset: 72657},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1899, col: 38, offset: 72657},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1899, col: 38, offset: 72657},
							expr: &ruleRefExpr{
								pos:  position{line: 1899, col: 39, offset: 72658},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1899, col: 49, offset: 72668},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1899, col: 58, offset: 72677},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1899, col: 58, offset: 72677},
									expr: &charClassMatcher{
										pos:        position{line: 1899, col: 58, offset: 72677},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1901, col: 4, offset: 72724},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1908, col: 1, offset: 72917},
			expr: &actionExpr{
				pos: position{line: 1908, col: 14, offset: 72930},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1908, col: 14, offset: 72930},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1908, col: 14, offset: 72930},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1908, col: 19, offset: 72935},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1908, col: 25, offset: 72941},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1908, col: 43, offset: 72959},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1912, col: 1, offset: 73028},
			expr: &actionExpr{
				pos: position{line: 1912, col: 21, offset: 73048},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1912, col: 21, offset: 73048},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1912, col: 30, offset: 73057},
						expr: &choiceExpr{
							pos: position{line: 1912, col: 31, offset: 73058},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1912, col: 31, offset: 73058},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 1912, col: 38, offset: 73065},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1912, col: 53, offset: 73080},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1912, col: 66, offset: 73093},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 1912, col: 74, offset: 73101},
									run: (*parser).callonIndexTermContent9,
									expr: &seqExpr{
										pos: position{line: 1912, col: 75, offset: 73102},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1912, col: 75, offset: 73102},
												expr: &litMatcher{
													pos:        position{line: 1912, col: 76, offset: 73103},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1912, col: 81, offset: 73108,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 1918, col: 1, offset: 73220},
			expr: &actionExpr{
				pos: position{line: 1918, col: 23, offset: 73242},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1918, col: 23, offset: 73242},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1918, col: 23, offset: 73242},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 1918, col: 29, offset: 73248},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1918, col: 36, offset: 73255},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1919, col: 5, offset: 73288},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1919, col: 11, offset: 73294},
								expr: &actionExpr{
									pos: position{line: 1919, col: 12, offset: 73295},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1919, col: 12, offset: 73295},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1919, col: 12, offset: 73295},
												expr: &ruleRefExpr{
													pos:  position{line: 1919, col: 12, offset: 73295},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1919, col: 19, offset: 73302},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1919, col: 23, offset: 73306},
												expr: &ruleRefExpr{
													pos:  position{line: 1919, col: 23, offset: 73306},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1919, col: 30, offset: 73313},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1919, col: 39, offset: 73322},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1920, col: 5, offset: 73381},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1920, col: 11, offset: 73387},
								expr: &actionExpr{
									pos: position{line: 1920, col: 12, offset: 73388},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1920, col: 12, offset: 73388},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1920, col: 12, offset: 73388},
												expr: &ruleRefExpr{
													pos:  position{line: 1920, col: 12, offset: 73388},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1920, col: 19, offset: 73395},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1920, col: 23, offset: 73399},
												expr: &ruleRefExpr{
													pos:  position{line: 1920, col: 23, offset: 73399},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1920, col: 30, offset: 73406},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1920, col: 39, offset: 73415},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1921, col: 5, offset: 73474},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 1925, col: 1, offset: 73557},
			expr: &actionExpr{
				pos: position{line: 1925, col: 30, offset: 73586},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1925, col: 30, offset: 73586},
					expr: &choiceExpr{
						pos: position{line: 1925, col: 31, offset: 73587},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1925, col: 31, offset: 73587},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 1925, col: 42, offset: 73598},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1932, col: 1, offset: 73754},
			expr: &actionExpr{
				pos: position{line: 1932, col: 14, offset: 73767},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1932, col: 14, offset: 73767},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1932, col: 14, offset: 73767},
							expr: &ruleRefExpr{
								pos:  position{line: 1932, col: 15, offset: 73768},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1932, col: 19, offset: 73772},
							expr: &ruleRefExpr{
								pos:  position{line: 1932, col: 19, offset: 73772},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1932, col: 26, offset: 73779},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 1940, col: 1, offset: 73932},
			expr: &choiceExpr{
				pos: position{line: 1940, col: 11, offset: 73942},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1940, col: 11, offset: 73942},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1940, col: 24, offset: 73955},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 1940, col: 36, offset: 73967},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 1940, col: 48, offset: 73979},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 1940, col: 61, offset: 73992},
						name: "Ellipsis",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1942, col: 1, offset: 74004},
			expr: &actionExpr{
				pos: position{line: 1942, col: 15, offset: 74018},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 1942, col: 15, offset: 74018},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 1945, col: 1, offset: 74074},
			expr: &actionExpr{
				pos: position{line: 1945, col: 14, offset: 74087},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 1945, col: 14, offset: 74087},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 1948, col: 1, offset: 74144},
			expr: &actionExpr{
				pos: position{line: 1948, col: 14, offset: 74157},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 1948, col: 14, offset: 74157},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 1951, col: 1, offset: 74215},
			expr: &actionExpr{
				pos: position{line: 1951, col: 15, offset: 74229},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 1951, col: 15, offset: 74229},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 1954, col: 1, offset: 74286},
			expr: &actionExpr{
				pos: position{line: 1954, col: 13, offset: 74298},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 1954, col: 13, offset: 74298},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 1962, col: 1, offset: 74581},
			expr: &actionExpr{
				pos: position{line: 1962, col: 22, offset: 74602},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 1962, col: 22, offset: 74602},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1962, col: 22, offset: 74602},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 1962, col: 31, offset: 74611},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 1962, col: 35, offset: 74615},
							expr: &charClassMatcher{
								pos:        position{line: 1962, col: 36, offset: 74616},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1969, col: 1, offset: 74803},
			expr: &charClassMatcher{
				pos:        position{line: 1969, col: 13, offset: 74815},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1971, col: 1, offset: 74827},
			expr: &choiceExpr{
				pos: position{line: 1971, col: 16, offset: 74842},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1971, col: 16, offset: 74842},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1971, col: 22, offset: 74848},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1971, col: 28, offset: 74854},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1971, col: 34, offset: 74860},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1971, col: 40, offset: 74866},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1971, col: 46, offset: 74872},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1973, col: 1, offset: 74880},
			expr: &actionExpr{
				pos: position{line: 1973, col: 14, offset: 74893},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1973, col: 14, offset: 74893},
					expr: &charClassMatcher{
						pos:        position{line: 1973, col: 14, offset: 74893},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1977, col: 1, offset: 74943},
			expr: &choiceExpr{
				pos: position{line: 1981, col: 5, offset: 75274},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1981, col: 5, offset: 75274},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1981, col: 5, offset: 75274},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1981, col: 5, offset: 75274},
									expr: &charClassMatcher{
										pos:        position{line: 1981, col: 5, offset: 75274},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1981, col: 15, offset: 75284},
									expr: &choiceExpr{
										pos: position{line: 1981, col: 17, offset: 75286},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1981, col: 17, offset: 75286},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1981, col: 30, offset: 75299},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1983, col: 9, offset: 75371},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1983, col: 9, offset: 75371},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1983, col: 9, offset: 75371},
									expr: &charClassMatcher{
										pos:        position{line: 1983, col: 9, offset: 75371},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1983, col: 19, offset: 75381},
									expr: &seqExpr{
										pos: position{line: 1983, col: 20, offset: 75382},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1983, col: 20, offset: 75382},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1983, col: 27, offset: 75389},
												expr: &charClassMatcher{
													pos:        position{line: 1983, col: 27, offset: 75389},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1987, col: 1, offset: 75469},
			expr: &choiceExpr{
				pos: position{line: 1988, col: 5, offset: 75551},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1988, col: 5, offset: 75551},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1988, col: 5, offset: 75551},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1988, col: 5, offset: 75551},
									expr: &charClassMatcher{
										pos:        position{line: 1988, col: 5, offset: 75551},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1988, col: 19, offset: 75565},
									expr: &choiceExpr{
										pos: position{line: 1988, col: 21, offset: 75567},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1988, col: 21, offset: 75567},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1988, col: 31, offset: 75577},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1990, col: 9, offset: 75648},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1993, col: 1, offset: 75751},
			expr: &actionExpr{
				pos: position{line: 1993, col: 12, offset: 75762},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1993, col: 12, offset: 75762},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1997, col: 1, offset: 75831},
			expr: &actionExpr{
				pos: position{line: 1997, col: 17, offset: 75847},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1997, col: 17, offset: 75847},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1997, col: 22, offset: 75852},
						expr: &choiceExpr{
							pos: position{line: 1997, col: 23, offset: 75853},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1997, col: 23, offset: 75853},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1997, col: 34, offset: 75864},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 2001, col: 1, offset: 75952},
			expr: &actionExpr{
				pos: position{line: 2001, col: 25, offset: 75976},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2001, col: 25, offset: 75976},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2001, col: 30, offset: 75981},
						expr: &charClassMatcher{
							pos:        position{line: 2001, col: 31, offset: 75982},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2005, col: 1, offset: 76058},
			expr: &actionExpr{
				pos: position{line: 2005, col: 13, offset: 76070},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2005, col: 13, offset: 76070},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2005, col: 13, offset: 76070},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2005, col: 20, offset: 76077},
								expr: &ruleRefExpr{
									pos:  position{line: 2005, col: 21, offset: 76078},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2005, col: 34, offset: 76091},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2005, col: 39, offset: 76096},
								expr: &choiceExpr{
									pos: position{line: 2005, col: 40, offset: 76097},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2005, col: 40, offset: 76097},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2005, col: 51, offset: 76108},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2009, col: 1, offset: 76200},
			expr: &actionExpr{
				pos: position{line: 2009, col: 23, offset: 76222},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2009, col: 23, offset: 76222},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2009, col: 23, offset: 76222},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2009, col: 31, offset: 76230},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2009, col: 43, offset: 76242},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2009, col: 48, offset: 76247},
								expr: &choiceExpr{
									pos: position{line: 2009, col: 49, offset: 76248},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2009, col: 49, offset: 76248},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2009, col: 60, offset: 76259},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 2013, col: 1, offset: 76351},
			expr: &oneOrMoreExpr{
				pos: position{line: 2013, col: 13, offset: 76363},
				expr: &charClassMatcher{
					pos:        position{line: 2013, col: 14, offset: 76364},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 2015, col: 1, offset: 76500},
			expr: &actionExpr{
				pos: position{line: 2015, col: 21, offset: 76520},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 2015, col: 21, offset: 76520},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2015, col: 21, offset: 76520},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2015, col: 29, offset: 76528},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2015, col: 41, offset: 76540},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 2015, col: 47, offset: 76546},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 2020, col: 1, offset: 76799},
			expr: &oneOrMoreExpr{
				pos: position{line: 2020, col: 22, offset: 76820},
				expr: &charClassMatcher{
					pos:        position{line: 2020, col: 23, offset: 76821},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 2022, col: 1, offset: 76955},
			expr: &actionExpr{
				pos: position{line: 2022, col: 9, offset: 76963},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2022, col: 9, offset: 76963},
					expr: &charClassMatcher{
						pos:        position{line: 2022, col: 9, offset: 76963},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 2026, col: 1, offset: 77015},
			expr: &choiceExpr{
				pos: position{line: 2026, col: 15, offset: 77029},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2026, col: 15, offset: 77029},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2026, col: 27, offset: 77041},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2026, col: 40, offset: 77054},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2026, col: 51, offset: 77065},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2026, col: 62, offset: 77076},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 2028, col: 1, offset: 77089},
			expr: &actionExpr{
				pos: position{line: 2028, col: 7, offset: 77095},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2028, col: 7, offset: 77095},
					expr: &charClassMatcher{
						pos:        position{line: 2028, col: 7, offset: 77095},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2032, col: 1, offset: 77224},
			expr: &actionExpr{
				pos: position{line: 2032, col: 10, offset: 77233},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2032, col: 10, offset: 77233},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2036, col: 1, offset: 77279},
			expr: &actionExpr{
				pos: position{line: 2036, col: 11, offset: 77289},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2036, col: 11, offset: 77289},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2036, col: 11, offset: 77289},
							expr: &litMatcher{
								pos:        position{line: 2036, col: 11, offset: 77289},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2036, col: 16, offset: 77294},
							expr: &ruleRefExpr{
								pos:  position{line: 2036, col: 16, offset: 77294},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2040, col: 1, offset: 77350},
			expr: &choiceExpr{
				pos: position{line: 2040, col: 10, offset: 77359},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2040, col: 10, offset: 77359},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2040, col: 16, offset: 77365},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2040, col: 16, offset: 77365},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2044, col: 1, offset: 77410},
			expr: &choiceExpr{
				pos: position{line: 2044, col: 12, offset: 77421},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2044, col: 12, offset: 77421},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2044, col: 21, offset: 77430},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2044, col: 28, offset: 77437},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2046, col: 1, offset: 77445},
			expr: &notExpr{
				pos: position{line: 2046, col: 8, offset: 77452},
				expr: &anyMatcher{
					line: 2046, col: 9, offset: 77453,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2048, col: 1, offset: 77458},
			expr: &choiceExpr{
				pos: position{line: 2048, col: 8, offset: 77465},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2048, col: 8, offset: 77465},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2048, col: 18, offset: 77475},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {

	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {

	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {

	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {

	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {

	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {

	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {

	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {

	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {

	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttributeSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["name"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {

	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {

	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementShortHandAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attrs"])
}

func (c *current) onBlockAttrList1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonBlockAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrList1(stack["attrs"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {

	return types.NewElementStyle(style.(string))
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {

	return types.NewElementNamedAttr("positional-2", value.(string))
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {

	return types.NewElementNamedAttr("positional-3", value.(string))
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {

	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {

	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {

	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {

	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {

	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {

	return types.NewElementOption(option.(string))
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {

	return value.(string), nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onShortHandValuePlain1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1()
}

func (c *current) onNamedAttr1(key, value interface{}) (interface{}, error) {

	return types.NewElementNamedAttr(key.(string), value.(string))
}

func (p *parser) callonNamedAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttr1(stack["key"], stack["value"])
}

func (c *current) onNamedAttrKey1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonNamedAttrKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrKey1()
}

func (c *current) onAttrValuePlain1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttrValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValuePlain1()
}

func (c *current) onAttrValueSingleQuoted1() (interface{}, error) {

	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1()
}

func (c *current) onAttrValueDoubleQuoted1() (interface{}, error) {

	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1()
}

func (c *current) onAttrValueNone1() (interface{}, error) {

	return "", nil
}

func (p *parser) callonAttrValueNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueNone1()
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {

	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {

	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {

	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {

	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {

	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {

	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {

	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attrs, prefix, content interface{}) (interface{}, error) {

	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attrs)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attrs"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attrs, prefix, checkstyle, content interface{}) (interface{}, error) {

	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attrs)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attrs"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {

	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {

	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attrs, term, separator, description interface{}) (interface{}, error) {

	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attrs)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attrs"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {

	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {

	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {

	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {

	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {

	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {

	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {

	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {

	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph26(stack["attributes"])
}

func (c *current) onParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onParagraph31(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph31(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockVerbatimContent2(stack["content"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {

	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {

	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {

	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onContinuedParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {

	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {

	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {

	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {

	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement19(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement19(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {

	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(iconClass, inlineAttributes interface{}) (interface{}, error) {

	return types.NewIcon(iconClass.(string), inlineAttributes.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["iconClass"], stack["inlineAttributes"])
}

func (c *current) onIconAttributes1(size, others interface{}) (interface{}, error) {

	return types.NewIconAttributes(size, others.([]interface{}))
}

func (p *parser) callonIconAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttributes1(stack["size"], stack["others"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {

	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {

	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {

	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {

	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {

	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {

	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonFencedBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockVerbatimContent2(stack["content"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonListingBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockVerbatimContent2(stack["content"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonExampleBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockVerbatimContent2(stack["content"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["content"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonSidebarBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockVerbatimContent2(stack["content"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonPassthroughBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockVerbatimContent2(stack["content"])
}

func (c *current) onThematicBreak1() (interface{}, error) {

	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onNormalBlockElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonNormalBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlockElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attrs, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attrs)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attrs"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonCommentBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockVerbatimContent2(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {

	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {

	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {

	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {

	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent9() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonIndexTermContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent9()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {

	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {

	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {

	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {

	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {

	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {

	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {

	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {

	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onAlphanums1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {

	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
