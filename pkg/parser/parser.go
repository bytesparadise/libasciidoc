// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
	log "github.com/sirupsen/logrus"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "RawSource",
			pos:  position{line: 17, col: 1, offset: 336},
			expr: &actionExpr{
				pos: position{line: 17, col: 14, offset: 349},
				run: (*parser).callonRawSource1,
				expr: &labeledExpr{
					pos:   position{line: 17, col: 14, offset: 349},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 17, col: 20, offset: 355},
						expr: &choiceExpr{
							pos: position{line: 17, col: 21, offset: 356},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 17, col: 21, offset: 356},
									name: "AttributeDeclaration",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 44, offset: 379},
									name: "RawSection",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 57, offset: 392},
									name: "FileInclusion",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 73, offset: 408},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawSection",
			pos:  position{line: 22, col: 1, offset: 553},
			expr: &actionExpr{
				pos: position{line: 23, col: 5, offset: 572},
				run: (*parser).callonRawSection1,
				expr: &seqExpr{
					pos: position{line: 23, col: 5, offset: 572},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 23, col: 5, offset: 572},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 23, col: 12, offset: 579},
								run: (*parser).callonRawSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 23, col: 12, offset: 579},
									expr: &litMatcher{
										pos:        position{line: 23, col: 13, offset: 580},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 27, col: 5, offset: 671},
							run: (*parser).callonRawSection7,
						},
						&oneOrMoreExpr{
							pos: position{line: 31, col: 5, offset: 823},
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 5, offset: 823},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 31, col: 12, offset: 830},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 19, offset: 837},
								name: "RawSectionTitle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 31, col: 36, offset: 854},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawSectionTitle",
			pos:  position{line: 35, col: 1, offset: 924},
			expr: &actionExpr{
				pos: position{line: 35, col: 20, offset: 943},
				run: (*parser).callonRawSectionTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 35, col: 20, offset: 943},
					expr: &charClassMatcher{
						pos:        position{line: 35, col: 20, offset: 943},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 39, col: 1, offset: 990},
			expr: &actionExpr{
				pos: position{line: 39, col: 12, offset: 1001},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 39, col: 12, offset: 1001},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 39, col: 12, offset: 1001},
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 13, offset: 1002},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 39, col: 17, offset: 1006},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 39, col: 26, offset: 1015},
								run: (*parser).callonRawLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 39, col: 26, offset: 1015},
									expr: &charClassMatcher{
										pos:        position{line: 39, col: 26, offset: 1015},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 41, col: 8, offset: 1070},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawDocument",
			pos:  position{line: 48, col: 1, offset: 1349},
			expr: &actionExpr{
				pos: position{line: 48, col: 16, offset: 1364},
				run: (*parser).callonRawDocument1,
				expr: &seqExpr{
					pos: position{line: 48, col: 16, offset: 1364},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 48, col: 16, offset: 1364},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 48, col: 29, offset: 1377},
								expr: &ruleRefExpr{
									pos:  position{line: 48, col: 29, offset: 1377},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 48, col: 43, offset: 1391},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 51, offset: 1399},
								name: "RawBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 62, offset: 1410},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawBlocks",
			pos:  position{line: 55, col: 1, offset: 1599},
			expr: &actionExpr{
				pos: position{line: 55, col: 14, offset: 1612},
				run: (*parser).callonRawBlocks1,
				expr: &seqExpr{
					pos: position{line: 55, col: 14, offset: 1612},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 55, col: 14, offset: 1612},
							expr: &ruleRefExpr{
								pos:  position{line: 55, col: 14, offset: 1612},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 23, offset: 1621},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 55, col: 31, offset: 1629},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 31, offset: 1629},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 48, offset: 1646},
							label: "blocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 55, col: 56, offset: 1654},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 56, offset: 1654},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 64, col: 1, offset: 1906},
			expr: &actionExpr{
				pos: position{line: 65, col: 9, offset: 1935},
				run: (*parser).callonDocumentRawBlock1,
				expr: &labeledExpr{
					pos:   position{line: 65, col: 9, offset: 1935},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 65, col: 16, offset: 1942},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 65, col: 16, offset: 1942},
								name: "LabeledListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 66, col: 11, offset: 2007},
								name: "ImageBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 67, col: 11, offset: 2028},
								name: "SimpleRawParagraph",
							},
							&ruleRefExpr{
								pos:  position{line: 68, col: 11, offset: 2057},
								name: "BlankLine",
							},
							&ruleRefExpr{
								pos:  position{line: 69, col: 11, offset: 2109},
								name: "Section",
							},
							&ruleRefExpr{
								pos:  position{line: 70, col: 11, offset: 2127},
								name: "DelimitedBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 71, col: 11, offset: 2152},
								name: "SingleLineComment",
							},
							&ruleRefExpr{
								pos:  position{line: 72, col: 11, offset: 2180},
								name: "Table",
							},
							&ruleRefExpr{
								pos:  position{line: 73, col: 11, offset: 2196},
								name: "ThematicBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 74, col: 11, offset: 2220},
								name: "OrderedListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 75, col: 11, offset: 2246},
								name: "UnorderedListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 76, col: 11, offset: 2275},
								name: "CalloutListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 77, col: 11, offset: 2301},
								name: "ContinuedListItemElement",
							},
							&ruleRefExpr{
								pos:  position{line: 78, col: 11, offset: 2336},
								name: "LiteralBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 79, col: 11, offset: 2360},
								name: "AttributeDeclaration",
							},
							&ruleRefExpr{
								pos:  position{line: 80, col: 11, offset: 2392},
								name: "AttributeReset",
							},
							&ruleRefExpr{
								pos:  position{line: 81, col: 11, offset: 2418},
								name: "TableOfContentsPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 82, col: 11, offset: 2455},
								name: "UserMacroBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 83, col: 11, offset: 2480},
								name: "RawParagraph",
							},
							&ruleRefExpr{
								pos:  position{line: 84, col: 11, offset: 2503},
								name: "StandaloneAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 92, col: 1, offset: 2712},
			expr: &ruleRefExpr{
				pos:  position{line: 92, col: 16, offset: 2727},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 94, col: 1, offset: 2745},
			expr: &actionExpr{
				pos: position{line: 94, col: 20, offset: 2764},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 94, col: 20, offset: 2764},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 94, col: 20, offset: 2764},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 94, col: 41, offset: 2785},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 94, col: 49, offset: 2793},
								expr: &ruleRefExpr{
									pos:  position{line: 94, col: 50, offset: 2794},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 94, col: 75, offset: 2819},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 98, col: 1, offset: 2899},
			expr: &seqExpr{
				pos: position{line: 98, col: 26, offset: 2924},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 98, col: 26, offset: 2924},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 98, col: 32, offset: 2930},
						expr: &ruleRefExpr{
							pos:  position{line: 98, col: 32, offset: 2930},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 39, offset: 2937},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 100, col: 1, offset: 2942},
			expr: &actionExpr{
				pos: position{line: 100, col: 27, offset: 2968},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 100, col: 27, offset: 2968},
					expr: &oneOrMoreExpr{
						pos: position{line: 100, col: 28, offset: 2969},
						expr: &seqExpr{
							pos: position{line: 100, col: 29, offset: 2970},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 100, col: 29, offset: 2970},
									expr: &ruleRefExpr{
										pos:  position{line: 100, col: 30, offset: 2971},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 100, col: 51, offset: 2992,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 107, col: 1, offset: 3158},
			expr: &actionExpr{
				pos: position{line: 107, col: 19, offset: 3176},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 107, col: 19, offset: 3176},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 107, col: 19, offset: 3176},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 107, col: 23, offset: 3180},
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 23, offset: 3180},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 30, offset: 3187},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 37, offset: 3194},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 52, offset: 3209},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 107, col: 56, offset: 3213},
								expr: &ruleRefExpr{
									pos:  position{line: 107, col: 56, offset: 3213},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 74, offset: 3231},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 9, offset: 3243},
							expr: &choiceExpr{
								pos: position{line: 108, col: 10, offset: 3244},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 108, col: 10, offset: 3244},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 108, col: 10, offset: 3244},
												expr: &ruleRefExpr{
													pos:  position{line: 108, col: 10, offset: 3244},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 108, col: 17, offset: 3251},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 108, col: 37, offset: 3271},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 109, col: 9, offset: 3294},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 109, col: 18, offset: 3303},
								expr: &ruleRefExpr{
									pos:  position{line: 109, col: 18, offset: 3303},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 110, col: 9, offset: 3330},
							expr: &choiceExpr{
								pos: position{line: 110, col: 10, offset: 3331},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 110, col: 10, offset: 3331},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 110, col: 10, offset: 3331},
												expr: &ruleRefExpr{
													pos:  position{line: 110, col: 10, offset: 3331},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 110, col: 17, offset: 3338},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 110, col: 37, offset: 3358},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 9, offset: 3381},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 111, col: 19, offset: 3391},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 19, offset: 3391},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 115, col: 1, offset: 3492},
			expr: &choiceExpr{
				pos: position{line: 115, col: 20, offset: 3511},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 115, col: 20, offset: 3511},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 115, col: 48, offset: 3539},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 117, col: 1, offset: 3569},
			expr: &actionExpr{
				pos: position{line: 117, col: 30, offset: 3598},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 117, col: 30, offset: 3598},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 117, col: 30, offset: 3598},
							expr: &ruleRefExpr{
								pos:  position{line: 117, col: 30, offset: 3598},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 117, col: 37, offset: 3605},
							expr: &litMatcher{
								pos:        position{line: 117, col: 38, offset: 3606},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 117, col: 42, offset: 3610},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 117, col: 51, offset: 3619},
								expr: &ruleRefExpr{
									pos:  position{line: 117, col: 51, offset: 3619},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 117, col: 68, offset: 3636},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 121, col: 1, offset: 3706},
			expr: &actionExpr{
				pos: position{line: 121, col: 33, offset: 3738},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 121, col: 33, offset: 3738},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 121, col: 33, offset: 3738},
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 33, offset: 3738},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 121, col: 40, offset: 3745},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 121, col: 51, offset: 3756},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 59, offset: 3764},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 121, col: 75, offset: 3780},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 125, col: 1, offset: 3859},
			expr: &actionExpr{
				pos: position{line: 125, col: 19, offset: 3877},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 125, col: 19, offset: 3877},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 19, offset: 3877},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 19, offset: 3877},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 26, offset: 3884},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 36, offset: 3894},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 56, offset: 3914},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 125, col: 62, offset: 3920},
								expr: &ruleRefExpr{
									pos:  position{line: 125, col: 63, offset: 3921},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 85, offset: 3943},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 85, offset: 3943},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 125, col: 92, offset: 3950},
							expr: &litMatcher{
								pos:        position{line: 125, col: 92, offset: 3950},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 97, offset: 3955},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 97, offset: 3955},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 130, col: 1, offset: 4100},
			expr: &actionExpr{
				pos: position{line: 130, col: 23, offset: 4122},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 130, col: 23, offset: 4122},
					expr: &charClassMatcher{
						pos:        position{line: 130, col: 23, offset: 4122},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 134, col: 1, offset: 4169},
			expr: &actionExpr{
				pos: position{line: 134, col: 24, offset: 4192},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 134, col: 24, offset: 4192},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 134, col: 24, offset: 4192},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 134, col: 28, offset: 4196},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 134, col: 35, offset: 4203},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 134, col: 36, offset: 4204},
									expr: &charClassMatcher{
										pos:        position{line: 134, col: 36, offset: 4204},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 136, col: 4, offset: 4251},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 142, col: 1, offset: 4412},
			expr: &actionExpr{
				pos: position{line: 142, col: 21, offset: 4432},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 142, col: 21, offset: 4432},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 142, col: 21, offset: 4432},
							expr: &ruleRefExpr{
								pos:  position{line: 142, col: 21, offset: 4432},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 142, col: 28, offset: 4439},
							expr: &litMatcher{
								pos:        position{line: 142, col: 29, offset: 4440},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 142, col: 33, offset: 4444},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 143, col: 9, offset: 4463},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 143, col: 10, offset: 4464},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 143, col: 10, offset: 4464},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 143, col: 10, offset: 4464},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 143, col: 21, offset: 4475},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 143, col: 45, offset: 4499},
													expr: &litMatcher{
														pos:        position{line: 143, col: 45, offset: 4499},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 143, col: 50, offset: 4504},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 143, col: 58, offset: 4512},
														expr: &ruleRefExpr{
															pos:  position{line: 143, col: 59, offset: 4513},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 143, col: 82, offset: 4536},
													expr: &litMatcher{
														pos:        position{line: 143, col: 82, offset: 4536},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 143, col: 87, offset: 4541},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 143, col: 97, offset: 4551},
														expr: &ruleRefExpr{
															pos:  position{line: 143, col: 98, offset: 4552},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 145, col: 15, offset: 4669},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 145, col: 15, offset: 4669},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 145, col: 15, offset: 4669},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 145, col: 24, offset: 4678},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 145, col: 46, offset: 4700},
													expr: &litMatcher{
														pos:        position{line: 145, col: 46, offset: 4700},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 145, col: 51, offset: 4705},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 145, col: 61, offset: 4715},
														expr: &ruleRefExpr{
															pos:  position{line: 145, col: 62, offset: 4716},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 13, offset: 4825},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 152, col: 1, offset: 4955},
			expr: &choiceExpr{
				pos: position{line: 152, col: 27, offset: 4981},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 152, col: 27, offset: 4981},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 152, col: 27, offset: 4981},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 152, col: 27, offset: 4981},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 152, col: 32, offset: 4986},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 152, col: 39, offset: 4993},
									expr: &charClassMatcher{
										pos:        position{line: 152, col: 39, offset: 4993},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 154, col: 5, offset: 5041},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 154, col: 5, offset: 5041},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 154, col: 5, offset: 5041},
									expr: &litMatcher{
										pos:        position{line: 154, col: 5, offset: 5041},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 154, col: 11, offset: 5047},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 154, col: 18, offset: 5054},
									expr: &charClassMatcher{
										pos:        position{line: 154, col: 18, offset: 5054},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 154, col: 29, offset: 5065},
									expr: &ruleRefExpr{
										pos:  position{line: 154, col: 29, offset: 5065},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 154, col: 36, offset: 5072},
									expr: &litMatcher{
										pos:        position{line: 154, col: 37, offset: 5073},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 158, col: 1, offset: 5113},
			expr: &actionExpr{
				pos: position{line: 158, col: 25, offset: 5137},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 158, col: 25, offset: 5137},
					expr: &charClassMatcher{
						pos:        position{line: 158, col: 25, offset: 5137},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 162, col: 1, offset: 5183},
			expr: &actionExpr{
				pos: position{line: 162, col: 27, offset: 5209},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 162, col: 27, offset: 5209},
					expr: &charClassMatcher{
						pos:        position{line: 162, col: 27, offset: 5209},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 169, col: 1, offset: 5362},
			expr: &actionExpr{
				pos: position{line: 169, col: 25, offset: 5386},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 169, col: 25, offset: 5386},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 169, col: 25, offset: 5386},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 169, col: 29, offset: 5390},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 169, col: 35, offset: 5396},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 169, col: 50, offset: 5411},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 170, col: 9, offset: 5424},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 170, col: 15, offset: 5430},
								expr: &ruleRefExpr{
									pos:  position{line: 170, col: 16, offset: 5431},
									name: "AttributeDeclarationValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 170, col: 44, offset: 5459},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 177, col: 1, offset: 5732},
			expr: &actionExpr{
				pos: position{line: 177, col: 18, offset: 5749},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 177, col: 18, offset: 5749},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 177, col: 18, offset: 5749},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 177, col: 28, offset: 5759},
							expr: &charClassMatcher{
								pos:        position{line: 177, col: 29, offset: 5760},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 181, col: 1, offset: 5808},
			expr: &actionExpr{
				pos: position{line: 181, col: 30, offset: 5837},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 181, col: 30, offset: 5837},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 181, col: 30, offset: 5837},
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 30, offset: 5837},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 181, col: 37, offset: 5844},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 181, col: 46, offset: 5853},
								expr: &choiceExpr{
									pos: position{line: 182, col: 5, offset: 5859},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 182, col: 6, offset: 5860},
											run: (*parser).callonAttributeDeclarationValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 182, col: 6, offset: 5860},
												expr: &charClassMatcher{
													pos:        position{line: 182, col: 6, offset: 5860},
													val:        "[^\\r\\n{]",
													chars:      []rune{'\r', '\n', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 185, col: 5, offset: 5939},
											name: "AttributeSubstitution",
										},
										&actionExpr{
											pos: position{line: 186, col: 6, offset: 5968},
											run: (*parser).callonAttributeDeclarationValue12,
											expr: &litMatcher{
												pos:        position{line: 186, col: 6, offset: 5968},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 193, col: 1, offset: 6135},
			expr: &choiceExpr{
				pos: position{line: 193, col: 19, offset: 6153},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 193, col: 19, offset: 6153},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 193, col: 19, offset: 6153},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 193, col: 19, offset: 6153},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 193, col: 24, offset: 6158},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 30, offset: 6164},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 193, col: 45, offset: 6179},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 193, col: 49, offset: 6183},
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 49, offset: 6183},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 193, col: 56, offset: 6190},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 195, col: 5, offset: 6250},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 195, col: 5, offset: 6250},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 195, col: 5, offset: 6250},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 195, col: 9, offset: 6254},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 195, col: 15, offset: 6260},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 195, col: 30, offset: 6275},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 195, col: 35, offset: 6280},
									expr: &ruleRefExpr{
										pos:  position{line: 195, col: 35, offset: 6280},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 195, col: 42, offset: 6287},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 199, col: 1, offset: 6346},
			expr: &choiceExpr{
				pos: position{line: 199, col: 26, offset: 6371},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 199, col: 26, offset: 6371},
						name: "CounterSub",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 39, offset: 6384},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 201, col: 1, offset: 6393},
			expr: &actionExpr{
				pos: position{line: 201, col: 12, offset: 6404},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 201, col: 12, offset: 6404},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 201, col: 12, offset: 6404},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 201, col: 16, offset: 6408},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 21, offset: 6413},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 201, col: 35, offset: 6427},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub",
			pos:  position{line: 205, col: 1, offset: 6493},
			expr: &choiceExpr{
				pos: position{line: 205, col: 15, offset: 6507},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 205, col: 15, offset: 6507},
						name: "CounterSub1",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 29, offset: 6521},
						name: "CounterSub2",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 43, offset: 6535},
						name: "CounterSubAlpha",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 61, offset: 6553},
						name: "CounterSubAlpha2",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 80, offset: 6572},
						name: "CounterSubStart",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 98, offset: 6590},
						name: "CounterSubStart2",
					},
				},
			},
		},
		{
			name: "CounterSub1",
			pos:  position{line: 207, col: 1, offset: 6608},
			expr: &actionExpr{
				pos: position{line: 207, col: 16, offset: 6623},
				run: (*parser).callonCounterSub11,
				expr: &seqExpr{
					pos: position{line: 207, col: 16, offset: 6623},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 207, col: 16, offset: 6623},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 207, col: 28, offset: 6635},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 33, offset: 6640},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 207, col: 47, offset: 6654},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub2",
			pos:  position{line: 211, col: 1, offset: 6730},
			expr: &actionExpr{
				pos: position{line: 211, col: 16, offset: 6745},
				run: (*parser).callonCounterSub21,
				expr: &seqExpr{
					pos: position{line: 211, col: 16, offset: 6745},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 211, col: 16, offset: 6745},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 211, col: 29, offset: 6758},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 211, col: 34, offset: 6763},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 211, col: 48, offset: 6777},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha",
			pos:  position{line: 215, col: 1, offset: 6852},
			expr: &actionExpr{
				pos: position{line: 215, col: 20, offset: 6871},
				run: (*parser).callonCounterSubAlpha1,
				expr: &seqExpr{
					pos: position{line: 215, col: 20, offset: 6871},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 215, col: 20, offset: 6871},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 215, col: 32, offset: 6883},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 215, col: 37, offset: 6888},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 215, col: 51, offset: 6902},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 215, col: 55, offset: 6906},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 215, col: 61, offset: 6912},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 215, col: 70, offset: 6921},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha2",
			pos:  position{line: 219, col: 1, offset: 6999},
			expr: &actionExpr{
				pos: position{line: 219, col: 21, offset: 7019},
				run: (*parser).callonCounterSubAlpha21,
				expr: &seqExpr{
					pos: position{line: 219, col: 21, offset: 7019},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 219, col: 21, offset: 7019},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 219, col: 34, offset: 7032},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 39, offset: 7037},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 219, col: 53, offset: 7051},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 219, col: 57, offset: 7055},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 219, col: 63, offset: 7061},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 219, col: 72, offset: 7070},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart",
			pos:  position{line: 223, col: 1, offset: 7147},
			expr: &actionExpr{
				pos: position{line: 223, col: 20, offset: 7166},
				run: (*parser).callonCounterSubStart1,
				expr: &seqExpr{
					pos: position{line: 223, col: 20, offset: 7166},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 223, col: 20, offset: 7166},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 223, col: 32, offset: 7178},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 37, offset: 7183},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 223, col: 51, offset: 7197},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 223, col: 55, offset: 7201},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 223, col: 60, offset: 7206},
								run: (*parser).callonCounterSubStart8,
								expr: &oneOrMoreExpr{
									pos: position{line: 223, col: 60, offset: 7206},
									expr: &charClassMatcher{
										pos:        position{line: 223, col: 60, offset: 7206},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 223, col: 108, offset: 7254},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart2",
			pos:  position{line: 227, col: 1, offset: 7336},
			expr: &actionExpr{
				pos: position{line: 227, col: 21, offset: 7356},
				run: (*parser).callonCounterSubStart21,
				expr: &seqExpr{
					pos: position{line: 227, col: 21, offset: 7356},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 227, col: 21, offset: 7356},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 227, col: 34, offset: 7369},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 39, offset: 7374},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 227, col: 53, offset: 7388},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 227, col: 57, offset: 7392},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 227, col: 62, offset: 7397},
								run: (*parser).callonCounterSubStart28,
								expr: &oneOrMoreExpr{
									pos: position{line: 227, col: 62, offset: 7397},
									expr: &charClassMatcher{
										pos:        position{line: 227, col: 62, offset: 7397},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 227, col: 110, offset: 7445},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 231, col: 1, offset: 7526},
			expr: &actionExpr{
				pos: position{line: 231, col: 21, offset: 7546},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 231, col: 21, offset: 7546},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 231, col: 21, offset: 7546},
							expr: &choiceExpr{
								pos: position{line: 231, col: 23, offset: 7548},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 231, col: 23, offset: 7548},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 231, col: 29, offset: 7554},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 232, col: 5, offset: 7678},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 232, col: 11, offset: 7684},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 232, col: 11, offset: 7684},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 233, col: 9, offset: 7705},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 234, col: 9, offset: 7729},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 235, col: 9, offset: 7766},
										name: "LiteralBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 236, col: 9, offset: 7799},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 237, col: 9, offset: 7827},
										name: "ExampleBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 238, col: 9, offset: 7859},
										name: "ListingBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 239, col: 9, offset: 7891},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 240, col: 9, offset: 7918},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 241, col: 9, offset: 7945},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 242, col: 9, offset: 7982},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 243, col: 9, offset: 8018},
										name: "AttributeGroup",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 243, col: 25, offset: 8034},
							expr: &ruleRefExpr{
								pos:  position{line: 243, col: 25, offset: 8034},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 247, col: 1, offset: 8132},
			expr: &actionExpr{
				pos: position{line: 247, col: 14, offset: 8145},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 247, col: 14, offset: 8145},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 247, col: 14, offset: 8145},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 247, col: 19, offset: 8150},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 23, offset: 8154},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 247, col: 27, offset: 8158},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 247, col: 32, offset: 8163},
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 32, offset: 8163},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 247, col: 39, offset: 8170},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 251, col: 1, offset: 8213},
			expr: &actionExpr{
				pos: position{line: 251, col: 20, offset: 8232},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 251, col: 20, offset: 8232},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 251, col: 20, offset: 8232},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 251, col: 25, offset: 8237},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 29, offset: 8241},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 251, col: 33, offset: 8245},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 251, col: 38, offset: 8250},
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 38, offset: 8250},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 257, col: 1, offset: 8527},
			expr: &actionExpr{
				pos: position{line: 257, col: 17, offset: 8543},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 257, col: 17, offset: 8543},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 257, col: 17, offset: 8543},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 257, col: 21, offset: 8547},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 28, offset: 8554},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 257, col: 49, offset: 8575},
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 49, offset: 8575},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 257, col: 56, offset: 8582},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 261, col: 1, offset: 8647},
			expr: &oneOrMoreExpr{
				pos: position{line: 261, col: 24, offset: 8670},
				expr: &choiceExpr{
					pos: position{line: 262, col: 5, offset: 8676},
					alternatives: []interface{}{
						&actionExpr{
							pos: position{line: 262, col: 6, offset: 8677},
							run: (*parser).callonElementTitleContent3,
							expr: &seqExpr{
								pos: position{line: 262, col: 6, offset: 8677},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 262, col: 6, offset: 8677},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&oneOrMoreExpr{
										pos: position{line: 262, col: 14, offset: 8685},
										expr: &charClassMatcher{
											pos:        position{line: 262, col: 14, offset: 8685},
											val:        "[^\\r\\n{<>]",
											chars:      []rune{'\r', '\n', '{', '<', '>'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 265, col: 5, offset: 8880},
							name: "AttrSub",
						},
						&actionExpr{
							pos: position{line: 266, col: 6, offset: 8895},
							run: (*parser).callonElementTitleContent9,
							expr: &litMatcher{
								pos:        position{line: 266, col: 6, offset: 8895},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 273, col: 1, offset: 9092},
			expr: &actionExpr{
				pos: position{line: 273, col: 31, offset: 9122},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 273, col: 31, offset: 9122},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 273, col: 31, offset: 9122},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 273, col: 35, offset: 9126},
							label: "attributes",
							expr: &seqExpr{
								pos: position{line: 273, col: 47, offset: 9138},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 273, col: 47, offset: 9138},
										expr: &ruleRefExpr{
											pos:  position{line: 273, col: 47, offset: 9138},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 273, col: 62, offset: 9153},
										expr: &ruleRefExpr{
											pos:  position{line: 273, col: 62, offset: 9153},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 273, col: 79, offset: 9170},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 273, col: 83, offset: 9174},
							expr: &ruleRefExpr{
								pos:  position{line: 273, col: 83, offset: 9174},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 273, col: 90, offset: 9181},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttribute",
			pos:  position{line: 277, col: 1, offset: 9256},
			expr: &choiceExpr{
				pos: position{line: 277, col: 19, offset: 9274},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 277, col: 19, offset: 9274},
						name: "BlockAttributeList",
					},
					&ruleRefExpr{
						pos:  position{line: 277, col: 40, offset: 9295},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 277, col: 55, offset: 9310},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttributeList",
			pos:  position{line: 281, col: 1, offset: 9538},
			expr: &actionExpr{
				pos: position{line: 281, col: 23, offset: 9560},
				run: (*parser).callonBlockAttributeList1,
				expr: &seqExpr{
					pos: position{line: 281, col: 23, offset: 9560},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 281, col: 23, offset: 9560},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 281, col: 27, offset: 9564},
							label: "attributes",
							expr: &seqExpr{
								pos: position{line: 281, col: 39, offset: 9576},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 281, col: 39, offset: 9576},
										expr: &ruleRefExpr{
											pos:  position{line: 281, col: 39, offset: 9576},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 281, col: 55, offset: 9592},
										expr: &ruleRefExpr{
											pos:  position{line: 281, col: 55, offset: 9592},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 281, col: 70, offset: 9607},
										expr: &ruleRefExpr{
											pos:  position{line: 281, col: 70, offset: 9607},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 281, col: 92, offset: 9629},
										expr: &ruleRefExpr{
											pos:  position{line: 281, col: 92, offset: 9629},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 281, col: 114, offset: 9651},
										expr: &ruleRefExpr{
											pos:  position{line: 281, col: 114, offset: 9651},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 281, col: 131, offset: 9668},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 281, col: 135, offset: 9672},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 285, col: 1, offset: 9747},
			expr: &actionExpr{
				pos: position{line: 285, col: 19, offset: 9765},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 285, col: 19, offset: 9765},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 285, col: 25, offset: 9771},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 289, col: 1, offset: 9832},
			expr: &actionExpr{
				pos: position{line: 289, col: 25, offset: 9856},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 289, col: 25, offset: 9856},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 289, col: 25, offset: 9856},
							expr: &ruleRefExpr{
								pos:  position{line: 289, col: 25, offset: 9856},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 289, col: 32, offset: 9863},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 289, col: 36, offset: 9867},
							expr: &ruleRefExpr{
								pos:  position{line: 289, col: 36, offset: 9867},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 289, col: 43, offset: 9874},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 289, col: 49, offset: 9880},
								expr: &ruleRefExpr{
									pos:  position{line: 289, col: 49, offset: 9880},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 296, col: 1, offset: 10019},
			expr: &actionExpr{
				pos: position{line: 296, col: 25, offset: 10043},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 296, col: 25, offset: 10043},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 296, col: 25, offset: 10043},
							expr: &ruleRefExpr{
								pos:  position{line: 296, col: 25, offset: 10043},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 296, col: 32, offset: 10050},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 296, col: 36, offset: 10054},
							expr: &ruleRefExpr{
								pos:  position{line: 296, col: 36, offset: 10054},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 296, col: 43, offset: 10061},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 296, col: 49, offset: 10067},
								expr: &ruleRefExpr{
									pos:  position{line: 296, col: 49, offset: 10067},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockAttribute",
			pos:  position{line: 303, col: 1, offset: 10206},
			expr: &actionExpr{
				pos: position{line: 303, col: 26, offset: 10231},
				run: (*parser).callonLiteralBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 303, col: 26, offset: 10231},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 303, col: 26, offset: 10231},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 303, col: 38, offset: 10243},
							expr: &ruleRefExpr{
								pos:  position{line: 303, col: 38, offset: 10243},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 303, col: 45, offset: 10250},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 307, col: 1, offset: 10307},
			expr: &actionExpr{
				pos: position{line: 307, col: 30, offset: 10336},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 307, col: 30, offset: 10336},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 307, col: 30, offset: 10336},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 307, col: 39, offset: 10345},
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 39, offset: 10345},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 307, col: 46, offset: 10352},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockAttribute",
			pos:  position{line: 311, col: 1, offset: 10413},
			expr: &actionExpr{
				pos: position{line: 311, col: 26, offset: 10438},
				run: (*parser).callonExampleBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 311, col: 26, offset: 10438},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 311, col: 26, offset: 10438},
							val:        "[example]",
							ignoreCase: false,
							want:       "\"[example]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 311, col: 38, offset: 10450},
							expr: &ruleRefExpr{
								pos:  position{line: 311, col: 38, offset: 10450},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 311, col: 45, offset: 10457},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockAttribute",
			pos:  position{line: 315, col: 1, offset: 10510},
			expr: &actionExpr{
				pos: position{line: 315, col: 26, offset: 10535},
				run: (*parser).callonListingBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 315, col: 26, offset: 10535},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 315, col: 26, offset: 10535},
							val:        "[listing]",
							ignoreCase: false,
							want:       "\"[listing]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 315, col: 38, offset: 10547},
							expr: &ruleRefExpr{
								pos:  position{line: 315, col: 38, offset: 10547},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 315, col: 45, offset: 10554},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 320, col: 1, offset: 10687},
			expr: &actionExpr{
				pos: position{line: 320, col: 30, offset: 10716},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 320, col: 30, offset: 10716},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 320, col: 30, offset: 10716},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 320, col: 34, offset: 10720},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 320, col: 37, offset: 10723},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 320, col: 53, offset: 10739},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 320, col: 57, offset: 10743},
							expr: &ruleRefExpr{
								pos:  position{line: 320, col: 57, offset: 10743},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 320, col: 64, offset: 10750},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 325, col: 1, offset: 10905},
			expr: &actionExpr{
				pos: position{line: 325, col: 21, offset: 10925},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 325, col: 21, offset: 10925},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 325, col: 21, offset: 10925},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 326, col: 5, offset: 10940},
							label: "option",
							expr: &zeroOrOneExpr{
								pos: position{line: 326, col: 12, offset: 10947},
								expr: &actionExpr{
									pos: position{line: 326, col: 13, offset: 10948},
									run: (*parser).callonSourceAttributes6,
									expr: &litMatcher{
										pos:        position{line: 326, col: 13, offset: 10948},
										val:        "%nowrap",
										ignoreCase: false,
										want:       "\"%nowrap\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 329, col: 5, offset: 11001},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 329, col: 14, offset: 11010},
								expr: &actionExpr{
									pos: position{line: 329, col: 15, offset: 11011},
									run: (*parser).callonSourceAttributes10,
									expr: &seqExpr{
										pos: position{line: 329, col: 15, offset: 11011},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 329, col: 15, offset: 11011},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 329, col: 19, offset: 11015},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 329, col: 24, offset: 11020},
													expr: &ruleRefExpr{
														pos:  position{line: 329, col: 25, offset: 11021},
														name: "AttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 330, col: 5, offset: 11066},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 330, col: 12, offset: 11073},
								expr: &actionExpr{
									pos: position{line: 330, col: 13, offset: 11074},
									run: (*parser).callonSourceAttributes18,
									expr: &seqExpr{
										pos: position{line: 330, col: 13, offset: 11074},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 330, col: 13, offset: 11074},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 330, col: 17, offset: 11078},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 330, col: 22, offset: 11083},
													expr: &choiceExpr{
														pos: position{line: 330, col: 23, offset: 11084},
														alternatives: []interface{}{
															&ruleRefExpr{
																pos:  position{line: 330, col: 23, offset: 11084},
																name: "NamedAttribute",
															},
															&ruleRefExpr{
																pos:  position{line: 330, col: 40, offset: 11101},
																name: "StandaloneAttributeKey",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 331, col: 5, offset: 11154},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 331, col: 9, offset: 11158},
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 9, offset: 11158},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 331, col: 16, offset: 11165},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 336, col: 1, offset: 11324},
			expr: &actionExpr{
				pos: position{line: 336, col: 19, offset: 11342},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 336, col: 19, offset: 11342},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 336, col: 19, offset: 11342},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 336, col: 23, offset: 11346},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 336, col: 35, offset: 11358},
								name: "Attributes",
							},
						},
						&litMatcher{
							pos:        position{line: 336, col: 47, offset: 11370},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 336, col: 51, offset: 11374},
							expr: &ruleRefExpr{
								pos:  position{line: 336, col: 51, offset: 11374},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 336, col: 58, offset: 11381},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 340, col: 1, offset: 11456},
			expr: &zeroOrMoreExpr{
				pos: position{line: 340, col: 15, offset: 11470},
				expr: &choiceExpr{
					pos: position{line: 340, col: 16, offset: 11471},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 340, col: 16, offset: 11471},
							name: "NamedAttribute",
						},
						&ruleRefExpr{
							pos:  position{line: 340, col: 33, offset: 11488},
							name: "StandaloneAttributeKey",
						},
					},
				},
			},
		},
		{
			name: "NamedAttributes",
			pos:  position{line: 342, col: 1, offset: 11514},
			expr: &actionExpr{
				pos: position{line: 342, col: 20, offset: 11533},
				run: (*parser).callonNamedAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 342, col: 20, offset: 11533},
					label: "attributes",
					expr: &zeroOrMoreExpr{
						pos: position{line: 342, col: 31, offset: 11544},
						expr: &ruleRefExpr{
							pos:  position{line: 342, col: 32, offset: 11545},
							name: "NamedAttribute",
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 346, col: 1, offset: 11633},
			expr: &actionExpr{
				pos: position{line: 346, col: 19, offset: 11651},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 346, col: 19, offset: 11651},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 346, col: 19, offset: 11651},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 346, col: 24, offset: 11656},
								name: "NamedAttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 346, col: 44, offset: 11676},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 346, col: 48, offset: 11680},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 346, col: 55, offset: 11687},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 346, col: 71, offset: 11703},
							expr: &seqExpr{
								pos: position{line: 346, col: 72, offset: 11704},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 346, col: 72, offset: 11704},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 346, col: 76, offset: 11708},
										expr: &ruleRefExpr{
											pos:  position{line: 346, col: 76, offset: 11708},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeKey",
			pos:  position{line: 351, col: 1, offset: 11889},
			expr: &actionExpr{
				pos: position{line: 351, col: 22, offset: 11910},
				run: (*parser).callonNamedAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 351, col: 22, offset: 11910},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 351, col: 22, offset: 11910},
							expr: &ruleRefExpr{
								pos:  position{line: 351, col: 23, offset: 11911},
								name: "Space",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 351, col: 29, offset: 11917},
							expr: &charClassMatcher{
								pos:        position{line: 351, col: 29, offset: 11917},
								val:        "[^\\r\\n=,\\]]",
								chars:      []rune{'\r', '\n', '=', ',', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 351, col: 42, offset: 11930},
							expr: &ruleRefExpr{
								pos:  position{line: 351, col: 42, offset: 11930},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 355, col: 1, offset: 11992},
			expr: &actionExpr{
				pos: position{line: 355, col: 19, offset: 12010},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 355, col: 19, offset: 12010},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 355, col: 19, offset: 12010},
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 19, offset: 12010},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 26, offset: 12017},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 355, col: 33, offset: 12024},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 355, col: 33, offset: 12024},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 355, col: 62, offset: 12053},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 355, col: 91, offset: 12082},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 355, col: 115, offset: 12106},
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 115, offset: 12106},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 355, col: 122, offset: 12113},
							expr: &charClassMatcher{
								pos:        position{line: 355, col: 123, offset: 12114},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 359, col: 1, offset: 12147},
			expr: &actionExpr{
				pos: position{line: 359, col: 31, offset: 12177},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 359, col: 31, offset: 12177},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 359, col: 31, offset: 12177},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 359, col: 35, offset: 12181},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 359, col: 44, offset: 12190},
								expr: &choiceExpr{
									pos: position{line: 360, col: 5, offset: 12196},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 360, col: 6, offset: 12197},
											run: (*parser).callonSingleQuotedAttributeValue7,
											expr: &oneOrMoreExpr{
												pos: position{line: 360, col: 6, offset: 12197},
												expr: &charClassMatcher{
													pos:        position{line: 360, col: 6, offset: 12197},
													val:        "[^'\\r\\n\\uFFFD\\\\{]",
													chars:      []rune{'\'', '\r', '\n', '�', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 363, col: 5, offset: 12333},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 364, col: 5, offset: 12358},
											name: "AttrSub",
										},
										&actionExpr{
											pos: position{line: 365, col: 6, offset: 12373},
											run: (*parser).callonSingleQuotedAttributeValue12,
											expr: &litMatcher{
												pos:        position{line: 365, col: 6, offset: 12373},
												val:        "\\'",
												ignoreCase: false,
												want:       "\"\\\\'\"",
											},
										},
										&actionExpr{
											pos: position{line: 366, col: 6, offset: 12407},
											run: (*parser).callonSingleQuotedAttributeValue14,
											expr: &charClassMatcher{
												pos:        position{line: 366, col: 6, offset: 12407},
												val:        "[{\\\\]",
												chars:      []rune{'{', '\\'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 369, col: 4, offset: 12493},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 373, col: 1, offset: 12541},
			expr: &actionExpr{
				pos: position{line: 373, col: 31, offset: 12571},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 373, col: 31, offset: 12571},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 373, col: 31, offset: 12571},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 373, col: 36, offset: 12576},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 373, col: 45, offset: 12585},
								expr: &choiceExpr{
									pos: position{line: 374, col: 5, offset: 12591},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 374, col: 6, offset: 12592},
											run: (*parser).callonDoubleQuotedAttributeValue7,
											expr: &oneOrMoreExpr{
												pos: position{line: 374, col: 6, offset: 12592},
												expr: &charClassMatcher{
													pos:        position{line: 374, col: 6, offset: 12592},
													val:        "[^\\r\\n\\uFFFD\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 377, col: 5, offset: 12728},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 378, col: 5, offset: 12753},
											name: "AttrSub",
										},
										&actionExpr{
											pos: position{line: 379, col: 6, offset: 12768},
											run: (*parser).callonDoubleQuotedAttributeValue12,
											expr: &litMatcher{
												pos:        position{line: 379, col: 6, offset: 12768},
												val:        "\\\"",
												ignoreCase: false,
												want:       "\"\\\\\\\"\"",
											},
										},
										&actionExpr{
											pos: position{line: 382, col: 7, offset: 12859},
											run: (*parser).callonDoubleQuotedAttributeValue14,
											expr: &charClassMatcher{
												pos:        position{line: 382, col: 7, offset: 12859},
												val:        "[{\\\\]",
												chars:      []rune{'{', '\\'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 385, col: 4, offset: 12945},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 390, col: 1, offset: 13048},
			expr: &actionExpr{
				pos: position{line: 390, col: 27, offset: 13074},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 390, col: 27, offset: 13074},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 390, col: 36, offset: 13083},
						expr: &choiceExpr{
							pos: position{line: 391, col: 5, offset: 13089},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 391, col: 6, offset: 13090},
									run: (*parser).callonUnquotedAttributeValue5,
									expr: &oneOrMoreExpr{
										pos: position{line: 391, col: 6, offset: 13090},
										expr: &charClassMatcher{
											pos:        position{line: 391, col: 6, offset: 13090},
											val:        "[^,=\\r\\n\\uFFFD{\\]]",
											chars:      []rune{',', '=', '\r', '\n', '�', '{', ']'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 394, col: 5, offset: 13180},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 395, col: 5, offset: 13205},
									name: "AttrSub",
								},
								&actionExpr{
									pos: position{line: 396, col: 6, offset: 13220},
									run: (*parser).callonUnquotedAttributeValue10,
									expr: &litMatcher{
										pos:        position{line: 396, col: 6, offset: 13220},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeKey",
			pos:  position{line: 402, col: 1, offset: 13361},
			expr: &actionExpr{
				pos: position{line: 402, col: 27, offset: 13387},
				run: (*parser).callonStandaloneAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 402, col: 27, offset: 13387},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 402, col: 27, offset: 13387},
							expr: &litMatcher{
								pos:        position{line: 402, col: 28, offset: 13388},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 402, col: 36, offset: 13396},
							expr: &litMatcher{
								pos:        position{line: 402, col: 37, offset: 13397},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 402, col: 45, offset: 13405},
							expr: &litMatcher{
								pos:        position{line: 402, col: 46, offset: 13406},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 402, col: 56, offset: 13416},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 61, offset: 13421},
								name: "NamedAttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 402, col: 80, offset: 13440},
							expr: &seqExpr{
								pos: position{line: 402, col: 81, offset: 13441},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 402, col: 81, offset: 13441},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 402, col: 85, offset: 13445},
										expr: &ruleRefExpr{
											pos:  position{line: 402, col: 85, offset: 13445},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 406, col: 1, offset: 13537},
			expr: &actionExpr{
				pos: position{line: 406, col: 20, offset: 13556},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 406, col: 20, offset: 13556},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 406, col: 20, offset: 13556},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 406, col: 29, offset: 13565},
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 29, offset: 13565},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 406, col: 36, offset: 13572},
							expr: &litMatcher{
								pos:        position{line: 406, col: 36, offset: 13572},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 406, col: 41, offset: 13577},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 406, col: 48, offset: 13584},
								expr: &ruleRefExpr{
									pos:  position{line: 406, col: 49, offset: 13585},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 406, col: 66, offset: 13602},
							expr: &litMatcher{
								pos:        position{line: 406, col: 66, offset: 13602},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 406, col: 71, offset: 13607},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 406, col: 77, offset: 13613},
								expr: &ruleRefExpr{
									pos:  position{line: 406, col: 78, offset: 13614},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 406, col: 95, offset: 13631},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 406, col: 99, offset: 13635},
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 99, offset: 13635},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 406, col: 106, offset: 13642},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 410, col: 1, offset: 13711},
			expr: &actionExpr{
				pos: position{line: 410, col: 20, offset: 13730},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 410, col: 20, offset: 13730},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 410, col: 20, offset: 13730},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 410, col: 29, offset: 13739},
							expr: &ruleRefExpr{
								pos:  position{line: 410, col: 29, offset: 13739},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 410, col: 36, offset: 13746},
							expr: &litMatcher{
								pos:        position{line: 410, col: 36, offset: 13746},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 410, col: 41, offset: 13751},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 410, col: 48, offset: 13758},
								expr: &ruleRefExpr{
									pos:  position{line: 410, col: 49, offset: 13759},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 410, col: 66, offset: 13776},
							expr: &litMatcher{
								pos:        position{line: 410, col: 66, offset: 13776},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 410, col: 71, offset: 13781},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 410, col: 77, offset: 13787},
								expr: &ruleRefExpr{
									pos:  position{line: 410, col: 78, offset: 13788},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 410, col: 95, offset: 13805},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 410, col: 99, offset: 13809},
							expr: &ruleRefExpr{
								pos:  position{line: 410, col: 99, offset: 13809},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 410, col: 106, offset: 13816},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 414, col: 1, offset: 13903},
			expr: &actionExpr{
				pos: position{line: 414, col: 19, offset: 13921},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 414, col: 20, offset: 13922},
					expr: &charClassMatcher{
						pos:        position{line: 414, col: 20, offset: 13922},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTextAttributes",
			pos:  position{line: 418, col: 1, offset: 13971},
			expr: &actionExpr{
				pos: position{line: 418, col: 25, offset: 13995},
				run: (*parser).callonQuotedTextAttributes1,
				expr: &seqExpr{
					pos: position{line: 418, col: 25, offset: 13995},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 418, col: 25, offset: 13995},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 418, col: 29, offset: 13999},
							label: "attributes",
							expr: &seqExpr{
								pos: position{line: 418, col: 41, offset: 14011},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 418, col: 41, offset: 14011},
										expr: &ruleRefExpr{
											pos:  position{line: 418, col: 41, offset: 14011},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 418, col: 61, offset: 14031},
										expr: &ruleRefExpr{
											pos:  position{line: 418, col: 61, offset: 14031},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 418, col: 76, offset: 14046},
										expr: &ruleRefExpr{
											pos:  position{line: 418, col: 76, offset: 14046},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 418, col: 93, offset: 14063},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 422, col: 1, offset: 14138},
			expr: &actionExpr{
				pos: position{line: 422, col: 23, offset: 14160},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &seqExpr{
					pos: position{line: 422, col: 23, offset: 14160},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 422, col: 23, offset: 14160},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 422, col: 28, offset: 14165},
								name: "PositionalValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 422, col: 44, offset: 14181},
							expr: &seqExpr{
								pos: position{line: 422, col: 45, offset: 14182},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 422, col: 45, offset: 14182},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 422, col: 49, offset: 14186},
										expr: &ruleRefExpr{
											pos:  position{line: 422, col: 49, offset: 14186},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 426, col: 1, offset: 14238},
			expr: &actionExpr{
				pos: position{line: 426, col: 25, offset: 14262},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 426, col: 25, offset: 14262},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 426, col: 25, offset: 14262},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 426, col: 36, offset: 14273},
								expr: &ruleRefExpr{
									pos:  position{line: 426, col: 37, offset: 14274},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 426, col: 56, offset: 14293},
							expr: &ruleRefExpr{
								pos:  position{line: 426, col: 56, offset: 14293},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 430, col: 1, offset: 14431},
			expr: &choiceExpr{
				pos: position{line: 430, col: 18, offset: 14448},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 430, col: 18, offset: 14448},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 430, col: 36, offset: 14466},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 430, col: 58, offset: 14488},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 432, col: 1, offset: 14507},
			expr: &actionExpr{
				pos: position{line: 432, col: 24, offset: 14530},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 432, col: 24, offset: 14530},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 432, col: 24, offset: 14530},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 432, col: 28, offset: 14534},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 432, col: 36, offset: 14542},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 432, col: 52, offset: 14558},
							expr: &charClassMatcher{
								pos:        position{line: 432, col: 53, offset: 14559},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 432, col: 66, offset: 14572},
							expr: &seqExpr{
								pos: position{line: 432, col: 67, offset: 14573},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 432, col: 67, offset: 14573},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 432, col: 71, offset: 14577},
										expr: &ruleRefExpr{
											pos:  position{line: 432, col: 71, offset: 14577},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 436, col: 1, offset: 14633},
			expr: &actionExpr{
				pos: position{line: 436, col: 20, offset: 14652},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 436, col: 20, offset: 14652},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 436, col: 20, offset: 14652},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 436, col: 24, offset: 14656},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 436, col: 28, offset: 14660},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 436, col: 44, offset: 14676},
							expr: &charClassMatcher{
								pos:        position{line: 436, col: 45, offset: 14677},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 436, col: 58, offset: 14690},
							expr: &seqExpr{
								pos: position{line: 436, col: 59, offset: 14691},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 436, col: 59, offset: 14691},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 436, col: 63, offset: 14695},
										expr: &ruleRefExpr{
											pos:  position{line: 436, col: 63, offset: 14695},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 440, col: 1, offset: 14743},
			expr: &actionExpr{
				pos: position{line: 440, col: 22, offset: 14764},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 440, col: 22, offset: 14764},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 440, col: 22, offset: 14764},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 440, col: 26, offset: 14768},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 32, offset: 14774},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 440, col: 48, offset: 14790},
							expr: &charClassMatcher{
								pos:        position{line: 440, col: 49, offset: 14791},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 440, col: 62, offset: 14804},
							expr: &seqExpr{
								pos: position{line: 440, col: 63, offset: 14805},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 440, col: 63, offset: 14805},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 440, col: 67, offset: 14809},
										expr: &ruleRefExpr{
											pos:  position{line: 440, col: 67, offset: 14809},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 445, col: 1, offset: 14905},
			expr: &actionExpr{
				pos: position{line: 445, col: 20, offset: 14924},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 445, col: 20, offset: 14924},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 445, col: 20, offset: 14924},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 27, offset: 14931},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 445, col: 43, offset: 14947},
							expr: &charClassMatcher{
								pos:        position{line: 445, col: 44, offset: 14948},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 449, col: 1, offset: 15017},
			expr: &choiceExpr{
				pos: position{line: 449, col: 19, offset: 15035},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 449, col: 19, offset: 15035},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 449, col: 41, offset: 15057},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 449, col: 70, offset: 15086},
						name: "DoubleQuotedAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 453, col: 1, offset: 15289},
			expr: &actionExpr{
				pos: position{line: 453, col: 24, offset: 15312},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 453, col: 24, offset: 15312},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 453, col: 24, offset: 15312},
							label: "first",
							expr: &actionExpr{
								pos: position{line: 453, col: 31, offset: 15319},
								run: (*parser).callonShortHandValuePlain4,
								expr: &charClassMatcher{
									pos:        position{line: 453, col: 31, offset: 15319},
									val:        "[^,\\r\\n\"' \\t.#%=\\]]",
									chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 456, col: 5, offset: 15405},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 456, col: 13, offset: 15413},
								expr: &choiceExpr{
									pos: position{line: 456, col: 14, offset: 15414},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 456, col: 14, offset: 15414},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 457, col: 12, offset: 15445},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 457, col: 12, offset: 15445},
													val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
													chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
													ignoreCase: false,
													inverted:   true,
												},
												&actionExpr{
													pos: position{line: 457, col: 34, offset: 15467},
													run: (*parser).callonShortHandValuePlain12,
													expr: &seqExpr{
														pos: position{line: 457, col: 34, offset: 15467},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 457, col: 34, offset: 15467},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 457, col: 39, offset: 15472},
																val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
																chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 467, col: 1, offset: 15759},
			expr: &actionExpr{
				pos: position{line: 467, col: 12, offset: 15770},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 467, col: 12, offset: 15770},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 467, col: 12, offset: 15770},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 467, col: 23, offset: 15781},
								expr: &ruleRefExpr{
									pos:  position{line: 467, col: 24, offset: 15782},
									name: "BlockAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 468, col: 5, offset: 15803},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 468, col: 12, offset: 15810},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 468, col: 12, offset: 15810},
									expr: &litMatcher{
										pos:        position{line: 468, col: 13, offset: 15811},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 472, col: 5, offset: 15902},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 476, col: 5, offset: 16054},
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 5, offset: 16054},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 476, col: 12, offset: 16061},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 19, offset: 16068},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 476, col: 34, offset: 16083},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 476, col: 38, offset: 16087},
								expr: &ruleRefExpr{
									pos:  position{line: 476, col: 38, offset: 16087},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 476, col: 56, offset: 16105},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 480, col: 1, offset: 16227},
			expr: &actionExpr{
				pos: position{line: 480, col: 18, offset: 16244},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 480, col: 18, offset: 16244},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 480, col: 27, offset: 16253},
						expr: &seqExpr{
							pos: position{line: 480, col: 28, offset: 16254},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 480, col: 28, offset: 16254},
									expr: &ruleRefExpr{
										pos:  position{line: 480, col: 29, offset: 16255},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 480, col: 37, offset: 16263},
									expr: &ruleRefExpr{
										pos:  position{line: 480, col: 38, offset: 16264},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 480, col: 54, offset: 16280},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 484, col: 1, offset: 16401},
			expr: &actionExpr{
				pos: position{line: 484, col: 17, offset: 16417},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 484, col: 17, offset: 16417},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 484, col: 26, offset: 16426},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 484, col: 26, offset: 16426},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 485, col: 11, offset: 16441},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 486, col: 11, offset: 16486},
								expr: &ruleRefExpr{
									pos:  position{line: 486, col: 11, offset: 16486},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 487, col: 11, offset: 16504},
								name: "ElementPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 488, col: 11, offset: 16533},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 495, col: 1, offset: 16684},
			expr: &seqExpr{
				pos: position{line: 495, col: 31, offset: 16714},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 495, col: 31, offset: 16714},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 495, col: 41, offset: 16724},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 500, col: 1, offset: 16835},
			expr: &actionExpr{
				pos: position{line: 500, col: 19, offset: 16853},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 500, col: 19, offset: 16853},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 500, col: 19, offset: 16853},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 500, col: 25, offset: 16859},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 500, col: 40, offset: 16874},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 500, col: 45, offset: 16879},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 500, col: 52, offset: 16886},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 500, col: 68, offset: 16902},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 500, col: 80, offset: 16914},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 504, col: 1, offset: 17053},
			expr: &actionExpr{
				pos: position{line: 504, col: 20, offset: 17072},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 504, col: 20, offset: 17072},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 504, col: 20, offset: 17072},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 504, col: 26, offset: 17078},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 504, col: 41, offset: 17093},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 504, col: 45, offset: 17097},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 504, col: 52, offset: 17104},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 504, col: 68, offset: 17120},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 504, col: 80, offset: 17132},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 508, col: 1, offset: 17272},
			expr: &actionExpr{
				pos: position{line: 508, col: 18, offset: 17289},
				run: (*parser).callonUserMacroName1,
				expr: &seqExpr{
					pos: position{line: 508, col: 18, offset: 17289},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 508, col: 18, offset: 17289},
							expr: &litMatcher{
								pos:        position{line: 508, col: 19, offset: 17290},
								val:        "include",
								ignoreCase: false,
								want:       "\"include\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 508, col: 30, offset: 17301},
							expr: &charClassMatcher{
								pos:        position{line: 508, col: 30, offset: 17301},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 512, col: 1, offset: 17350},
			expr: &actionExpr{
				pos: position{line: 512, col: 19, offset: 17368},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 512, col: 19, offset: 17368},
					expr: &charClassMatcher{
						pos:        position{line: 512, col: 19, offset: 17368},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 516, col: 1, offset: 17416},
			expr: &actionExpr{
				pos: position{line: 516, col: 24, offset: 17439},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 516, col: 24, offset: 17439},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 516, col: 24, offset: 17439},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 516, col: 28, offset: 17443},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 516, col: 39, offset: 17454},
								expr: &ruleRefExpr{
									pos:  position{line: 516, col: 40, offset: 17455},
									name: "NamedAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 516, col: 57, offset: 17472},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 523, col: 1, offset: 17658},
			expr: &actionExpr{
				pos: position{line: 523, col: 18, offset: 17675},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 523, col: 18, offset: 17675},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 523, col: 18, offset: 17675},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 523, col: 24, offset: 17681},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 523, col: 24, offset: 17681},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 523, col: 24, offset: 17681},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 523, col: 36, offset: 17693},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 523, col: 42, offset: 17699},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 523, col: 56, offset: 17713},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 523, col: 74, offset: 17731},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 525, col: 8, offset: 17878},
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 8, offset: 17878},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 525, col: 15, offset: 17885},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 529, col: 1, offset: 17937},
			expr: &actionExpr{
				pos: position{line: 529, col: 26, offset: 17962},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 529, col: 26, offset: 17962},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 529, col: 26, offset: 17962},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 529, col: 30, offset: 17966},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 529, col: 41, offset: 17977},
								expr: &choiceExpr{
									pos: position{line: 529, col: 42, offset: 17978},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 529, col: 42, offset: 17978},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 529, col: 64, offset: 18000},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 529, col: 85, offset: 18021},
											name: "NamedAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 529, col: 102, offset: 18038},
											name: "StandaloneAttributeKey",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 529, col: 127, offset: 18063},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 533, col: 1, offset: 18139},
			expr: &actionExpr{
				pos: position{line: 533, col: 24, offset: 18162},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 533, col: 24, offset: 18162},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 533, col: 24, offset: 18162},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 533, col: 33, offset: 18171},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 40, offset: 18178},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 533, col: 66, offset: 18204},
							expr: &litMatcher{
								pos:        position{line: 533, col: 66, offset: 18204},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 537, col: 1, offset: 18263},
			expr: &actionExpr{
				pos: position{line: 537, col: 29, offset: 18291},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 537, col: 29, offset: 18291},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 537, col: 29, offset: 18291},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 537, col: 36, offset: 18298},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 537, col: 36, offset: 18298},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 538, col: 11, offset: 18415},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 539, col: 11, offset: 18451},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 540, col: 11, offset: 18477},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 541, col: 11, offset: 18509},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 542, col: 11, offset: 18541},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 543, col: 11, offset: 18568},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 543, col: 31, offset: 18588},
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 31, offset: 18588},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 543, col: 39, offset: 18596},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 543, col: 39, offset: 18596},
									expr: &litMatcher{
										pos:        position{line: 543, col: 40, offset: 18597},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 543, col: 46, offset: 18603},
									expr: &litMatcher{
										pos:        position{line: 543, col: 47, offset: 18604},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 547, col: 1, offset: 18636},
			expr: &actionExpr{
				pos: position{line: 547, col: 23, offset: 18658},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 547, col: 23, offset: 18658},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 547, col: 23, offset: 18658},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 547, col: 30, offset: 18665},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 547, col: 30, offset: 18665},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 547, col: 47, offset: 18682},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 548, col: 5, offset: 18704},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 548, col: 12, offset: 18711},
								expr: &actionExpr{
									pos: position{line: 548, col: 13, offset: 18712},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 548, col: 13, offset: 18712},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 548, col: 13, offset: 18712},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 548, col: 17, offset: 18716},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 548, col: 24, offset: 18723},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 548, col: 24, offset: 18723},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 548, col: 41, offset: 18740},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 554, col: 1, offset: 18878},
			expr: &actionExpr{
				pos: position{line: 554, col: 29, offset: 18906},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 554, col: 29, offset: 18906},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 554, col: 29, offset: 18906},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 554, col: 34, offset: 18911},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 554, col: 41, offset: 18918},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 554, col: 41, offset: 18918},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 554, col: 58, offset: 18935},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 555, col: 5, offset: 18957},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 555, col: 12, offset: 18964},
								expr: &actionExpr{
									pos: position{line: 555, col: 13, offset: 18965},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 555, col: 13, offset: 18965},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 555, col: 13, offset: 18965},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 555, col: 17, offset: 18969},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 555, col: 24, offset: 18976},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 555, col: 24, offset: 18976},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 555, col: 41, offset: 18993},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 557, col: 9, offset: 19046},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 561, col: 1, offset: 19136},
			expr: &actionExpr{
				pos: position{line: 561, col: 19, offset: 19154},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 561, col: 19, offset: 19154},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 561, col: 19, offset: 19154},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 26, offset: 19161},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 561, col: 34, offset: 19169},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 561, col: 39, offset: 19174},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 44, offset: 19179},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 565, col: 1, offset: 19267},
			expr: &actionExpr{
				pos: position{line: 565, col: 25, offset: 19291},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 565, col: 25, offset: 19291},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 565, col: 25, offset: 19291},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 565, col: 30, offset: 19296},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 565, col: 37, offset: 19303},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 565, col: 45, offset: 19311},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 565, col: 50, offset: 19316},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 565, col: 55, offset: 19321},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 565, col: 63, offset: 19329},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 569, col: 1, offset: 19414},
			expr: &actionExpr{
				pos: position{line: 569, col: 20, offset: 19433},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 569, col: 20, offset: 19433},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 569, col: 32, offset: 19445},
						name: "Number",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 573, col: 1, offset: 19540},
			expr: &actionExpr{
				pos: position{line: 573, col: 26, offset: 19565},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 573, col: 26, offset: 19565},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 573, col: 26, offset: 19565},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 573, col: 31, offset: 19570},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 43, offset: 19582},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 573, col: 51, offset: 19590},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 577, col: 1, offset: 19682},
			expr: &actionExpr{
				pos: position{line: 577, col: 23, offset: 19704},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 577, col: 23, offset: 19704},
					expr: &charClassMatcher{
						pos:        position{line: 577, col: 23, offset: 19704},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 581, col: 1, offset: 19749},
			expr: &actionExpr{
				pos: position{line: 581, col: 23, offset: 19771},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 581, col: 23, offset: 19771},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 581, col: 24, offset: 19772},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 581, col: 24, offset: 19772},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 581, col: 34, offset: 19782},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 581, col: 42, offset: 19790},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 48, offset: 19796},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 581, col: 73, offset: 19821},
							expr: &litMatcher{
								pos:        position{line: 581, col: 73, offset: 19821},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 585, col: 1, offset: 19970},
			expr: &actionExpr{
				pos: position{line: 585, col: 28, offset: 19997},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 585, col: 28, offset: 19997},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 585, col: 28, offset: 19997},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 35, offset: 20004},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 585, col: 54, offset: 20023},
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 54, offset: 20023},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 585, col: 62, offset: 20031},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 585, col: 62, offset: 20031},
									expr: &litMatcher{
										pos:        position{line: 585, col: 63, offset: 20032},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 585, col: 69, offset: 20038},
									expr: &litMatcher{
										pos:        position{line: 585, col: 70, offset: 20039},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 589, col: 1, offset: 20071},
			expr: &actionExpr{
				pos: position{line: 589, col: 22, offset: 20092},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 589, col: 22, offset: 20092},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 589, col: 22, offset: 20092},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 589, col: 29, offset: 20099},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 590, col: 5, offset: 20113},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 590, col: 12, offset: 20120},
								expr: &actionExpr{
									pos: position{line: 590, col: 13, offset: 20121},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 590, col: 13, offset: 20121},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 590, col: 13, offset: 20121},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 590, col: 17, offset: 20125},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 590, col: 24, offset: 20132},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 596, col: 1, offset: 20263},
			expr: &choiceExpr{
				pos: position{line: 596, col: 13, offset: 20275},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 596, col: 13, offset: 20275},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 596, col: 13, offset: 20275},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 596, col: 18, offset: 20280},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 596, col: 18, offset: 20280},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 596, col: 30, offset: 20292},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 598, col: 5, offset: 20360},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 598, col: 5, offset: 20360},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 598, col: 5, offset: 20360},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 598, col: 9, offset: 20364},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 598, col: 14, offset: 20369},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 598, col: 14, offset: 20369},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 598, col: 26, offset: 20381},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 602, col: 1, offset: 20449},
			expr: &actionExpr{
				pos: position{line: 602, col: 16, offset: 20464},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 602, col: 16, offset: 20464},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 602, col: 16, offset: 20464},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 602, col: 23, offset: 20471},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 602, col: 23, offset: 20471},
									expr: &litMatcher{
										pos:        position{line: 602, col: 24, offset: 20472},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 605, col: 5, offset: 20526},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 615, col: 1, offset: 20820},
			expr: &actionExpr{
				pos: position{line: 615, col: 21, offset: 20840},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 615, col: 21, offset: 20840},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 615, col: 21, offset: 20840},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 615, col: 29, offset: 20848},
								expr: &choiceExpr{
									pos: position{line: 615, col: 30, offset: 20849},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 615, col: 30, offset: 20849},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 615, col: 53, offset: 20872},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 615, col: 74, offset: 20893},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 615, col: 74, offset: 20893,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 615, col: 107, offset: 20926},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 619, col: 1, offset: 20997},
			expr: &actionExpr{
				pos: position{line: 619, col: 25, offset: 21021},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 619, col: 25, offset: 21021},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 619, col: 25, offset: 21021},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 619, col: 33, offset: 21029},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 619, col: 38, offset: 21034},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 619, col: 38, offset: 21034},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 619, col: 78, offset: 21074},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 623, col: 1, offset: 21139},
			expr: &actionExpr{
				pos: position{line: 623, col: 23, offset: 21161},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 623, col: 23, offset: 21161},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 623, col: 23, offset: 21161},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 623, col: 31, offset: 21169},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 623, col: 36, offset: 21174},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 623, col: 36, offset: 21174},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 623, col: 76, offset: 21214},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 630, col: 1, offset: 21378},
			expr: &choiceExpr{
				pos: position{line: 630, col: 18, offset: 21395},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 630, col: 18, offset: 21395},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 630, col: 18, offset: 21395},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 27, offset: 21404},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 632, col: 9, offset: 21461},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 632, col: 9, offset: 21461},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 632, col: 15, offset: 21467},
								expr: &ruleRefExpr{
									pos:  position{line: 632, col: 16, offset: 21468},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 636, col: 1, offset: 21560},
			expr: &actionExpr{
				pos: position{line: 636, col: 22, offset: 21581},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 636, col: 22, offset: 21581},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 636, col: 22, offset: 21581},
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 23, offset: 21582},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 637, col: 5, offset: 21590},
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 6, offset: 21591},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 638, col: 5, offset: 21605},
							expr: &ruleRefExpr{
								pos:  position{line: 638, col: 6, offset: 21606},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 639, col: 5, offset: 21628},
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 6, offset: 21629},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 640, col: 5, offset: 21655},
							expr: &ruleRefExpr{
								pos:  position{line: 640, col: 6, offset: 21656},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 641, col: 5, offset: 21684},
							expr: &ruleRefExpr{
								pos:  position{line: 641, col: 6, offset: 21685},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 642, col: 5, offset: 21711},
							expr: &ruleRefExpr{
								pos:  position{line: 642, col: 6, offset: 21712},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 643, col: 5, offset: 21737},
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 6, offset: 21738},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 644, col: 5, offset: 21759},
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 6, offset: 21760},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 645, col: 5, offset: 21779},
							expr: &ruleRefExpr{
								pos:  position{line: 645, col: 6, offset: 21780},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 646, col: 5, offset: 21807},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 646, col: 11, offset: 21813},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 646, col: 11, offset: 21813},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 646, col: 11, offset: 21813},
											expr: &ruleRefExpr{
												pos:  position{line: 646, col: 11, offset: 21813},
												name: "Space",
											},
										},
										&labeledExpr{
											pos:   position{line: 646, col: 18, offset: 21820},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 646, col: 27, offset: 21829},
												expr: &ruleRefExpr{
													pos:  position{line: 646, col: 28, offset: 21830},
													name: "InlineElement",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 648, col: 12, offset: 21929},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 652, col: 1, offset: 21968},
			expr: &seqExpr{
				pos: position{line: 652, col: 25, offset: 21992},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 652, col: 25, offset: 21992},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 652, col: 29, offset: 21996},
						expr: &ruleRefExpr{
							pos:  position{line: 652, col: 29, offset: 21996},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 652, col: 36, offset: 22003},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 654, col: 1, offset: 22075},
			expr: &actionExpr{
				pos: position{line: 654, col: 29, offset: 22103},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 654, col: 29, offset: 22103},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 654, col: 29, offset: 22103},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 654, col: 50, offset: 22124},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 654, col: 58, offset: 22132},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 658, col: 1, offset: 22238},
			expr: &actionExpr{
				pos: position{line: 658, col: 29, offset: 22266},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 658, col: 29, offset: 22266},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 658, col: 29, offset: 22266},
							expr: &ruleRefExpr{
								pos:  position{line: 658, col: 30, offset: 22267},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 659, col: 5, offset: 22276},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 659, col: 14, offset: 22285},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 659, col: 14, offset: 22285},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 660, col: 11, offset: 22310},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 661, col: 11, offset: 22338},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 662, col: 11, offset: 22354},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 663, col: 11, offset: 22375},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 664, col: 11, offset: 22399},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 665, col: 11, offset: 22426},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 666, col: 11, offset: 22455},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 667, col: 11, offset: 22482},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 668, col: 11, offset: 22533},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 669, col: 11, offset: 22557},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 670, col: 11, offset: 22589},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 671, col: 11, offset: 22615},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 672, col: 11, offset: 22652},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 673, col: 11, offset: 22677},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 680, col: 1, offset: 22843},
			expr: &actionExpr{
				pos: position{line: 680, col: 20, offset: 22862},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 680, col: 20, offset: 22862},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 680, col: 20, offset: 22862},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 680, col: 31, offset: 22873},
								expr: &ruleRefExpr{
									pos:  position{line: 680, col: 32, offset: 22874},
									name: "BlockAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 680, col: 49, offset: 22891},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 680, col: 57, offset: 22899},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 680, col: 80, offset: 22922},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 680, col: 89, offset: 22931},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 684, col: 1, offset: 23087},
			expr: &actionExpr{
				pos: position{line: 685, col: 5, offset: 23117},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 685, col: 5, offset: 23117},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 685, col: 5, offset: 23117},
							expr: &ruleRefExpr{
								pos:  position{line: 685, col: 5, offset: 23117},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 685, col: 12, offset: 23124},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 687, col: 9, offset: 23187},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 687, col: 9, offset: 23187},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 687, col: 9, offset: 23187},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 687, col: 9, offset: 23187},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 687, col: 16, offset: 23194},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 687, col: 16, offset: 23194},
															expr: &litMatcher{
																pos:        position{line: 687, col: 17, offset: 23195},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 691, col: 9, offset: 23295},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 710, col: 11, offset: 24012},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 710, col: 11, offset: 24012},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 710, col: 11, offset: 24012},
													expr: &charClassMatcher{
														pos:        position{line: 710, col: 12, offset: 24013},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 710, col: 20, offset: 24021},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 712, col: 13, offset: 24132},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 712, col: 13, offset: 24132},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 712, col: 14, offset: 24133},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 712, col: 21, offset: 24140},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 714, col: 13, offset: 24254},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 714, col: 13, offset: 24254},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 714, col: 14, offset: 24255},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 714, col: 21, offset: 24262},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 716, col: 13, offset: 24376},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 716, col: 13, offset: 24376},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 716, col: 13, offset: 24376},
													expr: &charClassMatcher{
														pos:        position{line: 716, col: 14, offset: 24377},
														val:        "[ivxdlcm]",
														chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 716, col: 26, offset: 24389},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 718, col: 13, offset: 24503},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 718, col: 13, offset: 24503},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 718, col: 13, offset: 24503},
													expr: &charClassMatcher{
														pos:        position{line: 718, col: 14, offset: 24504},
														val:        "[IVXDLCM]",
														chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 718, col: 26, offset: 24516},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 720, col: 12, offset: 24629},
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 12, offset: 24629},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 724, col: 1, offset: 24664},
			expr: &actionExpr{
				pos: position{line: 724, col: 27, offset: 24690},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 724, col: 27, offset: 24690},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 724, col: 37, offset: 24700},
						expr: &ruleRefExpr{
							pos:  position{line: 724, col: 37, offset: 24700},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 731, col: 1, offset: 24900},
			expr: &actionExpr{
				pos: position{line: 731, col: 22, offset: 24921},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 731, col: 22, offset: 24921},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 731, col: 22, offset: 24921},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 731, col: 33, offset: 24932},
								expr: &ruleRefExpr{
									pos:  position{line: 731, col: 34, offset: 24933},
									name: "BlockAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 731, col: 51, offset: 24950},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 731, col: 59, offset: 24958},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 731, col: 84, offset: 24983},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 731, col: 95, offset: 24994},
								expr: &ruleRefExpr{
									pos:  position{line: 731, col: 96, offset: 24995},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 731, col: 126, offset: 25025},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 731, col: 135, offset: 25034},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 735, col: 1, offset: 25208},
			expr: &actionExpr{
				pos: position{line: 736, col: 5, offset: 25240},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 736, col: 5, offset: 25240},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 736, col: 5, offset: 25240},
							expr: &ruleRefExpr{
								pos:  position{line: 736, col: 5, offset: 25240},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 736, col: 12, offset: 25247},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 736, col: 20, offset: 25255},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 738, col: 9, offset: 25312},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 738, col: 9, offset: 25312},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 738, col: 9, offset: 25312},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 738, col: 16, offset: 25319},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 738, col: 16, offset: 25319},
															expr: &litMatcher{
																pos:        position{line: 738, col: 17, offset: 25320},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 742, col: 9, offset: 25420},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 759, col: 14, offset: 26127},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 759, col: 21, offset: 26134},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 759, col: 22, offset: 26135},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 761, col: 13, offset: 26221},
							expr: &ruleRefExpr{
								pos:  position{line: 761, col: 13, offset: 26221},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 765, col: 1, offset: 26257},
			expr: &actionExpr{
				pos: position{line: 765, col: 32, offset: 26288},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 765, col: 32, offset: 26288},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 765, col: 32, offset: 26288},
							expr: &litMatcher{
								pos:        position{line: 765, col: 33, offset: 26289},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 765, col: 37, offset: 26293},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 766, col: 7, offset: 26307},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 766, col: 7, offset: 26307},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 766, col: 7, offset: 26307},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 767, col: 7, offset: 26352},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 767, col: 7, offset: 26352},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 768, col: 7, offset: 26395},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 768, col: 7, offset: 26395},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 769, col: 7, offset: 26437},
							expr: &ruleRefExpr{
								pos:  position{line: 769, col: 7, offset: 26437},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 773, col: 1, offset: 26479},
			expr: &actionExpr{
				pos: position{line: 773, col: 29, offset: 26507},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 773, col: 29, offset: 26507},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 773, col: 39, offset: 26517},
						expr: &ruleRefExpr{
							pos:  position{line: 773, col: 39, offset: 26517},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 780, col: 1, offset: 26833},
			expr: &actionExpr{
				pos: position{line: 780, col: 20, offset: 26852},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 780, col: 20, offset: 26852},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 780, col: 20, offset: 26852},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 780, col: 31, offset: 26863},
								expr: &ruleRefExpr{
									pos:  position{line: 780, col: 32, offset: 26864},
									name: "BlockAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 780, col: 49, offset: 26881},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 55, offset: 26887},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 780, col: 84, offset: 26916},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 95, offset: 26927},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 780, col: 121, offset: 26953},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 780, col: 133, offset: 26965},
								expr: &ruleRefExpr{
									pos:  position{line: 780, col: 134, offset: 26966},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 784, col: 1, offset: 27128},
			expr: &seqExpr{
				pos: position{line: 784, col: 26, offset: 27153},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 784, col: 26, offset: 27153},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 784, col: 54, offset: 27181},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 786, col: 1, offset: 27207},
			expr: &choiceExpr{
				pos: position{line: 786, col: 33, offset: 27239},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 786, col: 33, offset: 27239},
						expr: &charClassMatcher{
							pos:        position{line: 786, col: 33, offset: 27239},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 786, col: 45, offset: 27251},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 786, col: 45, offset: 27251},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 786, col: 49, offset: 27255},
								expr: &litMatcher{
									pos:        position{line: 786, col: 50, offset: 27256},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 787, col: 1, offset: 27260},
			expr: &actionExpr{
				pos: position{line: 787, col: 32, offset: 27291},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 787, col: 32, offset: 27291},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 787, col: 42, offset: 27301},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 787, col: 42, offset: 27301},
							expr: &ruleRefExpr{
								pos:  position{line: 787, col: 42, offset: 27301},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 793, col: 1, offset: 27456},
			expr: &actionExpr{
				pos: position{line: 793, col: 24, offset: 27479},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 793, col: 24, offset: 27479},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 793, col: 33, offset: 27488},
						expr: &seqExpr{
							pos: position{line: 793, col: 34, offset: 27489},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 793, col: 34, offset: 27489},
									expr: &ruleRefExpr{
										pos:  position{line: 793, col: 35, offset: 27490},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 793, col: 43, offset: 27498},
									expr: &litMatcher{
										pos:        position{line: 793, col: 44, offset: 27499},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 793, col: 49, offset: 27504},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 797, col: 1, offset: 27631},
			expr: &actionExpr{
				pos: position{line: 797, col: 31, offset: 27661},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 797, col: 31, offset: 27661},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 797, col: 40, offset: 27670},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 797, col: 40, offset: 27670},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 798, col: 11, offset: 27685},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 799, col: 11, offset: 27734},
								expr: &ruleRefExpr{
									pos:  position{line: 799, col: 11, offset: 27734},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 800, col: 11, offset: 27752},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 801, col: 11, offset: 27777},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 802, col: 11, offset: 27806},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 803, col: 11, offset: 27826},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 804, col: 11, offset: 27915},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 805, col: 11, offset: 27936},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 806, col: 11, offset: 27959},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 807, col: 11, offset: 27974},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 808, col: 11, offset: 27999},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 809, col: 11, offset: 28022},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 810, col: 11, offset: 28043},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 811, col: 11, offset: 28070},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 812, col: 11, offset: 28087},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 813, col: 11, offset: 28119},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 817, col: 1, offset: 28158},
			expr: &actionExpr{
				pos: position{line: 818, col: 5, offset: 28191},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 818, col: 5, offset: 28191},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 818, col: 5, offset: 28191},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 818, col: 16, offset: 28202},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 818, col: 16, offset: 28202},
									expr: &litMatcher{
										pos:        position{line: 818, col: 17, offset: 28203},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 821, col: 5, offset: 28261},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 825, col: 6, offset: 28437},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 825, col: 6, offset: 28437},
									expr: &choiceExpr{
										pos: position{line: 825, col: 7, offset: 28438},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 825, col: 7, offset: 28438},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 825, col: 15, offset: 28446},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 825, col: 27, offset: 28458},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 829, col: 1, offset: 28498},
			expr: &actionExpr{
				pos: position{line: 829, col: 31, offset: 28528},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 829, col: 31, offset: 28528},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 829, col: 40, offset: 28537},
						expr: &ruleRefExpr{
							pos:  position{line: 829, col: 41, offset: 28538},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 836, col: 1, offset: 28729},
			expr: &choiceExpr{
				pos: position{line: 836, col: 19, offset: 28747},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 836, col: 19, offset: 28747},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 836, col: 19, offset: 28747},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 838, col: 5, offset: 28785},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 838, col: 5, offset: 28785},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 840, col: 5, offset: 28825},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 840, col: 5, offset: 28825},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 842, col: 5, offset: 28875},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 842, col: 5, offset: 28875},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 844, col: 5, offset: 28921},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 844, col: 5, offset: 28921},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 856, col: 1, offset: 29301},
			expr: &choiceExpr{
				pos: position{line: 858, col: 6, offset: 29352},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 858, col: 6, offset: 29352},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 858, col: 6, offset: 29352},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 858, col: 6, offset: 29352},
									label: "attributes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 858, col: 17, offset: 29363},
										expr: &ruleRefExpr{
											pos:  position{line: 858, col: 18, offset: 29364},
											name: "ElementAttribute",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 858, col: 37, offset: 29383},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 858, col: 40, offset: 29386},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 858, col: 56, offset: 29402},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 858, col: 61, offset: 29407},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 858, col: 67, offset: 29413},
										expr: &choiceExpr{
											pos: position{line: 858, col: 68, offset: 29414},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 858, col: 68, offset: 29414},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 858, col: 88, offset: 29434},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 863, col: 5, offset: 29685},
						run: (*parser).callonRawParagraph15,
						expr: &seqExpr{
							pos: position{line: 863, col: 5, offset: 29685},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 863, col: 5, offset: 29685},
									label: "attributes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 863, col: 16, offset: 29696},
										expr: &ruleRefExpr{
											pos:  position{line: 863, col: 17, offset: 29697},
											name: "ElementAttribute",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 863, col: 36, offset: 29716},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 863, col: 41, offset: 29721},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 863, col: 50, offset: 29730},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 867, col: 5, offset: 29919},
						run: (*parser).callonRawParagraph23,
						expr: &seqExpr{
							pos: position{line: 867, col: 5, offset: 29919},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 867, col: 5, offset: 29919},
									label: "attributes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 867, col: 16, offset: 29930},
										expr: &ruleRefExpr{
											pos:  position{line: 867, col: 17, offset: 29931},
											name: "ElementAttribute",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 867, col: 36, offset: 29950},
									run: (*parser).callonRawParagraph28,
								},
								&labeledExpr{
									pos:   position{line: 870, col: 7, offset: 30126},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 870, col: 15, offset: 30134},
										expr: &ruleRefExpr{
											pos:  position{line: 870, col: 16, offset: 30135},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 874, col: 5, offset: 30317},
						run: (*parser).callonRawParagraph32,
						expr: &seqExpr{
							pos: position{line: 874, col: 5, offset: 30317},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 874, col: 5, offset: 30317},
									label: "attributes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 874, col: 16, offset: 30328},
										expr: &ruleRefExpr{
											pos:  position{line: 874, col: 17, offset: 30329},
											name: "ElementAttribute",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 874, col: 36, offset: 30348},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 874, col: 42, offset: 30354},
										expr: &choiceExpr{
											pos: position{line: 874, col: 43, offset: 30355},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 874, col: 43, offset: 30355},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 874, col: 63, offset: 30375},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 878, col: 1, offset: 30489},
			expr: &oneOrMoreExpr{
				pos: position{line: 878, col: 33, offset: 30521},
				expr: &actionExpr{
					pos: position{line: 878, col: 34, offset: 30522},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 878, col: 34, offset: 30522},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 878, col: 34, offset: 30522},
								expr: &ruleRefExpr{
									pos:  position{line: 878, col: 35, offset: 30523},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 878, col: 45, offset: 30533},
								expr: &litMatcher{
									pos:        position{line: 878, col: 45, offset: 30533},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 878, col: 51, offset: 30539},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 878, col: 60, offset: 30548},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 882, col: 1, offset: 30589},
			expr: &actionExpr{
				pos: position{line: 882, col: 21, offset: 30609},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 882, col: 21, offset: 30609},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 882, col: 21, offset: 30609},
							expr: &ruleRefExpr{
								pos:  position{line: 882, col: 22, offset: 30610},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 883, col: 5, offset: 30630},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 883, col: 14, offset: 30639},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 883, col: 39, offset: 30664},
							name: "EOL",
						},
						&andCodeExpr{
							pos: position{line: 883, col: 43, offset: 30668},
							run: (*parser).callonRawParagraphLine8,
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 893, col: 1, offset: 30903},
			expr: &actionExpr{
				pos: position{line: 893, col: 28, offset: 30930},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 893, col: 28, offset: 30930},
					expr: &charClassMatcher{
						pos:        position{line: 893, col: 28, offset: 30930},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SimpleRawParagraph",
			pos:  position{line: 898, col: 1, offset: 31047},
			expr: &actionExpr{
				pos: position{line: 898, col: 23, offset: 31069},
				run: (*parser).callonSimpleRawParagraph1,
				expr: &seqExpr{
					pos: position{line: 898, col: 23, offset: 31069},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 898, col: 23, offset: 31069},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 898, col: 34, offset: 31080},
								expr: &ruleRefExpr{
									pos:  position{line: 898, col: 35, offset: 31081},
									name: "ElementAttribute",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 899, col: 5, offset: 31105},
							run: (*parser).callonSimpleRawParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 902, col: 5, offset: 31215},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 902, col: 16, offset: 31226},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 903, col: 5, offset: 31252},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 903, col: 16, offset: 31263},
								expr: &choiceExpr{
									pos: position{line: 903, col: 17, offset: 31264},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 903, col: 17, offset: 31264},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 903, col: 37, offset: 31284},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 907, col: 1, offset: 31432},
			expr: &actionExpr{
				pos: position{line: 908, col: 5, offset: 31462},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 908, col: 5, offset: 31462},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 908, col: 5, offset: 31462},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 908, col: 14, offset: 31471},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 908, col: 14, offset: 31471},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 908, col: 14, offset: 31471},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 908, col: 23, offset: 31480},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 908, col: 28, offset: 31485},
											expr: &charClassMatcher{
												pos:        position{line: 908, col: 28, offset: 31485},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 908, col: 68, offset: 31525},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 919, col: 1, offset: 31777},
			expr: &choiceExpr{
				pos: position{line: 921, col: 5, offset: 31836},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 921, col: 5, offset: 31836},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 921, col: 5, offset: 31836},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 921, col: 5, offset: 31836},
									label: "attributes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 921, col: 16, offset: 31847},
										expr: &ruleRefExpr{
											pos:  position{line: 921, col: 17, offset: 31848},
											name: "ElementAttribute",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 921, col: 36, offset: 31867},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 921, col: 39, offset: 31870},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 921, col: 55, offset: 31886},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 921, col: 60, offset: 31891},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 921, col: 67, offset: 31898},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 925, col: 5, offset: 32117},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 925, col: 5, offset: 32117},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 925, col: 5, offset: 32117},
									label: "attributes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 925, col: 16, offset: 32128},
										expr: &ruleRefExpr{
											pos:  position{line: 925, col: 17, offset: 32129},
											name: "ElementAttribute",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 925, col: 36, offset: 32148},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 925, col: 43, offset: 32155},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 929, col: 1, offset: 32275},
			expr: &actionExpr{
				pos: position{line: 929, col: 31, offset: 32305},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 929, col: 31, offset: 32305},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 929, col: 31, offset: 32305},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 929, col: 42, offset: 32316},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 929, col: 65, offset: 32339},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 929, col: 76, offset: 32350},
								expr: &actionExpr{
									pos: position{line: 929, col: 77, offset: 32351},
									run: (*parser).callonContinuedRawParagraphLines7,
									expr: &seqExpr{
										pos: position{line: 929, col: 77, offset: 32351},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 929, col: 77, offset: 32351},
												expr: &ruleRefExpr{
													pos:  position{line: 929, col: 78, offset: 32352},
													name: "ListItemContinuation",
												},
											},
											&labeledExpr{
												pos:   position{line: 929, col: 99, offset: 32373},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 929, col: 105, offset: 32379},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 929, col: 105, offset: 32379},
															name: "SingleLineComment",
														},
														&ruleRefExpr{
															pos:  position{line: 929, col: 125, offset: 32399},
															name: "RawParagraphLine",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 937, col: 1, offset: 32641},
			expr: &actionExpr{
				pos: position{line: 937, col: 19, offset: 32659},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 937, col: 19, offset: 32659},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 937, col: 19, offset: 32659},
							expr: &ruleRefExpr{
								pos:  position{line: 937, col: 20, offset: 32660},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 938, col: 5, offset: 32674},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 938, col: 15, offset: 32684},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 938, col: 15, offset: 32684},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 938, col: 15, offset: 32684},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 938, col: 24, offset: 32693},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 940, col: 9, offset: 32785},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 940, col: 9, offset: 32785},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 940, col: 9, offset: 32785},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 940, col: 18, offset: 32794},
														expr: &ruleRefExpr{
															pos:  position{line: 940, col: 19, offset: 32795},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 940, col: 35, offset: 32811},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 946, col: 1, offset: 32928},
			expr: &actionExpr{
				pos: position{line: 947, col: 5, offset: 32951},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 947, col: 5, offset: 32951},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 947, col: 14, offset: 32960},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 947, col: 14, offset: 32960},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 948, col: 11, offset: 33021},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 949, col: 11, offset: 33066},
								expr: &ruleRefExpr{
									pos:  position{line: 949, col: 11, offset: 33066},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 950, col: 11, offset: 33084},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 950, col: 11, offset: 33084},
										expr: &ruleRefExpr{
											pos:  position{line: 950, col: 12, offset: 33085},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 951, col: 13, offset: 33103},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 951, col: 13, offset: 33103},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 952, col: 15, offset: 33130},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 953, col: 15, offset: 33155},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 954, col: 15, offset: 33180},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 955, col: 15, offset: 33207},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 956, col: 15, offset: 33227},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 957, col: 15, offset: 33320},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 958, col: 15, offset: 33350},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 959, col: 15, offset: 33418},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 960, col: 15, offset: 33449},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 961, col: 15, offset: 33470},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 962, col: 15, offset: 33501},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 963, col: 15, offset: 33538},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 964, col: 15, offset: 33568},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 965, col: 15, offset: 33601},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 966, col: 15, offset: 33625},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 967, col: 15, offset: 33658},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 974, col: 1, offset: 33881},
			expr: &actionExpr{
				pos: position{line: 974, col: 14, offset: 33894},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 974, col: 14, offset: 33894},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 974, col: 14, offset: 33894},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 974, col: 20, offset: 33900},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 974, col: 24, offset: 33904},
							expr: &ruleRefExpr{
								pos:  position{line: 974, col: 24, offset: 33904},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 974, col: 31, offset: 33911},
							expr: &ruleRefExpr{
								pos:  position{line: 974, col: 32, offset: 33912},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 981, col: 1, offset: 34196},
			expr: &choiceExpr{
				pos: position{line: 981, col: 15, offset: 34210},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 981, col: 15, offset: 34210},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 981, col: 41, offset: 34236},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 981, col: 65, offset: 34260},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 983, col: 1, offset: 34279},
			expr: &choiceExpr{
				pos: position{line: 983, col: 32, offset: 34310},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 983, col: 32, offset: 34310},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 983, col: 32, offset: 34310},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 983, col: 36, offset: 34314},
								expr: &litMatcher{
									pos:        position{line: 983, col: 37, offset: 34315},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 983, col: 43, offset: 34321},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 983, col: 43, offset: 34321},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 983, col: 47, offset: 34325},
								expr: &litMatcher{
									pos:        position{line: 983, col: 48, offset: 34326},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 983, col: 54, offset: 34332},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 983, col: 54, offset: 34332},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 983, col: 58, offset: 34336},
								expr: &litMatcher{
									pos:        position{line: 983, col: 59, offset: 34337},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 983, col: 65, offset: 34343},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 983, col: 65, offset: 34343},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 983, col: 69, offset: 34347},
								expr: &litMatcher{
									pos:        position{line: 983, col: 70, offset: 34348},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 985, col: 1, offset: 34353},
			expr: &choiceExpr{
				pos: position{line: 985, col: 34, offset: 34386},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 985, col: 34, offset: 34386},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 985, col: 41, offset: 34393},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 985, col: 48, offset: 34400},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 985, col: 55, offset: 34407},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 985, col: 62, offset: 34414},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 985, col: 68, offset: 34420},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 987, col: 1, offset: 34425},
			expr: &actionExpr{
				pos: position{line: 987, col: 26, offset: 34450},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 987, col: 26, offset: 34450},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 987, col: 32, offset: 34456},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 987, col: 32, offset: 34456},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 988, col: 15, offset: 34491},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 989, col: 15, offset: 34527},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 990, col: 15, offset: 34563},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 991, col: 15, offset: 34603},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 992, col: 15, offset: 34632},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 993, col: 15, offset: 34663},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 997, col: 1, offset: 34817},
			expr: &choiceExpr{
				pos: position{line: 997, col: 28, offset: 34844},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 997, col: 28, offset: 34844},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 998, col: 15, offset: 34878},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 999, col: 15, offset: 34914},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1000, col: 15, offset: 34950},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1002, col: 1, offset: 34976},
			expr: &choiceExpr{
				pos: position{line: 1002, col: 22, offset: 34997},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1002, col: 22, offset: 34997},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1003, col: 15, offset: 35028},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1004, col: 15, offset: 35060},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1005, col: 15, offset: 35092},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1006, col: 15, offset: 35128},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1007, col: 15, offset: 35164},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1009, col: 1, offset: 35188},
			expr: &choiceExpr{
				pos: position{line: 1009, col: 33, offset: 35220},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1009, col: 33, offset: 35220},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1009, col: 39, offset: 35226},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1009, col: 39, offset: 35226},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1013, col: 1, offset: 35359},
			expr: &actionExpr{
				pos: position{line: 1013, col: 25, offset: 35383},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1013, col: 25, offset: 35383},
					expr: &litMatcher{
						pos:        position{line: 1013, col: 25, offset: 35383},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1017, col: 1, offset: 35424},
			expr: &actionExpr{
				pos: position{line: 1017, col: 25, offset: 35448},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1017, col: 25, offset: 35448},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1017, col: 25, offset: 35448},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1017, col: 30, offset: 35453},
							expr: &litMatcher{
								pos:        position{line: 1017, col: 30, offset: 35453},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1025, col: 1, offset: 35550},
			expr: &choiceExpr{
				pos: position{line: 1025, col: 13, offset: 35562},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1025, col: 13, offset: 35562},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 35, offset: 35584},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1027, col: 1, offset: 35651},
			expr: &actionExpr{
				pos: position{line: 1027, col: 24, offset: 35674},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1027, col: 24, offset: 35674},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1027, col: 24, offset: 35674},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1027, col: 35, offset: 35685},
								expr: &ruleRefExpr{
									pos:  position{line: 1027, col: 36, offset: 35686},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1027, col: 59, offset: 35709},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1027, col: 64, offset: 35714},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1027, col: 74, offset: 35724},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1027, col: 103, offset: 35753},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1031, col: 1, offset: 35845},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1031, col: 32, offset: 35876},
				expr: &ruleRefExpr{
					pos:  position{line: 1031, col: 32, offset: 35876},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1033, col: 1, offset: 35907},
			expr: &actionExpr{
				pos: position{line: 1033, col: 31, offset: 35937},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1033, col: 31, offset: 35937},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1033, col: 31, offset: 35937},
							expr: &litMatcher{
								pos:        position{line: 1033, col: 33, offset: 35939},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1033, col: 39, offset: 35945},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1033, col: 48, offset: 35954},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1033, col: 48, offset: 35954},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1034, col: 11, offset: 35969},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1035, col: 11, offset: 36018},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1035, col: 11, offset: 36018},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1035, col: 19, offset: 36026},
												expr: &ruleRefExpr{
													pos:  position{line: 1035, col: 20, offset: 36027},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1036, col: 11, offset: 36045},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1037, col: 11, offset: 36075},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1038, col: 11, offset: 36098},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1039, col: 11, offset: 36119},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1040, col: 11, offset: 36140},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1041, col: 11, offset: 36164},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1042, col: 11, offset: 36188},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1043, col: 11, offset: 36214},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1044, col: 11, offset: 36243},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1048, col: 1, offset: 36310},
			expr: &choiceExpr{
				pos: position{line: 1049, col: 5, offset: 36354},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1049, col: 5, offset: 36354},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1050, col: 7, offset: 36451},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1050, col: 7, offset: 36451},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1050, col: 7, offset: 36451},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1050, col: 12, offset: 36456},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1054, col: 1, offset: 36619},
			expr: &choiceExpr{
				pos: position{line: 1054, col: 24, offset: 36642},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1054, col: 24, offset: 36642},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1054, col: 24, offset: 36642},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1054, col: 24, offset: 36642},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1054, col: 35, offset: 36653},
										expr: &ruleRefExpr{
											pos:  position{line: 1054, col: 36, offset: 36654},
											name: "QuotedTextAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1054, col: 61, offset: 36679},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1054, col: 61, offset: 36679},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1054, col: 65, offset: 36683},
											expr: &litMatcher{
												pos:        position{line: 1054, col: 66, offset: 36684},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1054, col: 71, offset: 36689},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1054, col: 81, offset: 36699},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1054, col: 110, offset: 36728},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1054, col: 114, offset: 36732},
									expr: &notExpr{
										pos: position{line: 1054, col: 116, offset: 36734},
										expr: &ruleRefExpr{
											pos:  position{line: 1054, col: 117, offset: 36735},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1056, col: 5, offset: 36934},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1056, col: 5, offset: 36934},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1056, col: 5, offset: 36934},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1056, col: 16, offset: 36945},
										expr: &ruleRefExpr{
											pos:  position{line: 1056, col: 17, offset: 36946},
											name: "QuotedTextAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1056, col: 40, offset: 36969},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1056, col: 44, offset: 36973},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1056, col: 54, offset: 36983},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1056, col: 54, offset: 36983},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1056, col: 58, offset: 36987},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1056, col: 87, offset: 37016},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1060, col: 1, offset: 37227},
			expr: &seqExpr{
				pos: position{line: 1060, col: 32, offset: 37258},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1060, col: 32, offset: 37258},
						expr: &ruleRefExpr{
							pos:  position{line: 1060, col: 33, offset: 37259},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1060, col: 39, offset: 37265},
						expr: &ruleRefExpr{
							pos:  position{line: 1060, col: 39, offset: 37265},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1062, col: 1, offset: 37294},
			expr: &choiceExpr{
				pos: position{line: 1062, col: 31, offset: 37324},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1062, col: 31, offset: 37324},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1063, col: 11, offset: 37339},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1063, col: 11, offset: 37339},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1063, col: 19, offset: 37347},
								expr: &ruleRefExpr{
									pos:  position{line: 1063, col: 20, offset: 37348},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1064, col: 11, offset: 37366},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1065, col: 11, offset: 37396},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1066, col: 11, offset: 37419},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1066, col: 11, offset: 37419},
								expr: &ruleRefExpr{
									pos:  position{line: 1066, col: 11, offset: 37419},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1066, col: 18, offset: 37426},
								expr: &seqExpr{
									pos: position{line: 1066, col: 19, offset: 37427},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1066, col: 19, offset: 37427},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1066, col: 23, offset: 37431},
											expr: &litMatcher{
												pos:        position{line: 1066, col: 24, offset: 37432},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1067, col: 11, offset: 37448},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1068, col: 11, offset: 37469},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1069, col: 11, offset: 37490},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1070, col: 11, offset: 37514},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1071, col: 11, offset: 37538},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1072, col: 11, offset: 37564},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1073, col: 11, offset: 37593},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1075, col: 1, offset: 37631},
			expr: &choiceExpr{
				pos: position{line: 1076, col: 5, offset: 37675},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1076, col: 5, offset: 37675},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1077, col: 7, offset: 37772},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1077, col: 7, offset: 37772},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1077, col: 7, offset: 37772},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1077, col: 11, offset: 37776},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1081, col: 1, offset: 37939},
			expr: &choiceExpr{
				pos: position{line: 1082, col: 5, offset: 37963},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1082, col: 5, offset: 37963},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1082, col: 5, offset: 37963},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1082, col: 5, offset: 37963},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1082, col: 18, offset: 37976},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1082, col: 40, offset: 37998},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1082, col: 45, offset: 38003},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1082, col: 55, offset: 38013},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1082, col: 84, offset: 38042},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1084, col: 9, offset: 38199},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1084, col: 9, offset: 38199},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1084, col: 9, offset: 38199},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1084, col: 22, offset: 38212},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1084, col: 44, offset: 38234},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1084, col: 49, offset: 38239},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1084, col: 59, offset: 38249},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1084, col: 88, offset: 38278},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1087, col: 9, offset: 38478},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1087, col: 9, offset: 38478},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1087, col: 9, offset: 38478},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1087, col: 22, offset: 38491},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1087, col: 44, offset: 38513},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1087, col: 48, offset: 38517},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1087, col: 58, offset: 38527},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1087, col: 87, offset: 38556},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1095, col: 1, offset: 38764},
			expr: &choiceExpr{
				pos: position{line: 1095, col: 15, offset: 38778},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1095, col: 15, offset: 38778},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1095, col: 39, offset: 38802},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1097, col: 1, offset: 38825},
			expr: &actionExpr{
				pos: position{line: 1097, col: 26, offset: 38850},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1097, col: 26, offset: 38850},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1097, col: 26, offset: 38850},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1097, col: 37, offset: 38861},
								expr: &ruleRefExpr{
									pos:  position{line: 1097, col: 38, offset: 38862},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1097, col: 61, offset: 38885},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1097, col: 66, offset: 38890},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1097, col: 76, offset: 38900},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1097, col: 107, offset: 38931},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1101, col: 1, offset: 39070},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1101, col: 34, offset: 39103},
				expr: &ruleRefExpr{
					pos:  position{line: 1101, col: 34, offset: 39103},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1103, col: 1, offset: 39135},
			expr: &actionExpr{
				pos: position{line: 1103, col: 33, offset: 39167},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1103, col: 33, offset: 39167},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1103, col: 33, offset: 39167},
							expr: &litMatcher{
								pos:        position{line: 1103, col: 35, offset: 39169},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1103, col: 41, offset: 39175},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1103, col: 50, offset: 39184},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1103, col: 50, offset: 39184},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1104, col: 11, offset: 39199},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1105, col: 11, offset: 39248},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1105, col: 11, offset: 39248},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1105, col: 19, offset: 39256},
												expr: &ruleRefExpr{
													pos:  position{line: 1105, col: 20, offset: 39257},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1106, col: 11, offset: 39275},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1107, col: 11, offset: 39307},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1108, col: 11, offset: 39330},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1109, col: 11, offset: 39349},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1110, col: 11, offset: 39370},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1111, col: 11, offset: 39394},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1112, col: 11, offset: 39418},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1113, col: 11, offset: 39444},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1114, col: 11, offset: 39473},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1118, col: 1, offset: 39542},
			expr: &choiceExpr{
				pos: position{line: 1119, col: 5, offset: 39588},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1119, col: 5, offset: 39588},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1120, col: 7, offset: 39687},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1120, col: 7, offset: 39687},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1120, col: 7, offset: 39687},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1120, col: 12, offset: 39692},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1124, col: 1, offset: 39857},
			expr: &choiceExpr{
				pos: position{line: 1124, col: 26, offset: 39882},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1124, col: 26, offset: 39882},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1124, col: 26, offset: 39882},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1124, col: 26, offset: 39882},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1124, col: 37, offset: 39893},
										expr: &ruleRefExpr{
											pos:  position{line: 1124, col: 38, offset: 39894},
											name: "QuotedTextAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1124, col: 62, offset: 39918},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1124, col: 62, offset: 39918},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1124, col: 66, offset: 39922},
											expr: &litMatcher{
												pos:        position{line: 1124, col: 67, offset: 39923},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1124, col: 72, offset: 39928},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1124, col: 82, offset: 39938},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1124, col: 113, offset: 39969},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1126, col: 5, offset: 40164},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1126, col: 5, offset: 40164},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1126, col: 5, offset: 40164},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1126, col: 16, offset: 40175},
										expr: &ruleRefExpr{
											pos:  position{line: 1126, col: 17, offset: 40176},
											name: "QuotedTextAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1126, col: 40, offset: 40199},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1126, col: 44, offset: 40203},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1126, col: 54, offset: 40213},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1126, col: 54, offset: 40213},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1126, col: 58, offset: 40217},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1126, col: 89, offset: 40248},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1130, col: 1, offset: 40463},
			expr: &seqExpr{
				pos: position{line: 1130, col: 34, offset: 40496},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1130, col: 34, offset: 40496},
						expr: &ruleRefExpr{
							pos:  position{line: 1130, col: 35, offset: 40497},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1130, col: 41, offset: 40503},
						expr: &ruleRefExpr{
							pos:  position{line: 1130, col: 41, offset: 40503},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1132, col: 1, offset: 40534},
			expr: &choiceExpr{
				pos: position{line: 1132, col: 33, offset: 40566},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1132, col: 33, offset: 40566},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1133, col: 11, offset: 40581},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1133, col: 11, offset: 40581},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1133, col: 19, offset: 40589},
								expr: &ruleRefExpr{
									pos:  position{line: 1133, col: 20, offset: 40590},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1134, col: 11, offset: 40608},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1135, col: 11, offset: 40640},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1136, col: 11, offset: 40663},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1136, col: 11, offset: 40663},
								expr: &ruleRefExpr{
									pos:  position{line: 1136, col: 11, offset: 40663},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1136, col: 18, offset: 40670},
								expr: &seqExpr{
									pos: position{line: 1136, col: 19, offset: 40671},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1136, col: 19, offset: 40671},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1136, col: 23, offset: 40675},
											expr: &litMatcher{
												pos:        position{line: 1136, col: 24, offset: 40676},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1137, col: 11, offset: 40692},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1138, col: 11, offset: 40711},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1139, col: 11, offset: 40732},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1140, col: 11, offset: 40756},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1141, col: 11, offset: 40780},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1142, col: 11, offset: 40806},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1143, col: 11, offset: 40835},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1145, col: 1, offset: 40875},
			expr: &choiceExpr{
				pos: position{line: 1146, col: 5, offset: 40921},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1146, col: 5, offset: 40921},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1147, col: 7, offset: 41020},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1147, col: 7, offset: 41020},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1147, col: 7, offset: 41020},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1147, col: 11, offset: 41024},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1151, col: 1, offset: 41190},
			expr: &choiceExpr{
				pos: position{line: 1152, col: 5, offset: 41216},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1152, col: 5, offset: 41216},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1152, col: 5, offset: 41216},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1152, col: 5, offset: 41216},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1152, col: 18, offset: 41229},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1152, col: 40, offset: 41251},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1152, col: 45, offset: 41256},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1152, col: 55, offset: 41266},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1152, col: 86, offset: 41297},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1154, col: 9, offset: 41454},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1154, col: 9, offset: 41454},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1154, col: 9, offset: 41454},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1154, col: 22, offset: 41467},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1154, col: 44, offset: 41489},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1154, col: 49, offset: 41494},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1154, col: 59, offset: 41504},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1154, col: 90, offset: 41535},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1157, col: 9, offset: 41735},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1157, col: 9, offset: 41735},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1157, col: 9, offset: 41735},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1157, col: 22, offset: 41748},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1157, col: 44, offset: 41770},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1157, col: 48, offset: 41774},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1157, col: 58, offset: 41784},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1157, col: 89, offset: 41815},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1164, col: 1, offset: 42025},
			expr: &choiceExpr{
				pos: position{line: 1164, col: 18, offset: 42042},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1164, col: 18, offset: 42042},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1164, col: 45, offset: 42069},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1166, col: 1, offset: 42095},
			expr: &actionExpr{
				pos: position{line: 1166, col: 29, offset: 42123},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1166, col: 29, offset: 42123},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1166, col: 29, offset: 42123},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1166, col: 40, offset: 42134},
								expr: &ruleRefExpr{
									pos:  position{line: 1166, col: 41, offset: 42135},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1166, col: 64, offset: 42158},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1166, col: 69, offset: 42163},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1166, col: 79, offset: 42173},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1166, col: 113, offset: 42207},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1170, col: 1, offset: 42349},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1170, col: 37, offset: 42385},
				expr: &ruleRefExpr{
					pos:  position{line: 1170, col: 37, offset: 42385},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1172, col: 1, offset: 42452},
			expr: &actionExpr{
				pos: position{line: 1172, col: 36, offset: 42487},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1172, col: 36, offset: 42487},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1172, col: 36, offset: 42487},
							expr: &litMatcher{
								pos:        position{line: 1172, col: 38, offset: 42489},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1172, col: 44, offset: 42495},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1172, col: 53, offset: 42504},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1172, col: 53, offset: 42504},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1173, col: 11, offset: 42519},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1174, col: 11, offset: 42568},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1174, col: 11, offset: 42568},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1174, col: 19, offset: 42576},
												expr: &ruleRefExpr{
													pos:  position{line: 1174, col: 20, offset: 42577},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1175, col: 11, offset: 42595},
										name: "QuotedString",
									},
									&actionExpr{
										pos: position{line: 1176, col: 11, offset: 42618},
										run: (*parser).callonDoubleQuoteMonospaceTextElement14,
										expr: &ruleRefExpr{
											pos:  position{line: 1176, col: 11, offset: 42618},
											name: "Apostrophe",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1180, col: 11, offset: 42802},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1181, col: 11, offset: 42837},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1182, col: 11, offset: 42856},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1183, col: 11, offset: 42877},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1184, col: 11, offset: 42898},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1185, col: 11, offset: 42922},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1186, col: 11, offset: 42948},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1187, col: 11, offset: 42977},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1191, col: 1, offset: 43049},
			expr: &choiceExpr{
				pos: position{line: 1192, col: 5, offset: 43098},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1192, col: 5, offset: 43098},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1193, col: 7, offset: 43200},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1193, col: 7, offset: 43200},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1193, col: 7, offset: 43200},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1193, col: 12, offset: 43205},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1197, col: 1, offset: 43373},
			expr: &choiceExpr{
				pos: position{line: 1197, col: 29, offset: 43401},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1197, col: 29, offset: 43401},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1197, col: 29, offset: 43401},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1197, col: 29, offset: 43401},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1197, col: 40, offset: 43412},
										expr: &ruleRefExpr{
											pos:  position{line: 1197, col: 41, offset: 43413},
											name: "QuotedTextAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1197, col: 65, offset: 43437},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1197, col: 65, offset: 43437},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1197, col: 69, offset: 43441},
											expr: &litMatcher{
												pos:        position{line: 1197, col: 70, offset: 43442},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1197, col: 75, offset: 43447},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1197, col: 85, offset: 43457},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1197, col: 119, offset: 43491},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1199, col: 5, offset: 43689},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1199, col: 5, offset: 43689},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1199, col: 5, offset: 43689},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1199, col: 16, offset: 43700},
										expr: &ruleRefExpr{
											pos:  position{line: 1199, col: 17, offset: 43701},
											name: "QuotedTextAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1199, col: 40, offset: 43724},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1199, col: 44, offset: 43728},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1199, col: 54, offset: 43738},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1199, col: 54, offset: 43738},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1199, col: 58, offset: 43742},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1199, col: 92, offset: 43776},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1203, col: 1, offset: 43995},
			expr: &seqExpr{
				pos: position{line: 1203, col: 37, offset: 44031},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1203, col: 37, offset: 44031},
						expr: &ruleRefExpr{
							pos:  position{line: 1203, col: 38, offset: 44032},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1203, col: 44, offset: 44038},
						expr: &ruleRefExpr{
							pos:  position{line: 1203, col: 44, offset: 44038},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1205, col: 1, offset: 44072},
			expr: &choiceExpr{
				pos: position{line: 1205, col: 37, offset: 44108},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1205, col: 37, offset: 44108},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1206, col: 11, offset: 44123},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1206, col: 11, offset: 44123},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1206, col: 19, offset: 44131},
								expr: &ruleRefExpr{
									pos:  position{line: 1206, col: 20, offset: 44132},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1207, col: 11, offset: 44150},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 11, offset: 44185},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1209, col: 11, offset: 44208},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1209, col: 11, offset: 44208},
								expr: &ruleRefExpr{
									pos:  position{line: 1209, col: 11, offset: 44208},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1209, col: 18, offset: 44215},
								expr: &seqExpr{
									pos: position{line: 1209, col: 19, offset: 44216},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1209, col: 19, offset: 44216},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1209, col: 23, offset: 44220},
											expr: &litMatcher{
												pos:        position{line: 1209, col: 24, offset: 44221},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1210, col: 11, offset: 44349},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1211, col: 11, offset: 44368},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1212, col: 11, offset: 44389},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1213, col: 11, offset: 44410},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 11, offset: 44434},
						name: "SuperscriptText",
					},
					&actionExpr{
						pos: position{line: 1215, col: 11, offset: 44460},
						run: (*parser).callonSingleQuoteMonospaceTextElement22,
						expr: &ruleRefExpr{
							pos:  position{line: 1215, col: 11, offset: 44460},
							name: "Apostrophe",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1219, col: 11, offset: 44601},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1220, col: 11, offset: 44630},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1222, col: 1, offset: 44673},
			expr: &choiceExpr{
				pos: position{line: 1223, col: 5, offset: 44722},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1223, col: 5, offset: 44722},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1224, col: 7, offset: 44824},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1224, col: 7, offset: 44824},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1224, col: 7, offset: 44824},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1224, col: 11, offset: 44828},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1228, col: 1, offset: 44997},
			expr: &choiceExpr{
				pos: position{line: 1229, col: 5, offset: 45026},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1229, col: 5, offset: 45026},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1229, col: 5, offset: 45026},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1229, col: 5, offset: 45026},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1229, col: 18, offset: 45039},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1229, col: 40, offset: 45061},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1229, col: 45, offset: 45066},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1229, col: 55, offset: 45076},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1229, col: 89, offset: 45110},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1231, col: 9, offset: 45267},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1231, col: 9, offset: 45267},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1231, col: 9, offset: 45267},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1231, col: 22, offset: 45280},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1231, col: 44, offset: 45302},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1231, col: 49, offset: 45307},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1231, col: 59, offset: 45317},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1231, col: 93, offset: 45351},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1234, col: 9, offset: 45551},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1234, col: 9, offset: 45551},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1234, col: 9, offset: 45551},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1234, col: 22, offset: 45564},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1234, col: 44, offset: 45586},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1234, col: 48, offset: 45590},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1234, col: 58, offset: 45600},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1234, col: 92, offset: 45634},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1242, col: 1, offset: 45959},
			expr: &choiceExpr{
				pos: position{line: 1242, col: 17, offset: 45975},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1242, col: 17, offset: 45975},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1242, col: 38, offset: 45996},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1244, col: 1, offset: 46016},
			expr: &actionExpr{
				pos: position{line: 1244, col: 23, offset: 46038},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1244, col: 23, offset: 46038},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1244, col: 23, offset: 46038},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1244, col: 46, offset: 46061},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1244, col: 55, offset: 46070},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1244, col: 82, offset: 46097},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1248, col: 1, offset: 46201},
			expr: &actionExpr{
				pos: position{line: 1248, col: 31, offset: 46231},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1248, col: 31, offset: 46231},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1248, col: 41, offset: 46241},
						expr: &ruleRefExpr{
							pos:  position{line: 1248, col: 41, offset: 46241},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1252, col: 1, offset: 46319},
			expr: &seqExpr{
				pos: position{line: 1252, col: 27, offset: 46345},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1252, col: 27, offset: 46345},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1252, col: 32, offset: 46350},
						expr: &charClassMatcher{
							pos:        position{line: 1252, col: 33, offset: 46351},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1254, col: 1, offset: 46362},
			expr: &litMatcher{
				pos:        position{line: 1254, col: 25, offset: 46386},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1257, col: 1, offset: 46474},
			expr: &actionExpr{
				pos: position{line: 1257, col: 30, offset: 46503},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1257, col: 30, offset: 46503},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1258, col: 9, offset: 46521},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1258, col: 9, offset: 46521},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1258, col: 9, offset: 46521},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1258, col: 19, offset: 46531},
										expr: &ruleRefExpr{
											pos:  position{line: 1258, col: 20, offset: 46532},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1259, col: 11, offset: 46588},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1259, col: 11, offset: 46588},
										expr: &ruleRefExpr{
											pos:  position{line: 1259, col: 11, offset: 46588},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1259, col: 18, offset: 46595},
										expr: &ruleRefExpr{
											pos:  position{line: 1259, col: 19, offset: 46596},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1260, col: 11, offset: 46627},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1260, col: 11, offset: 46627},
										expr: &litMatcher{
											pos:        position{line: 1260, col: 12, offset: 46628},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1260, col: 16, offset: 46632},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1261, col: 11, offset: 46680},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1262, col: 11, offset: 46699},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1263, col: 11, offset: 46720},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1264, col: 11, offset: 46741},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1265, col: 11, offset: 46765},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1266, col: 11, offset: 46791},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1266, col: 11, offset: 46791},
										expr: &litMatcher{
											pos:        position{line: 1266, col: 12, offset: 46792},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1266, col: 17, offset: 46797},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1267, col: 11, offset: 46821},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1268, col: 11, offset: 46850},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1272, col: 1, offset: 46916},
			expr: &choiceExpr{
				pos: position{line: 1272, col: 41, offset: 46956},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1272, col: 41, offset: 46956},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1272, col: 55, offset: 46970},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1272, col: 55, offset: 46970},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1272, col: 55, offset: 46970},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1272, col: 59, offset: 46974},
									expr: &litMatcher{
										pos:        position{line: 1272, col: 60, offset: 46975},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1276, col: 1, offset: 47034},
			expr: &actionExpr{
				pos: position{line: 1276, col: 23, offset: 47056},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1276, col: 23, offset: 47056},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1276, col: 23, offset: 47056},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1276, col: 46, offset: 47079},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1276, col: 55, offset: 47088},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1276, col: 82, offset: 47115},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1280, col: 1, offset: 47219},
			expr: &actionExpr{
				pos: position{line: 1280, col: 31, offset: 47249},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1280, col: 31, offset: 47249},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1280, col: 41, offset: 47259},
						expr: &ruleRefExpr{
							pos:  position{line: 1280, col: 41, offset: 47259},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1285, col: 1, offset: 47419},
			expr: &actionExpr{
				pos: position{line: 1285, col: 30, offset: 47448},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1285, col: 30, offset: 47448},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1286, col: 9, offset: 47466},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1286, col: 9, offset: 47466},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1286, col: 9, offset: 47466},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1286, col: 19, offset: 47476},
										expr: &ruleRefExpr{
											pos:  position{line: 1286, col: 20, offset: 47477},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1287, col: 11, offset: 47533},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1287, col: 11, offset: 47533},
										expr: &ruleRefExpr{
											pos:  position{line: 1287, col: 11, offset: 47533},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1287, col: 18, offset: 47540},
										expr: &ruleRefExpr{
											pos:  position{line: 1287, col: 19, offset: 47541},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1288, col: 11, offset: 47572},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1289, col: 11, offset: 47591},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1290, col: 11, offset: 47612},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1291, col: 11, offset: 47633},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1292, col: 11, offset: 47657},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1293, col: 11, offset: 47683},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1293, col: 11, offset: 47683},
										expr: &litMatcher{
											pos:        position{line: 1293, col: 12, offset: 47684},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1293, col: 18, offset: 47690},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1294, col: 10, offset: 47713},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1295, col: 11, offset: 47742},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1299, col: 1, offset: 47816},
			expr: &seqExpr{
				pos: position{line: 1299, col: 27, offset: 47842},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1299, col: 27, offset: 47842},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1299, col: 33, offset: 47848},
						expr: &charClassMatcher{
							pos:        position{line: 1299, col: 34, offset: 47849},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1301, col: 1, offset: 47860},
			expr: &litMatcher{
				pos:        position{line: 1301, col: 25, offset: 47884},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1303, col: 1, offset: 47891},
			expr: &actionExpr{
				pos: position{line: 1303, col: 41, offset: 47931},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1303, col: 42, offset: 47932},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1303, col: 42, offset: 47932},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1303, col: 56, offset: 47946},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1303, col: 56, offset: 47946},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1303, col: 60, offset: 47950},
									expr: &litMatcher{
										pos:        position{line: 1303, col: 61, offset: 47951},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1312, col: 1, offset: 48071},
			expr: &choiceExpr{
				pos: position{line: 1312, col: 15, offset: 48085},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1312, col: 15, offset: 48085},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1312, col: 39, offset: 48109},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1314, col: 1, offset: 48132},
			expr: &actionExpr{
				pos: position{line: 1314, col: 26, offset: 48157},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1314, col: 26, offset: 48157},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1314, col: 26, offset: 48157},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1314, col: 37, offset: 48168},
								expr: &ruleRefExpr{
									pos:  position{line: 1314, col: 38, offset: 48169},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1314, col: 61, offset: 48192},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1314, col: 66, offset: 48197},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1314, col: 76, offset: 48207},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1314, col: 107, offset: 48238},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1318, col: 1, offset: 48377},
			expr: &seqExpr{
				pos: position{line: 1318, col: 34, offset: 48410},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1318, col: 34, offset: 48410},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1318, col: 63, offset: 48439},
						expr: &seqExpr{
							pos: position{line: 1318, col: 64, offset: 48440},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1318, col: 64, offset: 48440},
									expr: &litMatcher{
										pos:        position{line: 1318, col: 66, offset: 48442},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1318, col: 73, offset: 48449},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1318, col: 73, offset: 48449},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1318, col: 81, offset: 48457},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1320, col: 1, offset: 48524},
			expr: &choiceExpr{
				pos: position{line: 1320, col: 33, offset: 48556},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1320, col: 33, offset: 48556},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1321, col: 11, offset: 48571},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1322, col: 11, offset: 48603},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1322, col: 11, offset: 48603},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1322, col: 19, offset: 48611},
								expr: &ruleRefExpr{
									pos:  position{line: 1322, col: 20, offset: 48612},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1323, col: 11, offset: 48630},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1324, col: 11, offset: 48653},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1325, col: 11, offset: 48672},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1326, col: 11, offset: 48693},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1327, col: 11, offset: 48717},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1328, col: 11, offset: 48741},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1329, col: 11, offset: 48767},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 11, offset: 48796},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1332, col: 1, offset: 48836},
			expr: &choiceExpr{
				pos: position{line: 1333, col: 5, offset: 48882},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1333, col: 5, offset: 48882},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1334, col: 7, offset: 48981},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1334, col: 7, offset: 48981},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1334, col: 7, offset: 48981},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1334, col: 12, offset: 48986},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1338, col: 1, offset: 49151},
			expr: &choiceExpr{
				pos: position{line: 1338, col: 26, offset: 49176},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1338, col: 26, offset: 49176},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1338, col: 26, offset: 49176},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1338, col: 26, offset: 49176},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1338, col: 37, offset: 49187},
										expr: &ruleRefExpr{
											pos:  position{line: 1338, col: 38, offset: 49188},
											name: "QuotedTextAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1338, col: 62, offset: 49212},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1338, col: 62, offset: 49212},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1338, col: 66, offset: 49216},
											expr: &litMatcher{
												pos:        position{line: 1338, col: 67, offset: 49217},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1338, col: 72, offset: 49222},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1338, col: 82, offset: 49232},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1338, col: 113, offset: 49263},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1340, col: 5, offset: 49458},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1340, col: 5, offset: 49458},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1340, col: 5, offset: 49458},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1340, col: 16, offset: 49469},
										expr: &ruleRefExpr{
											pos:  position{line: 1340, col: 17, offset: 49470},
											name: "QuotedTextAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1340, col: 40, offset: 49493},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1340, col: 44, offset: 49497},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1340, col: 54, offset: 49507},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1340, col: 54, offset: 49507},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1340, col: 58, offset: 49511},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1340, col: 89, offset: 49542},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1344, col: 1, offset: 49756},
			expr: &seqExpr{
				pos: position{line: 1344, col: 34, offset: 49789},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1344, col: 34, offset: 49789},
						expr: &ruleRefExpr{
							pos:  position{line: 1344, col: 35, offset: 49790},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1344, col: 41, offset: 49796},
						expr: &ruleRefExpr{
							pos:  position{line: 1344, col: 41, offset: 49796},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1346, col: 1, offset: 49827},
			expr: &choiceExpr{
				pos: position{line: 1346, col: 33, offset: 49859},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1346, col: 33, offset: 49859},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1347, col: 11, offset: 49874},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1348, col: 11, offset: 49906},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1348, col: 11, offset: 49906},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1348, col: 19, offset: 49914},
								expr: &ruleRefExpr{
									pos:  position{line: 1348, col: 20, offset: 49915},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1349, col: 11, offset: 49933},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1350, col: 11, offset: 49956},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1350, col: 11, offset: 49956},
								expr: &ruleRefExpr{
									pos:  position{line: 1350, col: 11, offset: 49956},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1350, col: 18, offset: 49963},
								expr: &seqExpr{
									pos: position{line: 1350, col: 19, offset: 49964},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1350, col: 19, offset: 49964},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1350, col: 23, offset: 49968},
											expr: &litMatcher{
												pos:        position{line: 1350, col: 24, offset: 49969},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1351, col: 11, offset: 49985},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 11, offset: 50004},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1353, col: 11, offset: 50025},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1354, col: 11, offset: 50049},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1355, col: 11, offset: 50073},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1356, col: 11, offset: 50099},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1357, col: 11, offset: 50128},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1359, col: 1, offset: 50168},
			expr: &choiceExpr{
				pos: position{line: 1360, col: 5, offset: 50214},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1360, col: 5, offset: 50214},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1361, col: 7, offset: 50311},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1361, col: 7, offset: 50311},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1361, col: 7, offset: 50311},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1361, col: 11, offset: 50315},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1365, col: 1, offset: 50478},
			expr: &choiceExpr{
				pos: position{line: 1366, col: 5, offset: 50503},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1366, col: 5, offset: 50503},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1366, col: 5, offset: 50503},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1366, col: 5, offset: 50503},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1366, col: 18, offset: 50516},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1366, col: 40, offset: 50538},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1366, col: 45, offset: 50543},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1366, col: 55, offset: 50553},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1366, col: 86, offset: 50584},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1368, col: 9, offset: 50741},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1368, col: 9, offset: 50741},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1368, col: 9, offset: 50741},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1368, col: 22, offset: 50754},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1368, col: 44, offset: 50776},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1368, col: 49, offset: 50781},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1368, col: 59, offset: 50791},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1368, col: 90, offset: 50822},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1371, col: 9, offset: 51022},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1371, col: 9, offset: 51022},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1371, col: 9, offset: 51022},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1371, col: 22, offset: 51035},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1371, col: 44, offset: 51057},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1371, col: 48, offset: 51061},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1371, col: 58, offset: 51071},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1371, col: 89, offset: 51102},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1376, col: 1, offset: 51252},
			expr: &actionExpr{
				pos: position{line: 1376, col: 18, offset: 51269},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1376, col: 18, offset: 51269},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1376, col: 18, offset: 51269},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1376, col: 29, offset: 51280},
								expr: &ruleRefExpr{
									pos:  position{line: 1376, col: 30, offset: 51281},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1376, col: 53, offset: 51304},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1376, col: 57, offset: 51308},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1376, col: 66, offset: 51317},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1376, col: 88, offset: 51339},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1380, col: 1, offset: 51440},
			expr: &choiceExpr{
				pos: position{line: 1380, col: 25, offset: 51464},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1380, col: 25, offset: 51464},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1380, col: 38, offset: 51477},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1382, col: 1, offset: 51496},
			expr: &actionExpr{
				pos: position{line: 1382, col: 21, offset: 51516},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1382, col: 21, offset: 51516},
					expr: &charClassMatcher{
						pos:        position{line: 1382, col: 21, offset: 51516},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1386, col: 1, offset: 51593},
			expr: &actionExpr{
				pos: position{line: 1386, col: 25, offset: 51617},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1386, col: 25, offset: 51617},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1386, col: 25, offset: 51617},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1386, col: 38, offset: 51630},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1386, col: 60, offset: 51652},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1386, col: 64, offset: 51656},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1386, col: 73, offset: 51665},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1386, col: 95, offset: 51687},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1390, col: 1, offset: 51816},
			expr: &actionExpr{
				pos: position{line: 1390, col: 20, offset: 51835},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1390, col: 20, offset: 51835},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1390, col: 20, offset: 51835},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1390, col: 31, offset: 51846},
								expr: &ruleRefExpr{
									pos:  position{line: 1390, col: 32, offset: 51847},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1390, col: 55, offset: 51870},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1390, col: 59, offset: 51874},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1390, col: 68, offset: 51883},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1390, col: 92, offset: 51907},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1394, col: 1, offset: 52010},
			expr: &choiceExpr{
				pos: position{line: 1394, col: 27, offset: 52036},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1394, col: 27, offset: 52036},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1394, col: 40, offset: 52049},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1396, col: 1, offset: 52070},
			expr: &actionExpr{
				pos: position{line: 1396, col: 23, offset: 52092},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1396, col: 23, offset: 52092},
					expr: &charClassMatcher{
						pos:        position{line: 1396, col: 23, offset: 52092},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1400, col: 1, offset: 52169},
			expr: &actionExpr{
				pos: position{line: 1400, col: 27, offset: 52195},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1400, col: 27, offset: 52195},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1400, col: 27, offset: 52195},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1400, col: 40, offset: 52208},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1400, col: 62, offset: 52230},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1400, col: 66, offset: 52234},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1400, col: 75, offset: 52243},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1400, col: 99, offset: 52267},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1407, col: 1, offset: 52509},
			expr: &choiceExpr{
				pos: position{line: 1407, col: 22, offset: 52530},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1407, col: 22, offset: 52530},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1407, col: 46, offset: 52554},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1407, col: 70, offset: 52578},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1409, col: 1, offset: 52596},
			expr: &litMatcher{
				pos:        position{line: 1409, col: 32, offset: 52627},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1411, col: 1, offset: 52632},
			expr: &actionExpr{
				pos: position{line: 1411, col: 26, offset: 52657},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1411, col: 26, offset: 52657},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1411, col: 26, offset: 52657},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1411, col: 54, offset: 52685},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1411, col: 63, offset: 52694},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1411, col: 93, offset: 52724},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1411, col: 121, offset: 52752},
							expr: &ruleRefExpr{
								pos:  position{line: 1411, col: 122, offset: 52753},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1415, col: 1, offset: 52858},
			expr: &choiceExpr{
				pos: position{line: 1415, col: 33, offset: 52890},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1415, col: 34, offset: 52891},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1415, col: 34, offset: 52891},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1415, col: 35, offset: 52892},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1415, col: 35, offset: 52892},
											expr: &ruleRefExpr{
												pos:  position{line: 1415, col: 36, offset: 52893},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1415, col: 64, offset: 52921},
											expr: &ruleRefExpr{
												pos:  position{line: 1415, col: 65, offset: 52922},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1415, col: 71, offset: 52928},
											expr: &ruleRefExpr{
												pos:  position{line: 1415, col: 72, offset: 52929},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1415, col: 80, offset: 52937,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1415, col: 83, offset: 52940},
									expr: &seqExpr{
										pos: position{line: 1415, col: 84, offset: 52941},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1415, col: 84, offset: 52941},
												expr: &seqExpr{
													pos: position{line: 1415, col: 86, offset: 52943},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1415, col: 86, offset: 52943},
															expr: &ruleRefExpr{
																pos:  position{line: 1415, col: 86, offset: 52943},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1415, col: 93, offset: 52950},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1415, col: 122, offset: 52979},
												expr: &ruleRefExpr{
													pos:  position{line: 1415, col: 123, offset: 52980},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1415, col: 151, offset: 53008},
												expr: &ruleRefExpr{
													pos:  position{line: 1415, col: 152, offset: 53009},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1415, col: 160, offset: 53017,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1417, col: 7, offset: 53159},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1417, col: 8, offset: 53160},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1417, col: 8, offset: 53160},
									expr: &ruleRefExpr{
										pos:  position{line: 1417, col: 9, offset: 53161},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1417, col: 15, offset: 53167},
									expr: &ruleRefExpr{
										pos:  position{line: 1417, col: 16, offset: 53168},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1417, col: 24, offset: 53176},
									expr: &ruleRefExpr{
										pos:  position{line: 1417, col: 25, offset: 53177},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1417, col: 53, offset: 53205,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1421, col: 1, offset: 53287},
			expr: &litMatcher{
				pos:        position{line: 1421, col: 32, offset: 53318},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1423, col: 1, offset: 53325},
			expr: &actionExpr{
				pos: position{line: 1423, col: 26, offset: 53350},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1423, col: 26, offset: 53350},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1423, col: 26, offset: 53350},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1423, col: 54, offset: 53378},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1423, col: 63, offset: 53387},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1423, col: 93, offset: 53417},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1423, col: 121, offset: 53445},
							expr: &ruleRefExpr{
								pos:  position{line: 1423, col: 122, offset: 53446},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1427, col: 1, offset: 53551},
			expr: &choiceExpr{
				pos: position{line: 1427, col: 33, offset: 53583},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1427, col: 34, offset: 53584},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1427, col: 34, offset: 53584},
							expr: &seqExpr{
								pos: position{line: 1427, col: 35, offset: 53585},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1427, col: 35, offset: 53585},
										expr: &ruleRefExpr{
											pos:  position{line: 1427, col: 36, offset: 53586},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1427, col: 64, offset: 53614,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1429, col: 7, offset: 53779},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1429, col: 7, offset: 53779},
							expr: &seqExpr{
								pos: position{line: 1429, col: 8, offset: 53780},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1429, col: 8, offset: 53780},
										expr: &ruleRefExpr{
											pos:  position{line: 1429, col: 9, offset: 53781},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1429, col: 15, offset: 53787},
										expr: &ruleRefExpr{
											pos:  position{line: 1429, col: 16, offset: 53788},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1429, col: 24, offset: 53796},
										expr: &ruleRefExpr{
											pos:  position{line: 1429, col: 25, offset: 53797},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1429, col: 53, offset: 53825,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1433, col: 1, offset: 53908},
			expr: &choiceExpr{
				pos: position{line: 1433, col: 21, offset: 53928},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1433, col: 21, offset: 53928},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1433, col: 21, offset: 53928},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1433, col: 21, offset: 53928},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1433, col: 30, offset: 53937},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1433, col: 38, offset: 53945},
										expr: &ruleRefExpr{
											pos:  position{line: 1433, col: 39, offset: 53946},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1433, col: 67, offset: 53974},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1435, col: 5, offset: 54070},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1435, col: 5, offset: 54070},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1435, col: 5, offset: 54070},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1435, col: 15, offset: 54080},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1435, col: 23, offset: 54088},
										expr: &choiceExpr{
											pos: position{line: 1435, col: 24, offset: 54089},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1435, col: 24, offset: 54089},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1435, col: 37, offset: 54102},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1435, col: 65, offset: 54130},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1439, col: 1, offset: 54226},
			expr: &actionExpr{
				pos: position{line: 1439, col: 30, offset: 54255},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1439, col: 30, offset: 54255},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1446, col: 1, offset: 54428},
			expr: &choiceExpr{
				pos: position{line: 1446, col: 19, offset: 54446},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1446, col: 19, offset: 54446},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1446, col: 44, offset: 54471},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1448, col: 1, offset: 54496},
			expr: &choiceExpr{
				pos: position{line: 1448, col: 27, offset: 54522},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1448, col: 27, offset: 54522},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1448, col: 27, offset: 54522},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1448, col: 27, offset: 54522},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1448, col: 32, offset: 54527},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1448, col: 36, offset: 54531},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1448, col: 40, offset: 54535},
									expr: &ruleRefExpr{
										pos:  position{line: 1448, col: 40, offset: 54535},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1448, col: 47, offset: 54542},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1448, col: 51, offset: 54546},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1448, col: 58, offset: 54553},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1448, col: 79, offset: 54574},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1450, col: 5, offset: 54639},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1450, col: 5, offset: 54639},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1450, col: 5, offset: 54639},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1450, col: 10, offset: 54644},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1450, col: 14, offset: 54648},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 1450, col: 18, offset: 54652},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1454, col: 1, offset: 54715},
			expr: &actionExpr{
				pos: position{line: 1454, col: 27, offset: 54741},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1454, col: 27, offset: 54741},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1454, col: 27, offset: 54741},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1454, col: 35, offset: 54749},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1454, col: 40, offset: 54754},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1454, col: 54, offset: 54768},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1454, col: 72, offset: 54786},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1458, col: 1, offset: 54909},
			expr: &ruleRefExpr{
				pos:  position{line: 1458, col: 24, offset: 54932},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1463, col: 1, offset: 55054},
			expr: &choiceExpr{
				pos: position{line: 1463, col: 9, offset: 55062},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1463, col: 9, offset: 55062},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1463, col: 24, offset: 55077},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1466, col: 1, offset: 55158},
			expr: &actionExpr{
				pos: position{line: 1466, col: 17, offset: 55174},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1466, col: 17, offset: 55174},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1466, col: 17, offset: 55174},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1466, col: 25, offset: 55182},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1466, col: 30, offset: 55187},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1466, col: 40, offset: 55197},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1466, col: 58, offset: 55215},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1470, col: 1, offset: 55326},
			expr: &actionExpr{
				pos: position{line: 1470, col: 17, offset: 55342},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1470, col: 17, offset: 55342},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1470, col: 17, offset: 55342},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1470, col: 22, offset: 55347},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1470, col: 42, offset: 55367},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1470, col: 59, offset: 55384},
								expr: &ruleRefExpr{
									pos:  position{line: 1470, col: 60, offset: 55385},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1474, col: 1, offset: 55478},
			expr: &actionExpr{
				pos: position{line: 1474, col: 19, offset: 55496},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1474, col: 19, offset: 55496},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1474, col: 19, offset: 55496},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1474, col: 23, offset: 55500},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1474, col: 33, offset: 55510},
								expr: &ruleRefExpr{
									pos:  position{line: 1474, col: 34, offset: 55511},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1475, col: 5, offset: 55543},
							expr: &ruleRefExpr{
								pos:  position{line: 1475, col: 5, offset: 55543},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1475, col: 12, offset: 55550},
							label: "otherAttrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1475, col: 23, offset: 55561},
								expr: &ruleRefExpr{
									pos:  position{line: 1475, col: 24, offset: 55562},
									name: "NamedAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1475, col: 41, offset: 55579},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1479, col: 1, offset: 55696},
			expr: &actionExpr{
				pos: position{line: 1479, col: 30, offset: 55725},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1479, col: 30, offset: 55725},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1481, col: 5, offset: 55776},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1481, col: 6, offset: 55777},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1481, col: 6, offset: 55777},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1481, col: 6, offset: 55777},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1481, col: 11, offset: 55782},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1481, col: 20, offset: 55791},
												expr: &choiceExpr{
													pos: position{line: 1481, col: 21, offset: 55792},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1481, col: 21, offset: 55792},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1481, col: 36, offset: 55807},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1481, col: 49, offset: 55820},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1481, col: 70, offset: 55841},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1481, col: 92, offset: 55863},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1481, col: 97, offset: 55868},
											expr: &notExpr{
												pos: position{line: 1481, col: 99, offset: 55870},
												expr: &litMatcher{
													pos:        position{line: 1481, col: 100, offset: 55871},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1481, col: 105, offset: 55876},
											expr: &litMatcher{
												pos:        position{line: 1481, col: 105, offset: 55876},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1485, col: 6, offset: 56003},
								run: (*parser).callonFirstLinkAttributeElement20,
								expr: &seqExpr{
									pos: position{line: 1485, col: 6, offset: 56003},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1485, col: 6, offset: 56003},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1485, col: 15, offset: 56012},
												expr: &choiceExpr{
													pos: position{line: 1485, col: 16, offset: 56013},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1485, col: 16, offset: 56013},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1485, col: 31, offset: 56028},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1485, col: 44, offset: 56041},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1485, col: 65, offset: 56062},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1485, col: 89, offset: 56086},
											expr: &notExpr{
												pos: position{line: 1485, col: 91, offset: 56088},
												expr: &litMatcher{
													pos:        position{line: 1485, col: 92, offset: 56089},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1485, col: 97, offset: 56094},
											expr: &litMatcher{
												pos:        position{line: 1485, col: 97, offset: 56094},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1491, col: 1, offset: 56208},
			expr: &actionExpr{
				pos: position{line: 1491, col: 18, offset: 56225},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1491, col: 18, offset: 56225},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1495, col: 1, offset: 56311},
			expr: &actionExpr{
				pos: position{line: 1495, col: 24, offset: 56334},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1495, col: 24, offset: 56334},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1499, col: 1, offset: 56427},
			expr: &actionExpr{
				pos: position{line: 1499, col: 26, offset: 56452},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1499, col: 26, offset: 56452},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1506, col: 1, offset: 56640},
			expr: &actionExpr{
				pos: position{line: 1506, col: 15, offset: 56654},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1506, col: 15, offset: 56654},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1506, col: 15, offset: 56654},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1506, col: 27, offset: 56666},
								name: "ImageBlockAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1506, col: 49, offset: 56688},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1506, col: 59, offset: 56698},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1506, col: 65, offset: 56704},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1506, col: 75, offset: 56714},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1506, col: 93, offset: 56732},
								name: "InlineImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1506, col: 116, offset: 56755},
							expr: &ruleRefExpr{
								pos:  position{line: 1506, col: 116, offset: 56755},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1506, col: 123, offset: 56762},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageBlockAttributes",
			pos:  position{line: 1511, col: 1, offset: 56993},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1511, col: 25, offset: 57017},
				expr: &actionExpr{
					pos: position{line: 1511, col: 26, offset: 57018},
					run: (*parser).callonImageBlockAttributes2,
					expr: &seqExpr{
						pos: position{line: 1511, col: 26, offset: 57018},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1511, col: 26, offset: 57018},
								expr: &ruleRefExpr{
									pos:  position{line: 1511, col: 27, offset: 57019},
									name: "VerseAttributes",
								},
							},
							&labeledExpr{
								pos:   position{line: 1511, col: 43, offset: 57035},
								label: "attribute",
								expr: &choiceExpr{
									pos: position{line: 1511, col: 54, offset: 57046},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1511, col: 54, offset: 57046},
											name: "ElementShortHandAttributes",
										},
										&ruleRefExpr{
											pos:  position{line: 1511, col: 83, offset: 57075},
											name: "ElementTitle",
										},
										&ruleRefExpr{
											pos:  position{line: 1511, col: 98, offset: 57090},
											name: "ElementID",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1513, col: 1, offset: 57131},
			expr: &actionExpr{
				pos: position{line: 1513, col: 18, offset: 57148},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1513, col: 18, offset: 57148},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1513, col: 18, offset: 57148},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1513, col: 22, offset: 57152},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1513, col: 26, offset: 57156},
								expr: &ruleRefExpr{
									pos:  position{line: 1513, col: 27, offset: 57157},
									name: "ImageAlt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1513, col: 38, offset: 57168},
							label: "shortHands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1513, col: 49, offset: 57179},
								expr: &ruleRefExpr{
									pos:  position{line: 1513, col: 50, offset: 57180},
									name: "ShortHandAttr",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1513, col: 66, offset: 57196},
							expr: &seqExpr{
								pos: position{line: 1513, col: 67, offset: 57197},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1513, col: 67, offset: 57197},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1513, col: 71, offset: 57201},
										expr: &ruleRefExpr{
											pos:  position{line: 1513, col: 71, offset: 57201},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1513, col: 80, offset: 57210},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1513, col: 86, offset: 57216},
								expr: &ruleRefExpr{
									pos:  position{line: 1513, col: 87, offset: 57217},
									name: "ImageWidth",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1513, col: 100, offset: 57230},
							expr: &seqExpr{
								pos: position{line: 1513, col: 101, offset: 57231},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1513, col: 101, offset: 57231},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1513, col: 105, offset: 57235},
										expr: &ruleRefExpr{
											pos:  position{line: 1513, col: 105, offset: 57235},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1513, col: 114, offset: 57244},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1513, col: 121, offset: 57251},
								expr: &ruleRefExpr{
									pos:  position{line: 1513, col: 122, offset: 57252},
									name: "ImageHeight",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1513, col: 136, offset: 57266},
							expr: &seqExpr{
								pos: position{line: 1513, col: 137, offset: 57267},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1513, col: 137, offset: 57267},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1513, col: 141, offset: 57271},
										expr: &ruleRefExpr{
											pos:  position{line: 1513, col: 141, offset: 57271},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1513, col: 150, offset: 57280},
							label: "others",
							expr: &ruleRefExpr{
								pos:  position{line: 1513, col: 158, offset: 57288},
								name: "NamedAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1513, col: 175, offset: 57305},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1513, col: 179, offset: 57309},
							expr: &ruleRefExpr{
								pos:  position{line: 1513, col: 179, offset: 57309},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1513, col: 186, offset: 57316},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1517, col: 1, offset: 57388},
			expr: &actionExpr{
				pos: position{line: 1517, col: 16, offset: 57403},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1517, col: 16, offset: 57403},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1517, col: 16, offset: 57403},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1517, col: 25, offset: 57412},
							expr: &litMatcher{
								pos:        position{line: 1517, col: 26, offset: 57413},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1517, col: 30, offset: 57417},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1517, col: 36, offset: 57423},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1517, col: 46, offset: 57433},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1517, col: 64, offset: 57451},
								name: "InlineImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttributes",
			pos:  position{line: 1521, col: 1, offset: 57599},
			expr: &actionExpr{
				pos: position{line: 1521, col: 26, offset: 57624},
				run: (*parser).callonInlineImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1521, col: 26, offset: 57624},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1521, col: 26, offset: 57624},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1521, col: 30, offset: 57628},
							expr: &ruleRefExpr{
								pos:  position{line: 1521, col: 30, offset: 57628},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1521, col: 37, offset: 57635},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1521, col: 41, offset: 57639},
								expr: &ruleRefExpr{
									pos:  position{line: 1521, col: 42, offset: 57640},
									name: "ImageAlt",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1521, col: 53, offset: 57651},
							expr: &seqExpr{
								pos: position{line: 1521, col: 54, offset: 57652},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1521, col: 54, offset: 57652},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1521, col: 58, offset: 57656},
										expr: &ruleRefExpr{
											pos:  position{line: 1521, col: 58, offset: 57656},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1521, col: 67, offset: 57665},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1521, col: 73, offset: 57671},
								expr: &ruleRefExpr{
									pos:  position{line: 1521, col: 74, offset: 57672},
									name: "ImageWidth",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1521, col: 87, offset: 57685},
							expr: &seqExpr{
								pos: position{line: 1521, col: 88, offset: 57686},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1521, col: 88, offset: 57686},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1521, col: 92, offset: 57690},
										expr: &ruleRefExpr{
											pos:  position{line: 1521, col: 92, offset: 57690},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1521, col: 101, offset: 57699},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1521, col: 108, offset: 57706},
								expr: &ruleRefExpr{
									pos:  position{line: 1521, col: 109, offset: 57707},
									name: "ImageHeight",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1521, col: 123, offset: 57721},
							expr: &seqExpr{
								pos: position{line: 1521, col: 124, offset: 57722},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1521, col: 124, offset: 57722},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1521, col: 128, offset: 57726},
										expr: &ruleRefExpr{
											pos:  position{line: 1521, col: 128, offset: 57726},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1521, col: 137, offset: 57735},
							label: "others",
							expr: &ruleRefExpr{
								pos:  position{line: 1521, col: 145, offset: 57743},
								name: "NamedAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1521, col: 162, offset: 57760},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ImageAlt",
			pos:  position{line: 1525, col: 1, offset: 57832},
			expr: &actionExpr{
				pos: position{line: 1525, col: 13, offset: 57844},
				run: (*parser).callonImageAlt1,
				expr: &labeledExpr{
					pos:   position{line: 1525, col: 13, offset: 57844},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1525, col: 20, offset: 57851},
						name: "AttributeValue",
					},
				},
			},
		},
		{
			name: "ImageWidth",
			pos:  position{line: 1529, col: 1, offset: 57935},
			expr: &actionExpr{
				pos: position{line: 1529, col: 15, offset: 57949},
				run: (*parser).callonImageWidth1,
				expr: &labeledExpr{
					pos:   position{line: 1529, col: 15, offset: 57949},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1529, col: 22, offset: 57956},
						name: "AttributeValue",
					},
				},
			},
		},
		{
			name: "ImageHeight",
			pos:  position{line: 1533, col: 1, offset: 58037},
			expr: &actionExpr{
				pos: position{line: 1533, col: 16, offset: 58052},
				run: (*parser).callonImageHeight1,
				expr: &labeledExpr{
					pos:   position{line: 1533, col: 16, offset: 58052},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1533, col: 23, offset: 58059},
						name: "AttributeValue",
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1540, col: 1, offset: 58338},
			expr: &actionExpr{
				pos: position{line: 1540, col: 15, offset: 58352},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1540, col: 15, offset: 58352},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1540, col: 15, offset: 58352},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1540, col: 23, offset: 58360},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1540, col: 29, offset: 58366},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1540, col: 29, offset: 58366},
									expr: &charClassMatcher{
										pos:        position{line: 1540, col: 29, offset: 58366},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1540, col: 73, offset: 58410},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1540, col: 85, offset: 58422},
								name: "IconAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttributes",
			pos:  position{line: 1544, col: 1, offset: 58514},
			expr: &actionExpr{
				pos: position{line: 1544, col: 19, offset: 58532},
				run: (*parser).callonIconAttributes1,
				expr: &seqExpr{
					pos: position{line: 1544, col: 19, offset: 58532},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1544, col: 19, offset: 58532},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1544, col: 23, offset: 58536},
							label: "size",
							expr: &zeroOrOneExpr{
								pos: position{line: 1544, col: 28, offset: 58541},
								expr: &ruleRefExpr{
									pos:  position{line: 1544, col: 29, offset: 58542},
									name: "IconSize",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1544, col: 40, offset: 58553},
							label: "others",
							expr: &ruleRefExpr{
								pos:  position{line: 1544, col: 48, offset: 58561},
								name: "NamedAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1544, col: 65, offset: 58578},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "IconSize",
			pos:  position{line: 1549, col: 1, offset: 58671},
			expr: &actionExpr{
				pos: position{line: 1549, col: 13, offset: 58683},
				run: (*parser).callonIconSize1,
				expr: &seqExpr{
					pos: position{line: 1549, col: 13, offset: 58683},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1549, col: 13, offset: 58683},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1549, col: 20, offset: 58690},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1549, col: 36, offset: 58706},
							expr: &seqExpr{
								pos: position{line: 1549, col: 37, offset: 58707},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1549, col: 37, offset: 58707},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1549, col: 41, offset: 58711},
										expr: &ruleRefExpr{
											pos:  position{line: 1549, col: 41, offset: 58711},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1556, col: 1, offset: 58985},
			expr: &choiceExpr{
				pos: position{line: 1556, col: 19, offset: 59003},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1556, col: 19, offset: 59003},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1556, col: 19, offset: 59003},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1556, col: 19, offset: 59003},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1556, col: 32, offset: 59016},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1556, col: 41, offset: 59025},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1556, col: 58, offset: 59042},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1558, col: 5, offset: 59110},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1558, col: 5, offset: 59110},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1558, col: 5, offset: 59110},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1558, col: 17, offset: 59122},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1558, col: 22, offset: 59127},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1558, col: 35, offset: 59140},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1558, col: 39, offset: 59144},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1558, col: 47, offset: 59152},
										expr: &ruleRefExpr{
											pos:  position{line: 1558, col: 48, offset: 59153},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1558, col: 66, offset: 59171},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1562, col: 1, offset: 59232},
			expr: &ruleRefExpr{
				pos:  position{line: 1562, col: 16, offset: 59247},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1564, col: 1, offset: 59258},
			expr: &actionExpr{
				pos: position{line: 1564, col: 20, offset: 59277},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1564, col: 20, offset: 59277},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1564, col: 29, offset: 59286},
						expr: &seqExpr{
							pos: position{line: 1564, col: 30, offset: 59287},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1564, col: 30, offset: 59287},
									expr: &litMatcher{
										pos:        position{line: 1564, col: 31, offset: 59288},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1564, col: 35, offset: 59292},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1572, col: 1, offset: 59608},
			expr: &actionExpr{
				pos: position{line: 1572, col: 12, offset: 59619},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1572, col: 12, offset: 59619},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1572, col: 12, offset: 59619},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1572, col: 16, offset: 59623},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1572, col: 21, offset: 59628},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1572, col: 21, offset: 59628},
									expr: &charClassMatcher{
										pos:        position{line: 1572, col: 21, offset: 59628},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1572, col: 69, offset: 59676},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1572, col: 73, offset: 59680},
							expr: &ruleRefExpr{
								pos:  position{line: 1572, col: 73, offset: 59680},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1572, col: 80, offset: 59687},
							expr: &choiceExpr{
								pos: position{line: 1572, col: 82, offset: 59689},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1572, col: 82, offset: 59689},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1572, col: 88, offset: 59695},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1576, col: 1, offset: 59748},
			expr: &actionExpr{
				pos: position{line: 1576, col: 20, offset: 59767},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1576, col: 20, offset: 59767},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1576, col: 20, offset: 59767},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1576, col: 25, offset: 59772},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1576, col: 48, offset: 59795},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1576, col: 61, offset: 59808},
								expr: &ruleRefExpr{
									pos:  position{line: 1576, col: 61, offset: 59808},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1580, col: 1, offset: 59905},
			expr: &actionExpr{
				pos: position{line: 1580, col: 26, offset: 59930},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1580, col: 26, offset: 59930},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1580, col: 26, offset: 59930},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1580, col: 30, offset: 59934},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1580, col: 35, offset: 59939},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1580, col: 35, offset: 59939},
									expr: &charClassMatcher{
										pos:        position{line: 1580, col: 35, offset: 59939},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1580, col: 83, offset: 59987},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1580, col: 87, offset: 59991},
							expr: &ruleRefExpr{
								pos:  position{line: 1580, col: 87, offset: 59991},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1589, col: 1, offset: 60238},
			expr: &actionExpr{
				pos: position{line: 1589, col: 18, offset: 60255},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1589, col: 18, offset: 60255},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1589, col: 19, offset: 60256},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1589, col: 19, offset: 60256},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1589, col: 27, offset: 60264},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1589, col: 37, offset: 60274},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1589, col: 45, offset: 60282},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1589, col: 55, offset: 60292},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1589, col: 63, offset: 60300},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1589, col: 72, offset: 60309},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1599, col: 1, offset: 60559},
			expr: &actionExpr{
				pos: position{line: 1599, col: 19, offset: 60577},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1599, col: 19, offset: 60577},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1599, col: 19, offset: 60577},
							expr: &ruleRefExpr{
								pos:  position{line: 1599, col: 20, offset: 60578},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1600, col: 5, offset: 60666},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1600, col: 12, offset: 60673},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1600, col: 12, offset: 60673},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1601, col: 11, offset: 60696},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1602, col: 11, offset: 60720},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1603, col: 11, offset: 60744},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1604, col: 11, offset: 60765},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1605, col: 11, offset: 60786},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1606, col: 11, offset: 60809},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1607, col: 11, offset: 60836},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1611, col: 1, offset: 60877},
			expr: &choiceExpr{
				pos: position{line: 1611, col: 19, offset: 60895},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1611, col: 19, offset: 60895},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1611, col: 19, offset: 60895},
								expr: &ruleRefExpr{
									pos:  position{line: 1611, col: 21, offset: 60897},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1611, col: 31, offset: 60907},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1612, col: 19, offset: 60978},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1613, col: 19, offset: 61018},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1614, col: 19, offset: 61059},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1615, col: 19, offset: 61100},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1616, col: 19, offset: 61141},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1617, col: 19, offset: 61179},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1618, col: 19, offset: 61219},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1623, col: 1, offset: 61442},
			expr: &actionExpr{
				pos: position{line: 1623, col: 17, offset: 61458},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1623, col: 17, offset: 61458},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1623, col: 17, offset: 61458},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1623, col: 28, offset: 61469},
								expr: &ruleRefExpr{
									pos:  position{line: 1623, col: 29, offset: 61470},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1623, col: 48, offset: 61489},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1623, col: 75, offset: 61516},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 1623, col: 83, offset: 61524},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1623, col: 107, offset: 61548},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1627, col: 1, offset: 61663},
			expr: &seqExpr{
				pos: position{line: 1627, col: 26, offset: 61688},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1627, col: 26, offset: 61688},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1627, col: 33, offset: 61695},
						expr: &ruleRefExpr{
							pos:  position{line: 1627, col: 33, offset: 61695},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1627, col: 40, offset: 61702},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1629, col: 1, offset: 61707},
			expr: &seqExpr{
				pos: position{line: 1629, col: 31, offset: 61737},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1629, col: 31, offset: 61737},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1629, col: 38, offset: 61744},
						expr: &ruleRefExpr{
							pos:  position{line: 1629, col: 38, offset: 61744},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1629, col: 45, offset: 61751},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1631, col: 1, offset: 61756},
			expr: &choiceExpr{
				pos: position{line: 1631, col: 29, offset: 61784},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1631, col: 30, offset: 61785},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1631, col: 30, offset: 61785},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1631, col: 37, offset: 61792},
								expr: &ruleRefExpr{
									pos:  position{line: 1631, col: 37, offset: 61792},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1631, col: 44, offset: 61799},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1631, col: 51, offset: 61806},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1633, col: 1, offset: 61811},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1633, col: 27, offset: 61837},
				expr: &actionExpr{
					pos: position{line: 1634, col: 8, offset: 61846},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1634, col: 8, offset: 61846},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1634, col: 8, offset: 61846},
								expr: &ruleRefExpr{
									pos:  position{line: 1634, col: 9, offset: 61847},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1635, col: 8, offset: 61880},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1635, col: 17, offset: 61889},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1635, col: 17, offset: 61889},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1636, col: 15, offset: 61913},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1637, col: 15, offset: 61938},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1638, col: 15, offset: 61966},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1639, col: 15, offset: 61997},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1640, col: 15, offset: 62030},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1641, col: 15, offset: 62061},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1642, col: 15, offset: 62100},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1643, col: 15, offset: 62127},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1644, col: 15, offset: 62155},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1645, col: 15, offset: 62180},
											name: "QuoteBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1646, col: 15, offset: 62205},
											name: "SidebarBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1647, col: 15, offset: 62232},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1648, col: 15, offset: 62264},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1649, col: 15, offset: 62295},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1650, col: 15, offset: 62315},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1651, col: 15, offset: 62342},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1652, col: 15, offset: 62370},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1653, col: 15, offset: 62397},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1660, col: 1, offset: 62653},
			expr: &actionExpr{
				pos: position{line: 1660, col: 15, offset: 62667},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1660, col: 15, offset: 62667},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1660, col: 15, offset: 62667},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1660, col: 26, offset: 62678},
								expr: &ruleRefExpr{
									pos:  position{line: 1660, col: 27, offset: 62679},
									name: "ElementAttribute",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1661, col: 5, offset: 62703},
							run: (*parser).callonQuoteBlock6,
						},
						&ruleRefExpr{
							pos:  position{line: 1669, col: 5, offset: 63007},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1669, col: 30, offset: 63032},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1669, col: 39, offset: 63041},
								name: "QuoteBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1669, col: 61, offset: 63063},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1673, col: 1, offset: 63183},
			expr: &seqExpr{
				pos: position{line: 1673, col: 24, offset: 63206},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1673, col: 24, offset: 63206},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1673, col: 31, offset: 63213},
						expr: &ruleRefExpr{
							pos:  position{line: 1673, col: 31, offset: 63213},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1673, col: 38, offset: 63220},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1675, col: 1, offset: 63250},
			expr: &seqExpr{
				pos: position{line: 1675, col: 29, offset: 63278},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1675, col: 29, offset: 63278},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1675, col: 36, offset: 63285},
						expr: &ruleRefExpr{
							pos:  position{line: 1675, col: 36, offset: 63285},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1675, col: 43, offset: 63292},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1677, col: 1, offset: 63322},
			expr: &choiceExpr{
				pos: position{line: 1677, col: 27, offset: 63348},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1677, col: 28, offset: 63349},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1677, col: 28, offset: 63349},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1677, col: 35, offset: 63356},
								expr: &ruleRefExpr{
									pos:  position{line: 1677, col: 35, offset: 63356},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1677, col: 42, offset: 63363},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1677, col: 49, offset: 63370},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlockRawContent",
			pos:  position{line: 1679, col: 1, offset: 63400},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1679, col: 25, offset: 63424},
				expr: &actionExpr{
					pos: position{line: 1680, col: 8, offset: 63433},
					run: (*parser).callonQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1680, col: 8, offset: 63433},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1680, col: 8, offset: 63433},
								expr: &ruleRefExpr{
									pos:  position{line: 1680, col: 9, offset: 63434},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1681, col: 8, offset: 63465},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1681, col: 17, offset: 63474},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1681, col: 17, offset: 63474},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1682, col: 15, offset: 63498},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1683, col: 15, offset: 63523},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1684, col: 15, offset: 63551},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1685, col: 15, offset: 63582},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1686, col: 15, offset: 63615},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1687, col: 15, offset: 63646},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1688, col: 15, offset: 63685},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1689, col: 15, offset: 63712},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1690, col: 15, offset: 63740},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1691, col: 15, offset: 63765},
											name: "ExampleBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1692, col: 15, offset: 63792},
											name: "SidebarBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1693, col: 15, offset: 63819},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1694, col: 15, offset: 63851},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1695, col: 15, offset: 63882},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1696, col: 15, offset: 63902},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1697, col: 15, offset: 63929},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1698, col: 15, offset: 63957},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1699, col: 15, offset: 63984},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1706, col: 1, offset: 64242},
			expr: &actionExpr{
				pos: position{line: 1706, col: 17, offset: 64258},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1706, col: 17, offset: 64258},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1706, col: 17, offset: 64258},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1706, col: 28, offset: 64269},
								expr: &ruleRefExpr{
									pos:  position{line: 1706, col: 29, offset: 64270},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1706, col: 48, offset: 64289},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1706, col: 75, offset: 64316},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1706, col: 84, offset: 64325},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1706, col: 108, offset: 64349},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1710, col: 1, offset: 64465},
			expr: &seqExpr{
				pos: position{line: 1710, col: 26, offset: 64490},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1710, col: 26, offset: 64490},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1710, col: 33, offset: 64497},
						expr: &ruleRefExpr{
							pos:  position{line: 1710, col: 33, offset: 64497},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1710, col: 40, offset: 64504},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1712, col: 1, offset: 64509},
			expr: &seqExpr{
				pos: position{line: 1712, col: 31, offset: 64539},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1712, col: 31, offset: 64539},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1712, col: 38, offset: 64546},
						expr: &ruleRefExpr{
							pos:  position{line: 1712, col: 38, offset: 64546},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1712, col: 45, offset: 64553},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1714, col: 1, offset: 64558},
			expr: &choiceExpr{
				pos: position{line: 1714, col: 29, offset: 64586},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1714, col: 30, offset: 64587},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1714, col: 30, offset: 64587},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1714, col: 37, offset: 64594},
								expr: &ruleRefExpr{
									pos:  position{line: 1714, col: 37, offset: 64594},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1714, col: 44, offset: 64601},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1714, col: 51, offset: 64608},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1716, col: 1, offset: 64613},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1716, col: 27, offset: 64639},
				expr: &actionExpr{
					pos: position{line: 1717, col: 8, offset: 64648},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1717, col: 8, offset: 64648},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1717, col: 8, offset: 64648},
								expr: &ruleRefExpr{
									pos:  position{line: 1717, col: 9, offset: 64649},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1718, col: 8, offset: 64682},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1718, col: 17, offset: 64691},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1718, col: 17, offset: 64691},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1719, col: 15, offset: 64715},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1720, col: 15, offset: 64740},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1721, col: 15, offset: 64768},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1722, col: 15, offset: 64799},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1723, col: 15, offset: 64832},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1724, col: 15, offset: 64863},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1725, col: 15, offset: 64902},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1726, col: 15, offset: 64929},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1727, col: 15, offset: 64956},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1728, col: 15, offset: 64982},
											name: "ExampleBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1729, col: 15, offset: 65009},
											name: "QuoteBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1730, col: 15, offset: 65034},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1731, col: 15, offset: 65066},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1732, col: 15, offset: 65097},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1733, col: 15, offset: 65117},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1734, col: 15, offset: 65144},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1735, col: 15, offset: 65172},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1736, col: 15, offset: 65199},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1743, col: 1, offset: 65456},
			expr: &actionExpr{
				pos: position{line: 1743, col: 16, offset: 65471},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1743, col: 16, offset: 65471},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1743, col: 16, offset: 65471},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1743, col: 27, offset: 65482},
								expr: &ruleRefExpr{
									pos:  position{line: 1743, col: 28, offset: 65483},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1743, col: 47, offset: 65502},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1743, col: 73, offset: 65528},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1743, col: 82, offset: 65537},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1743, col: 105, offset: 65560},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1747, col: 1, offset: 65674},
			expr: &seqExpr{
				pos: position{line: 1747, col: 25, offset: 65698},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1747, col: 25, offset: 65698},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1747, col: 31, offset: 65704},
						expr: &ruleRefExpr{
							pos:  position{line: 1747, col: 31, offset: 65704},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1747, col: 38, offset: 65711},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1749, col: 1, offset: 65771},
			expr: &seqExpr{
				pos: position{line: 1749, col: 30, offset: 65800},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1749, col: 30, offset: 65800},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1749, col: 36, offset: 65806},
						expr: &ruleRefExpr{
							pos:  position{line: 1749, col: 36, offset: 65806},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1749, col: 43, offset: 65813},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1751, col: 1, offset: 65818},
			expr: &choiceExpr{
				pos: position{line: 1751, col: 28, offset: 65845},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1751, col: 29, offset: 65846},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1751, col: 29, offset: 65846},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1751, col: 35, offset: 65852},
								expr: &ruleRefExpr{
									pos:  position{line: 1751, col: 35, offset: 65852},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1751, col: 42, offset: 65859},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1751, col: 49, offset: 65866},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1753, col: 1, offset: 65871},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1753, col: 26, offset: 65896},
				expr: &actionExpr{
					pos: position{line: 1753, col: 27, offset: 65897},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1753, col: 27, offset: 65897},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1753, col: 27, offset: 65897},
								expr: &ruleRefExpr{
									pos:  position{line: 1753, col: 28, offset: 65898},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1753, col: 52, offset: 65922},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1753, col: 58, offset: 65928},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1760, col: 1, offset: 66162},
			expr: &actionExpr{
				pos: position{line: 1760, col: 17, offset: 66178},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1760, col: 17, offset: 66178},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1760, col: 17, offset: 66178},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1760, col: 28, offset: 66189},
								expr: &ruleRefExpr{
									pos:  position{line: 1760, col: 29, offset: 66190},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1760, col: 48, offset: 66209},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1760, col: 75, offset: 66236},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1760, col: 84, offset: 66245},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1760, col: 108, offset: 66269},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1764, col: 1, offset: 66385},
			expr: &seqExpr{
				pos: position{line: 1764, col: 26, offset: 66410},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1764, col: 26, offset: 66410},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1764, col: 33, offset: 66417},
						expr: &ruleRefExpr{
							pos:  position{line: 1764, col: 33, offset: 66417},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1764, col: 40, offset: 66424},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1766, col: 1, offset: 66429},
			expr: &seqExpr{
				pos: position{line: 1766, col: 31, offset: 66459},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1766, col: 31, offset: 66459},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1766, col: 38, offset: 66466},
						expr: &ruleRefExpr{
							pos:  position{line: 1766, col: 38, offset: 66466},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1766, col: 45, offset: 66473},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1768, col: 1, offset: 66478},
			expr: &choiceExpr{
				pos: position{line: 1768, col: 29, offset: 66506},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1768, col: 30, offset: 66507},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1768, col: 30, offset: 66507},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1768, col: 37, offset: 66514},
								expr: &ruleRefExpr{
									pos:  position{line: 1768, col: 37, offset: 66514},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1768, col: 44, offset: 66521},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1768, col: 51, offset: 66528},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1770, col: 1, offset: 66533},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1770, col: 27, offset: 66559},
				expr: &actionExpr{
					pos: position{line: 1770, col: 28, offset: 66560},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1770, col: 28, offset: 66560},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1770, col: 28, offset: 66560},
								expr: &ruleRefExpr{
									pos:  position{line: 1770, col: 29, offset: 66561},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1770, col: 54, offset: 66586},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1770, col: 60, offset: 66592},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1777, col: 1, offset: 66824},
			expr: &actionExpr{
				pos: position{line: 1777, col: 15, offset: 66838},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1777, col: 15, offset: 66838},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1777, col: 15, offset: 66838},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1777, col: 26, offset: 66849},
								expr: &ruleRefExpr{
									pos:  position{line: 1777, col: 27, offset: 66850},
									name: "ElementAttribute",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1778, col: 5, offset: 66874},
							run: (*parser).callonVerseBlock6,
						},
						&ruleRefExpr{
							pos:  position{line: 1782, col: 5, offset: 67031},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1782, col: 30, offset: 67056},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1782, col: 39, offset: 67065},
								name: "VerseBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1782, col: 61, offset: 67087},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockRawContent",
			pos:  position{line: 1786, col: 1, offset: 67207},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1786, col: 25, offset: 67231},
				expr: &actionExpr{
					pos: position{line: 1786, col: 26, offset: 67232},
					run: (*parser).callonVerseBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1786, col: 26, offset: 67232},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1786, col: 26, offset: 67232},
								expr: &ruleRefExpr{
									pos:  position{line: 1786, col: 27, offset: 67233},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1786, col: 50, offset: 67256},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1786, col: 56, offset: 67262},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1793, col: 1, offset: 67500},
			expr: &actionExpr{
				pos: position{line: 1793, col: 21, offset: 67520},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1793, col: 21, offset: 67520},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1793, col: 21, offset: 67520},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1793, col: 32, offset: 67531},
								expr: &ruleRefExpr{
									pos:  position{line: 1793, col: 33, offset: 67532},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1793, col: 52, offset: 67551},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1793, col: 83, offset: 67582},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1793, col: 92, offset: 67591},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1793, col: 120, offset: 67619},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1797, col: 1, offset: 67743},
			expr: &seqExpr{
				pos: position{line: 1797, col: 30, offset: 67772},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1797, col: 30, offset: 67772},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1797, col: 37, offset: 67779},
						expr: &ruleRefExpr{
							pos:  position{line: 1797, col: 37, offset: 67779},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1797, col: 44, offset: 67786},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1799, col: 1, offset: 67791},
			expr: &seqExpr{
				pos: position{line: 1799, col: 35, offset: 67825},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1799, col: 35, offset: 67825},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1799, col: 42, offset: 67832},
						expr: &ruleRefExpr{
							pos:  position{line: 1799, col: 42, offset: 67832},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1799, col: 49, offset: 67839},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1801, col: 1, offset: 67844},
			expr: &choiceExpr{
				pos: position{line: 1801, col: 33, offset: 67876},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1801, col: 34, offset: 67877},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1801, col: 34, offset: 67877},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1801, col: 41, offset: 67884},
								expr: &ruleRefExpr{
									pos:  position{line: 1801, col: 41, offset: 67884},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1801, col: 48, offset: 67891},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1801, col: 55, offset: 67898},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1803, col: 1, offset: 67903},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1803, col: 31, offset: 67933},
				expr: &actionExpr{
					pos: position{line: 1803, col: 32, offset: 67934},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1803, col: 32, offset: 67934},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1803, col: 32, offset: 67934},
								expr: &ruleRefExpr{
									pos:  position{line: 1803, col: 33, offset: 67935},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1803, col: 62, offset: 67964},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1803, col: 68, offset: 67970},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1810, col: 1, offset: 68204},
			expr: &seqExpr{
				pos: position{line: 1810, col: 26, offset: 68229},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1810, col: 26, offset: 68229},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1810, col: 33, offset: 68236},
						expr: &ruleRefExpr{
							pos:  position{line: 1810, col: 33, offset: 68236},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1810, col: 40, offset: 68243},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1812, col: 1, offset: 68248},
			expr: &seqExpr{
				pos: position{line: 1812, col: 31, offset: 68278},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1812, col: 31, offset: 68278},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1812, col: 38, offset: 68285},
						expr: &ruleRefExpr{
							pos:  position{line: 1812, col: 38, offset: 68285},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1812, col: 45, offset: 68292},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1814, col: 1, offset: 68297},
			expr: &choiceExpr{
				pos: position{line: 1814, col: 29, offset: 68325},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1814, col: 30, offset: 68326},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1814, col: 30, offset: 68326},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1814, col: 37, offset: 68333},
								expr: &ruleRefExpr{
									pos:  position{line: 1814, col: 37, offset: 68333},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1814, col: 44, offset: 68340},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1814, col: 51, offset: 68347},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1816, col: 1, offset: 68352},
			expr: &actionExpr{
				pos: position{line: 1816, col: 17, offset: 68368},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1816, col: 17, offset: 68368},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1816, col: 17, offset: 68368},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1816, col: 44, offset: 68395},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1816, col: 53, offset: 68404},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1816, col: 78, offset: 68429},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 1820, col: 1, offset: 68522},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1820, col: 27, offset: 68548},
				expr: &actionExpr{
					pos: position{line: 1820, col: 28, offset: 68549},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1820, col: 28, offset: 68549},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1820, col: 28, offset: 68549},
								expr: &ruleRefExpr{
									pos:  position{line: 1820, col: 29, offset: 68550},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1820, col: 54, offset: 68575},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1820, col: 60, offset: 68581},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1824, col: 1, offset: 68619},
			expr: &actionExpr{
				pos: position{line: 1824, col: 22, offset: 68640},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1824, col: 22, offset: 68640},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1824, col: 22, offset: 68640},
							expr: &ruleRefExpr{
								pos:  position{line: 1824, col: 23, offset: 68641},
								name: "CommentBlockDelimiter",
							},
						},
						&litMatcher{
							pos:        position{line: 1824, col: 45, offset: 68663},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1824, col: 50, offset: 68668},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1824, col: 59, offset: 68677},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1824, col: 85, offset: 68703},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1828, col: 1, offset: 68768},
			expr: &actionExpr{
				pos: position{line: 1828, col: 29, offset: 68796},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1828, col: 29, offset: 68796},
					expr: &charClassMatcher{
						pos:        position{line: 1828, col: 29, offset: 68796},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineMacros",
			pos:  position{line: 1836, col: 1, offset: 69085},
			expr: &choiceExpr{
				pos: position{line: 1836, col: 17, offset: 69101},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1836, col: 17, offset: 69101},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1837, col: 19, offset: 69130},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1838, col: 19, offset: 69161},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1839, col: 19, offset: 69185},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1840, col: 19, offset: 69222},
						name: "InlineFootnote",
					},
					&ruleRefExpr{
						pos:  position{line: 1841, col: 19, offset: 69256},
						name: "CrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1842, col: 19, offset: 69290},
						name: "InlineUserMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1843, col: 19, offset: 69325},
						name: "InlineElementID",
					},
					&ruleRefExpr{
						pos:  position{line: 1844, col: 19, offset: 69359},
						name: "ConcealedIndexTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 1845, col: 19, offset: 69396},
						name: "IndexTerm",
					},
				},
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 1847, col: 1, offset: 69407},
			expr: &actionExpr{
				pos: position{line: 1847, col: 23, offset: 69429},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 1847, col: 23, offset: 69429},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1847, col: 23, offset: 69429},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
						&labeledExpr{
							pos:   position{line: 1847, col: 32, offset: 69438},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1847, col: 37, offset: 69443},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1847, col: 37, offset: 69443},
									expr: &charClassMatcher{
										pos:        position{line: 1847, col: 37, offset: 69443},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1847, col: 76, offset: 69482},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthroughSubs",
			pos:  position{line: 1852, col: 1, offset: 69634},
			expr: &seqExpr{
				pos: position{line: 1853, col: 5, offset: 69664},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1853, col: 5, offset: 69664},
						expr: &choiceExpr{
							pos: position{line: 1853, col: 6, offset: 69665},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1853, col: 6, offset: 69665},
									name: "InlinePassthrough",
								},
								&ruleRefExpr{
									pos:  position{line: 1854, col: 11, offset: 69694},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1855, col: 11, offset: 69755},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1856, col: 11, offset: 69784},
									expr: &ruleRefExpr{
										pos:  position{line: 1856, col: 11, offset: 69784},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1857, col: 11, offset: 69802},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1858, col: 11, offset: 69820},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1858, col: 21, offset: 69830},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SpecialCharacterSubs",
			pos:  position{line: 1861, col: 1, offset: 69951},
			expr: &seqExpr{
				pos: position{line: 1862, col: 5, offset: 69980},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1862, col: 5, offset: 69980},
						expr: &choiceExpr{
							pos: position{line: 1862, col: 6, offset: 69981},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1862, col: 6, offset: 69981},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1863, col: 11, offset: 70042},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 1864, col: 11, offset: 70069},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1865, col: 11, offset: 70098},
									expr: &ruleRefExpr{
										pos:  position{line: 1865, col: 11, offset: 70098},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1866, col: 11, offset: 70115},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1867, col: 11, offset: 70133},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1867, col: 21, offset: 70143},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuotedTextSubs",
			pos:  position{line: 1870, col: 1, offset: 70197},
			expr: &seqExpr{
				pos: position{line: 1871, col: 5, offset: 70220},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1871, col: 5, offset: 70220},
						expr: &choiceExpr{
							pos: position{line: 1871, col: 6, offset: 70221},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1871, col: 6, offset: 70221},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1872, col: 11, offset: 70282},
									expr: &ruleRefExpr{
										pos:  position{line: 1872, col: 11, offset: 70282},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1873, col: 11, offset: 70300},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1874, col: 11, offset: 70322},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1875, col: 11, offset: 70345},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1876, col: 11, offset: 70374},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1877, col: 11, offset: 70392},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1877, col: 21, offset: 70402},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "AttributeSubs",
			pos:  position{line: 1880, col: 1, offset: 70460},
			expr: &seqExpr{
				pos: position{line: 1881, col: 5, offset: 70482},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1881, col: 5, offset: 70482},
						expr: &choiceExpr{
							pos: position{line: 1881, col: 6, offset: 70483},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1881, col: 6, offset: 70483},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1882, col: 11, offset: 70544},
									expr: &ruleRefExpr{
										pos:  position{line: 1882, col: 11, offset: 70544},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1883, col: 11, offset: 70562},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 1884, col: 11, offset: 70594},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1885, col: 11, offset: 70623},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1886, col: 11, offset: 70641},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1886, col: 21, offset: 70651},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "InlineMacroSubs",
			pos:  position{line: 1889, col: 1, offset: 70705},
			expr: &seqExpr{
				pos: position{line: 1890, col: 5, offset: 70729},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1890, col: 5, offset: 70729},
						expr: &choiceExpr{
							pos: position{line: 1890, col: 6, offset: 70730},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1890, col: 6, offset: 70730},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1891, col: 11, offset: 70791},
									expr: &ruleRefExpr{
										pos:  position{line: 1891, col: 11, offset: 70791},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1892, col: 11, offset: 70809},
									name: "InlineMacros",
								},
								&ruleRefExpr{
									pos:  position{line: 1893, col: 11, offset: 70832},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1894, col: 11, offset: 70861},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1895, col: 11, offset: 70879},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1895, col: 21, offset: 70889},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "MarkdownQuoteMacroSubs",
			pos:  position{line: 1898, col: 1, offset: 70969},
			expr: &actionExpr{
				pos: position{line: 1898, col: 27, offset: 70995},
				run: (*parser).callonMarkdownQuoteMacroSubs1,
				expr: &seqExpr{
					pos: position{line: 1898, col: 27, offset: 70995},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1898, col: 27, offset: 70995},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1898, col: 33, offset: 71001},
								expr: &ruleRefExpr{
									pos:  position{line: 1898, col: 34, offset: 71002},
									name: "MarkdownQuoteLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1898, col: 54, offset: 71022},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteLine",
			pos:  position{line: 1902, col: 1, offset: 71089},
			expr: &actionExpr{
				pos: position{line: 1903, col: 5, offset: 71115},
				run: (*parser).callonMarkdownQuoteLine1,
				expr: &seqExpr{
					pos: position{line: 1903, col: 5, offset: 71115},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1903, col: 5, offset: 71115},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1903, col: 14, offset: 71124},
								expr: &choiceExpr{
									pos: position{line: 1903, col: 15, offset: 71125},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1903, col: 15, offset: 71125},
											name: "InlineWord",
										},
										&oneOrMoreExpr{
											pos: position{line: 1904, col: 11, offset: 71186},
											expr: &ruleRefExpr{
												pos:  position{line: 1904, col: 11, offset: 71186},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1905, col: 11, offset: 71204},
											name: "InlineMacros",
										},
										&ruleRefExpr{
											pos:  position{line: 1906, col: 11, offset: 71227},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1907, col: 11, offset: 71256},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1907, col: 21, offset: 71266},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 1911, col: 1, offset: 71337},
			expr: &actionExpr{
				pos: position{line: 1911, col: 29, offset: 71365},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 1911, col: 29, offset: 71365},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1911, col: 29, offset: 71365},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 1911, col: 35, offset: 71371},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 1911, col: 43, offset: 71379},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1911, col: 44, offset: 71380},
									expr: &charClassMatcher{
										pos:        position{line: 1911, col: 44, offset: 71380},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1913, col: 8, offset: 71430},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ReplacementSubs",
			pos:  position{line: 1918, col: 1, offset: 71517},
			expr: &seqExpr{
				pos: position{line: 1919, col: 5, offset: 71541},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1919, col: 5, offset: 71541},
						expr: &choiceExpr{
							pos: position{line: 1919, col: 6, offset: 71542},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1919, col: 6, offset: 71542},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1920, col: 11, offset: 71603},
									expr: &ruleRefExpr{
										pos:  position{line: 1920, col: 11, offset: 71603},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1921, col: 11, offset: 71621},
									name: "Symbol",
								},
								&ruleRefExpr{
									pos:  position{line: 1922, col: 11, offset: 71639},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1923, col: 11, offset: 71668},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1924, col: 11, offset: 71686},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1924, col: 21, offset: 71696},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PostReplacementSubs",
			pos:  position{line: 1928, col: 1, offset: 71844},
			expr: &seqExpr{
				pos: position{line: 1928, col: 24, offset: 71867},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1928, col: 24, offset: 71867},
						expr: &choiceExpr{
							pos: position{line: 1929, col: 5, offset: 71873},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1929, col: 5, offset: 71873},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1930, col: 7, offset: 71930},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1931, col: 7, offset: 71955},
									name: "LineBreak",
								},
								&oneOrMoreExpr{
									pos: position{line: 1932, col: 7, offset: 71998},
									expr: &ruleRefExpr{
										pos:  position{line: 1932, col: 7, offset: 71998},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1933, col: 7, offset: 72012},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1934, col: 7, offset: 72026},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1934, col: 17, offset: 72036},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CalloutSubs",
			pos:  position{line: 1937, col: 1, offset: 72093},
			expr: &seqExpr{
				pos: position{line: 1938, col: 5, offset: 72113},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1938, col: 5, offset: 72113},
						expr: &choiceExpr{
							pos: position{line: 1938, col: 6, offset: 72114},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1938, col: 6, offset: 72114},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1939, col: 11, offset: 72175},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1940, col: 11, offset: 72204},
									expr: &ruleRefExpr{
										pos:  position{line: 1940, col: 11, offset: 72204},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1941, col: 11, offset: 72221},
									name: "Callout",
								},
								&ruleRefExpr{
									pos:  position{line: 1942, col: 11, offset: 72239},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1943, col: 11, offset: 72257},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1943, col: 21, offset: 72267},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "NoneSubs",
			pos:  position{line: 1946, col: 1, offset: 72319},
			expr: &seqExpr{
				pos: position{line: 1946, col: 13, offset: 72331},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1946, col: 13, offset: 72331},
						expr: &choiceExpr{
							pos: position{line: 1947, col: 5, offset: 72337},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1947, col: 5, offset: 72337},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 1948, col: 8, offset: 72364},
									run: (*parser).callonNoneSubs5,
									expr: &seqExpr{
										pos: position{line: 1948, col: 8, offset: 72364},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1948, col: 8, offset: 72364},
												expr: &ruleRefExpr{
													pos:  position{line: 1948, col: 9, offset: 72365},
													name: "EOF",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1948, col: 13, offset: 72369},
												expr: &charClassMatcher{
													pos:        position{line: 1948, col: 13, offset: 72369},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1948, col: 22, offset: 72378},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1950, col: 10, offset: 72483},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1955, col: 1, offset: 72676},
			expr: &actionExpr{
				pos: position{line: 1955, col: 10, offset: 72685},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1955, col: 10, offset: 72685},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1955, col: 10, offset: 72685},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1955, col: 21, offset: 72696},
								expr: &ruleRefExpr{
									pos:  position{line: 1955, col: 22, offset: 72697},
									name: "BlockAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1955, col: 39, offset: 72714},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1956, col: 5, offset: 72733},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1956, col: 12, offset: 72740},
								expr: &ruleRefExpr{
									pos:  position{line: 1956, col: 13, offset: 72741},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1957, col: 5, offset: 72763},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1957, col: 11, offset: 72769},
								expr: &ruleRefExpr{
									pos:  position{line: 1957, col: 12, offset: 72770},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1958, col: 6, offset: 72787},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1958, col: 6, offset: 72787},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1958, col: 23, offset: 72804},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1962, col: 1, offset: 72939},
			expr: &seqExpr{
				pos: position{line: 1962, col: 23, offset: 72961},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1962, col: 23, offset: 72961},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1962, col: 27, offset: 72965},
						expr: &ruleRefExpr{
							pos:  position{line: 1962, col: 27, offset: 72965},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1964, col: 1, offset: 72973},
			expr: &seqExpr{
				pos: position{line: 1964, col: 19, offset: 72991},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1964, col: 19, offset: 72991},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1964, col: 26, offset: 72998},
						expr: &ruleRefExpr{
							pos:  position{line: 1964, col: 26, offset: 72998},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1964, col: 33, offset: 73005},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1967, col: 1, offset: 73073},
			expr: &actionExpr{
				pos: position{line: 1967, col: 20, offset: 73092},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1967, col: 20, offset: 73092},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1967, col: 20, offset: 73092},
							expr: &ruleRefExpr{
								pos:  position{line: 1967, col: 21, offset: 73093},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1967, col: 36, offset: 73108},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1967, col: 42, offset: 73114},
								expr: &ruleRefExpr{
									pos:  position{line: 1967, col: 43, offset: 73115},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1967, col: 55, offset: 73127},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1967, col: 59, offset: 73131},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1971, col: 1, offset: 73199},
			expr: &actionExpr{
				pos: position{line: 1971, col: 14, offset: 73212},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1971, col: 14, offset: 73212},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1971, col: 14, offset: 73212},
							expr: &ruleRefExpr{
								pos:  position{line: 1971, col: 15, offset: 73213},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1971, col: 30, offset: 73228},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1971, col: 36, offset: 73234},
								expr: &ruleRefExpr{
									pos:  position{line: 1971, col: 37, offset: 73235},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1971, col: 49, offset: 73247},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1971, col: 53, offset: 73251},
							expr: &ruleRefExpr{
								pos:  position{line: 1971, col: 53, offset: 73251},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1975, col: 1, offset: 73320},
			expr: &actionExpr{
				pos: position{line: 1975, col: 14, offset: 73333},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1975, col: 14, offset: 73333},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1975, col: 14, offset: 73333},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1975, col: 33, offset: 73352},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1975, col: 42, offset: 73361},
								expr: &seqExpr{
									pos: position{line: 1975, col: 43, offset: 73362},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1975, col: 43, offset: 73362},
											expr: &ruleRefExpr{
												pos:  position{line: 1975, col: 44, offset: 73363},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1975, col: 63, offset: 73382},
											expr: &ruleRefExpr{
												pos:  position{line: 1975, col: 64, offset: 73383},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1975, col: 68, offset: 73387},
											expr: &ruleRefExpr{
												pos:  position{line: 1975, col: 68, offset: 73387},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1975, col: 75, offset: 73394},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1975, col: 89, offset: 73408},
											expr: &ruleRefExpr{
												pos:  position{line: 1975, col: 89, offset: 73408},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1982, col: 1, offset: 73734},
			expr: &choiceExpr{
				pos: position{line: 1982, col: 17, offset: 73750},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1982, col: 17, offset: 73750},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1982, col: 49, offset: 73782},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1982, col: 78, offset: 73811},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1984, col: 1, offset: 73847},
			expr: &litMatcher{
				pos:        position{line: 1984, col: 26, offset: 73872},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1987, col: 1, offset: 73944},
			expr: &actionExpr{
				pos: position{line: 1987, col: 31, offset: 73974},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1987, col: 31, offset: 73974},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1987, col: 31, offset: 73974},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1987, col: 42, offset: 73985},
								expr: &ruleRefExpr{
									pos:  position{line: 1987, col: 43, offset: 73986},
									name: "ElementAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1987, col: 62, offset: 74005},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1987, col: 69, offset: 74012},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1992, col: 1, offset: 74258},
			expr: &actionExpr{
				pos: position{line: 1993, col: 5, offset: 74298},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1993, col: 5, offset: 74298},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1993, col: 5, offset: 74298},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1993, col: 16, offset: 74309},
								name: "ParagraphWithHeadingSpacesLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1994, col: 5, offset: 74345},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1994, col: 16, offset: 74356},
								expr: &ruleRefExpr{
									pos:  position{line: 1994, col: 17, offset: 74357},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLine",
			pos:  position{line: 1998, col: 1, offset: 74466},
			expr: &actionExpr{
				pos: position{line: 1998, col: 35, offset: 74500},
				run: (*parser).callonParagraphWithHeadingSpacesLine1,
				expr: &seqExpr{
					pos: position{line: 1998, col: 35, offset: 74500},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1998, col: 35, offset: 74500},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1998, col: 41, offset: 74506},
								run: (*parser).callonParagraphWithHeadingSpacesLine4,
								expr: &seqExpr{
									pos: position{line: 1998, col: 41, offset: 74506},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1998, col: 41, offset: 74506},
											expr: &ruleRefExpr{
												pos:  position{line: 1998, col: 41, offset: 74506},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1998, col: 48, offset: 74513},
											expr: &charClassMatcher{
												pos:        position{line: 1998, col: 48, offset: 74513},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2000, col: 8, offset: 74579},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 2005, col: 1, offset: 74719},
			expr: &actionExpr{
				pos: position{line: 2005, col: 39, offset: 74757},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 2005, col: 39, offset: 74757},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2005, col: 39, offset: 74757},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2005, col: 50, offset: 74768},
								expr: &ruleRefExpr{
									pos:  position{line: 2005, col: 51, offset: 74769},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2006, col: 9, offset: 74796},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2006, col: 31, offset: 74818},
							expr: &ruleRefExpr{
								pos:  position{line: 2006, col: 31, offset: 74818},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2006, col: 38, offset: 74825},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 2006, col: 46, offset: 74833},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2006, col: 53, offset: 74840},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 2006, col: 95, offset: 74882},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2006, col: 96, offset: 74883},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2006, col: 96, offset: 74883},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2006, col: 118, offset: 74905},
											expr: &ruleRefExpr{
												pos:  position{line: 2006, col: 118, offset: 74905},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2006, col: 125, offset: 74912},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2006, col: 132, offset: 74919},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 2011, col: 1, offset: 75094},
			expr: &actionExpr{
				pos: position{line: 2011, col: 44, offset: 75137},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 2011, col: 44, offset: 75137},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2011, col: 50, offset: 75143},
						expr: &ruleRefExpr{
							pos:  position{line: 2011, col: 51, offset: 75144},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 2015, col: 1, offset: 75228},
			expr: &actionExpr{
				pos: position{line: 2016, col: 5, offset: 75283},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 2016, col: 5, offset: 75283},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2016, col: 5, offset: 75283},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2016, col: 11, offset: 75289},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 2016, col: 11, offset: 75289},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2016, col: 11, offset: 75289},
											expr: &ruleRefExpr{
												pos:  position{line: 2016, col: 12, offset: 75290},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2016, col: 34, offset: 75312},
											expr: &charClassMatcher{
												pos:        position{line: 2016, col: 34, offset: 75312},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2018, col: 8, offset: 75378},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 2023, col: 1, offset: 75504},
			expr: &actionExpr{
				pos: position{line: 2024, col: 5, offset: 75542},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2024, col: 5, offset: 75542},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2024, col: 5, offset: 75542},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2024, col: 16, offset: 75553},
								expr: &ruleRefExpr{
									pos:  position{line: 2024, col: 17, offset: 75554},
									name: "ElementAttribute",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2025, col: 5, offset: 75577},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2028, col: 5, offset: 75686},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 2028, col: 11, offset: 75692},
								expr: &ruleRefExpr{
									pos:  position{line: 2028, col: 12, offset: 75693},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2032, col: 1, offset: 75846},
			expr: &actionExpr{
				pos: position{line: 2032, col: 16, offset: 75861},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2032, col: 16, offset: 75861},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "LiteralParagraphLine",
			pos:  position{line: 2036, col: 1, offset: 75907},
			expr: &actionExpr{
				pos: position{line: 2036, col: 25, offset: 75931},
				run: (*parser).callonLiteralParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 2036, col: 25, offset: 75931},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2036, col: 25, offset: 75931},
							expr: &ruleRefExpr{
								pos:  position{line: 2036, col: 26, offset: 75932},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2036, col: 36, offset: 75942},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2036, col: 45, offset: 75951},
								run: (*parser).callonLiteralParagraphLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2036, col: 45, offset: 75951},
									expr: &charClassMatcher{
										pos:        position{line: 2036, col: 45, offset: 75951},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2038, col: 4, offset: 76009},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2045, col: 1, offset: 76186},
			expr: &actionExpr{
				pos: position{line: 2045, col: 14, offset: 76199},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2045, col: 14, offset: 76199},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2045, col: 14, offset: 76199},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2045, col: 19, offset: 76204},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2045, col: 25, offset: 76210},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2045, col: 43, offset: 76228},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2049, col: 1, offset: 76293},
			expr: &actionExpr{
				pos: position{line: 2049, col: 21, offset: 76313},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2049, col: 21, offset: 76313},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2049, col: 30, offset: 76322},
						expr: &choiceExpr{
							pos: position{line: 2049, col: 31, offset: 76323},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2049, col: 31, offset: 76323},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2049, col: 38, offset: 76330},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2049, col: 53, offset: 76345},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2049, col: 66, offset: 76358},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 2049, col: 74, offset: 76366},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 2049, col: 93, offset: 76385},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 2049, col: 114, offset: 76406},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 2049, col: 115, offset: 76407},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2049, col: 115, offset: 76407},
												expr: &litMatcher{
													pos:        position{line: 2049, col: 116, offset: 76408},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2049, col: 121, offset: 76413,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2055, col: 1, offset: 76519},
			expr: &actionExpr{
				pos: position{line: 2055, col: 23, offset: 76541},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2055, col: 23, offset: 76541},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2055, col: 23, offset: 76541},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2055, col: 29, offset: 76547},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2055, col: 36, offset: 76554},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2056, col: 5, offset: 76586},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2056, col: 11, offset: 76592},
								expr: &actionExpr{
									pos: position{line: 2056, col: 12, offset: 76593},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2056, col: 12, offset: 76593},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2056, col: 12, offset: 76593},
												expr: &ruleRefExpr{
													pos:  position{line: 2056, col: 12, offset: 76593},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2056, col: 19, offset: 76600},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2056, col: 23, offset: 76604},
												expr: &ruleRefExpr{
													pos:  position{line: 2056, col: 23, offset: 76604},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2056, col: 30, offset: 76611},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2056, col: 39, offset: 76620},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2057, col: 5, offset: 76678},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2057, col: 11, offset: 76684},
								expr: &actionExpr{
									pos: position{line: 2057, col: 12, offset: 76685},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2057, col: 12, offset: 76685},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2057, col: 12, offset: 76685},
												expr: &ruleRefExpr{
													pos:  position{line: 2057, col: 12, offset: 76685},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2057, col: 19, offset: 76692},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2057, col: 23, offset: 76696},
												expr: &ruleRefExpr{
													pos:  position{line: 2057, col: 23, offset: 76696},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2057, col: 30, offset: 76703},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2057, col: 39, offset: 76712},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2058, col: 5, offset: 76770},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2062, col: 1, offset: 76849},
			expr: &actionExpr{
				pos: position{line: 2062, col: 30, offset: 76878},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2062, col: 30, offset: 76878},
					expr: &choiceExpr{
						pos: position{line: 2062, col: 31, offset: 76879},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2062, col: 31, offset: 76879},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2062, col: 42, offset: 76890},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2069, col: 1, offset: 77039},
			expr: &actionExpr{
				pos: position{line: 2069, col: 14, offset: 77052},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2069, col: 14, offset: 77052},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2069, col: 14, offset: 77052},
							expr: &ruleRefExpr{
								pos:  position{line: 2069, col: 15, offset: 77053},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2069, col: 19, offset: 77057},
							expr: &ruleRefExpr{
								pos:  position{line: 2069, col: 19, offset: 77057},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2069, col: 26, offset: 77064},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2077, col: 1, offset: 77209},
			expr: &choiceExpr{
				pos: position{line: 2077, col: 11, offset: 77219},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2077, col: 11, offset: 77219},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2077, col: 24, offset: 77232},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2077, col: 36, offset: 77244},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2077, col: 48, offset: 77256},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2077, col: 61, offset: 77269},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 2077, col: 72, offset: 77280},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2079, col: 1, offset: 77299},
			expr: &actionExpr{
				pos: position{line: 2079, col: 15, offset: 77313},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2079, col: 15, offset: 77313},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2082, col: 1, offset: 77366},
			expr: &actionExpr{
				pos: position{line: 2082, col: 14, offset: 77379},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2082, col: 14, offset: 77379},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2085, col: 1, offset: 77433},
			expr: &actionExpr{
				pos: position{line: 2085, col: 14, offset: 77446},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2085, col: 14, offset: 77446},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2088, col: 1, offset: 77501},
			expr: &actionExpr{
				pos: position{line: 2088, col: 15, offset: 77515},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2088, col: 15, offset: 77515},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2091, col: 1, offset: 77569},
			expr: &actionExpr{
				pos: position{line: 2091, col: 13, offset: 77581},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2091, col: 13, offset: 77581},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2099, col: 1, offset: 77858},
			expr: &actionExpr{
				pos: position{line: 2099, col: 22, offset: 77879},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2099, col: 22, offset: 77879},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2099, col: 22, offset: 77879},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2099, col: 31, offset: 77888},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2099, col: 35, offset: 77892},
							expr: &charClassMatcher{
								pos:        position{line: 2099, col: 36, offset: 77893},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 2108, col: 1, offset: 78255},
			expr: &choiceExpr{
				pos: position{line: 2108, col: 21, offset: 78275},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2108, col: 21, offset: 78275},
						run: (*parser).callonSpecialCharacter2,
						expr: &ruleRefExpr{
							pos:  position{line: 2108, col: 21, offset: 78275},
							name: "InternalCrossReference",
						},
					},
					&actionExpr{
						pos: position{line: 2111, col: 9, offset: 78438},
						run: (*parser).callonSpecialCharacter4,
						expr: &choiceExpr{
							pos: position{line: 2111, col: 10, offset: 78439},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2111, col: 10, offset: 78439},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&litMatcher{
									pos:        position{line: 2111, col: 16, offset: 78445},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&litMatcher{
									pos:        position{line: 2111, col: 22, offset: 78451},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2118, col: 1, offset: 78629},
			expr: &charClassMatcher{
				pos:        position{line: 2118, col: 13, offset: 78641},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2120, col: 1, offset: 78651},
			expr: &choiceExpr{
				pos: position{line: 2120, col: 16, offset: 78666},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2120, col: 16, offset: 78666},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2120, col: 22, offset: 78672},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2120, col: 28, offset: 78678},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2120, col: 34, offset: 78684},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2120, col: 40, offset: 78690},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2120, col: 46, offset: 78696},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2122, col: 1, offset: 78702},
			expr: &actionExpr{
				pos: position{line: 2122, col: 14, offset: 78715},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2122, col: 14, offset: 78715},
					expr: &charClassMatcher{
						pos:        position{line: 2122, col: 14, offset: 78715},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2126, col: 1, offset: 78761},
			expr: &choiceExpr{
				pos: position{line: 2130, col: 5, offset: 79088},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2130, col: 5, offset: 79088},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2130, col: 5, offset: 79088},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2130, col: 5, offset: 79088},
									expr: &charClassMatcher{
										pos:        position{line: 2130, col: 5, offset: 79088},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2130, col: 15, offset: 79098},
									expr: &choiceExpr{
										pos: position{line: 2130, col: 17, offset: 79100},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2130, col: 17, offset: 79100},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2130, col: 30, offset: 79113},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2132, col: 9, offset: 79183},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2132, col: 9, offset: 79183},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2132, col: 9, offset: 79183},
									expr: &charClassMatcher{
										pos:        position{line: 2132, col: 9, offset: 79183},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2132, col: 19, offset: 79193},
									expr: &seqExpr{
										pos: position{line: 2132, col: 20, offset: 79194},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2132, col: 20, offset: 79194},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2132, col: 27, offset: 79201},
												expr: &charClassMatcher{
													pos:        position{line: 2132, col: 27, offset: 79201},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2136, col: 1, offset: 79277},
			expr: &choiceExpr{
				pos: position{line: 2137, col: 5, offset: 79358},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2137, col: 5, offset: 79358},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2137, col: 5, offset: 79358},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2137, col: 5, offset: 79358},
									expr: &charClassMatcher{
										pos:        position{line: 2137, col: 5, offset: 79358},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2137, col: 19, offset: 79372},
									expr: &choiceExpr{
										pos: position{line: 2137, col: 21, offset: 79374},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2137, col: 21, offset: 79374},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2137, col: 31, offset: 79384},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2139, col: 9, offset: 79453},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2142, col: 1, offset: 79553},
			expr: &actionExpr{
				pos: position{line: 2142, col: 12, offset: 79564},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2142, col: 12, offset: 79564},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2146, col: 1, offset: 79629},
			expr: &actionExpr{
				pos: position{line: 2146, col: 17, offset: 79645},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2146, col: 17, offset: 79645},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2146, col: 22, offset: 79650},
						expr: &choiceExpr{
							pos: position{line: 2146, col: 23, offset: 79651},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2146, col: 23, offset: 79651},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 2146, col: 34, offset: 79662},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2150, col: 1, offset: 79743},
			expr: &actionExpr{
				pos: position{line: 2150, col: 13, offset: 79755},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2150, col: 13, offset: 79755},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2150, col: 13, offset: 79755},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2150, col: 20, offset: 79762},
								expr: &ruleRefExpr{
									pos:  position{line: 2150, col: 21, offset: 79763},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2150, col: 30, offset: 79772},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2150, col: 35, offset: 79777},
								expr: &choiceExpr{
									pos: position{line: 2150, col: 36, offset: 79778},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2150, col: 36, offset: 79778},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2150, col: 47, offset: 79789},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2154, col: 1, offset: 79874},
			expr: &actionExpr{
				pos: position{line: 2154, col: 23, offset: 79896},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2154, col: 23, offset: 79896},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2154, col: 23, offset: 79896},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2154, col: 31, offset: 79904},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 2154, col: 39, offset: 79912},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2154, col: 44, offset: 79917},
								expr: &choiceExpr{
									pos: position{line: 2154, col: 45, offset: 79918},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2154, col: 45, offset: 79918},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2154, col: 56, offset: 79929},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 2158, col: 1, offset: 80014},
			expr: &actionExpr{
				pos: position{line: 2158, col: 13, offset: 80026},
				run: (*parser).callonFilename1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2158, col: 13, offset: 80026},
					expr: &charClassMatcher{
						pos:        position{line: 2158, col: 14, offset: 80027},
						val:        "[^\\r\\n[\\]\\uFFFD ]",
						chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 2162, col: 1, offset: 80149},
			expr: &choiceExpr{
				pos: position{line: 2162, col: 11, offset: 80159},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2162, col: 11, offset: 80159},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2162, col: 23, offset: 80171},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2162, col: 36, offset: 80184},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2162, col: 47, offset: 80195},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2162, col: 58, offset: 80206},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 2164, col: 1, offset: 80217},
			expr: &actionExpr{
				pos: position{line: 2164, col: 7, offset: 80223},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2164, col: 7, offset: 80223},
					expr: &charClassMatcher{
						pos:        position{line: 2164, col: 7, offset: 80223},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 2168, col: 1, offset: 80348},
			expr: &actionExpr{
				pos: position{line: 2168, col: 10, offset: 80357},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 2168, col: 10, offset: 80357},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 2172, col: 1, offset: 80399},
			expr: &actionExpr{
				pos: position{line: 2172, col: 11, offset: 80409},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 2172, col: 11, offset: 80409},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2172, col: 11, offset: 80409},
							expr: &litMatcher{
								pos:        position{line: 2172, col: 11, offset: 80409},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2172, col: 16, offset: 80414},
							expr: &ruleRefExpr{
								pos:  position{line: 2172, col: 16, offset: 80414},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2176, col: 1, offset: 80466},
			expr: &choiceExpr{
				pos: position{line: 2176, col: 10, offset: 80475},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2176, col: 10, offset: 80475},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2176, col: 16, offset: 80481},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2176, col: 16, offset: 80481},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2180, col: 1, offset: 80522},
			expr: &choiceExpr{
				pos: position{line: 2180, col: 12, offset: 80533},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2180, col: 12, offset: 80533},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2180, col: 21, offset: 80542},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2180, col: 28, offset: 80549},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2182, col: 1, offset: 80555},
			expr: &notExpr{
				pos: position{line: 2182, col: 8, offset: 80562},
				expr: &anyMatcher{
					line: 2182, col: 9, offset: 80563,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2184, col: 1, offset: 80566},
			expr: &choiceExpr{
				pos: position{line: 2184, col: 8, offset: 80573},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2184, col: 8, offset: 80573},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2184, col: 18, offset: 80583},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onRawSource1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonRawSource1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource1(stack["lines"])
}

func (c *current) onRawSection4() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonRawSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection4()
}

func (c *current) onRawSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonRawSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection7(stack["level"])
}

func (c *current) onRawSection1(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.(string))
}

func (p *parser) callonRawSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection1(stack["level"], stack["title"])
}

func (c *current) onRawSectionTitle1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSectionTitle1()
}

func (c *current) onRawLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonRawLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine6()
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onRawBlocks1(header, blocks interface{}) (interface{}, error) {
	if header != nil && blocks != nil {
		return append([]interface{}{header}, blocks.([]interface{})...), nil
	} else if blocks != nil {
		return blocks.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonRawBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawBlocks1(stack["header"], stack["blocks"])
}

func (c *current) onDocumentRawBlock1(block interface{}) (interface{}, error) {
	log.Debugf("new raw block of kind '%T'", block)
	return block, nil
}

func (p *parser) callonDocumentRawBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue8()
}

func (c *current) onAttributeDeclarationValue12() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue12()
}

func (c *current) onAttributeDeclarationValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"])
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSub11(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, nil)
}

func (p *parser) callonCounterSub11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub11(stack["name"])
}

func (c *current) onCounterSub21(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSub21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub21(stack["name"])
}

func (c *current) onCounterSubAlpha1(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubAlpha1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha1(stack["name"], stack["start"])
}

func (c *current) onCounterSubAlpha21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, start)
}

func (p *parser) callonCounterSubAlpha21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha21(stack["name"], stack["start"])
}

func (c *current) onCounterSubStart8() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart8()
}

func (c *current) onCounterSubStart1(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, num.(int))
}

func (p *parser) callonCounterSubStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart1(stack["name"], stack["num"])
}

func (c *current) onCounterSubStart28() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart28()
}

func (c *current) onCounterSubStart21(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, num.(int))
}

func (p *parser) callonCounterSubStart21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart21(stack["name"], stack["num"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id)
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.([]interface{}))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent3() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementTitleContent3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent3()
}

func (c *current) onElementTitleContent9() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementTitleContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent9()
}

func (c *current) onElementShortHandAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attributes"])
}

func (c *current) onBlockAttributeList1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonBlockAttributeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributeList1(stack["attributes"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {
	return types.NewElementStyle(style)
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewNamedAttribute(types.AttrPositional2, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewNamedAttribute(types.AttrPositional3, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralBlockAttribute1() (interface{}, error) {
	return types.NewLiteralBlockAttribute()
}

func (p *parser) callonLiteralBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onExampleBlockAttribute1() (interface{}, error) {
	return types.NewExampleBlockAttribute()
}

func (p *parser) callonExampleBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockAttribute1()
}

func (c *current) onListingBlockAttribute1() (interface{}, error) {
	return types.NewListingBlockAttribute()
}

func (p *parser) callonListingBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6() (interface{}, error) {
	return "nowrap", nil

}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6()
}

func (c *current) onSourceAttributes10(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes10(stack["attr"])
}

func (c *current) onSourceAttributes18(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes18(stack["attr"])
}

func (c *current) onSourceAttributes1(option, language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, option, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["option"], stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onNamedAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonNamedAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributes1(stack["attributes"])
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	return types.NewNamedAttribute(key.(string), value)
}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onNamedAttributeKey1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonNamedAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeKey1()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue7() (interface{}, error) {
	// '=' and `,` signs are allowed within quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue7()
}

func (c *current) onSingleQuotedAttributeValue12() (interface{}, error) {
	return `'`, nil
}

func (p *parser) callonSingleQuotedAttributeValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue12()
}

func (c *current) onSingleQuotedAttributeValue14() (interface{}, error) {
	// `{` or `\`
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue14()
}

func (c *current) onSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil
}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue7() (interface{}, error) {
	// '=' and `,` signs are allowed within quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue7()
}

func (c *current) onDoubleQuotedAttributeValue12() (interface{}, error) {
	// escaped "
	return types.NewStringElement(`"`) // escaped "

}

func (p *parser) callonDoubleQuotedAttributeValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue12()
}

func (c *current) onDoubleQuotedAttributeValue14() (interface{}, error) {
	// `{` or `\`
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue14()
}

func (c *current) onDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil
}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue5() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue5()
}

func (c *current) onUnquotedAttributeValue10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue10()
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onStandaloneAttributeKey1(key interface{}) (interface{}, error) {
	// value is not defined
	return types.NewNamedAttribute(key.(string), nil)
}

func (p *parser) callonStandaloneAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeKey1(stack["key"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onQuotedTextAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonQuotedTextAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttributes1(stack["attributes"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role)
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {
	return types.NewElementOption(option)
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id)
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role)
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {
	return types.Reduce(value, strings.TrimSpace), nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onShortHandValuePlain4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain4()
}

func (c *current) onShortHandValuePlain12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain12()
}

func (c *current) onShortHandValuePlain1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1(stack["first"], stack["others"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attributes.(types.Attributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attributes"])
}

func (c *current) onInlineUserMacro1(name, value, attributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attributes.(types.Attributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attributes"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attributes"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attributes"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes.([]interface{}))
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes.([]interface{}))

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph15(attributes, content interface{}) (interface{}, error) {
	return types.NewMarkdownQuoteBlock(content.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonRawParagraph15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph15(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph28(attributes interface{}) (bool, error) {
	// verify that one of the attributes is `kind:passthrough`
	return types.HasAttributeWithValue(attributes, types.AttrBlockKind, types.Passthrough), nil

}

func (p *parser) callonRawParagraph28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph28(stack["attributes"])
}

func (c *current) onRawParagraph23(attributes, content interface{}) (interface{}, error) {

	return types.NewPassthroughBlock(content.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonRawParagraph23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph23(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph32(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonRawParagraph32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph32(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine8(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonRawParagraphLine8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine8(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onSimpleRawParagraph6(attributes interface{}) (bool, error) {
	return !types.HasAttributeWithValue(attributes, types.AttrBlockKind, types.Literal), nil

}

func (p *parser) callonSimpleRawParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph6(stack["attributes"])
}

func (c *current) onSimpleRawParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes.([]interface{}))
}

func (p *parser) callonSimpleRawParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes.([]interface{}))

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines7(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonContinuedRawParagraphLines7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines7(stack["line"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attributes, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	// must be before SingleQuoteMonospaceText
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement14()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement22() (interface{}, error) {
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement22()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onDoubleQuoteMarkedText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attributes, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attributes, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attributes"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attributes, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attributes, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attributes"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherAttrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherAttrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherAttrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement20(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), attributes.([]interface{}))
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageBlockAttributes2(attribute interface{}) (interface{}, error) {
	return attribute, nil
}

func (p *parser) callonImageBlockAttributes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlockAttributes2(stack["attribute"])
}

func (c *current) onImageAttrList1(alt, shortHands, width, height, others interface{}) (interface{}, error) {
	return types.NewAttributeGroup(alt, width, height, others)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["alt"], stack["shortHands"], stack["width"], stack["height"], stack["others"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImageAttributes1(alt, width, height, others interface{}) (interface{}, error) {
	return types.NewAttributeGroup(alt, width, height, others)
}

func (p *parser) callonInlineImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["others"])
}

func (c *current) onImageAlt1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageAlt, value)
}

func (p *parser) callonImageAlt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAlt1(stack["value"])
}

func (c *current) onImageWidth1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrWidth, value)
}

func (p *parser) callonImageWidth1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidth1(stack["value"])
}

func (c *current) onImageHeight1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageHeight, value)
}

func (p *parser) callonImageHeight1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeight1(stack["value"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onIconAttributes1(size, others interface{}) (interface{}, error) {
	// TODO: use ellipsis on `nv`?
	return types.NewAttributeGroup(size, others)
}

func (p *parser) callonIconAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttributes1(stack["size"], stack["others"])
}

func (c *current) onIconSize1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrIconSize, value)
}

func (p *parser) callonIconSize1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconSize1(stack["value"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onExampleBlock1(attributes, blocks interface{}) (interface{}, error) {
	return types.NewExampleBlock(blocks.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["blocks"])
}

func (c *current) onExampleBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["element"])
}

func (c *current) onQuoteBlock6(attributes interface{}) (bool, error) {
	// AttrBlockKind may be missing or must be equal to `quote`
	if types.HasNotAttribute(attributes, types.AttrBlockKind) ||
		types.HasAttributeWithValue(attributes, types.AttrBlockKind, types.Quote) {
		return true, nil
	}
	return false, nil

}

func (p *parser) callonQuoteBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock6(stack["attributes"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewQuoteBlock(content.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent2(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewSidebarBlock(content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["element"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewFencedBlock(content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewListingBlock(content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onVerseBlock6(attributes interface{}) (bool, error) {
	// AttrBlockKind must be equal to `verse`
	return types.HasAttributeWithValue(attributes, types.AttrBlockKind, types.Verse), nil

}

func (p *parser) callonVerseBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock6(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewVerseBlock(content.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonVerseBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewPassthroughBlock(content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewCommentBlock(content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onMarkdownQuoteMacroSubs1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonMarkdownQuoteMacroSubs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteMacroSubs1(stack["lines"])
}

func (c *current) onMarkdownQuoteLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonMarkdownQuoteLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine1(stack["elements"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onNoneSubs5() (interface{}, error) {
	// just text, including empty lines
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneSubs5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneSubs5()
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithHeadingSpacesLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithHeadingSpacesLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine4()
}

func (c *current) onParagraphWithHeadingSpacesLine1(line interface{}) (interface{}, error) {
	// do not include the trailing 'EOL' on the first line
	return line, nil
}

func (p *parser) callonParagraphWithHeadingSpacesLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	return types.HasAttributeWithValue(attributes, types.AttrBlockKind, types.Literal), nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onLiteralParagraphLine6() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonLiteralParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine6()
}

func (c *current) onLiteralParagraphLine1(content interface{}) (interface{}, error) {
	return content, nil // do not include the trailing 'EOL'
}

func (p *parser) callonLiteralParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onSpecialCharacter2() (interface{}, error) {
	// if we have a InternalCrossReference we just return a StringElement.
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter2()
}

func (c *current) onSpecialCharacter4() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter4()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename1() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1()
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
