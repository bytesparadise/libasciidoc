// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 319},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 339},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 339},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 339},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 352},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 352},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 366},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 374},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 398},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 21, col: 1, offset: 478},
			expr: &actionExpr{
				pos: position{line: 21, col: 21, offset: 498},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 21, col: 21, offset: 498},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 21, offset: 498},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 29, offset: 506},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 50, offset: 527},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 26, col: 1, offset: 627},
			expr: &actionExpr{
				pos: position{line: 26, col: 17, offset: 643},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 26, col: 17, offset: 643},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 17, offset: 643},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 25, offset: 651},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 45, offset: 671},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 33, col: 1, offset: 854},
			expr: &actionExpr{
				pos: position{line: 33, col: 27, offset: 880},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 33, col: 27, offset: 880},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 27, offset: 880},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 35, offset: 888},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 35, offset: 888},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 52, offset: 905},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 33, col: 60, offset: 913},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 60, offset: 913},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 42, col: 1, offset: 1162},
			expr: &choiceExpr{
				pos: position{line: 43, col: 9, offset: 1188},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 43, col: 9, offset: 1188},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 11, offset: 1253},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 11, offset: 1279},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 46, col: 11, offset: 1331},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1349},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 11, offset: 1374},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 11, offset: 1398},
						name: "VerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1452},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1474},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1501},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1530},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1556},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1591},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1615},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1647},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1673},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1710},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1735},
						name: "Paragraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 62, col: 1, offset: 1746},
			expr: &labeledExpr{
				pos:   position{line: 62, col: 47, offset: 1792},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 62, col: 54, offset: 1799},
					expr: &ruleRefExpr{
						pos:  position{line: 62, col: 55, offset: 1800},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 64, col: 1, offset: 1837},
			expr: &actionExpr{
				pos: position{line: 64, col: 38, offset: 1874},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 64, col: 38, offset: 1874},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 64, col: 38, offset: 1874},
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 39, offset: 1875},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 65, col: 5, offset: 1884},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 65, col: 12, offset: 1891},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 65, col: 12, offset: 1891},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1916},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1968},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1992},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2017},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2039},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2066},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2095},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2122},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2157},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2181},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2213},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2239},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2276},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2301},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 83, col: 1, offset: 2339},
			expr: &labeledExpr{
				pos:   position{line: 83, col: 23, offset: 2361},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 83, col: 30, offset: 2368},
					expr: &ruleRefExpr{
						pos:  position{line: 83, col: 31, offset: 2369},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 85, col: 1, offset: 2390},
			expr: &actionExpr{
				pos: position{line: 85, col: 22, offset: 2411},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 85, col: 22, offset: 2411},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 85, col: 22, offset: 2411},
							expr: &ruleRefExpr{
								pos:  position{line: 85, col: 23, offset: 2412},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 86, col: 5, offset: 2421},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 86, col: 12, offset: 2428},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 86, col: 12, offset: 2428},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 86, col: 24, offset: 2440},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 93, col: 1, offset: 2586},
			expr: &ruleRefExpr{
				pos:  position{line: 93, col: 16, offset: 2601},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 95, col: 1, offset: 2619},
			expr: &actionExpr{
				pos: position{line: 95, col: 20, offset: 2638},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 95, col: 20, offset: 2638},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 95, col: 20, offset: 2638},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 95, col: 41, offset: 2659},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 95, col: 49, offset: 2667},
								expr: &ruleRefExpr{
									pos:  position{line: 95, col: 50, offset: 2668},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 95, col: 75, offset: 2693},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 99, col: 1, offset: 2773},
			expr: &seqExpr{
				pos: position{line: 99, col: 26, offset: 2798},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 99, col: 26, offset: 2798},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 99, col: 32, offset: 2804},
						expr: &ruleRefExpr{
							pos:  position{line: 99, col: 32, offset: 2804},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 99, col: 39, offset: 2811},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 101, col: 1, offset: 2816},
			expr: &actionExpr{
				pos: position{line: 101, col: 27, offset: 2842},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 101, col: 27, offset: 2842},
					expr: &oneOrMoreExpr{
						pos: position{line: 101, col: 28, offset: 2843},
						expr: &seqExpr{
							pos: position{line: 101, col: 29, offset: 2844},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 101, col: 29, offset: 2844},
									expr: &ruleRefExpr{
										pos:  position{line: 101, col: 30, offset: 2845},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 101, col: 51, offset: 2866,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 108, col: 1, offset: 3032},
			expr: &actionExpr{
				pos: position{line: 108, col: 19, offset: 3050},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 108, col: 19, offset: 3050},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 108, col: 19, offset: 3050},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 108, col: 23, offset: 3054},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 23, offset: 3054},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 30, offset: 3061},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 37, offset: 3068},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 52, offset: 3083},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 108, col: 56, offset: 3087},
								expr: &ruleRefExpr{
									pos:  position{line: 108, col: 56, offset: 3087},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 74, offset: 3105},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 109, col: 9, offset: 3117},
							expr: &choiceExpr{
								pos: position{line: 109, col: 10, offset: 3118},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 109, col: 10, offset: 3118},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 109, col: 30, offset: 3138},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 110, col: 9, offset: 3161},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 110, col: 18, offset: 3170},
								expr: &ruleRefExpr{
									pos:  position{line: 110, col: 18, offset: 3170},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 111, col: 9, offset: 3197},
							expr: &choiceExpr{
								pos: position{line: 111, col: 10, offset: 3198},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 111, col: 10, offset: 3198},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 111, col: 30, offset: 3218},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 9, offset: 3241},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 112, col: 19, offset: 3251},
								expr: &ruleRefExpr{
									pos:  position{line: 112, col: 19, offset: 3251},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 116, col: 1, offset: 3352},
			expr: &choiceExpr{
				pos: position{line: 116, col: 20, offset: 3371},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 116, col: 20, offset: 3371},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 116, col: 48, offset: 3399},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 118, col: 1, offset: 3429},
			expr: &actionExpr{
				pos: position{line: 118, col: 30, offset: 3458},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 118, col: 30, offset: 3458},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 30, offset: 3458},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 30, offset: 3458},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 118, col: 37, offset: 3465},
							expr: &litMatcher{
								pos:        position{line: 118, col: 38, offset: 3466},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 118, col: 42, offset: 3470},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 118, col: 51, offset: 3479},
								expr: &ruleRefExpr{
									pos:  position{line: 118, col: 51, offset: 3479},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 118, col: 68, offset: 3496},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 122, col: 1, offset: 3566},
			expr: &actionExpr{
				pos: position{line: 122, col: 33, offset: 3598},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 122, col: 33, offset: 3598},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 33, offset: 3598},
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 33, offset: 3598},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 122, col: 40, offset: 3605},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 122, col: 51, offset: 3616},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 59, offset: 3624},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 122, col: 75, offset: 3640},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 126, col: 1, offset: 3719},
			expr: &actionExpr{
				pos: position{line: 126, col: 19, offset: 3737},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 126, col: 19, offset: 3737},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 126, col: 19, offset: 3737},
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 19, offset: 3737},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 126, col: 26, offset: 3744},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 36, offset: 3754},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 126, col: 56, offset: 3774},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 126, col: 62, offset: 3780},
								expr: &ruleRefExpr{
									pos:  position{line: 126, col: 63, offset: 3781},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 126, col: 85, offset: 3803},
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 85, offset: 3803},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 126, col: 92, offset: 3810},
							expr: &litMatcher{
								pos:        position{line: 126, col: 92, offset: 3810},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 126, col: 97, offset: 3815},
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 97, offset: 3815},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 131, col: 1, offset: 3960},
			expr: &actionExpr{
				pos: position{line: 131, col: 23, offset: 3982},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 131, col: 23, offset: 3982},
					expr: &charClassMatcher{
						pos:        position{line: 131, col: 23, offset: 3982},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 135, col: 1, offset: 4029},
			expr: &actionExpr{
				pos: position{line: 135, col: 24, offset: 4052},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 135, col: 24, offset: 4052},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 135, col: 24, offset: 4052},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 135, col: 28, offset: 4056},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 135, col: 35, offset: 4063},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 135, col: 36, offset: 4064},
									expr: &charClassMatcher{
										pos:        position{line: 135, col: 36, offset: 4064},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 137, col: 4, offset: 4111},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 143, col: 1, offset: 4272},
			expr: &actionExpr{
				pos: position{line: 143, col: 21, offset: 4292},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 143, col: 21, offset: 4292},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 143, col: 21, offset: 4292},
							expr: &ruleRefExpr{
								pos:  position{line: 143, col: 21, offset: 4292},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 143, col: 28, offset: 4299},
							expr: &litMatcher{
								pos:        position{line: 143, col: 29, offset: 4300},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 143, col: 33, offset: 4304},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 144, col: 9, offset: 4323},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 144, col: 10, offset: 4324},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 144, col: 10, offset: 4324},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 144, col: 10, offset: 4324},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 144, col: 21, offset: 4335},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 144, col: 45, offset: 4359},
													expr: &litMatcher{
														pos:        position{line: 144, col: 45, offset: 4359},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 144, col: 50, offset: 4364},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 144, col: 58, offset: 4372},
														expr: &ruleRefExpr{
															pos:  position{line: 144, col: 59, offset: 4373},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 144, col: 82, offset: 4396},
													expr: &litMatcher{
														pos:        position{line: 144, col: 82, offset: 4396},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 144, col: 87, offset: 4401},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 144, col: 97, offset: 4411},
														expr: &ruleRefExpr{
															pos:  position{line: 144, col: 98, offset: 4412},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 146, col: 15, offset: 4529},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 146, col: 15, offset: 4529},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 146, col: 15, offset: 4529},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 146, col: 24, offset: 4538},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 146, col: 46, offset: 4560},
													expr: &litMatcher{
														pos:        position{line: 146, col: 46, offset: 4560},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 146, col: 51, offset: 4565},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 146, col: 61, offset: 4575},
														expr: &ruleRefExpr{
															pos:  position{line: 146, col: 62, offset: 4576},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 148, col: 13, offset: 4685},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 153, col: 1, offset: 4815},
			expr: &choiceExpr{
				pos: position{line: 153, col: 27, offset: 4841},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 153, col: 27, offset: 4841},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 153, col: 27, offset: 4841},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 153, col: 27, offset: 4841},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 153, col: 32, offset: 4846},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 153, col: 39, offset: 4853},
									expr: &charClassMatcher{
										pos:        position{line: 153, col: 39, offset: 4853},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 155, col: 5, offset: 4901},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 155, col: 5, offset: 4901},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 155, col: 5, offset: 4901},
									expr: &litMatcher{
										pos:        position{line: 155, col: 5, offset: 4901},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 155, col: 11, offset: 4907},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 155, col: 18, offset: 4914},
									expr: &charClassMatcher{
										pos:        position{line: 155, col: 18, offset: 4914},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 155, col: 29, offset: 4925},
									expr: &ruleRefExpr{
										pos:  position{line: 155, col: 29, offset: 4925},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 155, col: 36, offset: 4932},
									expr: &litMatcher{
										pos:        position{line: 155, col: 37, offset: 4933},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 159, col: 1, offset: 4973},
			expr: &actionExpr{
				pos: position{line: 159, col: 25, offset: 4997},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 159, col: 25, offset: 4997},
					expr: &charClassMatcher{
						pos:        position{line: 159, col: 25, offset: 4997},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 163, col: 1, offset: 5043},
			expr: &actionExpr{
				pos: position{line: 163, col: 27, offset: 5069},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 163, col: 27, offset: 5069},
					expr: &charClassMatcher{
						pos:        position{line: 163, col: 27, offset: 5069},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 170, col: 1, offset: 5222},
			expr: &actionExpr{
				pos: position{line: 170, col: 25, offset: 5246},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 170, col: 25, offset: 5246},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 170, col: 25, offset: 5246},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 170, col: 29, offset: 5250},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 170, col: 35, offset: 5256},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 170, col: 50, offset: 5271},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 171, col: 9, offset: 5284},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 171, col: 15, offset: 5290},
								expr: &actionExpr{
									pos: position{line: 171, col: 16, offset: 5291},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 171, col: 17, offset: 5292},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 171, col: 17, offset: 5292},
												expr: &ruleRefExpr{
													pos:  position{line: 171, col: 17, offset: 5292},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 171, col: 24, offset: 5299},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 171, col: 31, offset: 5306},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 173, col: 13, offset: 5380},
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 13, offset: 5380},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 173, col: 20, offset: 5387},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 180, col: 1, offset: 5627},
			expr: &actionExpr{
				pos: position{line: 180, col: 18, offset: 5644},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 180, col: 18, offset: 5644},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 180, col: 18, offset: 5644},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 180, col: 28, offset: 5654},
							expr: &charClassMatcher{
								pos:        position{line: 180, col: 29, offset: 5655},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 184, col: 1, offset: 5703},
			expr: &actionExpr{
				pos: position{line: 184, col: 30, offset: 5732},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 184, col: 30, offset: 5732},
					expr: &charClassMatcher{
						pos:        position{line: 184, col: 30, offset: 5732},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 188, col: 1, offset: 5777},
			expr: &choiceExpr{
				pos: position{line: 188, col: 19, offset: 5795},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 188, col: 19, offset: 5795},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 188, col: 19, offset: 5795},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 188, col: 19, offset: 5795},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 188, col: 24, offset: 5800},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 188, col: 30, offset: 5806},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 188, col: 45, offset: 5821},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 188, col: 49, offset: 5825},
									expr: &ruleRefExpr{
										pos:  position{line: 188, col: 49, offset: 5825},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 188, col: 56, offset: 5832},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 190, col: 5, offset: 5892},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 190, col: 5, offset: 5892},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 190, col: 5, offset: 5892},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 190, col: 9, offset: 5896},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 190, col: 15, offset: 5902},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 190, col: 30, offset: 5917},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 190, col: 35, offset: 5922},
									expr: &ruleRefExpr{
										pos:  position{line: 190, col: 35, offset: 5922},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 190, col: 42, offset: 5929},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 194, col: 1, offset: 5988},
			expr: &actionExpr{
				pos: position{line: 194, col: 26, offset: 6013},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 194, col: 26, offset: 6013},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 194, col: 26, offset: 6013},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 194, col: 30, offset: 6017},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 36, offset: 6023},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 194, col: 51, offset: 6038},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 198, col: 1, offset: 6104},
			expr: &actionExpr{
				pos: position{line: 198, col: 15, offset: 6118},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 198, col: 15, offset: 6118},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 198, col: 15, offset: 6118},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 198, col: 21, offset: 6124},
								expr: &ruleRefExpr{
									pos:  position{line: 198, col: 22, offset: 6125},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 198, col: 41, offset: 6144},
							expr: &ruleRefExpr{
								pos:  position{line: 198, col: 41, offset: 6144},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 202, col: 1, offset: 6214},
			expr: &actionExpr{
				pos: position{line: 202, col: 21, offset: 6234},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 202, col: 21, offset: 6234},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 202, col: 21, offset: 6234},
							expr: &choiceExpr{
								pos: position{line: 202, col: 23, offset: 6236},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 202, col: 23, offset: 6236},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 202, col: 29, offset: 6242},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&litMatcher{
										pos:        position{line: 202, col: 35, offset: 6248},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 203, col: 5, offset: 6324},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 203, col: 11, offset: 6330},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 203, col: 11, offset: 6330},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 204, col: 9, offset: 6351},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 205, col: 9, offset: 6375},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 206, col: 9, offset: 6398},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 207, col: 9, offset: 6426},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 208, col: 9, offset: 6454},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 209, col: 9, offset: 6481},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 9, offset: 6508},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 211, col: 9, offset: 6545},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 212, col: 9, offset: 6573},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 213, col: 9, offset: 6610},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 218, col: 1, offset: 6793},
			expr: &choiceExpr{
				pos: position{line: 218, col: 24, offset: 6816},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 218, col: 24, offset: 6816},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 218, col: 42, offset: 6834},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 220, col: 1, offset: 6851},
			expr: &choiceExpr{
				pos: position{line: 220, col: 14, offset: 6864},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 220, col: 14, offset: 6864},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 220, col: 14, offset: 6864},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 220, col: 14, offset: 6864},
									val:        "[[",
									ignoreCase: false,
									want:       "\"[[\"",
								},
								&labeledExpr{
									pos:   position{line: 220, col: 19, offset: 6869},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 220, col: 23, offset: 6873},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 220, col: 27, offset: 6877},
									val:        "]]",
									ignoreCase: false,
									want:       "\"]]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 220, col: 32, offset: 6882},
									expr: &ruleRefExpr{
										pos:  position{line: 220, col: 32, offset: 6882},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 220, col: 39, offset: 6889},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 222, col: 5, offset: 6942},
						run: (*parser).callonElementID11,
						expr: &seqExpr{
							pos: position{line: 222, col: 5, offset: 6942},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 222, col: 5, offset: 6942},
									val:        "[#",
									ignoreCase: false,
									want:       "\"[#\"",
								},
								&labeledExpr{
									pos:   position{line: 222, col: 10, offset: 6947},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 222, col: 14, offset: 6951},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 222, col: 18, offset: 6955},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 222, col: 23, offset: 6960},
									expr: &ruleRefExpr{
										pos:  position{line: 222, col: 23, offset: 6960},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 222, col: 30, offset: 6967},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 226, col: 1, offset: 7019},
			expr: &actionExpr{
				pos: position{line: 226, col: 20, offset: 7038},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 226, col: 20, offset: 7038},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 226, col: 20, offset: 7038},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 226, col: 25, offset: 7043},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 29, offset: 7047},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 226, col: 33, offset: 7051},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 226, col: 38, offset: 7056},
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 38, offset: 7056},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 232, col: 1, offset: 7333},
			expr: &actionExpr{
				pos: position{line: 232, col: 17, offset: 7349},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 232, col: 17, offset: 7349},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 232, col: 17, offset: 7349},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 232, col: 21, offset: 7353},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 28, offset: 7360},
								name: "ElementTitleContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 49, offset: 7381},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 236, col: 1, offset: 7439},
			expr: &actionExpr{
				pos: position{line: 236, col: 24, offset: 7462},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 236, col: 24, offset: 7462},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 236, col: 24, offset: 7462},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 236, col: 32, offset: 7470},
							expr: &charClassMatcher{
								pos:        position{line: 236, col: 32, offset: 7470},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 242, col: 1, offset: 7697},
			expr: &actionExpr{
				pos: position{line: 242, col: 16, offset: 7712},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 242, col: 16, offset: 7712},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 242, col: 16, offset: 7712},
							val:        "[.",
							ignoreCase: false,
							want:       "\"[.\"",
						},
						&labeledExpr{
							pos:   position{line: 242, col: 21, offset: 7717},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 242, col: 27, offset: 7723},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 242, col: 27, offset: 7723},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 242, col: 27, offset: 7723},
											val:        "[\\pL0-9]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 242, col: 36, offset: 7732},
											expr: &charClassMatcher{
												pos:        position{line: 242, col: 36, offset: 7732},
												val:        "[^\\]\\r\\n]",
												chars:      []rune{']', '\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 244, col: 4, offset: 7779},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 244, col: 8, offset: 7783},
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 8, offset: 7783},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 15, offset: 7790},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 248, col: 1, offset: 7846},
			expr: &actionExpr{
				pos: position{line: 248, col: 21, offset: 7866},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 248, col: 21, offset: 7866},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 248, col: 21, offset: 7866},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 248, col: 33, offset: 7878},
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 33, offset: 7878},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 248, col: 40, offset: 7885},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 252, col: 1, offset: 7937},
			expr: &actionExpr{
				pos: position{line: 252, col: 30, offset: 7966},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 252, col: 30, offset: 7966},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 252, col: 30, offset: 7966},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 39, offset: 7975},
							expr: &ruleRefExpr{
								pos:  position{line: 252, col: 39, offset: 7975},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 252, col: 46, offset: 7982},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 257, col: 1, offset: 8123},
			expr: &actionExpr{
				pos: position{line: 257, col: 30, offset: 8152},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 257, col: 30, offset: 8152},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 257, col: 30, offset: 8152},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 257, col: 34, offset: 8156},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 37, offset: 8159},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 257, col: 53, offset: 8175},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 257, col: 57, offset: 8179},
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 57, offset: 8179},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 257, col: 64, offset: 8186},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 262, col: 1, offset: 8341},
			expr: &actionExpr{
				pos: position{line: 262, col: 21, offset: 8361},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 262, col: 21, offset: 8361},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 262, col: 21, offset: 8361},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 263, col: 5, offset: 8376},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 263, col: 14, offset: 8385},
								expr: &actionExpr{
									pos: position{line: 263, col: 15, offset: 8386},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 263, col: 15, offset: 8386},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 263, col: 15, offset: 8386},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 263, col: 19, offset: 8390},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 263, col: 24, offset: 8395},
													expr: &ruleRefExpr{
														pos:  position{line: 263, col: 25, offset: 8396},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 264, col: 5, offset: 8451},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 264, col: 12, offset: 8458},
								expr: &actionExpr{
									pos: position{line: 264, col: 13, offset: 8459},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 264, col: 13, offset: 8459},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 264, col: 13, offset: 8459},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 264, col: 17, offset: 8463},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 264, col: 22, offset: 8468},
													expr: &ruleRefExpr{
														pos:  position{line: 264, col: 23, offset: 8469},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 265, col: 5, offset: 8516},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 265, col: 9, offset: 8520},
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 9, offset: 8520},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 265, col: 16, offset: 8527},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 270, col: 1, offset: 8678},
			expr: &actionExpr{
				pos: position{line: 270, col: 19, offset: 8696},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 270, col: 19, offset: 8696},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 270, col: 19, offset: 8696},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 270, col: 23, offset: 8700},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 270, col: 34, offset: 8711},
								expr: &ruleRefExpr{
									pos:  position{line: 270, col: 35, offset: 8712},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 270, col: 54, offset: 8731},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 270, col: 58, offset: 8735},
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 58, offset: 8735},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 270, col: 65, offset: 8742},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 274, col: 1, offset: 8814},
			expr: &choiceExpr{
				pos: position{line: 274, col: 21, offset: 8834},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 274, col: 21, offset: 8834},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 274, col: 49, offset: 8862},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 276, col: 1, offset: 8892},
			expr: &actionExpr{
				pos: position{line: 276, col: 30, offset: 8921},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 276, col: 30, offset: 8921},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 276, col: 30, offset: 8921},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 276, col: 35, offset: 8926},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 276, col: 49, offset: 8940},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 276, col: 53, offset: 8944},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 276, col: 59, offset: 8950},
								expr: &ruleRefExpr{
									pos:  position{line: 276, col: 60, offset: 8951},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 276, col: 77, offset: 8968},
							expr: &litMatcher{
								pos:        position{line: 276, col: 77, offset: 8968},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 276, col: 82, offset: 8973},
							expr: &ruleRefExpr{
								pos:  position{line: 276, col: 82, offset: 8973},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 280, col: 1, offset: 9072},
			expr: &actionExpr{
				pos: position{line: 280, col: 33, offset: 9104},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 280, col: 33, offset: 9104},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 280, col: 33, offset: 9104},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 280, col: 38, offset: 9109},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 280, col: 52, offset: 9123},
							expr: &litMatcher{
								pos:        position{line: 280, col: 52, offset: 9123},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 280, col: 57, offset: 9128},
							expr: &ruleRefExpr{
								pos:  position{line: 280, col: 57, offset: 9128},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 284, col: 1, offset: 9216},
			expr: &actionExpr{
				pos: position{line: 284, col: 17, offset: 9232},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 284, col: 17, offset: 9232},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 284, col: 17, offset: 9232},
							expr: &litMatcher{
								pos:        position{line: 284, col: 18, offset: 9233},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 284, col: 26, offset: 9241},
							expr: &litMatcher{
								pos:        position{line: 284, col: 27, offset: 9242},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 284, col: 35, offset: 9250},
							expr: &litMatcher{
								pos:        position{line: 284, col: 36, offset: 9251},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 284, col: 46, offset: 9261},
							expr: &oneOrMoreExpr{
								pos: position{line: 284, col: 48, offset: 9263},
								expr: &ruleRefExpr{
									pos:  position{line: 284, col: 48, offset: 9263},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 284, col: 56, offset: 9271},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 284, col: 61, offset: 9276},
								expr: &charClassMatcher{
									pos:        position{line: 284, col: 61, offset: 9276},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 284, col: 75, offset: 9290},
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 75, offset: 9290},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 288, col: 1, offset: 9333},
			expr: &actionExpr{
				pos: position{line: 288, col: 19, offset: 9351},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 288, col: 19, offset: 9351},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 288, col: 26, offset: 9358},
						expr: &charClassMatcher{
							pos:        position{line: 288, col: 26, offset: 9358},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 292, col: 1, offset: 9409},
			expr: &actionExpr{
				pos: position{line: 292, col: 29, offset: 9437},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 292, col: 29, offset: 9437},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 292, col: 29, offset: 9437},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 292, col: 36, offset: 9444},
								expr: &charClassMatcher{
									pos:        position{line: 292, col: 36, offset: 9444},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 292, col: 50, offset: 9458},
							expr: &litMatcher{
								pos:        position{line: 292, col: 51, offset: 9459},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 296, col: 1, offset: 9625},
			expr: &actionExpr{
				pos: position{line: 296, col: 21, offset: 9645},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 296, col: 21, offset: 9645},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 296, col: 21, offset: 9645},
							val:        "[horizontal]",
							ignoreCase: false,
							want:       "\"[horizontal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 296, col: 36, offset: 9660},
							expr: &ruleRefExpr{
								pos:  position{line: 296, col: 36, offset: 9660},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 296, col: 43, offset: 9667},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 300, col: 1, offset: 9733},
			expr: &actionExpr{
				pos: position{line: 300, col: 20, offset: 9752},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 300, col: 20, offset: 9752},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 300, col: 20, offset: 9752},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 300, col: 29, offset: 9761},
							expr: &ruleRefExpr{
								pos:  position{line: 300, col: 29, offset: 9761},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 300, col: 36, offset: 9768},
							expr: &litMatcher{
								pos:        position{line: 300, col: 36, offset: 9768},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 300, col: 41, offset: 9773},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 300, col: 48, offset: 9780},
								expr: &ruleRefExpr{
									pos:  position{line: 300, col: 49, offset: 9781},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 300, col: 66, offset: 9798},
							expr: &litMatcher{
								pos:        position{line: 300, col: 66, offset: 9798},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 300, col: 71, offset: 9803},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 300, col: 77, offset: 9809},
								expr: &ruleRefExpr{
									pos:  position{line: 300, col: 78, offset: 9810},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 300, col: 95, offset: 9827},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 300, col: 99, offset: 9831},
							expr: &ruleRefExpr{
								pos:  position{line: 300, col: 99, offset: 9831},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 300, col: 106, offset: 9838},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 304, col: 1, offset: 9907},
			expr: &actionExpr{
				pos: position{line: 304, col: 20, offset: 9926},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 304, col: 20, offset: 9926},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 304, col: 20, offset: 9926},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 304, col: 29, offset: 9935},
							expr: &ruleRefExpr{
								pos:  position{line: 304, col: 29, offset: 9935},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 304, col: 36, offset: 9942},
							expr: &litMatcher{
								pos:        position{line: 304, col: 36, offset: 9942},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 304, col: 41, offset: 9947},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 304, col: 48, offset: 9954},
								expr: &ruleRefExpr{
									pos:  position{line: 304, col: 49, offset: 9955},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 304, col: 66, offset: 9972},
							expr: &litMatcher{
								pos:        position{line: 304, col: 66, offset: 9972},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 304, col: 71, offset: 9977},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 304, col: 77, offset: 9983},
								expr: &ruleRefExpr{
									pos:  position{line: 304, col: 78, offset: 9984},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 304, col: 95, offset: 10001},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 304, col: 99, offset: 10005},
							expr: &ruleRefExpr{
								pos:  position{line: 304, col: 99, offset: 10005},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 304, col: 106, offset: 10012},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 308, col: 1, offset: 10099},
			expr: &actionExpr{
				pos: position{line: 308, col: 19, offset: 10117},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 308, col: 20, offset: 10118},
					expr: &charClassMatcher{
						pos:        position{line: 308, col: 20, offset: 10118},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 312, col: 1, offset: 10167},
			expr: &actionExpr{
				pos: position{line: 312, col: 21, offset: 10187},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 312, col: 21, offset: 10187},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 312, col: 21, offset: 10187},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 312, col: 25, offset: 10191},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 312, col: 31, offset: 10197},
								expr: &ruleRefExpr{
									pos:  position{line: 312, col: 32, offset: 10198},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 312, col: 51, offset: 10217},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 319, col: 1, offset: 10393},
			expr: &actionExpr{
				pos: position{line: 319, col: 12, offset: 10404},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 319, col: 12, offset: 10404},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 319, col: 12, offset: 10404},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 319, col: 23, offset: 10415},
								expr: &ruleRefExpr{
									pos:  position{line: 319, col: 24, offset: 10416},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 320, col: 5, offset: 10433},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 320, col: 12, offset: 10440},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 320, col: 12, offset: 10440},
									expr: &litMatcher{
										pos:        position{line: 320, col: 13, offset: 10441},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 324, col: 5, offset: 10532},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 328, col: 5, offset: 10684},
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 5, offset: 10684},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 328, col: 12, offset: 10691},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 19, offset: 10698},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 328, col: 34, offset: 10713},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 328, col: 38, offset: 10717},
								expr: &ruleRefExpr{
									pos:  position{line: 328, col: 38, offset: 10717},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 328, col: 56, offset: 10735},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 332, col: 1, offset: 10841},
			expr: &actionExpr{
				pos: position{line: 332, col: 18, offset: 10858},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 332, col: 18, offset: 10858},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 332, col: 27, offset: 10867},
						expr: &seqExpr{
							pos: position{line: 332, col: 28, offset: 10868},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 332, col: 28, offset: 10868},
									expr: &ruleRefExpr{
										pos:  position{line: 332, col: 29, offset: 10869},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 332, col: 37, offset: 10877},
									expr: &ruleRefExpr{
										pos:  position{line: 332, col: 38, offset: 10878},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 332, col: 54, offset: 10894},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 336, col: 1, offset: 11015},
			expr: &actionExpr{
				pos: position{line: 336, col: 17, offset: 11031},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 336, col: 17, offset: 11031},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 336, col: 26, offset: 11040},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 336, col: 26, offset: 11040},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 337, col: 11, offset: 11055},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 338, col: 11, offset: 11100},
								expr: &ruleRefExpr{
									pos:  position{line: 338, col: 11, offset: 11100},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 339, col: 11, offset: 11118},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 340, col: 11, offset: 11143},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 341, col: 11, offset: 11171},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 342, col: 11, offset: 11194},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 343, col: 11, offset: 11209},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 344, col: 11, offset: 11234},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 345, col: 11, offset: 11255},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 346, col: 11, offset: 11287},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 353, col: 1, offset: 11438},
			expr: &seqExpr{
				pos: position{line: 353, col: 31, offset: 11468},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 353, col: 31, offset: 11468},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 353, col: 41, offset: 11478},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 358, col: 1, offset: 11589},
			expr: &actionExpr{
				pos: position{line: 358, col: 19, offset: 11607},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 358, col: 19, offset: 11607},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 358, col: 19, offset: 11607},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 358, col: 25, offset: 11613},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 358, col: 40, offset: 11628},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 358, col: 45, offset: 11633},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 358, col: 52, offset: 11640},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 358, col: 68, offset: 11656},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 358, col: 75, offset: 11663},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 362, col: 1, offset: 11778},
			expr: &actionExpr{
				pos: position{line: 362, col: 20, offset: 11797},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 362, col: 20, offset: 11797},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 362, col: 20, offset: 11797},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 362, col: 26, offset: 11803},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 362, col: 41, offset: 11818},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 362, col: 45, offset: 11822},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 362, col: 52, offset: 11829},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 362, col: 68, offset: 11845},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 362, col: 75, offset: 11852},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 366, col: 1, offset: 11968},
			expr: &actionExpr{
				pos: position{line: 366, col: 18, offset: 11985},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 366, col: 19, offset: 11986},
					expr: &charClassMatcher{
						pos:        position{line: 366, col: 19, offset: 11986},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 370, col: 1, offset: 12035},
			expr: &actionExpr{
				pos: position{line: 370, col: 19, offset: 12053},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 370, col: 19, offset: 12053},
					expr: &charClassMatcher{
						pos:        position{line: 370, col: 19, offset: 12053},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 374, col: 1, offset: 12101},
			expr: &actionExpr{
				pos: position{line: 374, col: 24, offset: 12124},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 374, col: 24, offset: 12124},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 374, col: 24, offset: 12124},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 374, col: 28, offset: 12128},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 374, col: 34, offset: 12134},
								expr: &ruleRefExpr{
									pos:  position{line: 374, col: 35, offset: 12135},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 374, col: 54, offset: 12154},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 381, col: 1, offset: 12336},
			expr: &actionExpr{
				pos: position{line: 381, col: 18, offset: 12353},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 381, col: 18, offset: 12353},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 381, col: 18, offset: 12353},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 381, col: 24, offset: 12359},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 381, col: 24, offset: 12359},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 381, col: 24, offset: 12359},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 381, col: 36, offset: 12371},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 381, col: 42, offset: 12377},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 381, col: 56, offset: 12391},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 381, col: 74, offset: 12409},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 383, col: 8, offset: 12556},
							expr: &ruleRefExpr{
								pos:  position{line: 383, col: 8, offset: 12556},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 383, col: 15, offset: 12563},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 387, col: 1, offset: 12615},
			expr: &actionExpr{
				pos: position{line: 387, col: 26, offset: 12640},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 387, col: 26, offset: 12640},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 387, col: 26, offset: 12640},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 387, col: 30, offset: 12644},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 387, col: 36, offset: 12650},
								expr: &choiceExpr{
									pos: position{line: 387, col: 37, offset: 12651},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 387, col: 37, offset: 12651},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 387, col: 59, offset: 12673},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 387, col: 80, offset: 12694},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 387, col: 99, offset: 12713},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 391, col: 1, offset: 12785},
			expr: &actionExpr{
				pos: position{line: 391, col: 24, offset: 12808},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 391, col: 24, offset: 12808},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 391, col: 24, offset: 12808},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 391, col: 33, offset: 12817},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 40, offset: 12824},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 391, col: 66, offset: 12850},
							expr: &litMatcher{
								pos:        position{line: 391, col: 66, offset: 12850},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 395, col: 1, offset: 12909},
			expr: &actionExpr{
				pos: position{line: 395, col: 29, offset: 12937},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 395, col: 29, offset: 12937},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 395, col: 29, offset: 12937},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 395, col: 36, offset: 12944},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 395, col: 36, offset: 12944},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 396, col: 11, offset: 13061},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 397, col: 11, offset: 13097},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 398, col: 11, offset: 13123},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 399, col: 11, offset: 13155},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 400, col: 11, offset: 13187},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 401, col: 11, offset: 13214},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 401, col: 31, offset: 13234},
							expr: &ruleRefExpr{
								pos:  position{line: 401, col: 31, offset: 13234},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 401, col: 39, offset: 13242},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 401, col: 39, offset: 13242},
									expr: &litMatcher{
										pos:        position{line: 401, col: 40, offset: 13243},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 401, col: 46, offset: 13249},
									expr: &litMatcher{
										pos:        position{line: 401, col: 47, offset: 13250},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 405, col: 1, offset: 13282},
			expr: &actionExpr{
				pos: position{line: 405, col: 23, offset: 13304},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 405, col: 23, offset: 13304},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 405, col: 23, offset: 13304},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 405, col: 30, offset: 13311},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 405, col: 30, offset: 13311},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 405, col: 47, offset: 13328},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 406, col: 5, offset: 13350},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 406, col: 12, offset: 13357},
								expr: &actionExpr{
									pos: position{line: 406, col: 13, offset: 13358},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 406, col: 13, offset: 13358},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 406, col: 13, offset: 13358},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 406, col: 17, offset: 13362},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 406, col: 24, offset: 13369},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 406, col: 24, offset: 13369},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 406, col: 41, offset: 13386},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 412, col: 1, offset: 13524},
			expr: &actionExpr{
				pos: position{line: 412, col: 29, offset: 13552},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 412, col: 29, offset: 13552},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 412, col: 29, offset: 13552},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 412, col: 34, offset: 13557},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 412, col: 41, offset: 13564},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 412, col: 41, offset: 13564},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 412, col: 58, offset: 13581},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 413, col: 5, offset: 13603},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 413, col: 12, offset: 13610},
								expr: &actionExpr{
									pos: position{line: 413, col: 13, offset: 13611},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 413, col: 13, offset: 13611},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 413, col: 13, offset: 13611},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 413, col: 17, offset: 13615},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 413, col: 24, offset: 13622},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 413, col: 24, offset: 13622},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 413, col: 41, offset: 13639},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 415, col: 9, offset: 13692},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 419, col: 1, offset: 13782},
			expr: &actionExpr{
				pos: position{line: 419, col: 19, offset: 13800},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 419, col: 19, offset: 13800},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 419, col: 19, offset: 13800},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 419, col: 26, offset: 13807},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 419, col: 34, offset: 13815},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 419, col: 39, offset: 13820},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 419, col: 44, offset: 13825},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 423, col: 1, offset: 13913},
			expr: &actionExpr{
				pos: position{line: 423, col: 25, offset: 13937},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 423, col: 25, offset: 13937},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 423, col: 25, offset: 13937},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 423, col: 30, offset: 13942},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 37, offset: 13949},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 423, col: 45, offset: 13957},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 423, col: 50, offset: 13962},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 55, offset: 13967},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 423, col: 63, offset: 13975},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 427, col: 1, offset: 14060},
			expr: &actionExpr{
				pos: position{line: 427, col: 20, offset: 14079},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 427, col: 20, offset: 14079},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 427, col: 32, offset: 14091},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 431, col: 1, offset: 14186},
			expr: &actionExpr{
				pos: position{line: 431, col: 26, offset: 14211},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 431, col: 26, offset: 14211},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 431, col: 26, offset: 14211},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 431, col: 31, offset: 14216},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 431, col: 43, offset: 14228},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 431, col: 51, offset: 14236},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 435, col: 1, offset: 14328},
			expr: &actionExpr{
				pos: position{line: 435, col: 23, offset: 14350},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 435, col: 23, offset: 14350},
					expr: &charClassMatcher{
						pos:        position{line: 435, col: 23, offset: 14350},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 439, col: 1, offset: 14395},
			expr: &actionExpr{
				pos: position{line: 439, col: 23, offset: 14417},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 439, col: 23, offset: 14417},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 439, col: 24, offset: 14418},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 439, col: 24, offset: 14418},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 439, col: 34, offset: 14428},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 439, col: 42, offset: 14436},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 48, offset: 14442},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 439, col: 73, offset: 14467},
							expr: &litMatcher{
								pos:        position{line: 439, col: 73, offset: 14467},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 443, col: 1, offset: 14616},
			expr: &actionExpr{
				pos: position{line: 443, col: 28, offset: 14643},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 443, col: 28, offset: 14643},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 443, col: 28, offset: 14643},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 443, col: 35, offset: 14650},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 443, col: 54, offset: 14669},
							expr: &ruleRefExpr{
								pos:  position{line: 443, col: 54, offset: 14669},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 443, col: 62, offset: 14677},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 443, col: 62, offset: 14677},
									expr: &litMatcher{
										pos:        position{line: 443, col: 63, offset: 14678},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 443, col: 69, offset: 14684},
									expr: &litMatcher{
										pos:        position{line: 443, col: 70, offset: 14685},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 447, col: 1, offset: 14717},
			expr: &actionExpr{
				pos: position{line: 447, col: 22, offset: 14738},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 447, col: 22, offset: 14738},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 447, col: 22, offset: 14738},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 447, col: 29, offset: 14745},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 448, col: 5, offset: 14759},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 448, col: 12, offset: 14766},
								expr: &actionExpr{
									pos: position{line: 448, col: 13, offset: 14767},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 448, col: 13, offset: 14767},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 448, col: 13, offset: 14767},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 448, col: 17, offset: 14771},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 448, col: 24, offset: 14778},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 454, col: 1, offset: 14909},
			expr: &choiceExpr{
				pos: position{line: 454, col: 13, offset: 14921},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 454, col: 13, offset: 14921},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 454, col: 13, offset: 14921},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 454, col: 18, offset: 14926},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 454, col: 18, offset: 14926},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 454, col: 30, offset: 14938},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 456, col: 5, offset: 15006},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 456, col: 5, offset: 15006},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 456, col: 5, offset: 15006},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 456, col: 9, offset: 15010},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 456, col: 14, offset: 15015},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 456, col: 14, offset: 15015},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 456, col: 26, offset: 15027},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 460, col: 1, offset: 15095},
			expr: &actionExpr{
				pos: position{line: 460, col: 16, offset: 15110},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 460, col: 16, offset: 15110},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 460, col: 16, offset: 15110},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 460, col: 23, offset: 15117},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 460, col: 23, offset: 15117},
									expr: &litMatcher{
										pos:        position{line: 460, col: 24, offset: 15118},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 463, col: 5, offset: 15172},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileContent",
			pos:  position{line: 471, col: 1, offset: 15414},
			expr: &zeroOrMoreExpr{
				pos: position{line: 471, col: 24, offset: 15437},
				expr: &choiceExpr{
					pos: position{line: 471, col: 25, offset: 15438},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 471, col: 25, offset: 15438},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 471, col: 41, offset: 15454},
							name: "VerbatimFileLine",
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 473, col: 1, offset: 15474},
			expr: &actionExpr{
				pos: position{line: 473, col: 21, offset: 15494},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 473, col: 21, offset: 15494},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 473, col: 21, offset: 15494},
							expr: &ruleRefExpr{
								pos:  position{line: 473, col: 22, offset: 15495},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 473, col: 26, offset: 15499},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 473, col: 35, offset: 15508},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 473, col: 35, offset: 15508},
									expr: &charClassMatcher{
										pos:        position{line: 473, col: 35, offset: 15508},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 475, col: 12, offset: 15570},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 482, col: 1, offset: 15769},
			expr: &actionExpr{
				pos: position{line: 482, col: 21, offset: 15789},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 482, col: 21, offset: 15789},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 482, col: 21, offset: 15789},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 482, col: 29, offset: 15797},
								expr: &choiceExpr{
									pos: position{line: 482, col: 30, offset: 15798},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 482, col: 30, offset: 15798},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 482, col: 53, offset: 15821},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 482, col: 74, offset: 15842},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 482, col: 74, offset: 15842,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 482, col: 107, offset: 15875},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 486, col: 1, offset: 15946},
			expr: &actionExpr{
				pos: position{line: 486, col: 25, offset: 15970},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 486, col: 25, offset: 15970},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 486, col: 25, offset: 15970},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 486, col: 33, offset: 15978},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 486, col: 38, offset: 15983},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 486, col: 38, offset: 15983},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 486, col: 78, offset: 16023},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 490, col: 1, offset: 16088},
			expr: &actionExpr{
				pos: position{line: 490, col: 23, offset: 16110},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 490, col: 23, offset: 16110},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 490, col: 23, offset: 16110},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 490, col: 31, offset: 16118},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 490, col: 36, offset: 16123},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 490, col: 36, offset: 16123},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 490, col: 76, offset: 16163},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 497, col: 1, offset: 16327},
			expr: &choiceExpr{
				pos: position{line: 497, col: 18, offset: 16344},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 497, col: 18, offset: 16344},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 497, col: 18, offset: 16344},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 497, col: 27, offset: 16353},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 499, col: 9, offset: 16410},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 499, col: 9, offset: 16410},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 499, col: 15, offset: 16416},
								expr: &ruleRefExpr{
									pos:  position{line: 499, col: 16, offset: 16417},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 503, col: 1, offset: 16509},
			expr: &actionExpr{
				pos: position{line: 503, col: 22, offset: 16530},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 503, col: 22, offset: 16530},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 503, col: 22, offset: 16530},
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 23, offset: 16531},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 504, col: 5, offset: 16539},
							expr: &ruleRefExpr{
								pos:  position{line: 504, col: 6, offset: 16540},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 505, col: 5, offset: 16555},
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 6, offset: 16556},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 506, col: 5, offset: 16578},
							expr: &ruleRefExpr{
								pos:  position{line: 506, col: 6, offset: 16579},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 507, col: 5, offset: 16605},
							expr: &ruleRefExpr{
								pos:  position{line: 507, col: 6, offset: 16606},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 508, col: 5, offset: 16634},
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 6, offset: 16635},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 509, col: 5, offset: 16661},
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 6, offset: 16662},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 510, col: 5, offset: 16687},
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 6, offset: 16688},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 511, col: 5, offset: 16709},
							expr: &ruleRefExpr{
								pos:  position{line: 511, col: 6, offset: 16710},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 512, col: 5, offset: 16729},
							expr: &ruleRefExpr{
								pos:  position{line: 512, col: 6, offset: 16730},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 513, col: 5, offset: 16757},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 513, col: 11, offset: 16763},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 513, col: 11, offset: 16763},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 513, col: 20, offset: 16772},
										expr: &ruleRefExpr{
											pos:  position{line: 513, col: 21, offset: 16773},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 515, col: 12, offset: 16872},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 519, col: 1, offset: 16911},
			expr: &seqExpr{
				pos: position{line: 519, col: 25, offset: 16935},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 519, col: 25, offset: 16935},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 519, col: 29, offset: 16939},
						expr: &ruleRefExpr{
							pos:  position{line: 519, col: 29, offset: 16939},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 519, col: 36, offset: 16946},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 521, col: 1, offset: 17018},
			expr: &actionExpr{
				pos: position{line: 521, col: 29, offset: 17046},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 521, col: 29, offset: 17046},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 521, col: 29, offset: 17046},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 521, col: 50, offset: 17067},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 521, col: 58, offset: 17075},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 525, col: 1, offset: 17181},
			expr: &actionExpr{
				pos: position{line: 525, col: 29, offset: 17209},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 525, col: 29, offset: 17209},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 525, col: 29, offset: 17209},
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 30, offset: 17210},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 526, col: 5, offset: 17219},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 526, col: 14, offset: 17228},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 526, col: 14, offset: 17228},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 527, col: 11, offset: 17253},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 528, col: 11, offset: 17277},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 529, col: 11, offset: 17331},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 530, col: 11, offset: 17353},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 531, col: 11, offset: 17380},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 532, col: 11, offset: 17409},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 534, col: 11, offset: 17474},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 535, col: 11, offset: 17525},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 536, col: 11, offset: 17549},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 537, col: 11, offset: 17581},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 538, col: 11, offset: 17607},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 539, col: 11, offset: 17644},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 540, col: 11, offset: 17669},
										name: "ContinuedParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 547, col: 1, offset: 17832},
			expr: &actionExpr{
				pos: position{line: 547, col: 20, offset: 17851},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 547, col: 20, offset: 17851},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 547, col: 20, offset: 17851},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 547, col: 31, offset: 17862},
								expr: &ruleRefExpr{
									pos:  position{line: 547, col: 32, offset: 17863},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 547, col: 45, offset: 17876},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 547, col: 53, offset: 17884},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 547, col: 76, offset: 17907},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 547, col: 85, offset: 17916},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 551, col: 1, offset: 18056},
			expr: &actionExpr{
				pos: position{line: 552, col: 5, offset: 18086},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 552, col: 5, offset: 18086},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 552, col: 5, offset: 18086},
							expr: &ruleRefExpr{
								pos:  position{line: 552, col: 5, offset: 18086},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 552, col: 12, offset: 18093},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 554, col: 9, offset: 18156},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 554, col: 9, offset: 18156},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 554, col: 9, offset: 18156},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 554, col: 9, offset: 18156},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 554, col: 16, offset: 18163},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 554, col: 16, offset: 18163},
															expr: &litMatcher{
																pos:        position{line: 554, col: 17, offset: 18164},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 558, col: 9, offset: 18264},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 577, col: 11, offset: 18981},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 577, col: 11, offset: 18981},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 577, col: 11, offset: 18981},
													expr: &charClassMatcher{
														pos:        position{line: 577, col: 12, offset: 18982},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 577, col: 20, offset: 18990},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 579, col: 13, offset: 19101},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 579, col: 13, offset: 19101},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 579, col: 14, offset: 19102},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 579, col: 21, offset: 19109},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 581, col: 13, offset: 19223},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 581, col: 13, offset: 19223},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 581, col: 14, offset: 19224},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 581, col: 21, offset: 19231},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 583, col: 13, offset: 19345},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 583, col: 13, offset: 19345},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 583, col: 13, offset: 19345},
													expr: &charClassMatcher{
														pos:        position{line: 583, col: 14, offset: 19346},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 583, col: 22, offset: 19354},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 585, col: 13, offset: 19468},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 585, col: 13, offset: 19468},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 585, col: 13, offset: 19468},
													expr: &charClassMatcher{
														pos:        position{line: 585, col: 14, offset: 19469},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 585, col: 22, offset: 19477},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 587, col: 12, offset: 19590},
							expr: &ruleRefExpr{
								pos:  position{line: 587, col: 12, offset: 19590},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 591, col: 1, offset: 19625},
			expr: &actionExpr{
				pos: position{line: 591, col: 27, offset: 19651},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 591, col: 27, offset: 19651},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 591, col: 37, offset: 19661},
						expr: &ruleRefExpr{
							pos:  position{line: 591, col: 37, offset: 19661},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 598, col: 1, offset: 19861},
			expr: &actionExpr{
				pos: position{line: 598, col: 22, offset: 19882},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 598, col: 22, offset: 19882},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 598, col: 22, offset: 19882},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 598, col: 33, offset: 19893},
								expr: &ruleRefExpr{
									pos:  position{line: 598, col: 34, offset: 19894},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 47, offset: 19907},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 55, offset: 19915},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 80, offset: 19940},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 598, col: 91, offset: 19951},
								expr: &ruleRefExpr{
									pos:  position{line: 598, col: 92, offset: 19952},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 122, offset: 19982},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 131, offset: 19991},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 602, col: 1, offset: 20149},
			expr: &actionExpr{
				pos: position{line: 603, col: 5, offset: 20181},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 603, col: 5, offset: 20181},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 603, col: 5, offset: 20181},
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 5, offset: 20181},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 12, offset: 20188},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 603, col: 20, offset: 20196},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 605, col: 9, offset: 20253},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 605, col: 9, offset: 20253},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 605, col: 9, offset: 20253},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 605, col: 16, offset: 20260},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 605, col: 16, offset: 20260},
															expr: &litMatcher{
																pos:        position{line: 605, col: 17, offset: 20261},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 609, col: 9, offset: 20361},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 626, col: 14, offset: 21068},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 626, col: 21, offset: 21075},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 626, col: 22, offset: 21076},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 628, col: 13, offset: 21162},
							expr: &ruleRefExpr{
								pos:  position{line: 628, col: 13, offset: 21162},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 632, col: 1, offset: 21198},
			expr: &actionExpr{
				pos: position{line: 632, col: 32, offset: 21229},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 632, col: 32, offset: 21229},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 632, col: 32, offset: 21229},
							expr: &litMatcher{
								pos:        position{line: 632, col: 33, offset: 21230},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 632, col: 37, offset: 21234},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 633, col: 7, offset: 21248},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 633, col: 7, offset: 21248},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 633, col: 7, offset: 21248},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 634, col: 7, offset: 21293},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 634, col: 7, offset: 21293},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 635, col: 7, offset: 21336},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 635, col: 7, offset: 21336},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 636, col: 7, offset: 21378},
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 7, offset: 21378},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 640, col: 1, offset: 21420},
			expr: &actionExpr{
				pos: position{line: 640, col: 29, offset: 21448},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 640, col: 29, offset: 21448},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 640, col: 39, offset: 21458},
						expr: &ruleRefExpr{
							pos:  position{line: 640, col: 39, offset: 21458},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 647, col: 1, offset: 21774},
			expr: &actionExpr{
				pos: position{line: 647, col: 20, offset: 21793},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 647, col: 20, offset: 21793},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 647, col: 20, offset: 21793},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 647, col: 31, offset: 21804},
								expr: &ruleRefExpr{
									pos:  position{line: 647, col: 32, offset: 21805},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 647, col: 45, offset: 21818},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 51, offset: 21824},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 647, col: 80, offset: 21853},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 91, offset: 21864},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 647, col: 117, offset: 21890},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 647, col: 129, offset: 21902},
								expr: &ruleRefExpr{
									pos:  position{line: 647, col: 130, offset: 21903},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 651, col: 1, offset: 22049},
			expr: &seqExpr{
				pos: position{line: 651, col: 26, offset: 22074},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 651, col: 26, offset: 22074},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 651, col: 54, offset: 22102},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 653, col: 1, offset: 22128},
			expr: &actionExpr{
				pos: position{line: 653, col: 32, offset: 22159},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 653, col: 32, offset: 22159},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 653, col: 41, offset: 22168},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 653, col: 41, offset: 22168},
							expr: &charClassMatcher{
								pos:        position{line: 653, col: 41, offset: 22168},
								val:        "[^:\\r\\n]",
								chars:      []rune{':', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 659, col: 1, offset: 22302},
			expr: &actionExpr{
				pos: position{line: 659, col: 24, offset: 22325},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 659, col: 24, offset: 22325},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 659, col: 33, offset: 22334},
						expr: &seqExpr{
							pos: position{line: 659, col: 34, offset: 22335},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 659, col: 34, offset: 22335},
									expr: &ruleRefExpr{
										pos:  position{line: 659, col: 35, offset: 22336},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 659, col: 43, offset: 22344},
									expr: &litMatcher{
										pos:        position{line: 659, col: 44, offset: 22345},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 659, col: 49, offset: 22350},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 663, col: 1, offset: 22477},
			expr: &actionExpr{
				pos: position{line: 663, col: 31, offset: 22507},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 663, col: 31, offset: 22507},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 663, col: 40, offset: 22516},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 663, col: 40, offset: 22516},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 664, col: 11, offset: 22531},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 665, col: 11, offset: 22580},
								expr: &ruleRefExpr{
									pos:  position{line: 665, col: 11, offset: 22580},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 666, col: 11, offset: 22598},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 667, col: 11, offset: 22623},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 668, col: 11, offset: 22652},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 669, col: 11, offset: 22672},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 670, col: 11, offset: 22700},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 671, col: 11, offset: 22723},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 672, col: 11, offset: 22738},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 11, offset: 22763},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 674, col: 11, offset: 22784},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 675, col: 11, offset: 22816},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 679, col: 1, offset: 22855},
			expr: &actionExpr{
				pos: position{line: 680, col: 5, offset: 22888},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 680, col: 5, offset: 22888},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 680, col: 5, offset: 22888},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 680, col: 16, offset: 22899},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 680, col: 16, offset: 22899},
									expr: &litMatcher{
										pos:        position{line: 680, col: 17, offset: 22900},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 683, col: 5, offset: 22958},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 687, col: 6, offset: 23134},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 687, col: 6, offset: 23134},
									expr: &choiceExpr{
										pos: position{line: 687, col: 7, offset: 23135},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 687, col: 7, offset: 23135},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 687, col: 15, offset: 23143},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 687, col: 27, offset: 23155},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 691, col: 1, offset: 23195},
			expr: &actionExpr{
				pos: position{line: 691, col: 31, offset: 23225},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 691, col: 31, offset: 23225},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 691, col: 40, offset: 23234},
						expr: &ruleRefExpr{
							pos:  position{line: 691, col: 41, offset: 23235},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 698, col: 1, offset: 23426},
			expr: &choiceExpr{
				pos: position{line: 698, col: 19, offset: 23444},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 698, col: 19, offset: 23444},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 698, col: 19, offset: 23444},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 700, col: 9, offset: 23490},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 700, col: 9, offset: 23490},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 702, col: 9, offset: 23538},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 702, col: 9, offset: 23538},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 704, col: 9, offset: 23596},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 704, col: 9, offset: 23596},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 706, col: 9, offset: 23650},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 706, col: 9, offset: 23650},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 715, col: 1, offset: 23957},
			expr: &choiceExpr{
				pos: position{line: 717, col: 5, offset: 24004},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 717, col: 5, offset: 24004},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 717, col: 5, offset: 24004},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 717, col: 5, offset: 24004},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 717, col: 16, offset: 24015},
										expr: &ruleRefExpr{
											pos:  position{line: 717, col: 17, offset: 24016},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 717, col: 30, offset: 24029},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 717, col: 33, offset: 24032},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 717, col: 49, offset: 24048},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 717, col: 54, offset: 24053},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 717, col: 60, offset: 24059},
										expr: &ruleRefExpr{
											pos:  position{line: 717, col: 61, offset: 24060},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 721, col: 5, offset: 24241},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 721, col: 5, offset: 24241},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 721, col: 5, offset: 24241},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 721, col: 16, offset: 24252},
										expr: &ruleRefExpr{
											pos:  position{line: 721, col: 17, offset: 24253},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 721, col: 30, offset: 24266},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 721, col: 35, offset: 24271},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 721, col: 44, offset: 24280},
										name: "MarkdownQuoteBlockVerbatimContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 725, col: 5, offset: 24475},
						run: (*parser).callonParagraph21,
						expr: &seqExpr{
							pos: position{line: 725, col: 5, offset: 24475},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 725, col: 5, offset: 24475},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 725, col: 16, offset: 24486},
										expr: &ruleRefExpr{
											pos:  position{line: 725, col: 17, offset: 24487},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 725, col: 30, offset: 24500},
									run: (*parser).callonParagraph26,
								},
								&notExpr{
									pos: position{line: 732, col: 7, offset: 24779},
									expr: &ruleRefExpr{
										pos:  position{line: 732, col: 8, offset: 24780},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 732, col: 23, offset: 24795},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 732, col: 32, offset: 24804},
										name: "OpenPassthroughParagraphContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 736, col: 5, offset: 25001},
						run: (*parser).callonParagraph31,
						expr: &seqExpr{
							pos: position{line: 736, col: 5, offset: 25001},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 736, col: 5, offset: 25001},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 736, col: 16, offset: 25012},
										expr: &ruleRefExpr{
											pos:  position{line: 736, col: 17, offset: 25013},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 736, col: 30, offset: 25026},
									expr: &ruleRefExpr{
										pos:  position{line: 736, col: 31, offset: 25027},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 736, col: 46, offset: 25042},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 736, col: 52, offset: 25048},
										expr: &ruleRefExpr{
											pos:  position{line: 736, col: 53, offset: 25049},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockVerbatimContent",
			pos:  position{line: 740, col: 1, offset: 25145},
			expr: &oneOrMoreExpr{
				pos: position{line: 740, col: 38, offset: 25182},
				expr: &actionExpr{
					pos: position{line: 740, col: 39, offset: 25183},
					run: (*parser).callonMarkdownQuoteBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 740, col: 39, offset: 25183},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 740, col: 39, offset: 25183},
								expr: &ruleRefExpr{
									pos:  position{line: 740, col: 40, offset: 25184},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 740, col: 50, offset: 25194},
								expr: &litMatcher{
									pos:        position{line: 740, col: 50, offset: 25194},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 740, col: 56, offset: 25200},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 740, col: 65, offset: 25209},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 744, col: 1, offset: 25350},
			expr: &actionExpr{
				pos: position{line: 744, col: 34, offset: 25383},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 744, col: 34, offset: 25383},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 744, col: 34, offset: 25383},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 744, col: 40, offset: 25389},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 744, col: 48, offset: 25397},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 744, col: 49, offset: 25398},
									expr: &charClassMatcher{
										pos:        position{line: 744, col: 49, offset: 25398},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 746, col: 8, offset: 25448},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 750, col: 1, offset: 25480},
			expr: &oneOrMoreExpr{
				pos: position{line: 750, col: 36, offset: 25515},
				expr: &actionExpr{
					pos: position{line: 750, col: 37, offset: 25516},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 750, col: 37, offset: 25516},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 750, col: 37, offset: 25516},
								expr: &ruleRefExpr{
									pos:  position{line: 750, col: 38, offset: 25517},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 750, col: 48, offset: 25527},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 750, col: 57, offset: 25536},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 755, col: 1, offset: 25749},
			expr: &actionExpr{
				pos: position{line: 755, col: 20, offset: 25768},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 755, col: 20, offset: 25768},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 755, col: 20, offset: 25768},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 755, col: 31, offset: 25779},
								expr: &ruleRefExpr{
									pos:  position{line: 755, col: 32, offset: 25780},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 756, col: 5, offset: 25798},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 764, col: 5, offset: 26084},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 764, col: 16, offset: 26095},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 765, col: 5, offset: 26118},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 765, col: 16, offset: 26129},
								expr: &ruleRefExpr{
									pos:  position{line: 765, col: 17, offset: 26130},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 769, col: 1, offset: 26264},
			expr: &actionExpr{
				pos: position{line: 770, col: 5, offset: 26291},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 770, col: 5, offset: 26291},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 770, col: 5, offset: 26291},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 770, col: 15, offset: 26301},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 770, col: 15, offset: 26301},
										name: "Word",
									},
									&zeroOrMoreExpr{
										pos: position{line: 770, col: 20, offset: 26306},
										expr: &ruleRefExpr{
											pos:  position{line: 770, col: 20, offset: 26306},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 770, col: 36, offset: 26322},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 774, col: 1, offset: 26393},
			expr: &actionExpr{
				pos: position{line: 774, col: 23, offset: 26415},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 774, col: 23, offset: 26415},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 774, col: 33, offset: 26425},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "ContinuedParagraph",
			pos:  position{line: 779, col: 1, offset: 26545},
			expr: &choiceExpr{
				pos: position{line: 781, col: 5, offset: 26601},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 781, col: 5, offset: 26601},
						run: (*parser).callonContinuedParagraph2,
						expr: &seqExpr{
							pos: position{line: 781, col: 5, offset: 26601},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 781, col: 5, offset: 26601},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 781, col: 16, offset: 26612},
										expr: &ruleRefExpr{
											pos:  position{line: 781, col: 17, offset: 26613},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 781, col: 30, offset: 26626},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 781, col: 33, offset: 26629},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 781, col: 49, offset: 26645},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 781, col: 54, offset: 26650},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 781, col: 61, offset: 26657},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 785, col: 5, offset: 26857},
						run: (*parser).callonContinuedParagraph12,
						expr: &seqExpr{
							pos: position{line: 785, col: 5, offset: 26857},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 785, col: 5, offset: 26857},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 785, col: 16, offset: 26868},
										expr: &ruleRefExpr{
											pos:  position{line: 785, col: 17, offset: 26869},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 785, col: 30, offset: 26882},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 785, col: 37, offset: 26889},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraphLines",
			pos:  position{line: 789, col: 1, offset: 26990},
			expr: &actionExpr{
				pos: position{line: 789, col: 28, offset: 27017},
				run: (*parser).callonContinuedParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 789, col: 28, offset: 27017},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 789, col: 28, offset: 27017},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 789, col: 39, offset: 27028},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 789, col: 59, offset: 27048},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 789, col: 70, offset: 27059},
								expr: &seqExpr{
									pos: position{line: 789, col: 71, offset: 27060},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 789, col: 71, offset: 27060},
											expr: &ruleRefExpr{
												pos:  position{line: 789, col: 72, offset: 27061},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 789, col: 93, offset: 27082},
											name: "OtherParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 793, col: 1, offset: 27188},
			expr: &choiceExpr{
				pos: position{line: 795, col: 5, offset: 27240},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 795, col: 5, offset: 27240},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 795, col: 5, offset: 27240},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 795, col: 5, offset: 27240},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 795, col: 16, offset: 27251},
										expr: &ruleRefExpr{
											pos:  position{line: 795, col: 17, offset: 27252},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 796, col: 5, offset: 27269},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 803, col: 5, offset: 27474},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 803, col: 8, offset: 27477},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 803, col: 24, offset: 27493},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 803, col: 29, offset: 27498},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 803, col: 35, offset: 27504},
										expr: &ruleRefExpr{
											pos:  position{line: 803, col: 36, offset: 27505},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 807, col: 5, offset: 27697},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 807, col: 5, offset: 27697},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 807, col: 5, offset: 27697},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 807, col: 16, offset: 27708},
										expr: &ruleRefExpr{
											pos:  position{line: 807, col: 17, offset: 27709},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 808, col: 5, offset: 27726},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 815, col: 5, offset: 27931},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 815, col: 11, offset: 27937},
										expr: &ruleRefExpr{
											pos:  position{line: 815, col: 12, offset: 27938},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 819, col: 1, offset: 28039},
			expr: &actionExpr{
				pos: position{line: 819, col: 19, offset: 28057},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 819, col: 19, offset: 28057},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 819, col: 19, offset: 28057},
							expr: &ruleRefExpr{
								pos:  position{line: 819, col: 20, offset: 28058},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 820, col: 5, offset: 28072},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 820, col: 15, offset: 28082},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 820, col: 15, offset: 28082},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 820, col: 15, offset: 28082},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 820, col: 24, offset: 28091},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 822, col: 9, offset: 28183},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 822, col: 9, offset: 28183},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 822, col: 9, offset: 28183},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 822, col: 18, offset: 28192},
														expr: &ruleRefExpr{
															pos:  position{line: 822, col: 19, offset: 28193},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 822, col: 35, offset: 28209},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 828, col: 1, offset: 28326},
			expr: &actionExpr{
				pos: position{line: 829, col: 5, offset: 28349},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 829, col: 5, offset: 28349},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 829, col: 14, offset: 28358},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 829, col: 14, offset: 28358},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 830, col: 11, offset: 28409},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 831, col: 11, offset: 28454},
								expr: &ruleRefExpr{
									pos:  position{line: 831, col: 11, offset: 28454},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 832, col: 11, offset: 28472},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 832, col: 11, offset: 28472},
										expr: &ruleRefExpr{
											pos:  position{line: 832, col: 12, offset: 28473},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 833, col: 13, offset: 28492},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 833, col: 13, offset: 28492},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 834, col: 15, offset: 28518},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 835, col: 15, offset: 28545},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 836, col: 15, offset: 28565},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 837, col: 15, offset: 28598},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 838, col: 15, offset: 28628},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 839, col: 15, offset: 28658},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 840, col: 15, offset: 28689},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 841, col: 15, offset: 28726},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 842, col: 15, offset: 28757},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 843, col: 15, offset: 28790},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 844, col: 15, offset: 28814},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 851, col: 1, offset: 29037},
			expr: &actionExpr{
				pos: position{line: 851, col: 14, offset: 29050},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 851, col: 14, offset: 29050},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 851, col: 14, offset: 29050},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 851, col: 20, offset: 29056},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 851, col: 24, offset: 29060},
							expr: &ruleRefExpr{
								pos:  position{line: 851, col: 24, offset: 29060},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 851, col: 31, offset: 29067},
							expr: &ruleRefExpr{
								pos:  position{line: 851, col: 32, offset: 29068},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 858, col: 1, offset: 29352},
			expr: &choiceExpr{
				pos: position{line: 858, col: 15, offset: 29366},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 858, col: 15, offset: 29366},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 858, col: 41, offset: 29392},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 858, col: 65, offset: 29416},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 860, col: 1, offset: 29435},
			expr: &choiceExpr{
				pos: position{line: 860, col: 32, offset: 29466},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 860, col: 32, offset: 29466},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 860, col: 32, offset: 29466},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 860, col: 36, offset: 29470},
								expr: &litMatcher{
									pos:        position{line: 860, col: 37, offset: 29471},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 860, col: 43, offset: 29477},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 860, col: 43, offset: 29477},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 860, col: 47, offset: 29481},
								expr: &litMatcher{
									pos:        position{line: 860, col: 48, offset: 29482},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 860, col: 54, offset: 29488},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 860, col: 54, offset: 29488},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 860, col: 58, offset: 29492},
								expr: &litMatcher{
									pos:        position{line: 860, col: 59, offset: 29493},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 862, col: 1, offset: 29499},
			expr: &choiceExpr{
				pos: position{line: 862, col: 34, offset: 29532},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 862, col: 34, offset: 29532},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 862, col: 41, offset: 29539},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 862, col: 48, offset: 29546},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 862, col: 55, offset: 29553},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 862, col: 61, offset: 29559},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 864, col: 1, offset: 29564},
			expr: &actionExpr{
				pos: position{line: 864, col: 26, offset: 29589},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 864, col: 26, offset: 29589},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 864, col: 32, offset: 29595},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 864, col: 32, offset: 29595},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 865, col: 15, offset: 29630},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 866, col: 15, offset: 29667},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 867, col: 15, offset: 29707},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 868, col: 15, offset: 29736},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 869, col: 15, offset: 29767},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 873, col: 1, offset: 29921},
			expr: &choiceExpr{
				pos: position{line: 873, col: 28, offset: 29948},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 873, col: 28, offset: 29948},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 874, col: 15, offset: 29982},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 875, col: 15, offset: 30018},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 877, col: 1, offset: 30044},
			expr: &choiceExpr{
				pos: position{line: 877, col: 22, offset: 30065},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 877, col: 22, offset: 30065},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 878, col: 15, offset: 30096},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 879, col: 15, offset: 30129},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 880, col: 15, offset: 30165},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 881, col: 15, offset: 30201},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 883, col: 1, offset: 30225},
			expr: &choiceExpr{
				pos: position{line: 883, col: 33, offset: 30257},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 883, col: 33, offset: 30257},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 883, col: 39, offset: 30263},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 883, col: 39, offset: 30263},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 887, col: 1, offset: 30396},
			expr: &actionExpr{
				pos: position{line: 887, col: 25, offset: 30420},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 887, col: 25, offset: 30420},
					expr: &litMatcher{
						pos:        position{line: 887, col: 25, offset: 30420},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 891, col: 1, offset: 30461},
			expr: &actionExpr{
				pos: position{line: 891, col: 25, offset: 30485},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 891, col: 25, offset: 30485},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 891, col: 25, offset: 30485},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 891, col: 30, offset: 30490},
							expr: &litMatcher{
								pos:        position{line: 891, col: 30, offset: 30490},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 899, col: 1, offset: 30587},
			expr: &choiceExpr{
				pos: position{line: 899, col: 13, offset: 30599},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 899, col: 13, offset: 30599},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 899, col: 35, offset: 30621},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 901, col: 1, offset: 30688},
			expr: &actionExpr{
				pos: position{line: 901, col: 24, offset: 30711},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 901, col: 24, offset: 30711},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 901, col: 24, offset: 30711},
							expr: &litMatcher{
								pos:        position{line: 901, col: 25, offset: 30712},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 901, col: 30, offset: 30717},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 901, col: 35, offset: 30722},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 45, offset: 30732},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 901, col: 74, offset: 30761},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 905, col: 1, offset: 30842},
			expr: &seqExpr{
				pos: position{line: 905, col: 32, offset: 30873},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 905, col: 32, offset: 30873},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 905, col: 59, offset: 30900},
						expr: &seqExpr{
							pos: position{line: 905, col: 60, offset: 30901},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 905, col: 60, offset: 30901},
									expr: &litMatcher{
										pos:        position{line: 905, col: 62, offset: 30903},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 905, col: 69, offset: 30910},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 905, col: 69, offset: 30910},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 905, col: 77, offset: 30918},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 907, col: 1, offset: 30983},
			expr: &choiceExpr{
				pos: position{line: 907, col: 31, offset: 31013},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 907, col: 31, offset: 31013},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 908, col: 11, offset: 31029},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 909, col: 11, offset: 31060},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 910, col: 11, offset: 31082},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 911, col: 11, offset: 31106},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 912, col: 11, offset: 31130},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 913, col: 11, offset: 31156},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 914, col: 11, offset: 31179},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 915, col: 11, offset: 31195},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 916, col: 11, offset: 31224},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 917, col: 11, offset: 31256},
						name: "DoubleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 918, col: 11, offset: 31299},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextStringElement",
			pos:  position{line: 921, col: 1, offset: 31338},
			expr: &actionExpr{
				pos: position{line: 921, col: 37, offset: 31374},
				run: (*parser).callonDoubleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 921, col: 37, offset: 31374},
					expr: &seqExpr{
						pos: position{line: 921, col: 38, offset: 31375},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 921, col: 38, offset: 31375},
								expr: &litMatcher{
									pos:        position{line: 921, col: 39, offset: 31376},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 921, col: 44, offset: 31381},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 925, col: 1, offset: 31452},
			expr: &choiceExpr{
				pos: position{line: 926, col: 5, offset: 31497},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 926, col: 5, offset: 31497},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 927, col: 7, offset: 31594},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 927, col: 7, offset: 31594},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 927, col: 7, offset: 31594},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 927, col: 12, offset: 31599},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 931, col: 1, offset: 31762},
			expr: &choiceExpr{
				pos: position{line: 931, col: 24, offset: 31785},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 931, col: 24, offset: 31785},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 931, col: 24, offset: 31785},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 931, col: 25, offset: 31786},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 931, col: 25, offset: 31786},
											expr: &litMatcher{
												pos:        position{line: 931, col: 26, offset: 31787},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 931, col: 30, offset: 31791},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 931, col: 34, offset: 31795},
											expr: &litMatcher{
												pos:        position{line: 931, col: 35, offset: 31796},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 931, col: 40, offset: 31801},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 931, col: 50, offset: 31811},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 931, col: 79, offset: 31840},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 931, col: 83, offset: 31844},
									expr: &notExpr{
										pos: position{line: 931, col: 85, offset: 31846},
										expr: &ruleRefExpr{
											pos:  position{line: 931, col: 86, offset: 31847},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 933, col: 5, offset: 32034},
						run: (*parser).callonSingleQuoteBoldText16,
						expr: &seqExpr{
							pos: position{line: 933, col: 5, offset: 32034},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 933, col: 5, offset: 32034},
									expr: &litMatcher{
										pos:        position{line: 933, col: 6, offset: 32035},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 933, col: 11, offset: 32040},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 933, col: 15, offset: 32044},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 933, col: 25, offset: 32054},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 933, col: 25, offset: 32054},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 933, col: 29, offset: 32058},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 933, col: 58, offset: 32087},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 937, col: 1, offset: 32286},
			expr: &seqExpr{
				pos: position{line: 937, col: 32, offset: 32317},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 937, col: 32, offset: 32317},
						expr: &ruleRefExpr{
							pos:  position{line: 937, col: 33, offset: 32318},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 937, col: 39, offset: 32324},
						expr: &ruleRefExpr{
							pos:  position{line: 937, col: 39, offset: 32324},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 939, col: 1, offset: 32353},
			expr: &choiceExpr{
				pos: position{line: 939, col: 31, offset: 32383},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 939, col: 31, offset: 32383},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 940, col: 11, offset: 32399},
						name: "DoubleQuoteBoldText",
					},
					&seqExpr{
						pos: position{line: 941, col: 11, offset: 32429},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 941, col: 11, offset: 32429},
								expr: &ruleRefExpr{
									pos:  position{line: 941, col: 11, offset: 32429},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 941, col: 18, offset: 32436},
								expr: &seqExpr{
									pos: position{line: 941, col: 19, offset: 32437},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 941, col: 19, offset: 32437},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 941, col: 23, offset: 32441},
											expr: &litMatcher{
												pos:        position{line: 941, col: 24, offset: 32442},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 942, col: 11, offset: 32458},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 943, col: 11, offset: 32480},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 944, col: 11, offset: 32504},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 945, col: 11, offset: 32528},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 946, col: 11, offset: 32554},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 947, col: 11, offset: 32577},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 948, col: 11, offset: 32594},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 949, col: 11, offset: 32623},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 950, col: 11, offset: 32655},
						name: "SingleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 951, col: 11, offset: 32698},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextStringElement",
			pos:  position{line: 953, col: 1, offset: 32736},
			expr: &actionExpr{
				pos: position{line: 953, col: 37, offset: 32772},
				run: (*parser).callonSingleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 953, col: 37, offset: 32772},
					expr: &charClassMatcher{
						pos:        position{line: 953, col: 37, offset: 32772},
						val:        "[^\\r\\n{} *^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '*', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 957, col: 1, offset: 32998},
			expr: &choiceExpr{
				pos: position{line: 958, col: 5, offset: 33043},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 958, col: 5, offset: 33043},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 959, col: 7, offset: 33140},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 959, col: 7, offset: 33140},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 959, col: 7, offset: 33140},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 959, col: 11, offset: 33144},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 963, col: 1, offset: 33307},
			expr: &choiceExpr{
				pos: position{line: 964, col: 5, offset: 33331},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 964, col: 5, offset: 33331},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 964, col: 5, offset: 33331},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 964, col: 5, offset: 33331},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 964, col: 18, offset: 33344},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 964, col: 40, offset: 33366},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 964, col: 45, offset: 33371},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 964, col: 55, offset: 33381},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 964, col: 84, offset: 33410},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 966, col: 9, offset: 33567},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 966, col: 9, offset: 33567},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 966, col: 9, offset: 33567},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 966, col: 22, offset: 33580},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 966, col: 44, offset: 33602},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 966, col: 49, offset: 33607},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 966, col: 59, offset: 33617},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 966, col: 88, offset: 33646},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 969, col: 9, offset: 33846},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 969, col: 9, offset: 33846},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 969, col: 9, offset: 33846},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 969, col: 22, offset: 33859},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 969, col: 44, offset: 33881},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 969, col: 48, offset: 33885},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 969, col: 58, offset: 33895},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 969, col: 87, offset: 33924},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 977, col: 1, offset: 34132},
			expr: &choiceExpr{
				pos: position{line: 977, col: 15, offset: 34146},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 977, col: 15, offset: 34146},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 39, offset: 34170},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 979, col: 1, offset: 34193},
			expr: &actionExpr{
				pos: position{line: 979, col: 26, offset: 34218},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 979, col: 26, offset: 34218},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 979, col: 26, offset: 34218},
							expr: &litMatcher{
								pos:        position{line: 979, col: 27, offset: 34219},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 979, col: 32, offset: 34224},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 979, col: 37, offset: 34229},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 979, col: 47, offset: 34239},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 979, col: 78, offset: 34270},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 983, col: 1, offset: 34397},
			expr: &seqExpr{
				pos: position{line: 983, col: 34, offset: 34430},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 983, col: 34, offset: 34430},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 983, col: 63, offset: 34459},
						expr: &seqExpr{
							pos: position{line: 983, col: 64, offset: 34460},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 983, col: 64, offset: 34460},
									expr: &litMatcher{
										pos:        position{line: 983, col: 66, offset: 34462},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 983, col: 73, offset: 34469},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 983, col: 73, offset: 34469},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 983, col: 81, offset: 34477},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 985, col: 1, offset: 34544},
			expr: &choiceExpr{
				pos: position{line: 985, col: 33, offset: 34576},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 985, col: 33, offset: 34576},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 986, col: 11, offset: 34592},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 987, col: 11, offset: 34625},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 988, col: 11, offset: 34645},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 989, col: 11, offset: 34669},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 990, col: 11, offset: 34693},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 991, col: 11, offset: 34719},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 992, col: 11, offset: 34742},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 11, offset: 34758},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 994, col: 11, offset: 34787},
						name: "DoubleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 995, col: 11, offset: 34832},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextStringElement",
			pos:  position{line: 997, col: 1, offset: 34872},
			expr: &actionExpr{
				pos: position{line: 997, col: 39, offset: 34910},
				run: (*parser).callonDoubleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 997, col: 39, offset: 34910},
					expr: &seqExpr{
						pos: position{line: 997, col: 40, offset: 34911},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 997, col: 40, offset: 34911},
								expr: &litMatcher{
									pos:        position{line: 997, col: 41, offset: 34912},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 997, col: 46, offset: 34917},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1001, col: 1, offset: 34988},
			expr: &choiceExpr{
				pos: position{line: 1002, col: 5, offset: 35035},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1002, col: 5, offset: 35035},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1003, col: 7, offset: 35134},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1003, col: 7, offset: 35134},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1003, col: 7, offset: 35134},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1003, col: 12, offset: 35139},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1007, col: 1, offset: 35304},
			expr: &choiceExpr{
				pos: position{line: 1007, col: 26, offset: 35329},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1007, col: 26, offset: 35329},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1007, col: 26, offset: 35329},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1007, col: 27, offset: 35330},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1007, col: 27, offset: 35330},
											expr: &litMatcher{
												pos:        position{line: 1007, col: 28, offset: 35331},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 1007, col: 32, offset: 35335},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1007, col: 36, offset: 35339},
											expr: &litMatcher{
												pos:        position{line: 1007, col: 37, offset: 35340},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1007, col: 42, offset: 35345},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1007, col: 52, offset: 35355},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1007, col: 83, offset: 35386},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1009, col: 5, offset: 35569},
						run: (*parser).callonSingleQuoteItalicText13,
						expr: &seqExpr{
							pos: position{line: 1009, col: 5, offset: 35569},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1009, col: 5, offset: 35569},
									expr: &litMatcher{
										pos:        position{line: 1009, col: 6, offset: 35570},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 1009, col: 11, offset: 35575},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1009, col: 15, offset: 35579},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1009, col: 25, offset: 35589},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1009, col: 25, offset: 35589},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1009, col: 29, offset: 35593},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1009, col: 60, offset: 35624},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1013, col: 1, offset: 35827},
			expr: &seqExpr{
				pos: position{line: 1013, col: 34, offset: 35860},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1013, col: 34, offset: 35860},
						expr: &ruleRefExpr{
							pos:  position{line: 1013, col: 35, offset: 35861},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1013, col: 41, offset: 35867},
						expr: &ruleRefExpr{
							pos:  position{line: 1013, col: 41, offset: 35867},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1015, col: 1, offset: 35898},
			expr: &choiceExpr{
				pos: position{line: 1015, col: 33, offset: 35930},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1015, col: 33, offset: 35930},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1016, col: 11, offset: 35946},
						name: "DoubleQuoteItalicText",
					},
					&seqExpr{
						pos: position{line: 1017, col: 11, offset: 35978},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1017, col: 11, offset: 35978},
								expr: &ruleRefExpr{
									pos:  position{line: 1017, col: 11, offset: 35978},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1017, col: 18, offset: 35985},
								expr: &seqExpr{
									pos: position{line: 1017, col: 19, offset: 35986},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1017, col: 19, offset: 35986},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1017, col: 23, offset: 35990},
											expr: &litMatcher{
												pos:        position{line: 1017, col: 24, offset: 35991},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1018, col: 11, offset: 36007},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1019, col: 11, offset: 36027},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1020, col: 11, offset: 36051},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1021, col: 11, offset: 36075},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1022, col: 11, offset: 36101},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1023, col: 11, offset: 36124},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1024, col: 11, offset: 36141},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 11, offset: 36170},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1026, col: 11, offset: 36202},
						name: "SingleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1027, col: 11, offset: 36247},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextStringElement",
			pos:  position{line: 1029, col: 1, offset: 36287},
			expr: &actionExpr{
				pos: position{line: 1029, col: 39, offset: 36325},
				run: (*parser).callonSingleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1029, col: 39, offset: 36325},
					expr: &charClassMatcher{
						pos:        position{line: 1029, col: 39, offset: 36325},
						val:        "[^\\r\\n{} _^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '_', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1033, col: 1, offset: 36551},
			expr: &choiceExpr{
				pos: position{line: 1034, col: 5, offset: 36598},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1034, col: 5, offset: 36598},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1035, col: 7, offset: 36697},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1035, col: 7, offset: 36697},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1035, col: 7, offset: 36697},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1035, col: 11, offset: 36701},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1039, col: 1, offset: 36867},
			expr: &choiceExpr{
				pos: position{line: 1040, col: 5, offset: 36893},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1040, col: 5, offset: 36893},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1040, col: 5, offset: 36893},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1040, col: 5, offset: 36893},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1040, col: 18, offset: 36906},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1040, col: 40, offset: 36928},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1040, col: 45, offset: 36933},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1040, col: 55, offset: 36943},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1040, col: 86, offset: 36974},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1042, col: 9, offset: 37131},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1042, col: 9, offset: 37131},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1042, col: 9, offset: 37131},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1042, col: 22, offset: 37144},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1042, col: 44, offset: 37166},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1042, col: 49, offset: 37171},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1042, col: 59, offset: 37181},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1042, col: 90, offset: 37212},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1045, col: 9, offset: 37412},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1045, col: 9, offset: 37412},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1045, col: 9, offset: 37412},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1045, col: 22, offset: 37425},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1045, col: 44, offset: 37447},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1045, col: 48, offset: 37451},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1045, col: 58, offset: 37461},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1045, col: 89, offset: 37492},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1052, col: 1, offset: 37702},
			expr: &choiceExpr{
				pos: position{line: 1052, col: 18, offset: 37719},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1052, col: 18, offset: 37719},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1052, col: 45, offset: 37746},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1054, col: 1, offset: 37772},
			expr: &actionExpr{
				pos: position{line: 1054, col: 29, offset: 37800},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1054, col: 29, offset: 37800},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1054, col: 29, offset: 37800},
							expr: &litMatcher{
								pos:        position{line: 1054, col: 30, offset: 37801},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1054, col: 35, offset: 37806},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1054, col: 40, offset: 37811},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1054, col: 50, offset: 37821},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1054, col: 84, offset: 37855},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1058, col: 1, offset: 37985},
			expr: &seqExpr{
				pos: position{line: 1058, col: 37, offset: 38021},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1058, col: 37, offset: 38021},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1058, col: 69, offset: 38053},
						expr: &seqExpr{
							pos: position{line: 1058, col: 70, offset: 38054},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1058, col: 70, offset: 38054},
									expr: &litMatcher{
										pos:        position{line: 1058, col: 72, offset: 38056},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1058, col: 79, offset: 38063},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1058, col: 79, offset: 38063},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1058, col: 87, offset: 38071},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1060, col: 1, offset: 38140},
			expr: &choiceExpr{
				pos: position{line: 1060, col: 36, offset: 38175},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1060, col: 36, offset: 38175},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1061, col: 11, offset: 38191},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1062, col: 11, offset: 38227},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1063, col: 11, offset: 38246},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1064, col: 11, offset: 38268},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1065, col: 11, offset: 38292},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1066, col: 11, offset: 38318},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1067, col: 11, offset: 38341},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1068, col: 11, offset: 38357},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1069, col: 11, offset: 38386},
						name: "DoubleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1070, col: 11, offset: 38434},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextStringElement",
			pos:  position{line: 1072, col: 1, offset: 38477},
			expr: &actionExpr{
				pos: position{line: 1072, col: 42, offset: 38518},
				run: (*parser).callonDoubleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1072, col: 42, offset: 38518},
					expr: &seqExpr{
						pos: position{line: 1072, col: 43, offset: 38519},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1072, col: 43, offset: 38519},
								expr: &litMatcher{
									pos:        position{line: 1072, col: 44, offset: 38520},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1072, col: 49, offset: 38525},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1076, col: 1, offset: 38596},
			expr: &choiceExpr{
				pos: position{line: 1077, col: 5, offset: 38646},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1077, col: 5, offset: 38646},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1078, col: 7, offset: 38748},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1078, col: 7, offset: 38748},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1078, col: 7, offset: 38748},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1078, col: 12, offset: 38753},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1082, col: 1, offset: 38921},
			expr: &choiceExpr{
				pos: position{line: 1082, col: 29, offset: 38949},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1082, col: 29, offset: 38949},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1082, col: 29, offset: 38949},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1082, col: 30, offset: 38950},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1082, col: 30, offset: 38950},
											expr: &litMatcher{
												pos:        position{line: 1082, col: 31, offset: 38951},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 1082, col: 35, offset: 38955},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1082, col: 39, offset: 38959},
											expr: &litMatcher{
												pos:        position{line: 1082, col: 40, offset: 38960},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1082, col: 45, offset: 38965},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1082, col: 55, offset: 38975},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1082, col: 89, offset: 39009},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1084, col: 5, offset: 39195},
						run: (*parser).callonSingleQuoteMonospaceText13,
						expr: &seqExpr{
							pos: position{line: 1084, col: 5, offset: 39195},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1084, col: 5, offset: 39195},
									expr: &litMatcher{
										pos:        position{line: 1084, col: 6, offset: 39196},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 1084, col: 11, offset: 39201},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1084, col: 15, offset: 39205},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1084, col: 25, offset: 39215},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1084, col: 25, offset: 39215},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1084, col: 29, offset: 39219},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1084, col: 63, offset: 39253},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1088, col: 1, offset: 39462},
			expr: &seqExpr{
				pos: position{line: 1088, col: 37, offset: 39498},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1088, col: 37, offset: 39498},
						expr: &ruleRefExpr{
							pos:  position{line: 1088, col: 38, offset: 39499},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1088, col: 44, offset: 39505},
						expr: &ruleRefExpr{
							pos:  position{line: 1088, col: 44, offset: 39505},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1090, col: 1, offset: 39539},
			expr: &choiceExpr{
				pos: position{line: 1090, col: 37, offset: 39575},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1090, col: 37, offset: 39575},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1091, col: 11, offset: 39591},
						name: "DoubleQuoteMonospaceText",
					},
					&seqExpr{
						pos: position{line: 1092, col: 11, offset: 39627},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1092, col: 11, offset: 39627},
								expr: &ruleRefExpr{
									pos:  position{line: 1092, col: 11, offset: 39627},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1092, col: 18, offset: 39634},
								expr: &seqExpr{
									pos: position{line: 1092, col: 19, offset: 39635},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1092, col: 19, offset: 39635},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1092, col: 23, offset: 39639},
											expr: &litMatcher{
												pos:        position{line: 1092, col: 24, offset: 39640},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1093, col: 11, offset: 39768},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1094, col: 11, offset: 39806},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1095, col: 11, offset: 39825},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1096, col: 11, offset: 39846},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1097, col: 11, offset: 39870},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1098, col: 11, offset: 39896},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1099, col: 11, offset: 39919},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1100, col: 11, offset: 39935},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1101, col: 11, offset: 39964},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1102, col: 11, offset: 39996},
						name: "SingleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1103, col: 11, offset: 40044},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextStringElement",
			pos:  position{line: 1105, col: 1, offset: 40087},
			expr: &actionExpr{
				pos: position{line: 1105, col: 42, offset: 40128},
				run: (*parser).callonSingleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1105, col: 42, offset: 40128},
					expr: &charClassMatcher{
						pos:        position{line: 1105, col: 42, offset: 40128},
						val:        "[^\\r\\n {}`^~]",
						chars:      []rune{'\r', '\n', ' ', '{', '}', '`', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1109, col: 1, offset: 40346},
			expr: &choiceExpr{
				pos: position{line: 1110, col: 5, offset: 40396},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1110, col: 5, offset: 40396},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1111, col: 7, offset: 40498},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1111, col: 7, offset: 40498},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1111, col: 7, offset: 40498},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1111, col: 11, offset: 40502},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1115, col: 1, offset: 40671},
			expr: &choiceExpr{
				pos: position{line: 1116, col: 5, offset: 40700},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1116, col: 5, offset: 40700},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1116, col: 5, offset: 40700},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1116, col: 5, offset: 40700},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1116, col: 18, offset: 40713},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1116, col: 40, offset: 40735},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1116, col: 45, offset: 40740},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1116, col: 55, offset: 40750},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1116, col: 89, offset: 40784},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1118, col: 9, offset: 40941},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1118, col: 9, offset: 40941},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1118, col: 9, offset: 40941},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1118, col: 22, offset: 40954},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1118, col: 44, offset: 40976},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1118, col: 49, offset: 40981},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1118, col: 59, offset: 40991},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1118, col: 93, offset: 41025},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1121, col: 9, offset: 41225},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1121, col: 9, offset: 41225},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1121, col: 9, offset: 41225},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1121, col: 22, offset: 41238},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1121, col: 44, offset: 41260},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1121, col: 48, offset: 41264},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1121, col: 58, offset: 41274},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1121, col: 92, offset: 41308},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1125, col: 1, offset: 41458},
			expr: &actionExpr{
				pos: position{line: 1125, col: 18, offset: 41475},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1125, col: 18, offset: 41475},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1125, col: 18, offset: 41475},
							expr: &litMatcher{
								pos:        position{line: 1125, col: 19, offset: 41476},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1125, col: 23, offset: 41480},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1125, col: 27, offset: 41484},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1125, col: 36, offset: 41493},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1125, col: 58, offset: 41515},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1129, col: 1, offset: 41604},
			expr: &choiceExpr{
				pos: position{line: 1129, col: 25, offset: 41628},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1129, col: 25, offset: 41628},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1129, col: 38, offset: 41641},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1131, col: 1, offset: 41660},
			expr: &actionExpr{
				pos: position{line: 1131, col: 21, offset: 41680},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1131, col: 21, offset: 41680},
					expr: &charClassMatcher{
						pos:        position{line: 1131, col: 21, offset: 41680},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1135, col: 1, offset: 41757},
			expr: &actionExpr{
				pos: position{line: 1135, col: 25, offset: 41781},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1135, col: 25, offset: 41781},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1135, col: 25, offset: 41781},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1135, col: 38, offset: 41794},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1135, col: 60, offset: 41816},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1135, col: 64, offset: 41820},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1135, col: 73, offset: 41829},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1135, col: 95, offset: 41851},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1139, col: 1, offset: 41980},
			expr: &actionExpr{
				pos: position{line: 1139, col: 20, offset: 41999},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1139, col: 20, offset: 41999},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1139, col: 20, offset: 41999},
							expr: &litMatcher{
								pos:        position{line: 1139, col: 21, offset: 42000},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1139, col: 25, offset: 42004},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1139, col: 29, offset: 42008},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1139, col: 38, offset: 42017},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1139, col: 62, offset: 42041},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1143, col: 1, offset: 42132},
			expr: &choiceExpr{
				pos: position{line: 1143, col: 27, offset: 42158},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1143, col: 27, offset: 42158},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1143, col: 40, offset: 42171},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1145, col: 1, offset: 42192},
			expr: &actionExpr{
				pos: position{line: 1145, col: 23, offset: 42214},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1145, col: 23, offset: 42214},
					expr: &charClassMatcher{
						pos:        position{line: 1145, col: 23, offset: 42214},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1149, col: 1, offset: 42291},
			expr: &actionExpr{
				pos: position{line: 1149, col: 27, offset: 42317},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1149, col: 27, offset: 42317},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1149, col: 27, offset: 42317},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1149, col: 40, offset: 42330},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1149, col: 62, offset: 42352},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1149, col: 66, offset: 42356},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1149, col: 75, offset: 42365},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1149, col: 99, offset: 42389},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1156, col: 1, offset: 42631},
			expr: &choiceExpr{
				pos: position{line: 1156, col: 22, offset: 42652},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1156, col: 22, offset: 42652},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1156, col: 46, offset: 42676},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1156, col: 70, offset: 42700},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1158, col: 1, offset: 42718},
			expr: &litMatcher{
				pos:        position{line: 1158, col: 32, offset: 42749},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1160, col: 1, offset: 42754},
			expr: &actionExpr{
				pos: position{line: 1160, col: 26, offset: 42779},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1160, col: 26, offset: 42779},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1160, col: 26, offset: 42779},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1160, col: 54, offset: 42807},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1160, col: 63, offset: 42816},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1160, col: 93, offset: 42846},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1160, col: 121, offset: 42874},
							expr: &ruleRefExpr{
								pos:  position{line: 1160, col: 122, offset: 42875},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1164, col: 1, offset: 42980},
			expr: &choiceExpr{
				pos: position{line: 1164, col: 33, offset: 43012},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1164, col: 34, offset: 43013},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1164, col: 34, offset: 43013},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1164, col: 35, offset: 43014},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1164, col: 35, offset: 43014},
											expr: &ruleRefExpr{
												pos:  position{line: 1164, col: 36, offset: 43015},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1164, col: 64, offset: 43043},
											expr: &ruleRefExpr{
												pos:  position{line: 1164, col: 65, offset: 43044},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1164, col: 71, offset: 43050},
											expr: &ruleRefExpr{
												pos:  position{line: 1164, col: 72, offset: 43051},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1164, col: 80, offset: 43059,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1164, col: 83, offset: 43062},
									expr: &seqExpr{
										pos: position{line: 1164, col: 84, offset: 43063},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1164, col: 84, offset: 43063},
												expr: &seqExpr{
													pos: position{line: 1164, col: 86, offset: 43065},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1164, col: 86, offset: 43065},
															expr: &ruleRefExpr{
																pos:  position{line: 1164, col: 86, offset: 43065},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1164, col: 93, offset: 43072},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1164, col: 122, offset: 43101},
												expr: &ruleRefExpr{
													pos:  position{line: 1164, col: 123, offset: 43102},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1164, col: 151, offset: 43130},
												expr: &ruleRefExpr{
													pos:  position{line: 1164, col: 152, offset: 43131},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1164, col: 160, offset: 43139,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1166, col: 7, offset: 43281},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1166, col: 8, offset: 43282},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1166, col: 8, offset: 43282},
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 9, offset: 43283},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1166, col: 15, offset: 43289},
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 16, offset: 43290},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1166, col: 24, offset: 43298},
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 25, offset: 43299},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1166, col: 53, offset: 43327,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1170, col: 1, offset: 43409},
			expr: &litMatcher{
				pos:        position{line: 1170, col: 32, offset: 43440},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1172, col: 1, offset: 43447},
			expr: &actionExpr{
				pos: position{line: 1172, col: 26, offset: 43472},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1172, col: 26, offset: 43472},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1172, col: 26, offset: 43472},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1172, col: 54, offset: 43500},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1172, col: 63, offset: 43509},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1172, col: 93, offset: 43539},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1172, col: 121, offset: 43567},
							expr: &ruleRefExpr{
								pos:  position{line: 1172, col: 122, offset: 43568},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1176, col: 1, offset: 43673},
			expr: &choiceExpr{
				pos: position{line: 1176, col: 33, offset: 43705},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1176, col: 34, offset: 43706},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1176, col: 34, offset: 43706},
							expr: &seqExpr{
								pos: position{line: 1176, col: 35, offset: 43707},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1176, col: 35, offset: 43707},
										expr: &ruleRefExpr{
											pos:  position{line: 1176, col: 36, offset: 43708},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1176, col: 64, offset: 43736,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1178, col: 7, offset: 43901},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1178, col: 7, offset: 43901},
							expr: &seqExpr{
								pos: position{line: 1178, col: 8, offset: 43902},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1178, col: 8, offset: 43902},
										expr: &ruleRefExpr{
											pos:  position{line: 1178, col: 9, offset: 43903},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1178, col: 15, offset: 43909},
										expr: &ruleRefExpr{
											pos:  position{line: 1178, col: 16, offset: 43910},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1178, col: 24, offset: 43918},
										expr: &ruleRefExpr{
											pos:  position{line: 1178, col: 25, offset: 43919},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1178, col: 53, offset: 43947,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1182, col: 1, offset: 44030},
			expr: &choiceExpr{
				pos: position{line: 1182, col: 21, offset: 44050},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1182, col: 21, offset: 44050},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1182, col: 21, offset: 44050},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1182, col: 21, offset: 44050},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1182, col: 30, offset: 44059},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1182, col: 38, offset: 44067},
										expr: &ruleRefExpr{
											pos:  position{line: 1182, col: 39, offset: 44068},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1182, col: 67, offset: 44096},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1184, col: 5, offset: 44192},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1184, col: 5, offset: 44192},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1184, col: 5, offset: 44192},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1184, col: 15, offset: 44202},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1184, col: 23, offset: 44210},
										expr: &choiceExpr{
											pos: position{line: 1184, col: 24, offset: 44211},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1184, col: 24, offset: 44211},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1184, col: 37, offset: 44224},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1184, col: 65, offset: 44252},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1188, col: 1, offset: 44348},
			expr: &actionExpr{
				pos: position{line: 1188, col: 30, offset: 44377},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1188, col: 30, offset: 44377},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1195, col: 1, offset: 44550},
			expr: &choiceExpr{
				pos: position{line: 1195, col: 19, offset: 44568},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1195, col: 19, offset: 44568},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1195, col: 44, offset: 44593},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1197, col: 1, offset: 44618},
			expr: &choiceExpr{
				pos: position{line: 1197, col: 27, offset: 44644},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1197, col: 27, offset: 44644},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1197, col: 27, offset: 44644},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1197, col: 27, offset: 44644},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1197, col: 32, offset: 44649},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1197, col: 36, offset: 44653},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1197, col: 40, offset: 44657},
									expr: &ruleRefExpr{
										pos:  position{line: 1197, col: 40, offset: 44657},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1197, col: 47, offset: 44664},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1197, col: 51, offset: 44668},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1197, col: 58, offset: 44675},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1197, col: 79, offset: 44696},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1199, col: 5, offset: 44779},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1199, col: 5, offset: 44779},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1199, col: 5, offset: 44779},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1199, col: 10, offset: 44784},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1199, col: 14, offset: 44788},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1199, col: 18, offset: 44792},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1203, col: 1, offset: 44864},
			expr: &actionExpr{
				pos: position{line: 1203, col: 27, offset: 44890},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1203, col: 27, offset: 44890},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1203, col: 27, offset: 44890},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1203, col: 35, offset: 44898},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1203, col: 40, offset: 44903},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1203, col: 54, offset: 44917},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1203, col: 72, offset: 44935},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1207, col: 1, offset: 45058},
			expr: &ruleRefExpr{
				pos:  position{line: 1207, col: 24, offset: 45081},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1212, col: 1, offset: 45203},
			expr: &choiceExpr{
				pos: position{line: 1212, col: 9, offset: 45211},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1212, col: 9, offset: 45211},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1212, col: 24, offset: 45226},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1215, col: 1, offset: 45307},
			expr: &actionExpr{
				pos: position{line: 1215, col: 17, offset: 45323},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1215, col: 17, offset: 45323},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1215, col: 17, offset: 45323},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1215, col: 25, offset: 45331},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1215, col: 30, offset: 45336},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1215, col: 40, offset: 45346},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1215, col: 58, offset: 45364},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1219, col: 1, offset: 45475},
			expr: &actionExpr{
				pos: position{line: 1219, col: 17, offset: 45491},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1219, col: 17, offset: 45491},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1219, col: 17, offset: 45491},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1219, col: 22, offset: 45496},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1219, col: 42, offset: 45516},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1219, col: 59, offset: 45533},
								expr: &ruleRefExpr{
									pos:  position{line: 1219, col: 60, offset: 45534},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1223, col: 1, offset: 45627},
			expr: &actionExpr{
				pos: position{line: 1223, col: 19, offset: 45645},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1223, col: 19, offset: 45645},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1223, col: 19, offset: 45645},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1223, col: 23, offset: 45649},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1223, col: 33, offset: 45659},
								expr: &ruleRefExpr{
									pos:  position{line: 1223, col: 34, offset: 45660},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1224, col: 5, offset: 45692},
							expr: &ruleRefExpr{
								pos:  position{line: 1224, col: 5, offset: 45692},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1224, col: 12, offset: 45699},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1224, col: 23, offset: 45710},
								expr: &ruleRefExpr{
									pos:  position{line: 1224, col: 24, offset: 45711},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1224, col: 43, offset: 45730},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1228, col: 1, offset: 45847},
			expr: &actionExpr{
				pos: position{line: 1228, col: 30, offset: 45876},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1228, col: 30, offset: 45876},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1230, col: 5, offset: 45927},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1230, col: 6, offset: 45928},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1230, col: 6, offset: 45928},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1230, col: 6, offset: 45928},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1230, col: 11, offset: 45933},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1230, col: 20, offset: 45942},
												expr: &choiceExpr{
													pos: position{line: 1230, col: 21, offset: 45943},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1230, col: 21, offset: 45943},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1230, col: 34, offset: 45956},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1230, col: 56, offset: 45978},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1230, col: 61, offset: 45983},
											expr: &notExpr{
												pos: position{line: 1230, col: 63, offset: 45985},
												expr: &litMatcher{
													pos:        position{line: 1230, col: 64, offset: 45986},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1230, col: 69, offset: 45991},
											expr: &litMatcher{
												pos:        position{line: 1230, col: 69, offset: 45991},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1234, col: 6, offset: 46118},
								run: (*parser).callonFirstLinkAttributeElement18,
								expr: &seqExpr{
									pos: position{line: 1234, col: 6, offset: 46118},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1234, col: 6, offset: 46118},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1234, col: 15, offset: 46127},
												expr: &choiceExpr{
													pos: position{line: 1234, col: 16, offset: 46128},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1234, col: 16, offset: 46128},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1234, col: 29, offset: 46141},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1234, col: 53, offset: 46165},
											expr: &notExpr{
												pos: position{line: 1234, col: 55, offset: 46167},
												expr: &litMatcher{
													pos:        position{line: 1234, col: 56, offset: 46168},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1234, col: 61, offset: 46173},
											expr: &litMatcher{
												pos:        position{line: 1234, col: 61, offset: 46173},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1240, col: 1, offset: 46287},
			expr: &actionExpr{
				pos: position{line: 1240, col: 18, offset: 46304},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1240, col: 18, offset: 46304},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1244, col: 1, offset: 46390},
			expr: &actionExpr{
				pos: position{line: 1244, col: 24, offset: 46413},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1244, col: 24, offset: 46413},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1248, col: 1, offset: 46506},
			expr: &actionExpr{
				pos: position{line: 1248, col: 26, offset: 46531},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1248, col: 26, offset: 46531},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1253, col: 1, offset: 46688},
			expr: &actionExpr{
				pos: position{line: 1254, col: 5, offset: 46708},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1254, col: 5, offset: 46708},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1254, col: 5, offset: 46708},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1254, col: 14, offset: 46717},
								expr: &choiceExpr{
									pos: position{line: 1254, col: 15, offset: 46718},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1254, col: 15, offset: 46718},
											name: "Word",
										},
										&oneOrMoreExpr{
											pos: position{line: 1255, col: 11, offset: 46733},
											expr: &ruleRefExpr{
												pos:  position{line: 1255, col: 11, offset: 46733},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1256, col: 11, offset: 46751},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1257, col: 11, offset: 46775},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1258, col: 11, offset: 46797},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1259, col: 11, offset: 46815},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1259, col: 21, offset: 46825},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1263, col: 1, offset: 46895},
			expr: &choiceExpr{
				pos: position{line: 1263, col: 17, offset: 46911},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1263, col: 17, offset: 46911},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1263, col: 40, offset: 46934},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1266, col: 1, offset: 47062},
			expr: &actionExpr{
				pos: position{line: 1266, col: 25, offset: 47086},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1266, col: 25, offset: 47086},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1266, col: 25, offset: 47086},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1266, col: 33, offset: 47094},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1266, col: 38, offset: 47099},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1266, col: 38, offset: 47099},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1266, col: 57, offset: 47118},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1266, col: 79, offset: 47140},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1266, col: 97, offset: 47158},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1270, col: 1, offset: 47269},
			expr: &actionExpr{
				pos: position{line: 1270, col: 25, offset: 47293},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1270, col: 25, offset: 47293},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1270, col: 25, offset: 47293},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1270, col: 30, offset: 47298},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1270, col: 48, offset: 47316},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1270, col: 65, offset: 47333},
								expr: &ruleRefExpr{
									pos:  position{line: 1270, col: 66, offset: 47334},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1277, col: 1, offset: 47529},
			expr: &actionExpr{
				pos: position{line: 1277, col: 15, offset: 47543},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1277, col: 15, offset: 47543},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1277, col: 15, offset: 47543},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1277, col: 26, offset: 47554},
								expr: &ruleRefExpr{
									pos:  position{line: 1277, col: 27, offset: 47555},
									name: "Attributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1277, col: 40, offset: 47568},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1277, col: 50, offset: 47578},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1277, col: 56, offset: 47584},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1277, col: 66, offset: 47594},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1277, col: 84, offset: 47612},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1277, col: 101, offset: 47629},
							expr: &ruleRefExpr{
								pos:  position{line: 1277, col: 101, offset: 47629},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1277, col: 108, offset: 47636},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1281, col: 1, offset: 47748},
			expr: &actionExpr{
				pos: position{line: 1281, col: 16, offset: 47763},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1281, col: 16, offset: 47763},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1281, col: 16, offset: 47763},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1281, col: 25, offset: 47772},
							expr: &litMatcher{
								pos:        position{line: 1281, col: 26, offset: 47773},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1281, col: 30, offset: 47777},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1281, col: 36, offset: 47783},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1281, col: 46, offset: 47793},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1281, col: 64, offset: 47811},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1285, col: 1, offset: 47925},
			expr: &actionExpr{
				pos: position{line: 1285, col: 20, offset: 47944},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1285, col: 20, offset: 47944},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1285, col: 20, offset: 47944},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1285, col: 24, offset: 47948},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1285, col: 28, offset: 47952},
								expr: &ruleRefExpr{
									pos:  position{line: 1285, col: 29, offset: 47953},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1285, col: 56, offset: 47980},
							expr: &litMatcher{
								pos:        position{line: 1285, col: 56, offset: 47980},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1285, col: 61, offset: 47985},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1285, col: 67, offset: 47991},
								expr: &ruleRefExpr{
									pos:  position{line: 1285, col: 68, offset: 47992},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1285, col: 95, offset: 48019},
							expr: &litMatcher{
								pos:        position{line: 1285, col: 95, offset: 48019},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1285, col: 100, offset: 48024},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1285, col: 107, offset: 48031},
								expr: &ruleRefExpr{
									pos:  position{line: 1285, col: 108, offset: 48032},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1285, col: 135, offset: 48059},
							expr: &litMatcher{
								pos:        position{line: 1285, col: 135, offset: 48059},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1285, col: 140, offset: 48064},
							expr: &ruleRefExpr{
								pos:  position{line: 1285, col: 140, offset: 48064},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1285, col: 147, offset: 48071},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1285, col: 158, offset: 48082},
								expr: &ruleRefExpr{
									pos:  position{line: 1285, col: 159, offset: 48083},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1285, col: 178, offset: 48102},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1292, col: 1, offset: 48392},
			expr: &choiceExpr{
				pos: position{line: 1292, col: 19, offset: 48410},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1292, col: 19, offset: 48410},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1292, col: 19, offset: 48410},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1292, col: 19, offset: 48410},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1292, col: 32, offset: 48423},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1292, col: 41, offset: 48432},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1292, col: 58, offset: 48449},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1294, col: 5, offset: 48517},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1294, col: 5, offset: 48517},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1294, col: 5, offset: 48517},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1294, col: 17, offset: 48529},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1294, col: 22, offset: 48534},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1294, col: 35, offset: 48547},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1294, col: 39, offset: 48551},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1294, col: 47, offset: 48559},
										expr: &ruleRefExpr{
											pos:  position{line: 1294, col: 48, offset: 48560},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1294, col: 66, offset: 48578},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1298, col: 1, offset: 48639},
			expr: &ruleRefExpr{
				pos:  position{line: 1298, col: 16, offset: 48654},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1300, col: 1, offset: 48665},
			expr: &actionExpr{
				pos: position{line: 1300, col: 20, offset: 48684},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1300, col: 20, offset: 48684},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1300, col: 29, offset: 48693},
						expr: &seqExpr{
							pos: position{line: 1300, col: 30, offset: 48694},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1300, col: 30, offset: 48694},
									expr: &litMatcher{
										pos:        position{line: 1300, col: 31, offset: 48695},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1300, col: 35, offset: 48699},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1307, col: 1, offset: 49023},
			expr: &actionExpr{
				pos: position{line: 1307, col: 19, offset: 49041},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1307, col: 19, offset: 49041},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1307, col: 19, offset: 49041},
							expr: &ruleRefExpr{
								pos:  position{line: 1307, col: 20, offset: 49042},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1308, col: 5, offset: 49130},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1308, col: 12, offset: 49137},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1308, col: 12, offset: 49137},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1309, col: 11, offset: 49160},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1310, col: 11, offset: 49184},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1311, col: 11, offset: 49208},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1312, col: 11, offset: 49230},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1313, col: 11, offset: 49252},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1314, col: 11, offset: 49275},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1315, col: 11, offset: 49303},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1316, col: 11, offset: 49330},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1317, col: 11, offset: 49346},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1321, col: 1, offset: 49387},
			expr: &choiceExpr{
				pos: position{line: 1321, col: 19, offset: 49405},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1321, col: 19, offset: 49405},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1321, col: 19, offset: 49405},
								expr: &ruleRefExpr{
									pos:  position{line: 1321, col: 21, offset: 49407},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1321, col: 31, offset: 49417},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1322, col: 19, offset: 49488},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1323, col: 19, offset: 49528},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1324, col: 19, offset: 49569},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1325, col: 19, offset: 49610},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1326, col: 19, offset: 49651},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1327, col: 19, offset: 49689},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1328, col: 19, offset: 49729},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1330, col: 1, offset: 49756},
			expr: &choiceExpr{
				pos: position{line: 1330, col: 20, offset: 49775},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1330, col: 20, offset: 49775},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 36, offset: 49791},
						name: "VerbatimLine",
					},
				},
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1332, col: 1, offset: 49805},
			expr: &actionExpr{
				pos: position{line: 1332, col: 17, offset: 49821},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1332, col: 17, offset: 49821},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1332, col: 17, offset: 49821},
							expr: &ruleRefExpr{
								pos:  position{line: 1332, col: 18, offset: 49822},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1332, col: 22, offset: 49826},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1332, col: 31, offset: 49835},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1332, col: 52, offset: 49856},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1332, col: 61, offset: 49865},
								expr: &ruleRefExpr{
									pos:  position{line: 1332, col: 62, offset: 49866},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1332, col: 73, offset: 49877},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1336, col: 1, offset: 49947},
			expr: &actionExpr{
				pos: position{line: 1336, col: 24, offset: 49970},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1336, col: 24, offset: 49970},
					expr: &seqExpr{
						pos: position{line: 1336, col: 25, offset: 49971},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1336, col: 25, offset: 49971},
								expr: &ruleRefExpr{
									pos:  position{line: 1336, col: 26, offset: 49972},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1336, col: 36, offset: 49982},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1336, col: 36, offset: 49982},
										expr: &ruleRefExpr{
											pos:  position{line: 1336, col: 36, offset: 49982},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1336, col: 45, offset: 49991},
										expr: &charClassMatcher{
											pos:        position{line: 1336, col: 45, offset: 49991},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1340, col: 1, offset: 50041},
			expr: &oneOrMoreExpr{
				pos: position{line: 1340, col: 13, offset: 50053},
				expr: &ruleRefExpr{
					pos:  position{line: 1340, col: 13, offset: 50053},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1342, col: 1, offset: 50063},
			expr: &actionExpr{
				pos: position{line: 1342, col: 12, offset: 50074},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1342, col: 12, offset: 50074},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1342, col: 12, offset: 50074},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1342, col: 16, offset: 50078},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1342, col: 21, offset: 50083},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1342, col: 21, offset: 50083},
									expr: &charClassMatcher{
										pos:        position{line: 1342, col: 21, offset: 50083},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1342, col: 69, offset: 50131},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1342, col: 73, offset: 50135},
							expr: &ruleRefExpr{
								pos:  position{line: 1342, col: 73, offset: 50135},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1342, col: 80, offset: 50142},
							expr: &choiceExpr{
								pos: position{line: 1342, col: 82, offset: 50144},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1342, col: 82, offset: 50144},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1342, col: 88, offset: 50150},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1346, col: 1, offset: 50203},
			expr: &actionExpr{
				pos: position{line: 1346, col: 20, offset: 50222},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1346, col: 20, offset: 50222},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1346, col: 20, offset: 50222},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1346, col: 25, offset: 50227},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1346, col: 48, offset: 50250},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1346, col: 61, offset: 50263},
								expr: &ruleRefExpr{
									pos:  position{line: 1346, col: 61, offset: 50263},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1350, col: 1, offset: 50360},
			expr: &actionExpr{
				pos: position{line: 1350, col: 26, offset: 50385},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1350, col: 26, offset: 50385},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1350, col: 26, offset: 50385},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1350, col: 30, offset: 50389},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1350, col: 35, offset: 50394},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1350, col: 35, offset: 50394},
									expr: &charClassMatcher{
										pos:        position{line: 1350, col: 35, offset: 50394},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1350, col: 83, offset: 50442},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1350, col: 87, offset: 50446},
							expr: &ruleRefExpr{
								pos:  position{line: 1350, col: 87, offset: 50446},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1357, col: 1, offset: 50673},
			expr: &seqExpr{
				pos: position{line: 1357, col: 25, offset: 50697},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1357, col: 25, offset: 50697},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1357, col: 31, offset: 50703},
						expr: &ruleRefExpr{
							pos:  position{line: 1357, col: 31, offset: 50703},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1357, col: 38, offset: 50710},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1359, col: 1, offset: 50770},
			expr: &seqExpr{
				pos: position{line: 1359, col: 30, offset: 50799},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1359, col: 30, offset: 50799},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1359, col: 36, offset: 50805},
						expr: &ruleRefExpr{
							pos:  position{line: 1359, col: 36, offset: 50805},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1359, col: 43, offset: 50812},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1361, col: 1, offset: 50817},
			expr: &choiceExpr{
				pos: position{line: 1361, col: 28, offset: 50844},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1361, col: 29, offset: 50845},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1361, col: 29, offset: 50845},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1361, col: 35, offset: 50851},
								expr: &ruleRefExpr{
									pos:  position{line: 1361, col: 35, offset: 50851},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1361, col: 42, offset: 50858},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1361, col: 49, offset: 50865},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1363, col: 1, offset: 50870},
			expr: &actionExpr{
				pos: position{line: 1363, col: 16, offset: 50885},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1363, col: 16, offset: 50885},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1363, col: 16, offset: 50885},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1363, col: 27, offset: 50896},
								expr: &ruleRefExpr{
									pos:  position{line: 1363, col: 28, offset: 50897},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1363, col: 41, offset: 50910},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1363, col: 67, offset: 50936},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1363, col: 76, offset: 50945},
								name: "FencedBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1363, col: 104, offset: 50973},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockVerbatimContent",
			pos:  position{line: 1367, col: 1, offset: 51088},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1367, col: 31, offset: 51118},
				expr: &actionExpr{
					pos: position{line: 1367, col: 32, offset: 51119},
					run: (*parser).callonFencedBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1367, col: 32, offset: 51119},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1367, col: 32, offset: 51119},
								expr: &ruleRefExpr{
									pos:  position{line: 1367, col: 33, offset: 51120},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1367, col: 57, offset: 51144},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1367, col: 66, offset: 51153},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1374, col: 1, offset: 51490},
			expr: &seqExpr{
				pos: position{line: 1374, col: 26, offset: 51515},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1374, col: 26, offset: 51515},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1374, col: 33, offset: 51522},
						expr: &ruleRefExpr{
							pos:  position{line: 1374, col: 33, offset: 51522},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1374, col: 40, offset: 51529},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1376, col: 1, offset: 51534},
			expr: &seqExpr{
				pos: position{line: 1376, col: 31, offset: 51564},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1376, col: 31, offset: 51564},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1376, col: 38, offset: 51571},
						expr: &ruleRefExpr{
							pos:  position{line: 1376, col: 38, offset: 51571},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1376, col: 45, offset: 51578},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1378, col: 1, offset: 51583},
			expr: &choiceExpr{
				pos: position{line: 1378, col: 29, offset: 51611},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1378, col: 30, offset: 51612},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1378, col: 30, offset: 51612},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1378, col: 37, offset: 51619},
								expr: &ruleRefExpr{
									pos:  position{line: 1378, col: 37, offset: 51619},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1378, col: 44, offset: 51626},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1378, col: 51, offset: 51633},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1380, col: 1, offset: 51638},
			expr: &actionExpr{
				pos: position{line: 1380, col: 17, offset: 51654},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1380, col: 17, offset: 51654},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1380, col: 17, offset: 51654},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1380, col: 28, offset: 51665},
								expr: &ruleRefExpr{
									pos:  position{line: 1380, col: 29, offset: 51666},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1380, col: 42, offset: 51679},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1380, col: 69, offset: 51706},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1380, col: 78, offset: 51715},
								name: "ListingBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1380, col: 107, offset: 51744},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockVerbatimContent",
			pos:  position{line: 1384, col: 1, offset: 51861},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1384, col: 32, offset: 51892},
				expr: &actionExpr{
					pos: position{line: 1384, col: 33, offset: 51893},
					run: (*parser).callonListingBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1384, col: 33, offset: 51893},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1384, col: 33, offset: 51893},
								expr: &ruleRefExpr{
									pos:  position{line: 1384, col: 34, offset: 51894},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1384, col: 59, offset: 51919},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1384, col: 68, offset: 51928},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1391, col: 1, offset: 52265},
			expr: &seqExpr{
				pos: position{line: 1391, col: 26, offset: 52290},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1391, col: 26, offset: 52290},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1391, col: 33, offset: 52297},
						expr: &ruleRefExpr{
							pos:  position{line: 1391, col: 33, offset: 52297},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1391, col: 40, offset: 52304},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1393, col: 1, offset: 52309},
			expr: &seqExpr{
				pos: position{line: 1393, col: 31, offset: 52339},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1393, col: 31, offset: 52339},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1393, col: 38, offset: 52346},
						expr: &ruleRefExpr{
							pos:  position{line: 1393, col: 38, offset: 52346},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1393, col: 45, offset: 52353},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1395, col: 1, offset: 52358},
			expr: &choiceExpr{
				pos: position{line: 1395, col: 29, offset: 52386},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1395, col: 30, offset: 52387},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1395, col: 30, offset: 52387},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1395, col: 37, offset: 52394},
								expr: &ruleRefExpr{
									pos:  position{line: 1395, col: 37, offset: 52394},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1395, col: 44, offset: 52401},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1395, col: 51, offset: 52408},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1397, col: 1, offset: 52413},
			expr: &actionExpr{
				pos: position{line: 1397, col: 17, offset: 52429},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1397, col: 17, offset: 52429},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1397, col: 17, offset: 52429},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1397, col: 28, offset: 52440},
								expr: &ruleRefExpr{
									pos:  position{line: 1397, col: 29, offset: 52441},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1397, col: 42, offset: 52454},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1397, col: 69, offset: 52481},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1397, col: 78, offset: 52490},
								name: "ExampleBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1397, col: 107, offset: 52519},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockVerbatimContent",
			pos:  position{line: 1401, col: 1, offset: 52636},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1401, col: 32, offset: 52667},
				expr: &actionExpr{
					pos: position{line: 1401, col: 33, offset: 52668},
					run: (*parser).callonExampleBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1401, col: 33, offset: 52668},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1401, col: 33, offset: 52668},
								expr: &ruleRefExpr{
									pos:  position{line: 1401, col: 34, offset: 52669},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1401, col: 59, offset: 52694},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1401, col: 68, offset: 52703},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1408, col: 1, offset: 53038},
			expr: &seqExpr{
				pos: position{line: 1408, col: 24, offset: 53061},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1408, col: 24, offset: 53061},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1408, col: 31, offset: 53068},
						expr: &ruleRefExpr{
							pos:  position{line: 1408, col: 31, offset: 53068},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1408, col: 38, offset: 53075},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1410, col: 1, offset: 53105},
			expr: &seqExpr{
				pos: position{line: 1410, col: 29, offset: 53133},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1410, col: 29, offset: 53133},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1410, col: 36, offset: 53140},
						expr: &ruleRefExpr{
							pos:  position{line: 1410, col: 36, offset: 53140},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1410, col: 43, offset: 53147},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1412, col: 1, offset: 53177},
			expr: &choiceExpr{
				pos: position{line: 1412, col: 27, offset: 53203},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1412, col: 28, offset: 53204},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1412, col: 28, offset: 53204},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1412, col: 35, offset: 53211},
								expr: &ruleRefExpr{
									pos:  position{line: 1412, col: 35, offset: 53211},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1412, col: 42, offset: 53218},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1412, col: 49, offset: 53225},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1414, col: 1, offset: 53255},
			expr: &actionExpr{
				pos: position{line: 1414, col: 15, offset: 53269},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1414, col: 15, offset: 53269},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1414, col: 15, offset: 53269},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1414, col: 26, offset: 53280},
								expr: &ruleRefExpr{
									pos:  position{line: 1414, col: 27, offset: 53281},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1414, col: 40, offset: 53294},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1414, col: 65, offset: 53319},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1414, col: 74, offset: 53328},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1414, col: 101, offset: 53355},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1418, col: 1, offset: 53468},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1418, col: 30, offset: 53497},
				expr: &actionExpr{
					pos: position{line: 1418, col: 31, offset: 53498},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1418, col: 31, offset: 53498},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1418, col: 31, offset: 53498},
								expr: &ruleRefExpr{
									pos:  position{line: 1418, col: 32, offset: 53499},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1418, col: 55, offset: 53522},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1418, col: 64, offset: 53531},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1427, col: 1, offset: 53915},
			expr: &actionExpr{
				pos: position{line: 1427, col: 15, offset: 53929},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1427, col: 15, offset: 53929},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1427, col: 15, offset: 53929},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1427, col: 27, offset: 53941},
								name: "Attributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1428, col: 5, offset: 53958},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1432, col: 5, offset: 54153},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1432, col: 30, offset: 54178},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1432, col: 39, offset: 54187},
								name: "VerseBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1432, col: 66, offset: 54214},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockVerbatimContent",
			pos:  position{line: 1436, col: 1, offset: 54335},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1436, col: 30, offset: 54364},
				expr: &actionExpr{
					pos: position{line: 1436, col: 31, offset: 54365},
					run: (*parser).callonVerseBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1436, col: 31, offset: 54365},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1436, col: 31, offset: 54365},
								expr: &ruleRefExpr{
									pos:  position{line: 1436, col: 32, offset: 54366},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1436, col: 55, offset: 54389},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1436, col: 64, offset: 54398},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1443, col: 1, offset: 54735},
			expr: &seqExpr{
				pos: position{line: 1443, col: 26, offset: 54760},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1443, col: 26, offset: 54760},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1443, col: 33, offset: 54767},
						expr: &ruleRefExpr{
							pos:  position{line: 1443, col: 33, offset: 54767},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1443, col: 40, offset: 54774},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1445, col: 1, offset: 54779},
			expr: &seqExpr{
				pos: position{line: 1445, col: 31, offset: 54809},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1445, col: 31, offset: 54809},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1445, col: 38, offset: 54816},
						expr: &ruleRefExpr{
							pos:  position{line: 1445, col: 38, offset: 54816},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1445, col: 45, offset: 54823},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1447, col: 1, offset: 54828},
			expr: &choiceExpr{
				pos: position{line: 1447, col: 29, offset: 54856},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1447, col: 30, offset: 54857},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1447, col: 30, offset: 54857},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1447, col: 37, offset: 54864},
								expr: &ruleRefExpr{
									pos:  position{line: 1447, col: 37, offset: 54864},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1447, col: 44, offset: 54871},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1447, col: 51, offset: 54878},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1449, col: 1, offset: 54883},
			expr: &actionExpr{
				pos: position{line: 1449, col: 17, offset: 54899},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1449, col: 17, offset: 54899},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1449, col: 17, offset: 54899},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1449, col: 28, offset: 54910},
								expr: &ruleRefExpr{
									pos:  position{line: 1449, col: 29, offset: 54911},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1449, col: 42, offset: 54924},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1449, col: 69, offset: 54951},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1449, col: 78, offset: 54960},
								name: "SidebarBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1449, col: 107, offset: 54989},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockVerbatimContent",
			pos:  position{line: 1453, col: 1, offset: 55106},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1453, col: 32, offset: 55137},
				expr: &actionExpr{
					pos: position{line: 1453, col: 33, offset: 55138},
					run: (*parser).callonSidebarBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1453, col: 33, offset: 55138},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1453, col: 33, offset: 55138},
								expr: &ruleRefExpr{
									pos:  position{line: 1453, col: 34, offset: 55139},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1453, col: 59, offset: 55164},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1453, col: 68, offset: 55173},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1460, col: 1, offset: 55514},
			expr: &seqExpr{
				pos: position{line: 1460, col: 30, offset: 55543},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1460, col: 30, offset: 55543},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1460, col: 37, offset: 55550},
						expr: &ruleRefExpr{
							pos:  position{line: 1460, col: 37, offset: 55550},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1460, col: 44, offset: 55557},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1462, col: 1, offset: 55562},
			expr: &seqExpr{
				pos: position{line: 1462, col: 35, offset: 55596},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1462, col: 35, offset: 55596},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1462, col: 42, offset: 55603},
						expr: &ruleRefExpr{
							pos:  position{line: 1462, col: 42, offset: 55603},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1462, col: 49, offset: 55610},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1464, col: 1, offset: 55615},
			expr: &choiceExpr{
				pos: position{line: 1464, col: 33, offset: 55647},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1464, col: 34, offset: 55648},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1464, col: 34, offset: 55648},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1464, col: 41, offset: 55655},
								expr: &ruleRefExpr{
									pos:  position{line: 1464, col: 41, offset: 55655},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1464, col: 48, offset: 55662},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1464, col: 55, offset: 55669},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1466, col: 1, offset: 55674},
			expr: &actionExpr{
				pos: position{line: 1466, col: 21, offset: 55694},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1466, col: 21, offset: 55694},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1466, col: 21, offset: 55694},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1466, col: 32, offset: 55705},
								expr: &ruleRefExpr{
									pos:  position{line: 1466, col: 33, offset: 55706},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1466, col: 46, offset: 55719},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1466, col: 77, offset: 55750},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1466, col: 86, offset: 55759},
								name: "PassthroughBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1466, col: 119, offset: 55792},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockVerbatimContent",
			pos:  position{line: 1470, col: 1, offset: 55917},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1470, col: 36, offset: 55952},
				expr: &actionExpr{
					pos: position{line: 1470, col: 37, offset: 55953},
					run: (*parser).callonPassthroughBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1470, col: 37, offset: 55953},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1470, col: 37, offset: 55953},
								expr: &ruleRefExpr{
									pos:  position{line: 1470, col: 38, offset: 55954},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1470, col: 67, offset: 55983},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1470, col: 76, offset: 55992},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1478, col: 1, offset: 56338},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1478, col: 23, offset: 56360},
				expr: &ruleRefExpr{
					pos:  position{line: 1478, col: 23, offset: 56360},
					name: "NormalBlockElement",
				},
			},
		},
		{
			name: "NormalBlockElement",
			pos:  position{line: 1480, col: 1, offset: 56381},
			expr: &actionExpr{
				pos: position{line: 1481, col: 5, offset: 56408},
				run: (*parser).callonNormalBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1481, col: 5, offset: 56408},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1481, col: 5, offset: 56408},
							expr: &ruleRefExpr{
								pos:  position{line: 1481, col: 6, offset: 56409},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1481, col: 10, offset: 56413},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1481, col: 19, offset: 56422},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1481, col: 19, offset: 56422},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1482, col: 15, offset: 56447},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1483, col: 15, offset: 56475},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1484, col: 15, offset: 56501},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1485, col: 15, offset: 56532},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1486, col: 15, offset: 56565},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1487, col: 15, offset: 56596},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1488, col: 15, offset: 56635},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1489, col: 15, offset: 56664},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1490, col: 15, offset: 56692},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1491, col: 15, offset: 56728},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1492, col: 15, offset: 56758},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1493, col: 15, offset: 56799},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1497, col: 1, offset: 56848},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1497, col: 22, offset: 56869},
				expr: &ruleRefExpr{
					pos:  position{line: 1497, col: 22, offset: 56869},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1499, col: 1, offset: 56889},
			expr: &actionExpr{
				pos: position{line: 1499, col: 22, offset: 56910},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1499, col: 22, offset: 56910},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1499, col: 22, offset: 56910},
							expr: &ruleRefExpr{
								pos:  position{line: 1499, col: 23, offset: 56911},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1499, col: 27, offset: 56915},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1499, col: 36, offset: 56924},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1499, col: 36, offset: 56924},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1499, col: 48, offset: 56936},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1503, col: 1, offset: 56986},
			expr: &actionExpr{
				pos: position{line: 1503, col: 24, offset: 57009},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1503, col: 24, offset: 57009},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1503, col: 30, offset: 57015},
						expr: &ruleRefExpr{
							pos:  position{line: 1503, col: 31, offset: 57016},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1507, col: 1, offset: 57106},
			expr: &actionExpr{
				pos: position{line: 1507, col: 28, offset: 57133},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1507, col: 28, offset: 57133},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1507, col: 28, offset: 57133},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1507, col: 37, offset: 57142},
								expr: &ruleRefExpr{
									pos:  position{line: 1507, col: 38, offset: 57143},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1507, col: 54, offset: 57159},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1514, col: 1, offset: 57401},
			expr: &actionExpr{
				pos: position{line: 1514, col: 10, offset: 57410},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1514, col: 10, offset: 57410},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1514, col: 10, offset: 57410},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1514, col: 21, offset: 57421},
								expr: &ruleRefExpr{
									pos:  position{line: 1514, col: 22, offset: 57422},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1514, col: 35, offset: 57435},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1515, col: 5, offset: 57454},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1515, col: 12, offset: 57461},
								expr: &ruleRefExpr{
									pos:  position{line: 1515, col: 13, offset: 57462},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1516, col: 5, offset: 57484},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1516, col: 11, offset: 57490},
								expr: &ruleRefExpr{
									pos:  position{line: 1516, col: 12, offset: 57491},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1517, col: 6, offset: 57508},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1517, col: 6, offset: 57508},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1517, col: 23, offset: 57525},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1521, col: 1, offset: 57640},
			expr: &seqExpr{
				pos: position{line: 1521, col: 23, offset: 57662},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1521, col: 23, offset: 57662},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1521, col: 27, offset: 57666},
						expr: &ruleRefExpr{
							pos:  position{line: 1521, col: 27, offset: 57666},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1523, col: 1, offset: 57674},
			expr: &seqExpr{
				pos: position{line: 1523, col: 19, offset: 57692},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1523, col: 19, offset: 57692},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1523, col: 26, offset: 57699},
						expr: &ruleRefExpr{
							pos:  position{line: 1523, col: 26, offset: 57699},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1523, col: 33, offset: 57706},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1526, col: 1, offset: 57774},
			expr: &actionExpr{
				pos: position{line: 1526, col: 20, offset: 57793},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1526, col: 20, offset: 57793},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1526, col: 20, offset: 57793},
							expr: &ruleRefExpr{
								pos:  position{line: 1526, col: 21, offset: 57794},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1526, col: 36, offset: 57809},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1526, col: 42, offset: 57815},
								expr: &ruleRefExpr{
									pos:  position{line: 1526, col: 43, offset: 57816},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1526, col: 55, offset: 57828},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1526, col: 59, offset: 57832},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1530, col: 1, offset: 57900},
			expr: &actionExpr{
				pos: position{line: 1530, col: 14, offset: 57913},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1530, col: 14, offset: 57913},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1530, col: 14, offset: 57913},
							expr: &ruleRefExpr{
								pos:  position{line: 1530, col: 15, offset: 57914},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1530, col: 30, offset: 57929},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1530, col: 36, offset: 57935},
								expr: &ruleRefExpr{
									pos:  position{line: 1530, col: 37, offset: 57936},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1530, col: 49, offset: 57948},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1530, col: 53, offset: 57952},
							expr: &ruleRefExpr{
								pos:  position{line: 1530, col: 53, offset: 57952},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1534, col: 1, offset: 58021},
			expr: &actionExpr{
				pos: position{line: 1534, col: 14, offset: 58034},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1534, col: 14, offset: 58034},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1534, col: 14, offset: 58034},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1534, col: 33, offset: 58053},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1534, col: 42, offset: 58062},
								expr: &seqExpr{
									pos: position{line: 1534, col: 43, offset: 58063},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1534, col: 43, offset: 58063},
											expr: &ruleRefExpr{
												pos:  position{line: 1534, col: 44, offset: 58064},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1534, col: 63, offset: 58083},
											expr: &ruleRefExpr{
												pos:  position{line: 1534, col: 64, offset: 58084},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1534, col: 68, offset: 58088},
											expr: &ruleRefExpr{
												pos:  position{line: 1534, col: 68, offset: 58088},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1534, col: 75, offset: 58095},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1534, col: 89, offset: 58109},
											expr: &ruleRefExpr{
												pos:  position{line: 1534, col: 89, offset: 58109},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1541, col: 1, offset: 58358},
			expr: &seqExpr{
				pos: position{line: 1541, col: 26, offset: 58383},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1541, col: 26, offset: 58383},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1541, col: 33, offset: 58390},
						expr: &ruleRefExpr{
							pos:  position{line: 1541, col: 33, offset: 58390},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1541, col: 40, offset: 58397},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1543, col: 1, offset: 58402},
			expr: &seqExpr{
				pos: position{line: 1543, col: 31, offset: 58432},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1543, col: 31, offset: 58432},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1543, col: 38, offset: 58439},
						expr: &ruleRefExpr{
							pos:  position{line: 1543, col: 38, offset: 58439},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1543, col: 45, offset: 58446},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1545, col: 1, offset: 58451},
			expr: &choiceExpr{
				pos: position{line: 1545, col: 29, offset: 58479},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1545, col: 30, offset: 58480},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1545, col: 30, offset: 58480},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1545, col: 37, offset: 58487},
								expr: &ruleRefExpr{
									pos:  position{line: 1545, col: 37, offset: 58487},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1545, col: 44, offset: 58494},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1545, col: 51, offset: 58501},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1547, col: 1, offset: 58506},
			expr: &actionExpr{
				pos: position{line: 1547, col: 17, offset: 58522},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1547, col: 17, offset: 58522},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1547, col: 17, offset: 58522},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1547, col: 44, offset: 58549},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1547, col: 53, offset: 58558},
								name: "CommentBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1547, col: 83, offset: 58588},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockVerbatimContent",
			pos:  position{line: 1551, col: 1, offset: 58698},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1551, col: 32, offset: 58729},
				expr: &actionExpr{
					pos: position{line: 1551, col: 33, offset: 58730},
					run: (*parser).callonCommentBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1551, col: 33, offset: 58730},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1551, col: 33, offset: 58730},
								expr: &ruleRefExpr{
									pos:  position{line: 1551, col: 34, offset: 58731},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1551, col: 59, offset: 58756},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1551, col: 68, offset: 58765},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1555, col: 1, offset: 58906},
			expr: &actionExpr{
				pos: position{line: 1555, col: 22, offset: 58927},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1555, col: 22, offset: 58927},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1555, col: 22, offset: 58927},
							expr: &ruleRefExpr{
								pos:  position{line: 1555, col: 23, offset: 58928},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1555, col: 45, offset: 58950},
							expr: &ruleRefExpr{
								pos:  position{line: 1555, col: 45, offset: 58950},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1555, col: 52, offset: 58957},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1555, col: 57, offset: 58962},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1555, col: 66, offset: 58971},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1555, col: 92, offset: 58997},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1559, col: 1, offset: 59062},
			expr: &actionExpr{
				pos: position{line: 1559, col: 29, offset: 59090},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1559, col: 29, offset: 59090},
					expr: &charClassMatcher{
						pos:        position{line: 1559, col: 29, offset: 59090},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1567, col: 1, offset: 59403},
			expr: &choiceExpr{
				pos: position{line: 1567, col: 17, offset: 59419},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1567, col: 17, offset: 59419},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1567, col: 49, offset: 59451},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1567, col: 78, offset: 59480},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1569, col: 1, offset: 59516},
			expr: &litMatcher{
				pos:        position{line: 1569, col: 26, offset: 59541},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1572, col: 1, offset: 59613},
			expr: &actionExpr{
				pos: position{line: 1572, col: 31, offset: 59643},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1572, col: 31, offset: 59643},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1572, col: 31, offset: 59643},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1572, col: 42, offset: 59654},
								expr: &ruleRefExpr{
									pos:  position{line: 1572, col: 43, offset: 59655},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1572, col: 56, offset: 59668},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1572, col: 63, offset: 59675},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1577, col: 1, offset: 59905},
			expr: &actionExpr{
				pos: position{line: 1578, col: 5, offset: 59945},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1578, col: 5, offset: 59945},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1578, col: 5, offset: 59945},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1578, col: 16, offset: 59956},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1578, col: 16, offset: 59956},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1578, col: 16, offset: 59956},
											expr: &ruleRefExpr{
												pos:  position{line: 1578, col: 16, offset: 59956},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1578, col: 23, offset: 59963},
											expr: &charClassMatcher{
												pos:        position{line: 1578, col: 23, offset: 59963},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1580, col: 8, offset: 60016},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1581, col: 5, offset: 60079},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1581, col: 16, offset: 60090},
								expr: &actionExpr{
									pos: position{line: 1582, col: 9, offset: 60100},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 1582, col: 9, offset: 60100},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1582, col: 9, offset: 60100},
												expr: &ruleRefExpr{
													pos:  position{line: 1582, col: 10, offset: 60101},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1583, col: 9, offset: 60120},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1583, col: 20, offset: 60131},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 1583, col: 20, offset: 60131},
														expr: &charClassMatcher{
															pos:        position{line: 1583, col: 20, offset: 60131},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1585, col: 12, offset: 60192},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1592, col: 1, offset: 60422},
			expr: &actionExpr{
				pos: position{line: 1592, col: 39, offset: 60460},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1592, col: 39, offset: 60460},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1592, col: 39, offset: 60460},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1592, col: 50, offset: 60471},
								expr: &ruleRefExpr{
									pos:  position{line: 1592, col: 51, offset: 60472},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1593, col: 9, offset: 60493},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1593, col: 31, offset: 60515},
							expr: &ruleRefExpr{
								pos:  position{line: 1593, col: 31, offset: 60515},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1593, col: 38, offset: 60522},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1593, col: 46, offset: 60530},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1593, col: 53, offset: 60537},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1593, col: 95, offset: 60579},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1593, col: 96, offset: 60580},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1593, col: 96, offset: 60580},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1593, col: 118, offset: 60602},
											expr: &ruleRefExpr{
												pos:  position{line: 1593, col: 118, offset: 60602},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1593, col: 125, offset: 60609},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1593, col: 132, offset: 60616},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1598, col: 1, offset: 60775},
			expr: &actionExpr{
				pos: position{line: 1598, col: 44, offset: 60818},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1598, col: 44, offset: 60818},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1598, col: 50, offset: 60824},
						expr: &ruleRefExpr{
							pos:  position{line: 1598, col: 51, offset: 60825},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1602, col: 1, offset: 60909},
			expr: &actionExpr{
				pos: position{line: 1603, col: 5, offset: 60964},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1603, col: 5, offset: 60964},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1603, col: 5, offset: 60964},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1603, col: 11, offset: 60970},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 1603, col: 11, offset: 60970},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1603, col: 11, offset: 60970},
											expr: &ruleRefExpr{
												pos:  position{line: 1603, col: 12, offset: 60971},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1603, col: 34, offset: 60993},
											expr: &charClassMatcher{
												pos:        position{line: 1603, col: 34, offset: 60993},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1605, col: 8, offset: 61046},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1610, col: 1, offset: 61172},
			expr: &actionExpr{
				pos: position{line: 1611, col: 5, offset: 61210},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1611, col: 5, offset: 61210},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1611, col: 5, offset: 61210},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1611, col: 16, offset: 61221},
								expr: &ruleRefExpr{
									pos:  position{line: 1611, col: 17, offset: 61222},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1612, col: 5, offset: 61239},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1619, col: 5, offset: 61446},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1619, col: 12, offset: 61453},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1623, col: 1, offset: 61603},
			expr: &actionExpr{
				pos: position{line: 1623, col: 16, offset: 61618},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1623, col: 16, offset: 61618},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1628, col: 1, offset: 61701},
			expr: &actionExpr{
				pos: position{line: 1628, col: 39, offset: 61739},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1628, col: 39, offset: 61739},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1628, col: 45, offset: 61745},
						expr: &ruleRefExpr{
							pos:  position{line: 1628, col: 46, offset: 61746},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1632, col: 1, offset: 61826},
			expr: &actionExpr{
				pos: position{line: 1632, col: 38, offset: 61863},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1632, col: 38, offset: 61863},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1632, col: 38, offset: 61863},
							expr: &ruleRefExpr{
								pos:  position{line: 1632, col: 39, offset: 61864},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1632, col: 49, offset: 61874},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1632, col: 58, offset: 61883},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1632, col: 58, offset: 61883},
									expr: &charClassMatcher{
										pos:        position{line: 1632, col: 58, offset: 61883},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1634, col: 4, offset: 61928},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1641, col: 1, offset: 62114},
			expr: &actionExpr{
				pos: position{line: 1641, col: 14, offset: 62127},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1641, col: 14, offset: 62127},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1641, col: 14, offset: 62127},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1641, col: 19, offset: 62132},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1641, col: 25, offset: 62138},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1641, col: 43, offset: 62156},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1645, col: 1, offset: 62221},
			expr: &actionExpr{
				pos: position{line: 1645, col: 21, offset: 62241},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1645, col: 21, offset: 62241},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1645, col: 30, offset: 62250},
						expr: &choiceExpr{
							pos: position{line: 1645, col: 31, offset: 62251},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1645, col: 31, offset: 62251},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 1645, col: 38, offset: 62258},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1645, col: 51, offset: 62271},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 1645, col: 59, offset: 62279},
									run: (*parser).callonIndexTermContent8,
									expr: &seqExpr{
										pos: position{line: 1645, col: 60, offset: 62280},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1645, col: 60, offset: 62280},
												expr: &litMatcher{
													pos:        position{line: 1645, col: 61, offset: 62281},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1645, col: 66, offset: 62286,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 1651, col: 1, offset: 62392},
			expr: &actionExpr{
				pos: position{line: 1651, col: 23, offset: 62414},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1651, col: 23, offset: 62414},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1651, col: 23, offset: 62414},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 1651, col: 29, offset: 62420},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1651, col: 36, offset: 62427},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1652, col: 5, offset: 62459},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1652, col: 11, offset: 62465},
								expr: &actionExpr{
									pos: position{line: 1652, col: 12, offset: 62466},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1652, col: 12, offset: 62466},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1652, col: 12, offset: 62466},
												expr: &ruleRefExpr{
													pos:  position{line: 1652, col: 12, offset: 62466},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1652, col: 19, offset: 62473},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1652, col: 23, offset: 62477},
												expr: &ruleRefExpr{
													pos:  position{line: 1652, col: 23, offset: 62477},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1652, col: 30, offset: 62484},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1652, col: 39, offset: 62493},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1653, col: 5, offset: 62551},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1653, col: 11, offset: 62557},
								expr: &actionExpr{
									pos: position{line: 1653, col: 12, offset: 62558},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1653, col: 12, offset: 62558},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1653, col: 12, offset: 62558},
												expr: &ruleRefExpr{
													pos:  position{line: 1653, col: 12, offset: 62558},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1653, col: 19, offset: 62565},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1653, col: 23, offset: 62569},
												expr: &ruleRefExpr{
													pos:  position{line: 1653, col: 23, offset: 62569},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1653, col: 30, offset: 62576},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1653, col: 39, offset: 62585},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1654, col: 5, offset: 62643},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 1658, col: 1, offset: 62722},
			expr: &actionExpr{
				pos: position{line: 1658, col: 30, offset: 62751},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1658, col: 30, offset: 62751},
					expr: &choiceExpr{
						pos: position{line: 1658, col: 31, offset: 62752},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1658, col: 31, offset: 62752},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 1658, col: 42, offset: 62763},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1665, col: 1, offset: 62912},
			expr: &actionExpr{
				pos: position{line: 1665, col: 14, offset: 62925},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1665, col: 14, offset: 62925},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1665, col: 14, offset: 62925},
							expr: &ruleRefExpr{
								pos:  position{line: 1665, col: 15, offset: 62926},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1665, col: 19, offset: 62930},
							expr: &ruleRefExpr{
								pos:  position{line: 1665, col: 19, offset: 62930},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1665, col: 26, offset: 62937},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1672, col: 1, offset: 63084},
			expr: &charClassMatcher{
				pos:        position{line: 1672, col: 13, offset: 63096},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1674, col: 1, offset: 63106},
			expr: &choiceExpr{
				pos: position{line: 1674, col: 16, offset: 63121},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1674, col: 16, offset: 63121},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1674, col: 22, offset: 63127},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1674, col: 28, offset: 63133},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1674, col: 34, offset: 63139},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1674, col: 40, offset: 63145},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1674, col: 46, offset: 63151},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1676, col: 1, offset: 63157},
			expr: &actionExpr{
				pos: position{line: 1676, col: 14, offset: 63170},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1676, col: 14, offset: 63170},
					expr: &charClassMatcher{
						pos:        position{line: 1676, col: 14, offset: 63170},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1680, col: 1, offset: 63216},
			expr: &choiceExpr{
				pos: position{line: 1684, col: 5, offset: 63544},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1684, col: 5, offset: 63544},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1684, col: 5, offset: 63544},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1684, col: 5, offset: 63544},
									expr: &charClassMatcher{
										pos:        position{line: 1684, col: 5, offset: 63544},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1684, col: 15, offset: 63554},
									expr: &choiceExpr{
										pos: position{line: 1684, col: 17, offset: 63556},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1684, col: 17, offset: 63556},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1684, col: 30, offset: 63569},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1686, col: 9, offset: 63639},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1686, col: 9, offset: 63639},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1686, col: 9, offset: 63639},
									expr: &charClassMatcher{
										pos:        position{line: 1686, col: 9, offset: 63639},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1686, col: 19, offset: 63649},
									expr: &seqExpr{
										pos: position{line: 1686, col: 20, offset: 63650},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1686, col: 20, offset: 63650},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1686, col: 27, offset: 63657},
												expr: &charClassMatcher{
													pos:        position{line: 1686, col: 27, offset: 63657},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1690, col: 1, offset: 63733},
			expr: &choiceExpr{
				pos: position{line: 1691, col: 5, offset: 63814},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1691, col: 5, offset: 63814},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1691, col: 5, offset: 63814},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1691, col: 5, offset: 63814},
									expr: &charClassMatcher{
										pos:        position{line: 1691, col: 5, offset: 63814},
										val:        "[\\pL0-9,.?!;]",
										chars:      []rune{',', '.', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1691, col: 20, offset: 63829},
									expr: &choiceExpr{
										pos: position{line: 1691, col: 22, offset: 63831},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1691, col: 22, offset: 63831},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1691, col: 32, offset: 63841},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1693, col: 9, offset: 63911},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1696, col: 1, offset: 64011},
			expr: &actionExpr{
				pos: position{line: 1696, col: 12, offset: 64022},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1696, col: 12, offset: 64022},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1700, col: 1, offset: 64087},
			expr: &actionExpr{
				pos: position{line: 1700, col: 17, offset: 64103},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1700, col: 17, offset: 64103},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1700, col: 22, offset: 64108},
						expr: &choiceExpr{
							pos: position{line: 1700, col: 23, offset: 64109},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1700, col: 23, offset: 64109},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1700, col: 34, offset: 64120},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1704, col: 1, offset: 64204},
			expr: &actionExpr{
				pos: position{line: 1704, col: 25, offset: 64228},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1704, col: 25, offset: 64228},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1704, col: 30, offset: 64233},
						expr: &charClassMatcher{
							pos:        position{line: 1704, col: 31, offset: 64234},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1708, col: 1, offset: 64306},
			expr: &actionExpr{
				pos: position{line: 1708, col: 13, offset: 64318},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 1708, col: 13, offset: 64318},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1708, col: 13, offset: 64318},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 1708, col: 20, offset: 64325},
								expr: &ruleRefExpr{
									pos:  position{line: 1708, col: 21, offset: 64326},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1708, col: 34, offset: 64339},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1708, col: 39, offset: 64344},
								expr: &choiceExpr{
									pos: position{line: 1708, col: 40, offset: 64345},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1708, col: 40, offset: 64345},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1708, col: 51, offset: 64356},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 1712, col: 1, offset: 64444},
			expr: &actionExpr{
				pos: position{line: 1712, col: 23, offset: 64466},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 1712, col: 23, offset: 64466},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1712, col: 23, offset: 64466},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1712, col: 31, offset: 64474},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1712, col: 43, offset: 64486},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1712, col: 48, offset: 64491},
								expr: &choiceExpr{
									pos: position{line: 1712, col: 49, offset: 64492},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1712, col: 49, offset: 64492},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1712, col: 60, offset: 64503},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1716, col: 1, offset: 64591},
			expr: &oneOrMoreExpr{
				pos: position{line: 1716, col: 13, offset: 64603},
				expr: &charClassMatcher{
					pos:        position{line: 1716, col: 14, offset: 64604},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 1718, col: 1, offset: 64738},
			expr: &actionExpr{
				pos: position{line: 1718, col: 21, offset: 64758},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 1718, col: 21, offset: 64758},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1718, col: 21, offset: 64758},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1718, col: 29, offset: 64766},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1718, col: 41, offset: 64778},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1718, col: 47, offset: 64784},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 1723, col: 1, offset: 65032},
			expr: &oneOrMoreExpr{
				pos: position{line: 1723, col: 22, offset: 65053},
				expr: &charClassMatcher{
					pos:        position{line: 1723, col: 23, offset: 65054},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1725, col: 1, offset: 65186},
			expr: &actionExpr{
				pos: position{line: 1725, col: 9, offset: 65194},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1725, col: 9, offset: 65194},
					expr: &charClassMatcher{
						pos:        position{line: 1725, col: 9, offset: 65194},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1729, col: 1, offset: 65242},
			expr: &choiceExpr{
				pos: position{line: 1729, col: 15, offset: 65256},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1729, col: 15, offset: 65256},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 1729, col: 27, offset: 65268},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 1729, col: 40, offset: 65281},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 1729, col: 51, offset: 65292},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 1729, col: 62, offset: 65303},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1731, col: 1, offset: 65314},
			expr: &actionExpr{
				pos: position{line: 1731, col: 7, offset: 65320},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1731, col: 7, offset: 65320},
					expr: &charClassMatcher{
						pos:        position{line: 1731, col: 7, offset: 65320},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1735, col: 1, offset: 65445},
			expr: &actionExpr{
				pos: position{line: 1735, col: 10, offset: 65454},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1735, col: 10, offset: 65454},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1739, col: 1, offset: 65496},
			expr: &actionExpr{
				pos: position{line: 1739, col: 11, offset: 65506},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1739, col: 11, offset: 65506},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1739, col: 11, offset: 65506},
							expr: &litMatcher{
								pos:        position{line: 1739, col: 11, offset: 65506},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1739, col: 16, offset: 65511},
							expr: &ruleRefExpr{
								pos:  position{line: 1739, col: 16, offset: 65511},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 1743, col: 1, offset: 65563},
			expr: &choiceExpr{
				pos: position{line: 1743, col: 10, offset: 65572},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1743, col: 10, offset: 65572},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 1743, col: 16, offset: 65578},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 1743, col: 16, offset: 65578},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1747, col: 1, offset: 65619},
			expr: &choiceExpr{
				pos: position{line: 1747, col: 12, offset: 65630},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1747, col: 12, offset: 65630},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 1747, col: 21, offset: 65639},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 1747, col: 28, offset: 65646},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1749, col: 1, offset: 65652},
			expr: &notExpr{
				pos: position{line: 1749, col: 8, offset: 65659},
				expr: &anyMatcher{
					line: 1749, col: 9, offset: 65660,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1751, col: 1, offset: 65663},
			expr: &choiceExpr{
				pos: position{line: 1751, col: 8, offset: 65670},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1751, col: 8, offset: 65670},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1751, col: 18, offset: 65680},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["name"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID11(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID11(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.Attributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {
	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph26(stack["attributes"])
}

func (c *current) onParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onParagraph31(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph31(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockVerbatimContent2(stack["content"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onContinuedParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextStringElement1()
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText16(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText16(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextStringElement1()
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextStringElement1()
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText13(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText13(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextStringElement1()
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextStringElement1()
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText13(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText13(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	// anything except EOL, space, monospace and subscript/superscript delimiters. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextStringElement1()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement18(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement18(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {
	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonFencedBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockVerbatimContent2(stack["content"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonListingBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockVerbatimContent2(stack["content"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonExampleBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockVerbatimContent2(stack["content"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["content"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind, found := attributes.(types.Attributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return found && kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonVerseBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockVerbatimContent2(stack["content"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonSidebarBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockVerbatimContent2(stack["content"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonPassthroughBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockVerbatimContent2(stack["content"])
}

func (c *current) onNormalBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlockElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonCommentBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockVerbatimContent2(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {
	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent8()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
