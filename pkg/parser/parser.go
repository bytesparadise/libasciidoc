// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocRawDocument",
			pos:  position{line: 17, col: 1, offset: 335},
			expr: &actionExpr{
				pos: position{line: 17, col: 24, offset: 358},
				run: (*parser).callonAsciidocRawDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 24, offset: 358},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 24, offset: 358},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 37, offset: 371},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 37, offset: 371},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 51, offset: 385},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 59, offset: 393},
								name: "AsciidocDocumentRawBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 86, offset: 420},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 22, col: 1, offset: 519},
			expr: &actionExpr{
				pos: position{line: 22, col: 21, offset: 539},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 22, col: 21, offset: 539},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 22, col: 21, offset: 539},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 22, col: 29, offset: 547},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 22, col: 50, offset: 568},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawFile",
			pos:  position{line: 27, col: 1, offset: 686},
			expr: &actionExpr{
				pos: position{line: 27, col: 12, offset: 697},
				run: (*parser).callonRawFile1,
				expr: &seqExpr{
					pos: position{line: 27, col: 12, offset: 697},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 27, col: 12, offset: 697},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 27, col: 20, offset: 705},
								name: "RawFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 27, col: 36, offset: 721},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 33, col: 1, offset: 865},
			expr: &actionExpr{
				pos: position{line: 33, col: 17, offset: 881},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 33, col: 17, offset: 881},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 17, offset: 881},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 33, col: 25, offset: 889},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 33, col: 45, offset: 909},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentRawBlocks",
			pos:  position{line: 40, col: 1, offset: 1090},
			expr: &actionExpr{
				pos: position{line: 40, col: 30, offset: 1119},
				run: (*parser).callonAsciidocDocumentRawBlocks1,
				expr: &seqExpr{
					pos: position{line: 40, col: 30, offset: 1119},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 40, col: 30, offset: 1119},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 40, col: 38, offset: 1127},
								expr: &ruleRefExpr{
									pos:  position{line: 40, col: 38, offset: 1127},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 40, col: 55, offset: 1144},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 40, col: 63, offset: 1152},
								expr: &ruleRefExpr{
									pos:  position{line: 40, col: 63, offset: 1152},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 49, col: 1, offset: 1404},
			expr: &choiceExpr{
				pos: position{line: 50, col: 9, offset: 1433},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 50, col: 9, offset: 1433},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1498},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1519},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1545},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1597},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1615},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1640},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1664},
						name: "RawVerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1692},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1716},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1742},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1771},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 62, col: 11, offset: 1797},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 63, col: 11, offset: 1832},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 64, col: 11, offset: 1856},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 65, col: 11, offset: 1888},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 66, col: 11, offset: 1914},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 11, offset: 1951},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 68, col: 11, offset: 1976},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 69, col: 11, offset: 2007},
						name: "RawParagraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 72, col: 1, offset: 2038},
			expr: &labeledExpr{
				pos:   position{line: 72, col: 47, offset: 2084},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 72, col: 54, offset: 2091},
					expr: &ruleRefExpr{
						pos:  position{line: 72, col: 55, offset: 2092},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 74, col: 1, offset: 2129},
			expr: &actionExpr{
				pos: position{line: 74, col: 38, offset: 2166},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 74, col: 38, offset: 2166},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 74, col: 38, offset: 2166},
							expr: &ruleRefExpr{
								pos:  position{line: 74, col: 39, offset: 2167},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 75, col: 5, offset: 2176},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 76, col: 9, offset: 2192},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 76, col: 9, offset: 2192},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2213},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2238},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2289},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2313},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 11, offset: 2341},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 11, offset: 2365},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 83, col: 11, offset: 2391},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 84, col: 11, offset: 2420},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 85, col: 11, offset: 2446},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 86, col: 11, offset: 2481},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 87, col: 11, offset: 2505},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 88, col: 11, offset: 2537},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 89, col: 11, offset: 2563},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 90, col: 11, offset: 2600},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 91, col: 11, offset: 2625},
										name: "RawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 95, col: 1, offset: 2666},
			expr: &labeledExpr{
				pos:   position{line: 95, col: 23, offset: 2688},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 95, col: 30, offset: 2695},
					expr: &ruleRefExpr{
						pos:  position{line: 95, col: 31, offset: 2696},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 97, col: 1, offset: 2717},
			expr: &actionExpr{
				pos: position{line: 97, col: 22, offset: 2738},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 97, col: 22, offset: 2738},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 97, col: 22, offset: 2738},
							expr: &ruleRefExpr{
								pos:  position{line: 97, col: 23, offset: 2739},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 98, col: 5, offset: 2748},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 98, col: 12, offset: 2755},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 98, col: 12, offset: 2755},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 98, col: 24, offset: 2767},
										name: "RawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 105, col: 1, offset: 2916},
			expr: &ruleRefExpr{
				pos:  position{line: 105, col: 16, offset: 2931},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 107, col: 1, offset: 2949},
			expr: &actionExpr{
				pos: position{line: 107, col: 20, offset: 2968},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 107, col: 20, offset: 2968},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 107, col: 20, offset: 2968},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 107, col: 41, offset: 2989},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 107, col: 49, offset: 2997},
								expr: &ruleRefExpr{
									pos:  position{line: 107, col: 50, offset: 2998},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 75, offset: 3023},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 111, col: 1, offset: 3103},
			expr: &seqExpr{
				pos: position{line: 111, col: 26, offset: 3128},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 111, col: 26, offset: 3128},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 111, col: 32, offset: 3134},
						expr: &ruleRefExpr{
							pos:  position{line: 111, col: 32, offset: 3134},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 111, col: 39, offset: 3141},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 113, col: 1, offset: 3146},
			expr: &actionExpr{
				pos: position{line: 113, col: 27, offset: 3172},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 113, col: 27, offset: 3172},
					expr: &oneOrMoreExpr{
						pos: position{line: 113, col: 28, offset: 3173},
						expr: &seqExpr{
							pos: position{line: 113, col: 29, offset: 3174},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 113, col: 29, offset: 3174},
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 30, offset: 3175},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 113, col: 51, offset: 3196,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 120, col: 1, offset: 3362},
			expr: &actionExpr{
				pos: position{line: 120, col: 19, offset: 3380},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 120, col: 19, offset: 3380},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 120, col: 19, offset: 3380},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 120, col: 23, offset: 3384},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 23, offset: 3384},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 120, col: 30, offset: 3391},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 37, offset: 3398},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 120, col: 52, offset: 3413},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 120, col: 56, offset: 3417},
								expr: &ruleRefExpr{
									pos:  position{line: 120, col: 56, offset: 3417},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 120, col: 74, offset: 3435},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 121, col: 9, offset: 3447},
							expr: &choiceExpr{
								pos: position{line: 121, col: 10, offset: 3448},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 121, col: 10, offset: 3448},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 121, col: 10, offset: 3448},
												expr: &ruleRefExpr{
													pos:  position{line: 121, col: 10, offset: 3448},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 121, col: 17, offset: 3455},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 121, col: 37, offset: 3475},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 122, col: 9, offset: 3498},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 122, col: 18, offset: 3507},
								expr: &ruleRefExpr{
									pos:  position{line: 122, col: 18, offset: 3507},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 123, col: 9, offset: 3534},
							expr: &choiceExpr{
								pos: position{line: 123, col: 10, offset: 3535},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 123, col: 10, offset: 3535},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 123, col: 10, offset: 3535},
												expr: &ruleRefExpr{
													pos:  position{line: 123, col: 10, offset: 3535},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 123, col: 17, offset: 3542},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 123, col: 37, offset: 3562},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 124, col: 9, offset: 3585},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 124, col: 19, offset: 3595},
								expr: &ruleRefExpr{
									pos:  position{line: 124, col: 19, offset: 3595},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 128, col: 1, offset: 3696},
			expr: &choiceExpr{
				pos: position{line: 128, col: 20, offset: 3715},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 128, col: 20, offset: 3715},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 128, col: 48, offset: 3743},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 130, col: 1, offset: 3773},
			expr: &actionExpr{
				pos: position{line: 130, col: 30, offset: 3802},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 130, col: 30, offset: 3802},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 130, col: 30, offset: 3802},
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 30, offset: 3802},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 130, col: 37, offset: 3809},
							expr: &litMatcher{
								pos:        position{line: 130, col: 38, offset: 3810},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 130, col: 42, offset: 3814},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 130, col: 51, offset: 3823},
								expr: &ruleRefExpr{
									pos:  position{line: 130, col: 51, offset: 3823},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 68, offset: 3840},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 134, col: 1, offset: 3910},
			expr: &actionExpr{
				pos: position{line: 134, col: 33, offset: 3942},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 134, col: 33, offset: 3942},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 134, col: 33, offset: 3942},
							expr: &ruleRefExpr{
								pos:  position{line: 134, col: 33, offset: 3942},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 134, col: 40, offset: 3949},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 134, col: 51, offset: 3960},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 134, col: 59, offset: 3968},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 134, col: 75, offset: 3984},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 138, col: 1, offset: 4063},
			expr: &actionExpr{
				pos: position{line: 138, col: 19, offset: 4081},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 138, col: 19, offset: 4081},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 138, col: 19, offset: 4081},
							expr: &ruleRefExpr{
								pos:  position{line: 138, col: 19, offset: 4081},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 138, col: 26, offset: 4088},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 138, col: 36, offset: 4098},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 138, col: 56, offset: 4118},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 138, col: 62, offset: 4124},
								expr: &ruleRefExpr{
									pos:  position{line: 138, col: 63, offset: 4125},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 138, col: 85, offset: 4147},
							expr: &ruleRefExpr{
								pos:  position{line: 138, col: 85, offset: 4147},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 138, col: 92, offset: 4154},
							expr: &litMatcher{
								pos:        position{line: 138, col: 92, offset: 4154},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 138, col: 97, offset: 4159},
							expr: &ruleRefExpr{
								pos:  position{line: 138, col: 97, offset: 4159},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 143, col: 1, offset: 4304},
			expr: &actionExpr{
				pos: position{line: 143, col: 23, offset: 4326},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 143, col: 23, offset: 4326},
					expr: &charClassMatcher{
						pos:        position{line: 143, col: 23, offset: 4326},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 147, col: 1, offset: 4373},
			expr: &actionExpr{
				pos: position{line: 147, col: 24, offset: 4396},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 147, col: 24, offset: 4396},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 147, col: 24, offset: 4396},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 147, col: 28, offset: 4400},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 147, col: 35, offset: 4407},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 147, col: 36, offset: 4408},
									expr: &charClassMatcher{
										pos:        position{line: 147, col: 36, offset: 4408},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 149, col: 4, offset: 4455},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 155, col: 1, offset: 4616},
			expr: &actionExpr{
				pos: position{line: 155, col: 21, offset: 4636},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 155, col: 21, offset: 4636},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 155, col: 21, offset: 4636},
							expr: &ruleRefExpr{
								pos:  position{line: 155, col: 21, offset: 4636},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 155, col: 28, offset: 4643},
							expr: &litMatcher{
								pos:        position{line: 155, col: 29, offset: 4644},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 155, col: 33, offset: 4648},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 156, col: 9, offset: 4667},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 156, col: 10, offset: 4668},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 156, col: 10, offset: 4668},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 156, col: 10, offset: 4668},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 156, col: 21, offset: 4679},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 156, col: 45, offset: 4703},
													expr: &litMatcher{
														pos:        position{line: 156, col: 45, offset: 4703},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 156, col: 50, offset: 4708},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 156, col: 58, offset: 4716},
														expr: &ruleRefExpr{
															pos:  position{line: 156, col: 59, offset: 4717},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 156, col: 82, offset: 4740},
													expr: &litMatcher{
														pos:        position{line: 156, col: 82, offset: 4740},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 156, col: 87, offset: 4745},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 156, col: 97, offset: 4755},
														expr: &ruleRefExpr{
															pos:  position{line: 156, col: 98, offset: 4756},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 158, col: 15, offset: 4873},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 158, col: 15, offset: 4873},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 158, col: 15, offset: 4873},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 158, col: 24, offset: 4882},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 158, col: 46, offset: 4904},
													expr: &litMatcher{
														pos:        position{line: 158, col: 46, offset: 4904},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 158, col: 51, offset: 4909},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 158, col: 61, offset: 4919},
														expr: &ruleRefExpr{
															pos:  position{line: 158, col: 62, offset: 4920},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 160, col: 13, offset: 5029},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 165, col: 1, offset: 5159},
			expr: &choiceExpr{
				pos: position{line: 165, col: 27, offset: 5185},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 165, col: 27, offset: 5185},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 165, col: 27, offset: 5185},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 165, col: 27, offset: 5185},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 165, col: 32, offset: 5190},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 165, col: 39, offset: 5197},
									expr: &charClassMatcher{
										pos:        position{line: 165, col: 39, offset: 5197},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 167, col: 5, offset: 5245},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 167, col: 5, offset: 5245},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 167, col: 5, offset: 5245},
									expr: &litMatcher{
										pos:        position{line: 167, col: 5, offset: 5245},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 167, col: 11, offset: 5251},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 167, col: 18, offset: 5258},
									expr: &charClassMatcher{
										pos:        position{line: 167, col: 18, offset: 5258},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 167, col: 29, offset: 5269},
									expr: &ruleRefExpr{
										pos:  position{line: 167, col: 29, offset: 5269},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 167, col: 36, offset: 5276},
									expr: &litMatcher{
										pos:        position{line: 167, col: 37, offset: 5277},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 171, col: 1, offset: 5317},
			expr: &actionExpr{
				pos: position{line: 171, col: 25, offset: 5341},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 171, col: 25, offset: 5341},
					expr: &charClassMatcher{
						pos:        position{line: 171, col: 25, offset: 5341},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 175, col: 1, offset: 5387},
			expr: &actionExpr{
				pos: position{line: 175, col: 27, offset: 5413},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 175, col: 27, offset: 5413},
					expr: &charClassMatcher{
						pos:        position{line: 175, col: 27, offset: 5413},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 182, col: 1, offset: 5566},
			expr: &actionExpr{
				pos: position{line: 182, col: 25, offset: 5590},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 182, col: 25, offset: 5590},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 182, col: 25, offset: 5590},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 182, col: 29, offset: 5594},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 182, col: 35, offset: 5600},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 182, col: 50, offset: 5615},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 183, col: 9, offset: 5628},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 183, col: 15, offset: 5634},
								expr: &actionExpr{
									pos: position{line: 183, col: 16, offset: 5635},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 183, col: 17, offset: 5636},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 183, col: 17, offset: 5636},
												expr: &ruleRefExpr{
													pos:  position{line: 183, col: 17, offset: 5636},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 183, col: 24, offset: 5643},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 183, col: 31, offset: 5650},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 185, col: 13, offset: 5724},
							expr: &ruleRefExpr{
								pos:  position{line: 185, col: 13, offset: 5724},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 185, col: 20, offset: 5731},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 192, col: 1, offset: 5971},
			expr: &actionExpr{
				pos: position{line: 192, col: 18, offset: 5988},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 192, col: 18, offset: 5988},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 192, col: 18, offset: 5988},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 192, col: 28, offset: 5998},
							expr: &charClassMatcher{
								pos:        position{line: 192, col: 29, offset: 5999},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 196, col: 1, offset: 6047},
			expr: &actionExpr{
				pos: position{line: 196, col: 30, offset: 6076},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 196, col: 30, offset: 6076},
					expr: &charClassMatcher{
						pos:        position{line: 196, col: 30, offset: 6076},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 200, col: 1, offset: 6121},
			expr: &choiceExpr{
				pos: position{line: 200, col: 19, offset: 6139},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 200, col: 19, offset: 6139},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 200, col: 19, offset: 6139},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 200, col: 19, offset: 6139},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 200, col: 24, offset: 6144},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 200, col: 30, offset: 6150},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 200, col: 45, offset: 6165},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 200, col: 49, offset: 6169},
									expr: &ruleRefExpr{
										pos:  position{line: 200, col: 49, offset: 6169},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 200, col: 56, offset: 6176},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 202, col: 5, offset: 6236},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 202, col: 5, offset: 6236},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 202, col: 5, offset: 6236},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 202, col: 9, offset: 6240},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 202, col: 15, offset: 6246},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 202, col: 30, offset: 6261},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 202, col: 35, offset: 6266},
									expr: &ruleRefExpr{
										pos:  position{line: 202, col: 35, offset: 6266},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 202, col: 42, offset: 6273},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 206, col: 1, offset: 6332},
			expr: &choiceExpr{
				pos: position{line: 206, col: 26, offset: 6357},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 206, col: 26, offset: 6357},
						name: "CounterSub",
					},
					&ruleRefExpr{
						pos:  position{line: 206, col: 39, offset: 6370},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 208, col: 1, offset: 6379},
			expr: &actionExpr{
				pos: position{line: 208, col: 12, offset: 6390},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 208, col: 12, offset: 6390},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 208, col: 12, offset: 6390},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 208, col: 16, offset: 6394},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 208, col: 21, offset: 6399},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 208, col: 35, offset: 6413},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub",
			pos:  position{line: 212, col: 1, offset: 6479},
			expr: &choiceExpr{
				pos: position{line: 212, col: 15, offset: 6493},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 212, col: 15, offset: 6493},
						name: "CounterSub1",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 29, offset: 6507},
						name: "CounterSub2",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 43, offset: 6521},
						name: "CounterSubAlpha",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 61, offset: 6539},
						name: "CounterSubAlpha2",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 80, offset: 6558},
						name: "CounterSubStart",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 98, offset: 6576},
						name: "CounterSubStart2",
					},
				},
			},
		},
		{
			name: "CounterSub1",
			pos:  position{line: 214, col: 1, offset: 6594},
			expr: &actionExpr{
				pos: position{line: 214, col: 16, offset: 6609},
				run: (*parser).callonCounterSub11,
				expr: &seqExpr{
					pos: position{line: 214, col: 16, offset: 6609},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 214, col: 16, offset: 6609},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 214, col: 28, offset: 6621},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 214, col: 33, offset: 6626},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 214, col: 47, offset: 6640},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub2",
			pos:  position{line: 218, col: 1, offset: 6716},
			expr: &actionExpr{
				pos: position{line: 218, col: 16, offset: 6731},
				run: (*parser).callonCounterSub21,
				expr: &seqExpr{
					pos: position{line: 218, col: 16, offset: 6731},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 218, col: 16, offset: 6731},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 29, offset: 6744},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 34, offset: 6749},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 218, col: 48, offset: 6763},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha",
			pos:  position{line: 222, col: 1, offset: 6838},
			expr: &actionExpr{
				pos: position{line: 222, col: 20, offset: 6857},
				run: (*parser).callonCounterSubAlpha1,
				expr: &seqExpr{
					pos: position{line: 222, col: 20, offset: 6857},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 222, col: 20, offset: 6857},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 222, col: 32, offset: 6869},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 37, offset: 6874},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 222, col: 51, offset: 6888},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 222, col: 55, offset: 6892},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 222, col: 61, offset: 6898},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 222, col: 70, offset: 6907},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha2",
			pos:  position{line: 226, col: 1, offset: 6985},
			expr: &actionExpr{
				pos: position{line: 226, col: 21, offset: 7005},
				run: (*parser).callonCounterSubAlpha21,
				expr: &seqExpr{
					pos: position{line: 226, col: 21, offset: 7005},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 226, col: 21, offset: 7005},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 226, col: 34, offset: 7018},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 39, offset: 7023},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 226, col: 53, offset: 7037},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 226, col: 57, offset: 7041},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 226, col: 63, offset: 7047},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 226, col: 72, offset: 7056},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart",
			pos:  position{line: 230, col: 1, offset: 7133},
			expr: &actionExpr{
				pos: position{line: 230, col: 20, offset: 7152},
				run: (*parser).callonCounterSubStart1,
				expr: &seqExpr{
					pos: position{line: 230, col: 20, offset: 7152},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 230, col: 20, offset: 7152},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 230, col: 32, offset: 7164},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 37, offset: 7169},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 230, col: 51, offset: 7183},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 230, col: 55, offset: 7187},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 230, col: 60, offset: 7192},
								run: (*parser).callonCounterSubStart8,
								expr: &oneOrMoreExpr{
									pos: position{line: 230, col: 60, offset: 7192},
									expr: &charClassMatcher{
										pos:        position{line: 230, col: 60, offset: 7192},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 230, col: 108, offset: 7240},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart2",
			pos:  position{line: 234, col: 1, offset: 7322},
			expr: &actionExpr{
				pos: position{line: 234, col: 21, offset: 7342},
				run: (*parser).callonCounterSubStart21,
				expr: &seqExpr{
					pos: position{line: 234, col: 21, offset: 7342},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 234, col: 21, offset: 7342},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 234, col: 34, offset: 7355},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 234, col: 39, offset: 7360},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 234, col: 53, offset: 7374},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 234, col: 57, offset: 7378},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 234, col: 62, offset: 7383},
								run: (*parser).callonCounterSubStart28,
								expr: &oneOrMoreExpr{
									pos: position{line: 234, col: 62, offset: 7383},
									expr: &charClassMatcher{
										pos:        position{line: 234, col: 62, offset: 7383},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 234, col: 110, offset: 7431},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 238, col: 1, offset: 7512},
			expr: &actionExpr{
				pos: position{line: 238, col: 15, offset: 7526},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 238, col: 15, offset: 7526},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 238, col: 15, offset: 7526},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 238, col: 21, offset: 7532},
								expr: &ruleRefExpr{
									pos:  position{line: 238, col: 22, offset: 7533},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 238, col: 41, offset: 7552},
							expr: &ruleRefExpr{
								pos:  position{line: 238, col: 41, offset: 7552},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 242, col: 1, offset: 7622},
			expr: &actionExpr{
				pos: position{line: 242, col: 21, offset: 7642},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 242, col: 21, offset: 7642},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 242, col: 21, offset: 7642},
							expr: &choiceExpr{
								pos: position{line: 242, col: 23, offset: 7644},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 242, col: 23, offset: 7644},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 242, col: 29, offset: 7650},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 243, col: 5, offset: 7727},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 243, col: 11, offset: 7733},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 243, col: 11, offset: 7733},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 244, col: 9, offset: 7754},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 245, col: 9, offset: 7778},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 246, col: 9, offset: 7815},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 247, col: 9, offset: 7843},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 248, col: 9, offset: 7871},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 249, col: 9, offset: 7898},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 250, col: 9, offset: 7925},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 251, col: 9, offset: 7962},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 252, col: 9, offset: 7998},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 256, col: 1, offset: 8101},
			expr: &actionExpr{
				pos: position{line: 256, col: 14, offset: 8114},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 256, col: 14, offset: 8114},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 256, col: 14, offset: 8114},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 256, col: 19, offset: 8119},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 256, col: 23, offset: 8123},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 256, col: 27, offset: 8127},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 256, col: 32, offset: 8132},
							expr: &ruleRefExpr{
								pos:  position{line: 256, col: 32, offset: 8132},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 256, col: 39, offset: 8139},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 260, col: 1, offset: 8191},
			expr: &actionExpr{
				pos: position{line: 260, col: 20, offset: 8210},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 260, col: 20, offset: 8210},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 260, col: 20, offset: 8210},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 260, col: 25, offset: 8215},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 29, offset: 8219},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 260, col: 33, offset: 8223},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 260, col: 38, offset: 8228},
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 38, offset: 8228},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 266, col: 1, offset: 8505},
			expr: &actionExpr{
				pos: position{line: 266, col: 17, offset: 8521},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 266, col: 17, offset: 8521},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 266, col: 17, offset: 8521},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 266, col: 21, offset: 8525},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 28, offset: 8532},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 266, col: 49, offset: 8553},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 49, offset: 8553},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 266, col: 56, offset: 8560},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 270, col: 1, offset: 8618},
			expr: &actionExpr{
				pos: position{line: 270, col: 24, offset: 8641},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 270, col: 24, offset: 8641},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 270, col: 24, offset: 8641},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 270, col: 32, offset: 8649},
							expr: &charClassMatcher{
								pos:        position{line: 270, col: 32, offset: 8649},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 276, col: 1, offset: 8903},
			expr: &actionExpr{
				pos: position{line: 276, col: 31, offset: 8933},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 276, col: 31, offset: 8933},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 276, col: 31, offset: 8933},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 276, col: 35, offset: 8937},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 276, col: 42, offset: 8944},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 276, col: 42, offset: 8944},
										expr: &ruleRefExpr{
											pos:  position{line: 276, col: 42, offset: 8944},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 276, col: 57, offset: 8959},
										expr: &ruleRefExpr{
											pos:  position{line: 276, col: 57, offset: 8959},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 276, col: 69, offset: 8971},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 276, col: 73, offset: 8975},
							expr: &ruleRefExpr{
								pos:  position{line: 276, col: 73, offset: 8975},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 276, col: 80, offset: 8982},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrs",
			pos:  position{line: 280, col: 1, offset: 9036},
			expr: &choiceExpr{
				pos: position{line: 280, col: 15, offset: 9050},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 280, col: 15, offset: 9050},
						name: "BlockAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 280, col: 31, offset: 9066},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 280, col: 46, offset: 9081},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttrList",
			pos:  position{line: 284, col: 1, offset: 9309},
			expr: &actionExpr{
				pos: position{line: 284, col: 18, offset: 9326},
				run: (*parser).callonBlockAttrList1,
				expr: &seqExpr{
					pos: position{line: 284, col: 18, offset: 9326},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 284, col: 18, offset: 9326},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 284, col: 22, offset: 9330},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 284, col: 29, offset: 9337},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 284, col: 29, offset: 9337},
										expr: &ruleRefExpr{
											pos:  position{line: 284, col: 29, offset: 9337},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 284, col: 45, offset: 9353},
										expr: &ruleRefExpr{
											pos:  position{line: 284, col: 45, offset: 9353},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 284, col: 60, offset: 9368},
										expr: &ruleRefExpr{
											pos:  position{line: 284, col: 60, offset: 9368},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 284, col: 82, offset: 9390},
										expr: &ruleRefExpr{
											pos:  position{line: 284, col: 82, offset: 9390},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 284, col: 104, offset: 9412},
										expr: &ruleRefExpr{
											pos:  position{line: 284, col: 104, offset: 9412},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 284, col: 116, offset: 9424},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 284, col: 120, offset: 9428},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 288, col: 1, offset: 9482},
			expr: &actionExpr{
				pos: position{line: 288, col: 19, offset: 9500},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 288, col: 19, offset: 9500},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 288, col: 25, offset: 9506},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 292, col: 1, offset: 9576},
			expr: &actionExpr{
				pos: position{line: 292, col: 25, offset: 9600},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 292, col: 25, offset: 9600},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 292, col: 25, offset: 9600},
							expr: &ruleRefExpr{
								pos:  position{line: 292, col: 25, offset: 9600},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 292, col: 32, offset: 9607},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 292, col: 36, offset: 9611},
							expr: &ruleRefExpr{
								pos:  position{line: 292, col: 36, offset: 9611},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 292, col: 43, offset: 9618},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 292, col: 49, offset: 9624},
								expr: &ruleRefExpr{
									pos:  position{line: 292, col: 49, offset: 9624},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 299, col: 1, offset: 9774},
			expr: &actionExpr{
				pos: position{line: 299, col: 25, offset: 9798},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 299, col: 25, offset: 9798},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 299, col: 25, offset: 9798},
							expr: &ruleRefExpr{
								pos:  position{line: 299, col: 25, offset: 9798},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 299, col: 32, offset: 9805},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 299, col: 36, offset: 9809},
							expr: &ruleRefExpr{
								pos:  position{line: 299, col: 36, offset: 9809},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 299, col: 43, offset: 9816},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 299, col: 49, offset: 9822},
								expr: &ruleRefExpr{
									pos:  position{line: 299, col: 49, offset: 9822},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 306, col: 1, offset: 9972},
			expr: &actionExpr{
				pos: position{line: 306, col: 21, offset: 9992},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 306, col: 21, offset: 9992},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 306, col: 21, offset: 9992},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 306, col: 33, offset: 10004},
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 33, offset: 10004},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 306, col: 40, offset: 10011},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 310, col: 1, offset: 10063},
			expr: &actionExpr{
				pos: position{line: 310, col: 30, offset: 10092},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 310, col: 30, offset: 10092},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 310, col: 30, offset: 10092},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 310, col: 39, offset: 10101},
							expr: &ruleRefExpr{
								pos:  position{line: 310, col: 39, offset: 10101},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 310, col: 46, offset: 10108},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 315, col: 1, offset: 10249},
			expr: &actionExpr{
				pos: position{line: 315, col: 30, offset: 10278},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 315, col: 30, offset: 10278},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 315, col: 30, offset: 10278},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 315, col: 34, offset: 10282},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 315, col: 37, offset: 10285},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 315, col: 53, offset: 10301},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 315, col: 57, offset: 10305},
							expr: &ruleRefExpr{
								pos:  position{line: 315, col: 57, offset: 10305},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 315, col: 64, offset: 10312},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 320, col: 1, offset: 10467},
			expr: &actionExpr{
				pos: position{line: 320, col: 21, offset: 10487},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 320, col: 21, offset: 10487},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 320, col: 21, offset: 10487},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 321, col: 5, offset: 10502},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 321, col: 14, offset: 10511},
								expr: &actionExpr{
									pos: position{line: 321, col: 15, offset: 10512},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 321, col: 15, offset: 10512},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 321, col: 15, offset: 10512},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 321, col: 19, offset: 10516},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 321, col: 24, offset: 10521},
													expr: &ruleRefExpr{
														pos:  position{line: 321, col: 25, offset: 10522},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 322, col: 5, offset: 10577},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 322, col: 12, offset: 10584},
								expr: &actionExpr{
									pos: position{line: 322, col: 13, offset: 10585},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 322, col: 13, offset: 10585},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 322, col: 13, offset: 10585},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 322, col: 17, offset: 10589},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 322, col: 22, offset: 10594},
													expr: &ruleRefExpr{
														pos:  position{line: 322, col: 23, offset: 10595},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 323, col: 5, offset: 10642},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 323, col: 9, offset: 10646},
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 9, offset: 10646},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 323, col: 16, offset: 10653},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 328, col: 1, offset: 10804},
			expr: &actionExpr{
				pos: position{line: 328, col: 19, offset: 10822},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 328, col: 19, offset: 10822},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 328, col: 19, offset: 10822},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 328, col: 23, offset: 10826},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 328, col: 34, offset: 10837},
								expr: &ruleRefExpr{
									pos:  position{line: 328, col: 35, offset: 10838},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 328, col: 54, offset: 10857},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 328, col: 58, offset: 10861},
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 58, offset: 10861},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 328, col: 65, offset: 10868},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 332, col: 1, offset: 10940},
			expr: &choiceExpr{
				pos: position{line: 332, col: 21, offset: 10960},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 332, col: 21, offset: 10960},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 332, col: 49, offset: 10988},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 334, col: 1, offset: 11018},
			expr: &actionExpr{
				pos: position{line: 334, col: 30, offset: 11047},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 334, col: 30, offset: 11047},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 334, col: 30, offset: 11047},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 334, col: 35, offset: 11052},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 334, col: 49, offset: 11066},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 334, col: 53, offset: 11070},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 334, col: 59, offset: 11076},
								expr: &ruleRefExpr{
									pos:  position{line: 334, col: 60, offset: 11077},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 334, col: 77, offset: 11094},
							expr: &litMatcher{
								pos:        position{line: 334, col: 77, offset: 11094},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 334, col: 82, offset: 11099},
							expr: &ruleRefExpr{
								pos:  position{line: 334, col: 82, offset: 11099},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 338, col: 1, offset: 11198},
			expr: &actionExpr{
				pos: position{line: 338, col: 33, offset: 11230},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 338, col: 33, offset: 11230},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 338, col: 33, offset: 11230},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 38, offset: 11235},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 338, col: 52, offset: 11249},
							expr: &litMatcher{
								pos:        position{line: 338, col: 52, offset: 11249},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 338, col: 57, offset: 11254},
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 57, offset: 11254},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 342, col: 1, offset: 11342},
			expr: &actionExpr{
				pos: position{line: 342, col: 17, offset: 11358},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 342, col: 17, offset: 11358},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 342, col: 17, offset: 11358},
							expr: &litMatcher{
								pos:        position{line: 342, col: 18, offset: 11359},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 342, col: 26, offset: 11367},
							expr: &litMatcher{
								pos:        position{line: 342, col: 27, offset: 11368},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 342, col: 35, offset: 11376},
							expr: &litMatcher{
								pos:        position{line: 342, col: 36, offset: 11377},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 342, col: 46, offset: 11387},
							expr: &oneOrMoreExpr{
								pos: position{line: 342, col: 48, offset: 11389},
								expr: &ruleRefExpr{
									pos:  position{line: 342, col: 48, offset: 11389},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 342, col: 56, offset: 11397},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 342, col: 61, offset: 11402},
								expr: &charClassMatcher{
									pos:        position{line: 342, col: 61, offset: 11402},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 342, col: 75, offset: 11416},
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 75, offset: 11416},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 346, col: 1, offset: 11459},
			expr: &actionExpr{
				pos: position{line: 346, col: 19, offset: 11477},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 346, col: 19, offset: 11477},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 346, col: 26, offset: 11484},
						expr: &charClassMatcher{
							pos:        position{line: 346, col: 26, offset: 11484},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 350, col: 1, offset: 11535},
			expr: &actionExpr{
				pos: position{line: 350, col: 29, offset: 11563},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 350, col: 29, offset: 11563},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 350, col: 29, offset: 11563},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 350, col: 36, offset: 11570},
								expr: &charClassMatcher{
									pos:        position{line: 350, col: 36, offset: 11570},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 350, col: 50, offset: 11584},
							expr: &litMatcher{
								pos:        position{line: 350, col: 51, offset: 11585},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 354, col: 1, offset: 11751},
			expr: &actionExpr{
				pos: position{line: 354, col: 20, offset: 11770},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 354, col: 20, offset: 11770},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 354, col: 20, offset: 11770},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 354, col: 29, offset: 11779},
							expr: &ruleRefExpr{
								pos:  position{line: 354, col: 29, offset: 11779},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 354, col: 36, offset: 11786},
							expr: &litMatcher{
								pos:        position{line: 354, col: 36, offset: 11786},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 354, col: 41, offset: 11791},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 354, col: 48, offset: 11798},
								expr: &ruleRefExpr{
									pos:  position{line: 354, col: 49, offset: 11799},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 354, col: 66, offset: 11816},
							expr: &litMatcher{
								pos:        position{line: 354, col: 66, offset: 11816},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 354, col: 71, offset: 11821},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 354, col: 77, offset: 11827},
								expr: &ruleRefExpr{
									pos:  position{line: 354, col: 78, offset: 11828},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 354, col: 95, offset: 11845},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 354, col: 99, offset: 11849},
							expr: &ruleRefExpr{
								pos:  position{line: 354, col: 99, offset: 11849},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 354, col: 106, offset: 11856},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 358, col: 1, offset: 11925},
			expr: &actionExpr{
				pos: position{line: 358, col: 20, offset: 11944},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 358, col: 20, offset: 11944},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 358, col: 20, offset: 11944},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 358, col: 29, offset: 11953},
							expr: &ruleRefExpr{
								pos:  position{line: 358, col: 29, offset: 11953},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 358, col: 36, offset: 11960},
							expr: &litMatcher{
								pos:        position{line: 358, col: 36, offset: 11960},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 358, col: 41, offset: 11965},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 358, col: 48, offset: 11972},
								expr: &ruleRefExpr{
									pos:  position{line: 358, col: 49, offset: 11973},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 358, col: 66, offset: 11990},
							expr: &litMatcher{
								pos:        position{line: 358, col: 66, offset: 11990},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 358, col: 71, offset: 11995},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 358, col: 77, offset: 12001},
								expr: &ruleRefExpr{
									pos:  position{line: 358, col: 78, offset: 12002},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 358, col: 95, offset: 12019},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 358, col: 99, offset: 12023},
							expr: &ruleRefExpr{
								pos:  position{line: 358, col: 99, offset: 12023},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 358, col: 106, offset: 12030},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 362, col: 1, offset: 12117},
			expr: &actionExpr{
				pos: position{line: 362, col: 19, offset: 12135},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 362, col: 20, offset: 12136},
					expr: &charClassMatcher{
						pos:        position{line: 362, col: 20, offset: 12136},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 366, col: 1, offset: 12185},
			expr: &actionExpr{
				pos: position{line: 366, col: 20, offset: 12204},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &seqExpr{
					pos: position{line: 366, col: 20, offset: 12204},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 366, col: 20, offset: 12204},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 366, col: 24, offset: 12208},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 366, col: 31, offset: 12215},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 366, col: 31, offset: 12215},
										expr: &ruleRefExpr{
											pos:  position{line: 366, col: 31, offset: 12215},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 366, col: 51, offset: 12235},
										expr: &ruleRefExpr{
											pos:  position{line: 366, col: 51, offset: 12235},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 366, col: 66, offset: 12250},
										expr: &ruleRefExpr{
											pos:  position{line: 366, col: 66, offset: 12250},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 366, col: 78, offset: 12262},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 370, col: 1, offset: 12316},
			expr: &actionExpr{
				pos: position{line: 370, col: 23, offset: 12338},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &labeledExpr{
					pos:   position{line: 370, col: 23, offset: 12338},
					label: "role",
					expr: &ruleRefExpr{
						pos:  position{line: 370, col: 28, offset: 12343},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 374, col: 1, offset: 12411},
			expr: &actionExpr{
				pos: position{line: 374, col: 25, offset: 12435},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 374, col: 25, offset: 12435},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 374, col: 25, offset: 12435},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 374, col: 36, offset: 12446},
								expr: &ruleRefExpr{
									pos:  position{line: 374, col: 37, offset: 12447},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 374, col: 56, offset: 12466},
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 56, offset: 12466},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 374, col: 67, offset: 12477},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 378, col: 1, offset: 12585},
			expr: &choiceExpr{
				pos: position{line: 378, col: 18, offset: 12602},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 378, col: 18, offset: 12602},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 378, col: 36, offset: 12620},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 378, col: 58, offset: 12642},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 380, col: 1, offset: 12661},
			expr: &actionExpr{
				pos: position{line: 380, col: 24, offset: 12684},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 380, col: 24, offset: 12684},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 380, col: 24, offset: 12684},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 380, col: 28, offset: 12688},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 380, col: 35, offset: 12695},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 380, col: 50, offset: 12710},
							expr: &charClassMatcher{
								pos:        position{line: 380, col: 51, offset: 12711},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 384, col: 1, offset: 12780},
			expr: &actionExpr{
				pos: position{line: 384, col: 20, offset: 12799},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 384, col: 20, offset: 12799},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 384, col: 20, offset: 12799},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 384, col: 24, offset: 12803},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 27, offset: 12806},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 384, col: 42, offset: 12821},
							expr: &charClassMatcher{
								pos:        position{line: 384, col: 43, offset: 12822},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 388, col: 1, offset: 12883},
			expr: &actionExpr{
				pos: position{line: 388, col: 22, offset: 12904},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 388, col: 22, offset: 12904},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 388, col: 22, offset: 12904},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 388, col: 26, offset: 12908},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 388, col: 31, offset: 12913},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 388, col: 46, offset: 12928},
							expr: &charClassMatcher{
								pos:        position{line: 388, col: 47, offset: 12929},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 393, col: 1, offset: 13038},
			expr: &actionExpr{
				pos: position{line: 393, col: 20, offset: 13057},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 393, col: 20, offset: 13057},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 393, col: 20, offset: 13057},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 393, col: 26, offset: 13063},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 393, col: 41, offset: 13078},
							expr: &charClassMatcher{
								pos:        position{line: 393, col: 42, offset: 13079},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineVal",
			pos:  position{line: 397, col: 1, offset: 13124},
			expr: &choiceExpr{
				pos: position{line: 397, col: 14, offset: 13137},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 397, col: 14, offset: 13137},
						name: "AttrEmpty",
					},
					&ruleRefExpr{
						pos:  position{line: 397, col: 26, offset: 13149},
						name: "AttrValSQ",
					},
					&ruleRefExpr{
						pos:  position{line: 397, col: 38, offset: 13161},
						name: "AttrValDQ",
					},
					&ruleRefExpr{
						pos:  position{line: 397, col: 50, offset: 13173},
						name: "AttrValPosFB",
					},
				},
			},
		},
		{
			name: "NamedAttrs",
			pos:  position{line: 399, col: 1, offset: 13187},
			expr: &actionExpr{
				pos: position{line: 399, col: 15, offset: 13201},
				run: (*parser).callonNamedAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 399, col: 15, offset: 13201},
					label: "attrs",
					expr: &zeroOrMoreExpr{
						pos: position{line: 399, col: 21, offset: 13207},
						expr: &ruleRefExpr{
							pos:  position{line: 399, col: 21, offset: 13207},
							name: "NamedAttrPair",
						},
					},
				},
			},
		},
		{
			name: "NamedAttrPair",
			pos:  position{line: 403, col: 1, offset: 13272},
			expr: &actionExpr{
				pos: position{line: 403, col: 18, offset: 13289},
				run: (*parser).callonNamedAttrPair1,
				expr: &seqExpr{
					pos: position{line: 403, col: 18, offset: 13289},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 403, col: 18, offset: 13289},
							expr: &litMatcher{
								pos:        position{line: 403, col: 18, offset: 13289},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 403, col: 23, offset: 13294},
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 23, offset: 13294},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 403, col: 30, offset: 13301},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 32, offset: 13303},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 403, col: 45, offset: 13316},
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 45, offset: 13316},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 403, col: 52, offset: 13323},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 403, col: 56, offset: 13327},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 403, col: 59, offset: 13330},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 403, col: 59, offset: 13330},
										name: "AttrValDQ",
									},
									&ruleRefExpr{
										pos:  position{line: 403, col: 71, offset: 13342},
										name: "AttrValSQ",
									},
									&ruleRefExpr{
										pos:  position{line: 403, col: 83, offset: 13354},
										name: "AttrValNamedFB",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrEmpty",
			pos:  position{line: 408, col: 1, offset: 13543},
			expr: &actionExpr{
				pos: position{line: 408, col: 14, offset: 13556},
				run: (*parser).callonAttrEmpty1,
				expr: &seqExpr{
					pos: position{line: 408, col: 14, offset: 13556},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 408, col: 14, offset: 13556},
							expr: &charClassMatcher{
								pos:        position{line: 408, col: 14, offset: 13556},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 408, col: 21, offset: 13563},
							expr: &charClassMatcher{
								pos:        position{line: 408, col: 22, offset: 13564},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQ",
			pos:  position{line: 414, col: 1, offset: 13700},
			expr: &actionExpr{
				pos: position{line: 414, col: 14, offset: 13713},
				run: (*parser).callonAttrValSQ1,
				expr: &seqExpr{
					pos: position{line: 414, col: 14, offset: 13713},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 414, col: 14, offset: 13713},
							expr: &ruleRefExpr{
								pos:  position{line: 414, col: 14, offset: 13713},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 414, col: 21, offset: 13720},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 414, col: 25, offset: 13724},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 414, col: 29, offset: 13728},
								name: "AttrValSQin",
							},
						},
						&litMatcher{
							pos:        position{line: 414, col: 41, offset: 13740},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 414, col: 45, offset: 13744},
							expr: &ruleRefExpr{
								pos:  position{line: 414, col: 45, offset: 13744},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 414, col: 52, offset: 13751},
							expr: &charClassMatcher{
								pos:        position{line: 414, col: 53, offset: 13752},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQin",
			pos:  position{line: 416, col: 1, offset: 13779},
			expr: &actionExpr{
				pos: position{line: 416, col: 16, offset: 13794},
				run: (*parser).callonAttrValSQin1,
				expr: &labeledExpr{
					pos:   position{line: 416, col: 16, offset: 13794},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 416, col: 20, offset: 13798},
						expr: &choiceExpr{
							pos: position{line: 416, col: 22, offset: 13800},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 416, col: 22, offset: 13800},
									name: "AttrValSQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 416, col: 37, offset: 13815},
									expr: &charClassMatcher{
										pos:        position{line: 416, col: 37, offset: 13815},
										val:        "[^\\r\\n'\\\\]",
										chars:      []rune{'\r', '\n', '\'', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 416, col: 51, offset: 13829},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQEsc",
			pos:  position{line: 418, col: 1, offset: 13869},
			expr: &actionExpr{
				pos: position{line: 418, col: 17, offset: 13885},
				run: (*parser).callonAttrValSQEsc1,
				expr: &litMatcher{
					pos:        position{line: 418, col: 17, offset: 13885},
					val:        "\\'",
					ignoreCase: false,
					want:       "\"\\\\'\"",
				},
			},
		},
		{
			name: "AttrValDQ",
			pos:  position{line: 421, col: 1, offset: 13945},
			expr: &actionExpr{
				pos: position{line: 421, col: 14, offset: 13958},
				run: (*parser).callonAttrValDQ1,
				expr: &seqExpr{
					pos: position{line: 421, col: 14, offset: 13958},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 421, col: 14, offset: 13958},
							expr: &ruleRefExpr{
								pos:  position{line: 421, col: 14, offset: 13958},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 421, col: 21, offset: 13965},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 421, col: 25, offset: 13969},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 421, col: 29, offset: 13973},
								name: "AttrValDQin",
							},
						},
						&litMatcher{
							pos:        position{line: 421, col: 41, offset: 13985},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 421, col: 45, offset: 13989},
							expr: &ruleRefExpr{
								pos:  position{line: 421, col: 45, offset: 13989},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQin",
			pos:  position{line: 423, col: 1, offset: 14017},
			expr: &actionExpr{
				pos: position{line: 423, col: 16, offset: 14032},
				run: (*parser).callonAttrValDQin1,
				expr: &labeledExpr{
					pos:   position{line: 423, col: 16, offset: 14032},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 423, col: 20, offset: 14036},
						expr: &choiceExpr{
							pos: position{line: 423, col: 22, offset: 14038},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 423, col: 22, offset: 14038},
									name: "AttrValDQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 423, col: 37, offset: 14053},
									expr: &charClassMatcher{
										pos:        position{line: 423, col: 37, offset: 14053},
										val:        "[^\\r\\n\"\\\\]",
										chars:      []rune{'\r', '\n', '"', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 423, col: 51, offset: 14067},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQEsc",
			pos:  position{line: 425, col: 1, offset: 14107},
			expr: &actionExpr{
				pos: position{line: 425, col: 17, offset: 14123},
				run: (*parser).callonAttrValDQEsc1,
				expr: &litMatcher{
					pos:        position{line: 425, col: 17, offset: 14123},
					val:        "\\\"",
					ignoreCase: false,
					want:       "\"\\\\\\\"\"",
				},
			},
		},
		{
			name: "AttrValPosFB",
			pos:  position{line: 428, col: 1, offset: 14214},
			expr: &actionExpr{
				pos: position{line: 428, col: 17, offset: 14230},
				run: (*parser).callonAttrValPosFB1,
				expr: &seqExpr{
					pos: position{line: 428, col: 17, offset: 14230},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 428, col: 17, offset: 14230},
							expr: &charClassMatcher{
								pos:        position{line: 428, col: 17, offset: 14230},
								val:        "[^,=\\r\\n\\]]",
								chars:      []rune{',', '=', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 428, col: 30, offset: 14243},
							expr: &charClassMatcher{
								pos:        position{line: 428, col: 31, offset: 14244},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValNamedFB",
			pos:  position{line: 431, col: 1, offset: 14355},
			expr: &actionExpr{
				pos: position{line: 431, col: 19, offset: 14373},
				run: (*parser).callonAttrValNamedFB1,
				expr: &seqExpr{
					pos: position{line: 431, col: 19, offset: 14373},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 431, col: 19, offset: 14373},
							expr: &charClassMatcher{
								pos:        position{line: 431, col: 19, offset: 14373},
								val:        "[^,\\r\\n\\]]",
								chars:      []rune{',', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 431, col: 31, offset: 14385},
							expr: &charClassMatcher{
								pos:        position{line: 431, col: 32, offset: 14386},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 433, col: 1, offset: 14443},
			expr: &choiceExpr{
				pos: position{line: 433, col: 19, offset: 14461},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 433, col: 19, offset: 14461},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 433, col: 41, offset: 14483},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 433, col: 65, offset: 14507},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 437, col: 1, offset: 14705},
			expr: &actionExpr{
				pos: position{line: 437, col: 24, offset: 14728},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 437, col: 24, offset: 14728},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 437, col: 24, offset: 14728},
							val:        "[^,\\r\\n\"' \\t.#%=\\]]",
							chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
							ignoreCase: false,
							inverted:   true,
						},
						&zeroOrMoreExpr{
							pos: position{line: 437, col: 45, offset: 14749},
							expr: &choiceExpr{
								pos: position{line: 437, col: 46, offset: 14750},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 437, col: 46, offset: 14750},
										val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
										chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
										ignoreCase: false,
										inverted:   true,
									},
									&seqExpr{
										pos: position{line: 437, col: 68, offset: 14772},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 437, col: 68, offset: 14772},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 437, col: 73, offset: 14777},
												val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
												chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttr",
			pos:  position{line: 441, col: 1, offset: 14835},
			expr: &actionExpr{
				pos: position{line: 441, col: 13, offset: 14847},
				run: (*parser).callonNamedAttr1,
				expr: &seqExpr{
					pos: position{line: 441, col: 13, offset: 14847},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 441, col: 13, offset: 14847},
							expr: &seqExpr{
								pos: position{line: 441, col: 15, offset: 14849},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 441, col: 15, offset: 14849},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 441, col: 19, offset: 14853},
										expr: &ruleRefExpr{
											pos:  position{line: 441, col: 19, offset: 14853},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 441, col: 29, offset: 14863},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 33, offset: 14867},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 441, col: 46, offset: 14880},
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 46, offset: 14880},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 441, col: 53, offset: 14887},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 441, col: 57, offset: 14891},
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 57, offset: 14891},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 441, col: 64, offset: 14898},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 70, offset: 14904},
								name: "NamedAttrValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 441, col: 85, offset: 14919},
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 85, offset: 14919},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrKey",
			pos:  position{line: 446, col: 1, offset: 15109},
			expr: &actionExpr{
				pos: position{line: 446, col: 17, offset: 15125},
				run: (*parser).callonNamedAttrKey1,
				expr: &seqExpr{
					pos: position{line: 446, col: 17, offset: 15125},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 446, col: 17, offset: 15125},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 446, col: 26, offset: 15134},
							expr: &charClassMatcher{
								pos:        position{line: 446, col: 26, offset: 15134},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrValue",
			pos:  position{line: 450, col: 1, offset: 15182},
			expr: &choiceExpr{
				pos: position{line: 450, col: 19, offset: 15200},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 450, col: 19, offset: 15200},
						name: "AttrValueNone",
					},
					&ruleRefExpr{
						pos:  position{line: 450, col: 35, offset: 15216},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 450, col: 59, offset: 15240},
						name: "AttrValueDoubleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 450, col: 83, offset: 15264},
						name: "AttrValuePlain",
					},
				},
			},
		},
		{
			name: "AttrValuePlain",
			pos:  position{line: 452, col: 1, offset: 15280},
			expr: &actionExpr{
				pos: position{line: 452, col: 19, offset: 15298},
				run: (*parser).callonAttrValuePlain1,
				expr: &oneOrMoreExpr{
					pos: position{line: 452, col: 19, offset: 15298},
					expr: &charClassMatcher{
						pos:        position{line: 452, col: 19, offset: 15298},
						val:        "[^,\\r\\n\"' \\t\\]]",
						chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 456, col: 1, offset: 15351},
			expr: &actionExpr{
				pos: position{line: 456, col: 26, offset: 15376},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 456, col: 26, offset: 15376},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 456, col: 26, offset: 15376},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 456, col: 30, offset: 15380},
							expr: &charClassMatcher{
								pos:        position{line: 456, col: 30, offset: 15380},
								val:        "[^'\\r\\n]",
								chars:      []rune{'\'', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 456, col: 40, offset: 15390},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 460, col: 1, offset: 15447},
			expr: &actionExpr{
				pos: position{line: 460, col: 26, offset: 15472},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 460, col: 26, offset: 15472},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 460, col: 26, offset: 15472},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 460, col: 31, offset: 15477},
							expr: &charClassMatcher{
								pos:        position{line: 460, col: 31, offset: 15477},
								val:        "[^\"\\r\\n]",
								chars:      []rune{'"', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 460, col: 41, offset: 15487},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueNone",
			pos:  position{line: 466, col: 1, offset: 15742},
			expr: &actionExpr{
				pos: position{line: 466, col: 18, offset: 15759},
				run: (*parser).callonAttrValueNone1,
				expr: &litMatcher{
					pos:        position{line: 466, col: 18, offset: 15759},
					val:        "None",
					ignoreCase: false,
					want:       "\"None\"",
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 474, col: 1, offset: 15941},
			expr: &choiceExpr{
				pos: position{line: 474, col: 17, offset: 15957},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 474, col: 17, offset: 15957},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 474, col: 38, offset: 15978},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 476, col: 1, offset: 15998},
			expr: &actionExpr{
				pos: position{line: 476, col: 23, offset: 16020},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 476, col: 23, offset: 16020},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 476, col: 23, offset: 16020},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 476, col: 46, offset: 16043},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 55, offset: 16052},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 476, col: 82, offset: 16079},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 480, col: 1, offset: 16183},
			expr: &actionExpr{
				pos: position{line: 480, col: 31, offset: 16213},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 480, col: 31, offset: 16213},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 480, col: 41, offset: 16223},
						expr: &ruleRefExpr{
							pos:  position{line: 480, col: 41, offset: 16223},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 484, col: 1, offset: 16301},
			expr: &seqExpr{
				pos: position{line: 484, col: 27, offset: 16327},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 484, col: 27, offset: 16327},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 484, col: 32, offset: 16332},
						expr: &charClassMatcher{
							pos:        position{line: 484, col: 33, offset: 16333},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 486, col: 1, offset: 16344},
			expr: &litMatcher{
				pos:        position{line: 486, col: 25, offset: 16368},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 489, col: 1, offset: 16456},
			expr: &actionExpr{
				pos: position{line: 489, col: 30, offset: 16485},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 489, col: 30, offset: 16485},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 490, col: 9, offset: 16503},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 490, col: 9, offset: 16503},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 490, col: 9, offset: 16503},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 490, col: 19, offset: 16513},
										expr: &ruleRefExpr{
											pos:  position{line: 490, col: 20, offset: 16514},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 491, col: 11, offset: 16570},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 491, col: 11, offset: 16570},
										expr: &ruleRefExpr{
											pos:  position{line: 491, col: 11, offset: 16570},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 491, col: 18, offset: 16577},
										expr: &ruleRefExpr{
											pos:  position{line: 491, col: 19, offset: 16578},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 492, col: 11, offset: 16609},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 492, col: 11, offset: 16609},
										expr: &litMatcher{
											pos:        position{line: 492, col: 12, offset: 16610},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 492, col: 16, offset: 16614},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 493, col: 11, offset: 16662},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 494, col: 11, offset: 16683},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 495, col: 11, offset: 16705},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 496, col: 11, offset: 16730},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 497, col: 11, offset: 16758},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 11, offset: 16773},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 499, col: 11, offset: 16805},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 500, col: 11, offset: 16824},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 501, col: 11, offset: 16845},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 502, col: 11, offset: 16866},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 503, col: 11, offset: 16890},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 504, col: 11, offset: 16916},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 504, col: 11, offset: 16916},
										expr: &litMatcher{
											pos:        position{line: 504, col: 12, offset: 16917},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 504, col: 17, offset: 16922},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 505, col: 11, offset: 16946},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 506, col: 11, offset: 16975},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 507, col: 11, offset: 17003},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 511, col: 1, offset: 17069},
			expr: &choiceExpr{
				pos: position{line: 511, col: 41, offset: 17109},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 511, col: 41, offset: 17109},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 511, col: 55, offset: 17123},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 511, col: 55, offset: 17123},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 511, col: 55, offset: 17123},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 511, col: 59, offset: 17127},
									expr: &litMatcher{
										pos:        position{line: 511, col: 60, offset: 17128},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 515, col: 1, offset: 17187},
			expr: &actionExpr{
				pos: position{line: 515, col: 23, offset: 17209},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 515, col: 23, offset: 17209},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 515, col: 23, offset: 17209},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 515, col: 46, offset: 17232},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 515, col: 55, offset: 17241},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 515, col: 82, offset: 17268},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 519, col: 1, offset: 17372},
			expr: &actionExpr{
				pos: position{line: 519, col: 31, offset: 17402},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 519, col: 31, offset: 17402},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 519, col: 41, offset: 17412},
						expr: &ruleRefExpr{
							pos:  position{line: 519, col: 41, offset: 17412},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 524, col: 1, offset: 17572},
			expr: &actionExpr{
				pos: position{line: 524, col: 30, offset: 17601},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 524, col: 30, offset: 17601},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 525, col: 9, offset: 17619},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 525, col: 9, offset: 17619},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 525, col: 9, offset: 17619},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 525, col: 19, offset: 17629},
										expr: &ruleRefExpr{
											pos:  position{line: 525, col: 20, offset: 17630},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 526, col: 11, offset: 17686},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 526, col: 11, offset: 17686},
										expr: &ruleRefExpr{
											pos:  position{line: 526, col: 11, offset: 17686},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 526, col: 18, offset: 17693},
										expr: &ruleRefExpr{
											pos:  position{line: 526, col: 19, offset: 17694},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 527, col: 11, offset: 17725},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 528, col: 11, offset: 17742},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 529, col: 11, offset: 17763},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 530, col: 11, offset: 17785},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 531, col: 11, offset: 17810},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 532, col: 11, offset: 17838},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 533, col: 11, offset: 17853},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 534, col: 11, offset: 17885},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 535, col: 11, offset: 17904},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 11, offset: 17925},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 537, col: 11, offset: 17946},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 538, col: 11, offset: 17970},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 539, col: 11, offset: 17996},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 539, col: 11, offset: 17996},
										expr: &litMatcher{
											pos:        position{line: 539, col: 12, offset: 17997},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 539, col: 18, offset: 18003},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 540, col: 11, offset: 18027},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 541, col: 11, offset: 18056},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 542, col: 11, offset: 18084},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 546, col: 1, offset: 18158},
			expr: &seqExpr{
				pos: position{line: 546, col: 27, offset: 18184},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 546, col: 27, offset: 18184},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 546, col: 33, offset: 18190},
						expr: &charClassMatcher{
							pos:        position{line: 546, col: 34, offset: 18191},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 548, col: 1, offset: 18202},
			expr: &litMatcher{
				pos:        position{line: 548, col: 25, offset: 18226},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 550, col: 1, offset: 18233},
			expr: &actionExpr{
				pos: position{line: 550, col: 41, offset: 18273},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 550, col: 42, offset: 18274},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 550, col: 42, offset: 18274},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 550, col: 56, offset: 18288},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 550, col: 56, offset: 18288},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 550, col: 60, offset: 18292},
									expr: &litMatcher{
										pos:        position{line: 550, col: 61, offset: 18293},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 557, col: 1, offset: 18458},
			expr: &actionExpr{
				pos: position{line: 557, col: 12, offset: 18469},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 557, col: 12, offset: 18469},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 557, col: 12, offset: 18469},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 557, col: 23, offset: 18480},
								expr: &ruleRefExpr{
									pos:  position{line: 557, col: 24, offset: 18481},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 558, col: 5, offset: 18498},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 558, col: 12, offset: 18505},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 558, col: 12, offset: 18505},
									expr: &litMatcher{
										pos:        position{line: 558, col: 13, offset: 18506},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 562, col: 5, offset: 18597},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 566, col: 5, offset: 18749},
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 5, offset: 18749},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 566, col: 12, offset: 18756},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 19, offset: 18763},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 566, col: 34, offset: 18778},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 566, col: 38, offset: 18782},
								expr: &ruleRefExpr{
									pos:  position{line: 566, col: 38, offset: 18782},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 566, col: 56, offset: 18800},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 570, col: 1, offset: 18906},
			expr: &actionExpr{
				pos: position{line: 570, col: 18, offset: 18923},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 570, col: 18, offset: 18923},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 570, col: 27, offset: 18932},
						expr: &seqExpr{
							pos: position{line: 570, col: 28, offset: 18933},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 570, col: 28, offset: 18933},
									expr: &ruleRefExpr{
										pos:  position{line: 570, col: 29, offset: 18934},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 570, col: 37, offset: 18942},
									expr: &ruleRefExpr{
										pos:  position{line: 570, col: 38, offset: 18943},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 570, col: 54, offset: 18959},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 574, col: 1, offset: 19080},
			expr: &actionExpr{
				pos: position{line: 574, col: 17, offset: 19096},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 574, col: 17, offset: 19096},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 574, col: 26, offset: 19105},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 574, col: 26, offset: 19105},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 575, col: 11, offset: 19120},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 576, col: 11, offset: 19165},
								expr: &ruleRefExpr{
									pos:  position{line: 576, col: 11, offset: 19165},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 577, col: 11, offset: 19183},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 578, col: 11, offset: 19208},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 579, col: 11, offset: 19236},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 580, col: 11, offset: 19257},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 581, col: 11, offset: 19279},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 582, col: 11, offset: 19294},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 583, col: 11, offset: 19319},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 584, col: 11, offset: 19342},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 11, offset: 19363},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 586, col: 11, offset: 19380},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 587, col: 11, offset: 19412},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 588, col: 11, offset: 19440},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 595, col: 1, offset: 19591},
			expr: &seqExpr{
				pos: position{line: 595, col: 31, offset: 19621},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 595, col: 31, offset: 19621},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 595, col: 41, offset: 19631},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 600, col: 1, offset: 19742},
			expr: &actionExpr{
				pos: position{line: 600, col: 19, offset: 19760},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 600, col: 19, offset: 19760},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 600, col: 19, offset: 19760},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 600, col: 25, offset: 19766},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 600, col: 40, offset: 19781},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 600, col: 45, offset: 19786},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 600, col: 52, offset: 19793},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 600, col: 68, offset: 19809},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 600, col: 75, offset: 19816},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 604, col: 1, offset: 19931},
			expr: &actionExpr{
				pos: position{line: 604, col: 20, offset: 19950},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 604, col: 20, offset: 19950},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 604, col: 20, offset: 19950},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 604, col: 26, offset: 19956},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 604, col: 41, offset: 19971},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 604, col: 45, offset: 19975},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 604, col: 52, offset: 19982},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 604, col: 68, offset: 19998},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 604, col: 75, offset: 20005},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 608, col: 1, offset: 20121},
			expr: &actionExpr{
				pos: position{line: 608, col: 18, offset: 20138},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 608, col: 19, offset: 20139},
					expr: &charClassMatcher{
						pos:        position{line: 608, col: 19, offset: 20139},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 612, col: 1, offset: 20188},
			expr: &actionExpr{
				pos: position{line: 612, col: 19, offset: 20206},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 612, col: 19, offset: 20206},
					expr: &charClassMatcher{
						pos:        position{line: 612, col: 19, offset: 20206},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 616, col: 1, offset: 20254},
			expr: &actionExpr{
				pos: position{line: 616, col: 24, offset: 20277},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 616, col: 24, offset: 20277},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 616, col: 24, offset: 20277},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 616, col: 28, offset: 20281},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 616, col: 34, offset: 20287},
								expr: &ruleRefExpr{
									pos:  position{line: 616, col: 35, offset: 20288},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 616, col: 54, offset: 20307},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 623, col: 1, offset: 20489},
			expr: &actionExpr{
				pos: position{line: 623, col: 18, offset: 20506},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 623, col: 18, offset: 20506},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 623, col: 18, offset: 20506},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 623, col: 24, offset: 20512},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 623, col: 24, offset: 20512},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 623, col: 24, offset: 20512},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 623, col: 36, offset: 20524},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 623, col: 42, offset: 20530},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 623, col: 56, offset: 20544},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 623, col: 74, offset: 20562},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 625, col: 8, offset: 20709},
							expr: &ruleRefExpr{
								pos:  position{line: 625, col: 8, offset: 20709},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 625, col: 15, offset: 20716},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 629, col: 1, offset: 20768},
			expr: &actionExpr{
				pos: position{line: 629, col: 26, offset: 20793},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 629, col: 26, offset: 20793},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 629, col: 26, offset: 20793},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 629, col: 30, offset: 20797},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 629, col: 36, offset: 20803},
								expr: &choiceExpr{
									pos: position{line: 629, col: 37, offset: 20804},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 629, col: 37, offset: 20804},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 629, col: 59, offset: 20826},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 629, col: 80, offset: 20847},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 629, col: 99, offset: 20866},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 633, col: 1, offset: 20938},
			expr: &actionExpr{
				pos: position{line: 633, col: 24, offset: 20961},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 633, col: 24, offset: 20961},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 633, col: 24, offset: 20961},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 633, col: 33, offset: 20970},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 40, offset: 20977},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 633, col: 66, offset: 21003},
							expr: &litMatcher{
								pos:        position{line: 633, col: 66, offset: 21003},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 637, col: 1, offset: 21062},
			expr: &actionExpr{
				pos: position{line: 637, col: 29, offset: 21090},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 637, col: 29, offset: 21090},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 637, col: 29, offset: 21090},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 637, col: 36, offset: 21097},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 637, col: 36, offset: 21097},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 638, col: 11, offset: 21214},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 639, col: 11, offset: 21250},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 640, col: 11, offset: 21276},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 641, col: 11, offset: 21308},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 642, col: 11, offset: 21340},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 643, col: 11, offset: 21367},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 643, col: 31, offset: 21387},
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 31, offset: 21387},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 643, col: 39, offset: 21395},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 643, col: 39, offset: 21395},
									expr: &litMatcher{
										pos:        position{line: 643, col: 40, offset: 21396},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 643, col: 46, offset: 21402},
									expr: &litMatcher{
										pos:        position{line: 643, col: 47, offset: 21403},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 647, col: 1, offset: 21435},
			expr: &actionExpr{
				pos: position{line: 647, col: 23, offset: 21457},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 647, col: 23, offset: 21457},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 647, col: 23, offset: 21457},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 647, col: 30, offset: 21464},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 647, col: 30, offset: 21464},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 647, col: 47, offset: 21481},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 648, col: 5, offset: 21503},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 648, col: 12, offset: 21510},
								expr: &actionExpr{
									pos: position{line: 648, col: 13, offset: 21511},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 648, col: 13, offset: 21511},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 648, col: 13, offset: 21511},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 648, col: 17, offset: 21515},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 648, col: 24, offset: 21522},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 648, col: 24, offset: 21522},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 648, col: 41, offset: 21539},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 654, col: 1, offset: 21677},
			expr: &actionExpr{
				pos: position{line: 654, col: 29, offset: 21705},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 654, col: 29, offset: 21705},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 654, col: 29, offset: 21705},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 654, col: 34, offset: 21710},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 654, col: 41, offset: 21717},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 654, col: 41, offset: 21717},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 654, col: 58, offset: 21734},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 655, col: 5, offset: 21756},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 655, col: 12, offset: 21763},
								expr: &actionExpr{
									pos: position{line: 655, col: 13, offset: 21764},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 655, col: 13, offset: 21764},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 655, col: 13, offset: 21764},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 655, col: 17, offset: 21768},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 655, col: 24, offset: 21775},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 655, col: 24, offset: 21775},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 655, col: 41, offset: 21792},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 657, col: 9, offset: 21845},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 661, col: 1, offset: 21935},
			expr: &actionExpr{
				pos: position{line: 661, col: 19, offset: 21953},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 661, col: 19, offset: 21953},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 661, col: 19, offset: 21953},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 26, offset: 21960},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 661, col: 34, offset: 21968},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 661, col: 39, offset: 21973},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 44, offset: 21978},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 665, col: 1, offset: 22066},
			expr: &actionExpr{
				pos: position{line: 665, col: 25, offset: 22090},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 665, col: 25, offset: 22090},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 665, col: 25, offset: 22090},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 665, col: 30, offset: 22095},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 37, offset: 22102},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 665, col: 45, offset: 22110},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 665, col: 50, offset: 22115},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 55, offset: 22120},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 665, col: 63, offset: 22128},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 669, col: 1, offset: 22213},
			expr: &actionExpr{
				pos: position{line: 669, col: 20, offset: 22232},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 669, col: 20, offset: 22232},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 669, col: 32, offset: 22244},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 673, col: 1, offset: 22339},
			expr: &actionExpr{
				pos: position{line: 673, col: 26, offset: 22364},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 673, col: 26, offset: 22364},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 673, col: 26, offset: 22364},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 673, col: 31, offset: 22369},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 673, col: 43, offset: 22381},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 673, col: 51, offset: 22389},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 677, col: 1, offset: 22481},
			expr: &actionExpr{
				pos: position{line: 677, col: 23, offset: 22503},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 677, col: 23, offset: 22503},
					expr: &charClassMatcher{
						pos:        position{line: 677, col: 23, offset: 22503},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 681, col: 1, offset: 22548},
			expr: &actionExpr{
				pos: position{line: 681, col: 23, offset: 22570},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 681, col: 23, offset: 22570},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 681, col: 24, offset: 22571},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 681, col: 24, offset: 22571},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 681, col: 34, offset: 22581},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 681, col: 42, offset: 22589},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 681, col: 48, offset: 22595},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 681, col: 73, offset: 22620},
							expr: &litMatcher{
								pos:        position{line: 681, col: 73, offset: 22620},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 685, col: 1, offset: 22769},
			expr: &actionExpr{
				pos: position{line: 685, col: 28, offset: 22796},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 685, col: 28, offset: 22796},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 685, col: 28, offset: 22796},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 685, col: 35, offset: 22803},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 685, col: 54, offset: 22822},
							expr: &ruleRefExpr{
								pos:  position{line: 685, col: 54, offset: 22822},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 685, col: 62, offset: 22830},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 685, col: 62, offset: 22830},
									expr: &litMatcher{
										pos:        position{line: 685, col: 63, offset: 22831},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 685, col: 69, offset: 22837},
									expr: &litMatcher{
										pos:        position{line: 685, col: 70, offset: 22838},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 689, col: 1, offset: 22870},
			expr: &actionExpr{
				pos: position{line: 689, col: 22, offset: 22891},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 689, col: 22, offset: 22891},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 689, col: 22, offset: 22891},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 689, col: 29, offset: 22898},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 690, col: 5, offset: 22912},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 690, col: 12, offset: 22919},
								expr: &actionExpr{
									pos: position{line: 690, col: 13, offset: 22920},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 690, col: 13, offset: 22920},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 690, col: 13, offset: 22920},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 690, col: 17, offset: 22924},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 690, col: 24, offset: 22931},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 696, col: 1, offset: 23062},
			expr: &choiceExpr{
				pos: position{line: 696, col: 13, offset: 23074},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 696, col: 13, offset: 23074},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 696, col: 13, offset: 23074},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 696, col: 18, offset: 23079},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 696, col: 18, offset: 23079},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 696, col: 30, offset: 23091},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 698, col: 5, offset: 23159},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 698, col: 5, offset: 23159},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 698, col: 5, offset: 23159},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 698, col: 9, offset: 23163},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 698, col: 14, offset: 23168},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 698, col: 14, offset: 23168},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 698, col: 26, offset: 23180},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 702, col: 1, offset: 23248},
			expr: &actionExpr{
				pos: position{line: 702, col: 16, offset: 23263},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 702, col: 16, offset: 23263},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 702, col: 16, offset: 23263},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 702, col: 23, offset: 23270},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 702, col: 23, offset: 23270},
									expr: &litMatcher{
										pos:        position{line: 702, col: 24, offset: 23271},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 705, col: 5, offset: 23325},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 713, col: 1, offset: 23505},
			expr: &actionExpr{
				pos: position{line: 713, col: 21, offset: 23525},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 713, col: 21, offset: 23525},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 713, col: 21, offset: 23525},
							expr: &ruleRefExpr{
								pos:  position{line: 713, col: 22, offset: 23526},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 713, col: 26, offset: 23530},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 713, col: 35, offset: 23539},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 713, col: 35, offset: 23539},
									expr: &charClassMatcher{
										pos:        position{line: 713, col: 35, offset: 23539},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 715, col: 12, offset: 23601},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawFileContent",
			pos:  position{line: 720, col: 1, offset: 23748},
			expr: &zeroOrMoreExpr{
				pos: position{line: 720, col: 19, offset: 23766},
				expr: &choiceExpr{
					pos: position{line: 720, col: 20, offset: 23767},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 720, col: 20, offset: 23767},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 720, col: 36, offset: 23783},
							name: "SingleLineComment",
						},
						&ruleRefExpr{
							pos:  position{line: 720, col: 56, offset: 23803},
							name: "RawLine",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 726, col: 1, offset: 23950},
			expr: &actionExpr{
				pos: position{line: 726, col: 21, offset: 23970},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 726, col: 21, offset: 23970},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 726, col: 21, offset: 23970},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 726, col: 29, offset: 23978},
								expr: &choiceExpr{
									pos: position{line: 726, col: 30, offset: 23979},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 726, col: 30, offset: 23979},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 726, col: 53, offset: 24002},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 726, col: 74, offset: 24023},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 726, col: 74, offset: 24023,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 726, col: 107, offset: 24056},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 730, col: 1, offset: 24127},
			expr: &actionExpr{
				pos: position{line: 730, col: 25, offset: 24151},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 730, col: 25, offset: 24151},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 730, col: 25, offset: 24151},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 730, col: 33, offset: 24159},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 730, col: 38, offset: 24164},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 730, col: 38, offset: 24164},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 730, col: 78, offset: 24204},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 734, col: 1, offset: 24269},
			expr: &actionExpr{
				pos: position{line: 734, col: 23, offset: 24291},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 734, col: 23, offset: 24291},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 734, col: 23, offset: 24291},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 734, col: 31, offset: 24299},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 734, col: 36, offset: 24304},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 734, col: 36, offset: 24304},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 734, col: 76, offset: 24344},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 741, col: 1, offset: 24508},
			expr: &choiceExpr{
				pos: position{line: 741, col: 18, offset: 24525},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 741, col: 18, offset: 24525},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 741, col: 18, offset: 24525},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 741, col: 27, offset: 24534},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 743, col: 9, offset: 24591},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 743, col: 9, offset: 24591},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 743, col: 15, offset: 24597},
								expr: &ruleRefExpr{
									pos:  position{line: 743, col: 16, offset: 24598},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 747, col: 1, offset: 24690},
			expr: &actionExpr{
				pos: position{line: 747, col: 22, offset: 24711},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 747, col: 22, offset: 24711},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 747, col: 22, offset: 24711},
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 23, offset: 24712},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 748, col: 5, offset: 24720},
							expr: &ruleRefExpr{
								pos:  position{line: 748, col: 6, offset: 24721},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 749, col: 5, offset: 24736},
							expr: &ruleRefExpr{
								pos:  position{line: 749, col: 6, offset: 24737},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 750, col: 5, offset: 24759},
							expr: &ruleRefExpr{
								pos:  position{line: 750, col: 6, offset: 24760},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 751, col: 5, offset: 24786},
							expr: &ruleRefExpr{
								pos:  position{line: 751, col: 6, offset: 24787},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 752, col: 5, offset: 24815},
							expr: &ruleRefExpr{
								pos:  position{line: 752, col: 6, offset: 24816},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 753, col: 5, offset: 24842},
							expr: &ruleRefExpr{
								pos:  position{line: 753, col: 6, offset: 24843},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 754, col: 5, offset: 24868},
							expr: &ruleRefExpr{
								pos:  position{line: 754, col: 6, offset: 24869},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 755, col: 5, offset: 24890},
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 6, offset: 24891},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 756, col: 5, offset: 24910},
							expr: &ruleRefExpr{
								pos:  position{line: 756, col: 6, offset: 24911},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 757, col: 5, offset: 24938},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 757, col: 11, offset: 24944},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 757, col: 11, offset: 24944},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 757, col: 20, offset: 24953},
										expr: &ruleRefExpr{
											pos:  position{line: 757, col: 21, offset: 24954},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 759, col: 12, offset: 25053},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 763, col: 1, offset: 25092},
			expr: &seqExpr{
				pos: position{line: 763, col: 25, offset: 25116},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 763, col: 25, offset: 25116},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 763, col: 29, offset: 25120},
						expr: &ruleRefExpr{
							pos:  position{line: 763, col: 29, offset: 25120},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 763, col: 36, offset: 25127},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 765, col: 1, offset: 25199},
			expr: &actionExpr{
				pos: position{line: 765, col: 29, offset: 25227},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 765, col: 29, offset: 25227},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 765, col: 29, offset: 25227},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 765, col: 50, offset: 25248},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 765, col: 58, offset: 25256},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 769, col: 1, offset: 25362},
			expr: &actionExpr{
				pos: position{line: 769, col: 29, offset: 25390},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 769, col: 29, offset: 25390},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 769, col: 29, offset: 25390},
							expr: &ruleRefExpr{
								pos:  position{line: 769, col: 30, offset: 25391},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 770, col: 5, offset: 25400},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 770, col: 14, offset: 25409},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 770, col: 14, offset: 25409},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 771, col: 11, offset: 25434},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 772, col: 11, offset: 25458},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 773, col: 11, offset: 25479},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 774, col: 11, offset: 25507},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 775, col: 11, offset: 25531},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 776, col: 11, offset: 25558},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 777, col: 11, offset: 25587},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 779, col: 11, offset: 25652},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 780, col: 11, offset: 25703},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 781, col: 11, offset: 25727},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 782, col: 11, offset: 25759},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 783, col: 11, offset: 25785},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 784, col: 11, offset: 25822},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 785, col: 11, offset: 25847},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 792, col: 1, offset: 26013},
			expr: &actionExpr{
				pos: position{line: 792, col: 20, offset: 26032},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 792, col: 20, offset: 26032},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 792, col: 20, offset: 26032},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 792, col: 26, offset: 26038},
								expr: &ruleRefExpr{
									pos:  position{line: 792, col: 27, offset: 26039},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 792, col: 40, offset: 26052},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 792, col: 48, offset: 26060},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 792, col: 71, offset: 26083},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 792, col: 80, offset: 26092},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 796, col: 1, offset: 26227},
			expr: &actionExpr{
				pos: position{line: 797, col: 5, offset: 26257},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 797, col: 5, offset: 26257},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 797, col: 5, offset: 26257},
							expr: &ruleRefExpr{
								pos:  position{line: 797, col: 5, offset: 26257},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 797, col: 12, offset: 26264},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 799, col: 9, offset: 26327},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 799, col: 9, offset: 26327},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 799, col: 9, offset: 26327},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 799, col: 9, offset: 26327},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 799, col: 16, offset: 26334},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 799, col: 16, offset: 26334},
															expr: &litMatcher{
																pos:        position{line: 799, col: 17, offset: 26335},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 803, col: 9, offset: 26435},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 822, col: 11, offset: 27152},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 822, col: 11, offset: 27152},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 822, col: 11, offset: 27152},
													expr: &charClassMatcher{
														pos:        position{line: 822, col: 12, offset: 27153},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 822, col: 20, offset: 27161},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 824, col: 13, offset: 27272},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 824, col: 13, offset: 27272},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 824, col: 14, offset: 27273},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 824, col: 21, offset: 27280},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 826, col: 13, offset: 27394},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 826, col: 13, offset: 27394},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 826, col: 14, offset: 27395},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 826, col: 21, offset: 27402},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 828, col: 13, offset: 27516},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 828, col: 13, offset: 27516},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 828, col: 13, offset: 27516},
													expr: &charClassMatcher{
														pos:        position{line: 828, col: 14, offset: 27517},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 828, col: 22, offset: 27525},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 830, col: 13, offset: 27639},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 830, col: 13, offset: 27639},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 830, col: 13, offset: 27639},
													expr: &charClassMatcher{
														pos:        position{line: 830, col: 14, offset: 27640},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 830, col: 22, offset: 27648},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 832, col: 12, offset: 27761},
							expr: &ruleRefExpr{
								pos:  position{line: 832, col: 12, offset: 27761},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 836, col: 1, offset: 27796},
			expr: &actionExpr{
				pos: position{line: 836, col: 27, offset: 27822},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 836, col: 27, offset: 27822},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 836, col: 37, offset: 27832},
						expr: &ruleRefExpr{
							pos:  position{line: 836, col: 37, offset: 27832},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 843, col: 1, offset: 28032},
			expr: &actionExpr{
				pos: position{line: 843, col: 22, offset: 28053},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 843, col: 22, offset: 28053},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 843, col: 22, offset: 28053},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 843, col: 28, offset: 28059},
								expr: &ruleRefExpr{
									pos:  position{line: 843, col: 29, offset: 28060},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 843, col: 42, offset: 28073},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 843, col: 50, offset: 28081},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 843, col: 75, offset: 28106},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 843, col: 86, offset: 28117},
								expr: &ruleRefExpr{
									pos:  position{line: 843, col: 87, offset: 28118},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 843, col: 117, offset: 28148},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 843, col: 126, offset: 28157},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 847, col: 1, offset: 28310},
			expr: &actionExpr{
				pos: position{line: 848, col: 5, offset: 28342},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 848, col: 5, offset: 28342},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 848, col: 5, offset: 28342},
							expr: &ruleRefExpr{
								pos:  position{line: 848, col: 5, offset: 28342},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 848, col: 12, offset: 28349},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 848, col: 20, offset: 28357},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 850, col: 9, offset: 28414},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 850, col: 9, offset: 28414},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 850, col: 9, offset: 28414},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 850, col: 16, offset: 28421},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 850, col: 16, offset: 28421},
															expr: &litMatcher{
																pos:        position{line: 850, col: 17, offset: 28422},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 854, col: 9, offset: 28522},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 871, col: 14, offset: 29229},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 871, col: 21, offset: 29236},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 871, col: 22, offset: 29237},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 873, col: 13, offset: 29323},
							expr: &ruleRefExpr{
								pos:  position{line: 873, col: 13, offset: 29323},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 877, col: 1, offset: 29359},
			expr: &actionExpr{
				pos: position{line: 877, col: 32, offset: 29390},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 877, col: 32, offset: 29390},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 877, col: 32, offset: 29390},
							expr: &litMatcher{
								pos:        position{line: 877, col: 33, offset: 29391},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 877, col: 37, offset: 29395},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 878, col: 7, offset: 29409},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 878, col: 7, offset: 29409},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 878, col: 7, offset: 29409},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 879, col: 7, offset: 29454},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 879, col: 7, offset: 29454},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 880, col: 7, offset: 29497},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 880, col: 7, offset: 29497},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 881, col: 7, offset: 29539},
							expr: &ruleRefExpr{
								pos:  position{line: 881, col: 7, offset: 29539},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 885, col: 1, offset: 29581},
			expr: &actionExpr{
				pos: position{line: 885, col: 29, offset: 29609},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 885, col: 29, offset: 29609},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 885, col: 39, offset: 29619},
						expr: &ruleRefExpr{
							pos:  position{line: 885, col: 39, offset: 29619},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 892, col: 1, offset: 29935},
			expr: &actionExpr{
				pos: position{line: 892, col: 20, offset: 29954},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 892, col: 20, offset: 29954},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 892, col: 20, offset: 29954},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 892, col: 26, offset: 29960},
								expr: &ruleRefExpr{
									pos:  position{line: 892, col: 27, offset: 29961},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 892, col: 40, offset: 29974},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 892, col: 46, offset: 29980},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 892, col: 75, offset: 30009},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 892, col: 86, offset: 30020},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 892, col: 112, offset: 30046},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 892, col: 124, offset: 30058},
								expr: &ruleRefExpr{
									pos:  position{line: 892, col: 125, offset: 30059},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 896, col: 1, offset: 30200},
			expr: &seqExpr{
				pos: position{line: 896, col: 26, offset: 30225},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 896, col: 26, offset: 30225},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 896, col: 54, offset: 30253},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 898, col: 1, offset: 30279},
			expr: &choiceExpr{
				pos: position{line: 898, col: 33, offset: 30311},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 898, col: 33, offset: 30311},
						expr: &charClassMatcher{
							pos:        position{line: 898, col: 33, offset: 30311},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 898, col: 45, offset: 30323},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 898, col: 45, offset: 30323},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 898, col: 49, offset: 30327},
								expr: &litMatcher{
									pos:        position{line: 898, col: 50, offset: 30328},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 899, col: 1, offset: 30332},
			expr: &actionExpr{
				pos: position{line: 899, col: 32, offset: 30363},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 899, col: 32, offset: 30363},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 899, col: 42, offset: 30373},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 899, col: 42, offset: 30373},
							expr: &ruleRefExpr{
								pos:  position{line: 899, col: 42, offset: 30373},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 905, col: 1, offset: 30528},
			expr: &actionExpr{
				pos: position{line: 905, col: 24, offset: 30551},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 905, col: 24, offset: 30551},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 905, col: 33, offset: 30560},
						expr: &seqExpr{
							pos: position{line: 905, col: 34, offset: 30561},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 905, col: 34, offset: 30561},
									expr: &ruleRefExpr{
										pos:  position{line: 905, col: 35, offset: 30562},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 905, col: 43, offset: 30570},
									expr: &litMatcher{
										pos:        position{line: 905, col: 44, offset: 30571},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 905, col: 49, offset: 30576},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 909, col: 1, offset: 30703},
			expr: &actionExpr{
				pos: position{line: 909, col: 31, offset: 30733},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 909, col: 31, offset: 30733},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 909, col: 40, offset: 30742},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 909, col: 40, offset: 30742},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 910, col: 11, offset: 30757},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 911, col: 11, offset: 30806},
								expr: &ruleRefExpr{
									pos:  position{line: 911, col: 11, offset: 30806},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 912, col: 11, offset: 30824},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 913, col: 11, offset: 30849},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 914, col: 11, offset: 30878},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 915, col: 11, offset: 30898},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 916, col: 11, offset: 30926},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 917, col: 11, offset: 30947},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 918, col: 11, offset: 30970},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 919, col: 11, offset: 30985},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 920, col: 11, offset: 31010},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 921, col: 11, offset: 31033},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 922, col: 11, offset: 31054},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 923, col: 11, offset: 31071},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 924, col: 11, offset: 31103},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 925, col: 11, offset: 31131},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 929, col: 1, offset: 31170},
			expr: &actionExpr{
				pos: position{line: 930, col: 5, offset: 31203},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 930, col: 5, offset: 31203},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 930, col: 5, offset: 31203},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 930, col: 16, offset: 31214},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 930, col: 16, offset: 31214},
									expr: &litMatcher{
										pos:        position{line: 930, col: 17, offset: 31215},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 933, col: 5, offset: 31273},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 937, col: 6, offset: 31449},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 937, col: 6, offset: 31449},
									expr: &choiceExpr{
										pos: position{line: 937, col: 7, offset: 31450},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 937, col: 7, offset: 31450},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 937, col: 15, offset: 31458},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 937, col: 27, offset: 31470},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 941, col: 1, offset: 31510},
			expr: &actionExpr{
				pos: position{line: 941, col: 31, offset: 31540},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 941, col: 31, offset: 31540},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 941, col: 40, offset: 31549},
						expr: &ruleRefExpr{
							pos:  position{line: 941, col: 41, offset: 31550},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 948, col: 1, offset: 31741},
			expr: &choiceExpr{
				pos: position{line: 948, col: 19, offset: 31759},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 948, col: 19, offset: 31759},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 948, col: 19, offset: 31759},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 950, col: 9, offset: 31805},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 950, col: 9, offset: 31805},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 952, col: 9, offset: 31853},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 952, col: 9, offset: 31853},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 954, col: 9, offset: 31911},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 954, col: 9, offset: 31911},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 956, col: 9, offset: 31965},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 956, col: 9, offset: 31965},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 967, col: 1, offset: 32281},
			expr: &choiceExpr{
				pos: position{line: 969, col: 5, offset: 32331},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 969, col: 5, offset: 32331},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 969, col: 5, offset: 32331},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 969, col: 5, offset: 32331},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 969, col: 16, offset: 32342},
										expr: &ruleRefExpr{
											pos:  position{line: 969, col: 17, offset: 32343},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 969, col: 30, offset: 32356},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 969, col: 33, offset: 32359},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 969, col: 49, offset: 32375},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 969, col: 54, offset: 32380},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 969, col: 60, offset: 32386},
										expr: &ruleRefExpr{
											pos:  position{line: 969, col: 61, offset: 32387},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 973, col: 5, offset: 32570},
						run: (*parser).callonRawParagraph13,
						expr: &seqExpr{
							pos: position{line: 973, col: 5, offset: 32570},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 973, col: 5, offset: 32570},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 973, col: 16, offset: 32581},
										expr: &ruleRefExpr{
											pos:  position{line: 973, col: 17, offset: 32582},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 973, col: 30, offset: 32595},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 973, col: 35, offset: 32600},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 973, col: 44, offset: 32609},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 977, col: 5, offset: 32799},
						run: (*parser).callonRawParagraph21,
						expr: &seqExpr{
							pos: position{line: 977, col: 5, offset: 32799},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 977, col: 5, offset: 32799},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 977, col: 16, offset: 32810},
										expr: &ruleRefExpr{
											pos:  position{line: 977, col: 17, offset: 32811},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 977, col: 30, offset: 32824},
									run: (*parser).callonRawParagraph26,
								},
								&notExpr{
									pos: position{line: 984, col: 7, offset: 33103},
									expr: &ruleRefExpr{
										pos:  position{line: 984, col: 8, offset: 33104},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 984, col: 23, offset: 33119},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 984, col: 31, offset: 33127},
										expr: &ruleRefExpr{
											pos:  position{line: 984, col: 32, offset: 33128},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 988, col: 5, offset: 33311},
						run: (*parser).callonRawParagraph32,
						expr: &seqExpr{
							pos: position{line: 988, col: 5, offset: 33311},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 988, col: 5, offset: 33311},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 988, col: 16, offset: 33322},
										expr: &ruleRefExpr{
											pos:  position{line: 988, col: 17, offset: 33323},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 988, col: 30, offset: 33336},
									expr: &ruleRefExpr{
										pos:  position{line: 988, col: 31, offset: 33337},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 988, col: 46, offset: 33352},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 988, col: 52, offset: 33358},
										expr: &ruleRefExpr{
											pos:  position{line: 988, col: 53, offset: 33359},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 992, col: 1, offset: 33457},
			expr: &oneOrMoreExpr{
				pos: position{line: 992, col: 33, offset: 33489},
				expr: &actionExpr{
					pos: position{line: 992, col: 34, offset: 33490},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 992, col: 34, offset: 33490},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 992, col: 34, offset: 33490},
								expr: &ruleRefExpr{
									pos:  position{line: 992, col: 35, offset: 33491},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 992, col: 45, offset: 33501},
								expr: &litMatcher{
									pos:        position{line: 992, col: 45, offset: 33501},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 992, col: 51, offset: 33507},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 992, col: 60, offset: 33516},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 996, col: 1, offset: 33649},
			expr: &actionExpr{
				pos: position{line: 997, col: 5, offset: 33674},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 997, col: 5, offset: 33674},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 997, col: 5, offset: 33674},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 997, col: 14, offset: 33683},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 997, col: 39, offset: 33708},
							name: "EOL",
						},
						&andCodeExpr{
							pos: position{line: 997, col: 43, offset: 33712},
							run: (*parser).callonRawParagraphLine6,
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 1007, col: 1, offset: 33947},
			expr: &actionExpr{
				pos: position{line: 1007, col: 28, offset: 33974},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1007, col: 28, offset: 33974},
					expr: &charClassMatcher{
						pos:        position{line: 1007, col: 28, offset: 33974},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 1013, col: 1, offset: 34173},
			expr: &choiceExpr{
				pos: position{line: 1015, col: 5, offset: 34220},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1015, col: 5, offset: 34220},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 1015, col: 5, offset: 34220},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1015, col: 5, offset: 34220},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1015, col: 16, offset: 34231},
										expr: &ruleRefExpr{
											pos:  position{line: 1015, col: 17, offset: 34232},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1015, col: 30, offset: 34245},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 1015, col: 33, offset: 34248},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 1015, col: 49, offset: 34264},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 1015, col: 54, offset: 34269},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 1015, col: 60, offset: 34275},
										expr: &ruleRefExpr{
											pos:  position{line: 1015, col: 61, offset: 34276},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1019, col: 5, offset: 34462},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 1019, col: 5, offset: 34462},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1019, col: 5, offset: 34462},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1019, col: 16, offset: 34473},
										expr: &ruleRefExpr{
											pos:  position{line: 1019, col: 17, offset: 34474},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1019, col: 30, offset: 34487},
									run: (*parser).callonParagraph18,
								},
								&notExpr{
									pos: position{line: 1026, col: 7, offset: 34766},
									expr: &ruleRefExpr{
										pos:  position{line: 1026, col: 8, offset: 34767},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 1026, col: 23, offset: 34782},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 1026, col: 31, offset: 34790},
										expr: &ruleRefExpr{
											pos:  position{line: 1026, col: 32, offset: 34791},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1030, col: 5, offset: 34971},
						run: (*parser).callonParagraph24,
						expr: &seqExpr{
							pos: position{line: 1030, col: 5, offset: 34971},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1030, col: 5, offset: 34971},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1030, col: 16, offset: 34982},
										expr: &ruleRefExpr{
											pos:  position{line: 1030, col: 17, offset: 34983},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 1030, col: 30, offset: 34996},
									expr: &ruleRefExpr{
										pos:  position{line: 1030, col: 31, offset: 34997},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 1030, col: 46, offset: 35012},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 1030, col: 52, offset: 35018},
										expr: &ruleRefExpr{
											pos:  position{line: 1030, col: 53, offset: 35019},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLine",
			pos:  position{line: 1034, col: 1, offset: 35114},
			expr: &ruleRefExpr{
				pos:  position{line: 1034, col: 18, offset: 35131},
				name: "InlineElements",
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 1036, col: 1, offset: 35147},
			expr: &actionExpr{
				pos: position{line: 1036, col: 34, offset: 35180},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 1036, col: 34, offset: 35180},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1036, col: 34, offset: 35180},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 1036, col: 40, offset: 35186},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 1036, col: 48, offset: 35194},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1036, col: 49, offset: 35195},
									expr: &charClassMatcher{
										pos:        position{line: 1036, col: 49, offset: 35195},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1038, col: 8, offset: 35245},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 1043, col: 1, offset: 35294},
			expr: &oneOrMoreExpr{
				pos: position{line: 1043, col: 36, offset: 35329},
				expr: &actionExpr{
					pos: position{line: 1043, col: 37, offset: 35330},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 1043, col: 37, offset: 35330},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1043, col: 37, offset: 35330},
								expr: &ruleRefExpr{
									pos:  position{line: 1043, col: 38, offset: 35331},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 1043, col: 48, offset: 35341},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1043, col: 57, offset: 35350},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 1048, col: 1, offset: 35561},
			expr: &actionExpr{
				pos: position{line: 1048, col: 20, offset: 35580},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 1048, col: 20, offset: 35580},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1048, col: 20, offset: 35580},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1048, col: 31, offset: 35591},
								expr: &ruleRefExpr{
									pos:  position{line: 1048, col: 32, offset: 35592},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1049, col: 5, offset: 35610},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 1057, col: 5, offset: 35896},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1057, col: 16, offset: 35907},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1058, col: 5, offset: 35933},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1058, col: 16, offset: 35944},
								expr: &ruleRefExpr{
									pos:  position{line: 1058, col: 17, offset: 35945},
									name: "OtherParagraphRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 1062, col: 1, offset: 36082},
			expr: &actionExpr{
				pos: position{line: 1063, col: 5, offset: 36112},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 1063, col: 5, offset: 36112},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1063, col: 5, offset: 36112},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1063, col: 14, offset: 36121},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 1063, col: 14, offset: 36121},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1063, col: 14, offset: 36121},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 1063, col: 23, offset: 36130},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1063, col: 28, offset: 36135},
											expr: &charClassMatcher{
												pos:        position{line: 1063, col: 28, offset: 36135},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1063, col: 68, offset: 36175},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphRawLine",
			pos:  position{line: 1067, col: 1, offset: 36231},
			expr: &ruleRefExpr{
				pos:  position{line: 1067, col: 26, offset: 36256},
				name: "RawParagraphLine",
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 1074, col: 1, offset: 36468},
			expr: &choiceExpr{
				pos: position{line: 1076, col: 5, offset: 36527},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1076, col: 5, offset: 36527},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 1076, col: 5, offset: 36527},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1076, col: 5, offset: 36527},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1076, col: 16, offset: 36538},
										expr: &ruleRefExpr{
											pos:  position{line: 1076, col: 17, offset: 36539},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1076, col: 30, offset: 36552},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 1076, col: 33, offset: 36555},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 1076, col: 49, offset: 36571},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 1076, col: 54, offset: 36576},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 1076, col: 61, offset: 36583},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1080, col: 5, offset: 36786},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 1080, col: 5, offset: 36786},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1080, col: 5, offset: 36786},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1080, col: 16, offset: 36797},
										expr: &ruleRefExpr{
											pos:  position{line: 1080, col: 17, offset: 36798},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1080, col: 30, offset: 36811},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 1080, col: 37, offset: 36818},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 1084, col: 1, offset: 36922},
			expr: &actionExpr{
				pos: position{line: 1084, col: 31, offset: 36952},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 1084, col: 31, offset: 36952},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1084, col: 31, offset: 36952},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1084, col: 42, offset: 36963},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1084, col: 65, offset: 36986},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1084, col: 76, offset: 36997},
								expr: &seqExpr{
									pos: position{line: 1084, col: 77, offset: 36998},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1084, col: 77, offset: 36998},
											expr: &ruleRefExpr{
												pos:  position{line: 1084, col: 78, offset: 36999},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1084, col: 99, offset: 37020},
											name: "OtherParagraphRawLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawVerseParagraph",
			pos:  position{line: 1092, col: 1, offset: 37242},
			expr: &actionExpr{
				pos: position{line: 1093, col: 5, offset: 37268},
				run: (*parser).callonRawVerseParagraph1,
				expr: &seqExpr{
					pos: position{line: 1093, col: 5, offset: 37268},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1093, col: 5, offset: 37268},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1093, col: 16, offset: 37279},
								expr: &ruleRefExpr{
									pos:  position{line: 1093, col: 17, offset: 37280},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1094, col: 5, offset: 37297},
							run: (*parser).callonRawVerseParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 1101, col: 5, offset: 37502},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 1101, col: 11, offset: 37508},
								expr: &ruleRefExpr{
									pos:  position{line: 1101, col: 12, offset: 37509},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 1109, col: 1, offset: 37715},
			expr: &actionExpr{
				pos: position{line: 1109, col: 19, offset: 37733},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 1109, col: 19, offset: 37733},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1109, col: 19, offset: 37733},
							expr: &ruleRefExpr{
								pos:  position{line: 1109, col: 20, offset: 37734},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1110, col: 5, offset: 37748},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 1110, col: 15, offset: 37758},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1110, col: 15, offset: 37758},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 1110, col: 15, offset: 37758},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 1110, col: 24, offset: 37767},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 1112, col: 9, offset: 37859},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 1112, col: 9, offset: 37859},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1112, col: 9, offset: 37859},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 1112, col: 18, offset: 37868},
														expr: &ruleRefExpr{
															pos:  position{line: 1112, col: 19, offset: 37869},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1112, col: 35, offset: 37885},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1118, col: 1, offset: 38002},
			expr: &actionExpr{
				pos: position{line: 1119, col: 5, offset: 38025},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1119, col: 5, offset: 38025},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1119, col: 14, offset: 38034},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1119, col: 14, offset: 38034},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 1120, col: 11, offset: 38085},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 1121, col: 11, offset: 38130},
								expr: &ruleRefExpr{
									pos:  position{line: 1121, col: 11, offset: 38130},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 1122, col: 11, offset: 38148},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1122, col: 11, offset: 38148},
										expr: &ruleRefExpr{
											pos:  position{line: 1122, col: 12, offset: 38149},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 1123, col: 13, offset: 38167},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1123, col: 13, offset: 38167},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 1124, col: 15, offset: 38194},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1125, col: 15, offset: 38219},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 1126, col: 15, offset: 38240},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 1127, col: 15, offset: 38265},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 1128, col: 15, offset: 38292},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 1129, col: 15, offset: 38312},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 1130, col: 15, offset: 38345},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 1131, col: 15, offset: 38375},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 1132, col: 15, offset: 38405},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 1133, col: 15, offset: 38436},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1134, col: 15, offset: 38473},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 1135, col: 15, offset: 38503},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1136, col: 15, offset: 38536},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1137, col: 15, offset: 38560},
												name: "ImpliedApostrophe",
											},
											&ruleRefExpr{
												pos:  position{line: 1138, col: 15, offset: 38592},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1145, col: 1, offset: 38815},
			expr: &actionExpr{
				pos: position{line: 1145, col: 14, offset: 38828},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1145, col: 14, offset: 38828},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1145, col: 14, offset: 38828},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 1145, col: 20, offset: 38834},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1145, col: 24, offset: 38838},
							expr: &ruleRefExpr{
								pos:  position{line: 1145, col: 24, offset: 38838},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1145, col: 31, offset: 38845},
							expr: &ruleRefExpr{
								pos:  position{line: 1145, col: 32, offset: 38846},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1152, col: 1, offset: 39130},
			expr: &choiceExpr{
				pos: position{line: 1152, col: 15, offset: 39144},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1152, col: 15, offset: 39144},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1152, col: 41, offset: 39170},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1152, col: 65, offset: 39194},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1154, col: 1, offset: 39213},
			expr: &choiceExpr{
				pos: position{line: 1154, col: 32, offset: 39244},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1154, col: 32, offset: 39244},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1154, col: 32, offset: 39244},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1154, col: 36, offset: 39248},
								expr: &litMatcher{
									pos:        position{line: 1154, col: 37, offset: 39249},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1154, col: 43, offset: 39255},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1154, col: 43, offset: 39255},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1154, col: 47, offset: 39259},
								expr: &litMatcher{
									pos:        position{line: 1154, col: 48, offset: 39260},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1154, col: 54, offset: 39266},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1154, col: 54, offset: 39266},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1154, col: 58, offset: 39270},
								expr: &litMatcher{
									pos:        position{line: 1154, col: 59, offset: 39271},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1154, col: 65, offset: 39277},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1154, col: 65, offset: 39277},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1154, col: 69, offset: 39281},
								expr: &litMatcher{
									pos:        position{line: 1154, col: 70, offset: 39282},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1156, col: 1, offset: 39287},
			expr: &choiceExpr{
				pos: position{line: 1156, col: 34, offset: 39320},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1156, col: 34, offset: 39320},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1156, col: 41, offset: 39327},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1156, col: 48, offset: 39334},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1156, col: 55, offset: 39341},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1156, col: 62, offset: 39348},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1156, col: 68, offset: 39354},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1158, col: 1, offset: 39359},
			expr: &actionExpr{
				pos: position{line: 1158, col: 26, offset: 39384},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1158, col: 26, offset: 39384},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1158, col: 32, offset: 39390},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1158, col: 32, offset: 39390},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1159, col: 15, offset: 39425},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1160, col: 15, offset: 39461},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1161, col: 15, offset: 39497},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1162, col: 15, offset: 39537},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1163, col: 15, offset: 39566},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1164, col: 15, offset: 39597},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1168, col: 1, offset: 39751},
			expr: &choiceExpr{
				pos: position{line: 1168, col: 28, offset: 39778},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1168, col: 28, offset: 39778},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1169, col: 15, offset: 39812},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1170, col: 15, offset: 39848},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1171, col: 15, offset: 39884},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1173, col: 1, offset: 39910},
			expr: &choiceExpr{
				pos: position{line: 1173, col: 22, offset: 39931},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1173, col: 22, offset: 39931},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1174, col: 15, offset: 39962},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1175, col: 15, offset: 39994},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1176, col: 15, offset: 40026},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1177, col: 15, offset: 40062},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1178, col: 15, offset: 40098},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1180, col: 1, offset: 40122},
			expr: &choiceExpr{
				pos: position{line: 1180, col: 33, offset: 40154},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1180, col: 33, offset: 40154},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1180, col: 39, offset: 40160},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1180, col: 39, offset: 40160},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1184, col: 1, offset: 40293},
			expr: &actionExpr{
				pos: position{line: 1184, col: 25, offset: 40317},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1184, col: 25, offset: 40317},
					expr: &litMatcher{
						pos:        position{line: 1184, col: 25, offset: 40317},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1188, col: 1, offset: 40358},
			expr: &actionExpr{
				pos: position{line: 1188, col: 25, offset: 40382},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1188, col: 25, offset: 40382},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1188, col: 25, offset: 40382},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1188, col: 30, offset: 40387},
							expr: &litMatcher{
								pos:        position{line: 1188, col: 30, offset: 40387},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1196, col: 1, offset: 40484},
			expr: &choiceExpr{
				pos: position{line: 1196, col: 13, offset: 40496},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1196, col: 13, offset: 40496},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1196, col: 35, offset: 40518},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1198, col: 1, offset: 40585},
			expr: &actionExpr{
				pos: position{line: 1198, col: 24, offset: 40608},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1198, col: 24, offset: 40608},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1198, col: 24, offset: 40608},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1198, col: 30, offset: 40614},
								expr: &ruleRefExpr{
									pos:  position{line: 1198, col: 31, offset: 40615},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1198, col: 49, offset: 40633},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1198, col: 54, offset: 40638},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1198, col: 64, offset: 40648},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1198, col: 93, offset: 40677},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1202, col: 1, offset: 40764},
			expr: &seqExpr{
				pos: position{line: 1202, col: 32, offset: 40795},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1202, col: 32, offset: 40795},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1202, col: 59, offset: 40822},
						expr: &seqExpr{
							pos: position{line: 1202, col: 60, offset: 40823},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1202, col: 60, offset: 40823},
									expr: &litMatcher{
										pos:        position{line: 1202, col: 62, offset: 40825},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1202, col: 69, offset: 40832},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1202, col: 69, offset: 40832},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1202, col: 77, offset: 40840},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1204, col: 1, offset: 40905},
			expr: &choiceExpr{
				pos: position{line: 1204, col: 31, offset: 40935},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1204, col: 31, offset: 40935},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1205, col: 11, offset: 40950},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1205, col: 11, offset: 40950},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1205, col: 19, offset: 40958},
								expr: &ruleRefExpr{
									pos:  position{line: 1205, col: 20, offset: 40959},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1206, col: 11, offset: 40977},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1207, col: 11, offset: 41007},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 11, offset: 41030},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1209, col: 11, offset: 41051},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1210, col: 11, offset: 41072},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1211, col: 11, offset: 41096},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1212, col: 11, offset: 41120},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1213, col: 11, offset: 41146},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 11, offset: 41163},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 11, offset: 41184},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1216, col: 11, offset: 41206},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1217, col: 11, offset: 41221},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1218, col: 11, offset: 41249},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1219, col: 11, offset: 41281},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1220, col: 11, offset: 41309},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1223, col: 1, offset: 41348},
			expr: &choiceExpr{
				pos: position{line: 1224, col: 5, offset: 41392},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1224, col: 5, offset: 41392},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1225, col: 7, offset: 41489},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1225, col: 7, offset: 41489},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1225, col: 7, offset: 41489},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1225, col: 12, offset: 41494},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1229, col: 1, offset: 41657},
			expr: &choiceExpr{
				pos: position{line: 1229, col: 24, offset: 41680},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1229, col: 24, offset: 41680},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1229, col: 24, offset: 41680},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1229, col: 24, offset: 41680},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1229, col: 30, offset: 41686},
										expr: &ruleRefExpr{
											pos:  position{line: 1229, col: 31, offset: 41687},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1229, col: 51, offset: 41707},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1229, col: 51, offset: 41707},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1229, col: 55, offset: 41711},
											expr: &litMatcher{
												pos:        position{line: 1229, col: 56, offset: 41712},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1229, col: 61, offset: 41717},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1229, col: 71, offset: 41727},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1229, col: 100, offset: 41756},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1229, col: 104, offset: 41760},
									expr: &notExpr{
										pos: position{line: 1229, col: 106, offset: 41762},
										expr: &ruleRefExpr{
											pos:  position{line: 1229, col: 107, offset: 41763},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1231, col: 5, offset: 41957},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1231, col: 5, offset: 41957},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1231, col: 5, offset: 41957},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1231, col: 11, offset: 41963},
										expr: &ruleRefExpr{
											pos:  position{line: 1231, col: 12, offset: 41964},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1231, col: 30, offset: 41982},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1231, col: 34, offset: 41986},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1231, col: 44, offset: 41996},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1231, col: 44, offset: 41996},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1231, col: 48, offset: 42000},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1231, col: 77, offset: 42029},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1235, col: 1, offset: 42235},
			expr: &seqExpr{
				pos: position{line: 1235, col: 32, offset: 42266},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1235, col: 32, offset: 42266},
						expr: &ruleRefExpr{
							pos:  position{line: 1235, col: 33, offset: 42267},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1235, col: 39, offset: 42273},
						expr: &ruleRefExpr{
							pos:  position{line: 1235, col: 39, offset: 42273},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1237, col: 1, offset: 42302},
			expr: &choiceExpr{
				pos: position{line: 1237, col: 31, offset: 42332},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1237, col: 31, offset: 42332},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1238, col: 11, offset: 42347},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1238, col: 11, offset: 42347},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1238, col: 19, offset: 42355},
								expr: &ruleRefExpr{
									pos:  position{line: 1238, col: 20, offset: 42356},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1239, col: 11, offset: 42374},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1240, col: 11, offset: 42404},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1241, col: 11, offset: 42427},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1241, col: 11, offset: 42427},
								expr: &ruleRefExpr{
									pos:  position{line: 1241, col: 11, offset: 42427},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1241, col: 18, offset: 42434},
								expr: &seqExpr{
									pos: position{line: 1241, col: 19, offset: 42435},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1241, col: 19, offset: 42435},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1241, col: 23, offset: 42439},
											expr: &litMatcher{
												pos:        position{line: 1241, col: 24, offset: 42440},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1242, col: 11, offset: 42456},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1243, col: 11, offset: 42477},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1244, col: 11, offset: 42498},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1245, col: 11, offset: 42522},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1246, col: 11, offset: 42546},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1247, col: 11, offset: 42572},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1248, col: 11, offset: 42589},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1249, col: 11, offset: 42610},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1250, col: 11, offset: 42633},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1251, col: 11, offset: 42650},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1252, col: 11, offset: 42678},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1253, col: 11, offset: 42710},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1254, col: 11, offset: 42738},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1256, col: 1, offset: 42776},
			expr: &choiceExpr{
				pos: position{line: 1257, col: 5, offset: 42820},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1257, col: 5, offset: 42820},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1258, col: 7, offset: 42917},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1258, col: 7, offset: 42917},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1258, col: 7, offset: 42917},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1258, col: 11, offset: 42921},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1262, col: 1, offset: 43084},
			expr: &choiceExpr{
				pos: position{line: 1263, col: 5, offset: 43108},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1263, col: 5, offset: 43108},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1263, col: 5, offset: 43108},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1263, col: 5, offset: 43108},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1263, col: 18, offset: 43121},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1263, col: 40, offset: 43143},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1263, col: 45, offset: 43148},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1263, col: 55, offset: 43158},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1263, col: 84, offset: 43187},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1265, col: 9, offset: 43344},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1265, col: 9, offset: 43344},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1265, col: 9, offset: 43344},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1265, col: 22, offset: 43357},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1265, col: 44, offset: 43379},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1265, col: 49, offset: 43384},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1265, col: 59, offset: 43394},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1265, col: 88, offset: 43423},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1268, col: 9, offset: 43623},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1268, col: 9, offset: 43623},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1268, col: 9, offset: 43623},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1268, col: 22, offset: 43636},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1268, col: 44, offset: 43658},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1268, col: 48, offset: 43662},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1268, col: 58, offset: 43672},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1268, col: 87, offset: 43701},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1276, col: 1, offset: 43909},
			expr: &choiceExpr{
				pos: position{line: 1276, col: 15, offset: 43923},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1276, col: 15, offset: 43923},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1276, col: 39, offset: 43947},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1278, col: 1, offset: 43970},
			expr: &actionExpr{
				pos: position{line: 1278, col: 26, offset: 43995},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1278, col: 26, offset: 43995},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1278, col: 26, offset: 43995},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1278, col: 32, offset: 44001},
								expr: &ruleRefExpr{
									pos:  position{line: 1278, col: 33, offset: 44002},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1278, col: 51, offset: 44020},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1278, col: 56, offset: 44025},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1278, col: 66, offset: 44035},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1278, col: 97, offset: 44066},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1282, col: 1, offset: 44200},
			expr: &seqExpr{
				pos: position{line: 1282, col: 34, offset: 44233},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1282, col: 34, offset: 44233},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1282, col: 63, offset: 44262},
						expr: &seqExpr{
							pos: position{line: 1282, col: 64, offset: 44263},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1282, col: 64, offset: 44263},
									expr: &litMatcher{
										pos:        position{line: 1282, col: 66, offset: 44265},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1282, col: 73, offset: 44272},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1282, col: 73, offset: 44272},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1282, col: 81, offset: 44280},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1284, col: 1, offset: 44347},
			expr: &choiceExpr{
				pos: position{line: 1284, col: 33, offset: 44379},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1284, col: 33, offset: 44379},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1285, col: 11, offset: 44394},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1285, col: 11, offset: 44394},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1285, col: 19, offset: 44402},
								expr: &ruleRefExpr{
									pos:  position{line: 1285, col: 20, offset: 44403},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1286, col: 11, offset: 44421},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1287, col: 11, offset: 44453},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1288, col: 11, offset: 44476},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 11, offset: 44495},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1290, col: 11, offset: 44516},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1291, col: 11, offset: 44540},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1292, col: 11, offset: 44564},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1293, col: 11, offset: 44590},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1294, col: 11, offset: 44607},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1295, col: 11, offset: 44628},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1296, col: 11, offset: 44651},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1297, col: 11, offset: 44667},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1298, col: 11, offset: 44695},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 11, offset: 44723},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1301, col: 1, offset: 44763},
			expr: &choiceExpr{
				pos: position{line: 1302, col: 5, offset: 44809},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1302, col: 5, offset: 44809},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1303, col: 7, offset: 44908},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1303, col: 7, offset: 44908},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1303, col: 7, offset: 44908},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1303, col: 12, offset: 44913},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1307, col: 1, offset: 45078},
			expr: &choiceExpr{
				pos: position{line: 1307, col: 26, offset: 45103},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1307, col: 26, offset: 45103},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1307, col: 26, offset: 45103},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1307, col: 26, offset: 45103},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1307, col: 32, offset: 45109},
										expr: &ruleRefExpr{
											pos:  position{line: 1307, col: 33, offset: 45110},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1307, col: 52, offset: 45129},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1307, col: 52, offset: 45129},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1307, col: 56, offset: 45133},
											expr: &litMatcher{
												pos:        position{line: 1307, col: 57, offset: 45134},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1307, col: 62, offset: 45139},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1307, col: 72, offset: 45149},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1307, col: 103, offset: 45180},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1309, col: 5, offset: 45370},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1309, col: 5, offset: 45370},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1309, col: 5, offset: 45370},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1309, col: 11, offset: 45376},
										expr: &ruleRefExpr{
											pos:  position{line: 1309, col: 12, offset: 45377},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1309, col: 30, offset: 45395},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1309, col: 34, offset: 45399},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1309, col: 44, offset: 45409},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1309, col: 44, offset: 45409},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1309, col: 48, offset: 45413},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1309, col: 79, offset: 45444},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1313, col: 1, offset: 45654},
			expr: &seqExpr{
				pos: position{line: 1313, col: 34, offset: 45687},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1313, col: 34, offset: 45687},
						expr: &ruleRefExpr{
							pos:  position{line: 1313, col: 35, offset: 45688},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1313, col: 41, offset: 45694},
						expr: &ruleRefExpr{
							pos:  position{line: 1313, col: 41, offset: 45694},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1315, col: 1, offset: 45725},
			expr: &choiceExpr{
				pos: position{line: 1315, col: 33, offset: 45757},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1315, col: 33, offset: 45757},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1316, col: 11, offset: 45772},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1316, col: 11, offset: 45772},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1316, col: 19, offset: 45780},
								expr: &ruleRefExpr{
									pos:  position{line: 1316, col: 20, offset: 45781},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1317, col: 11, offset: 45799},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1318, col: 11, offset: 45831},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1319, col: 11, offset: 45854},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1319, col: 11, offset: 45854},
								expr: &ruleRefExpr{
									pos:  position{line: 1319, col: 11, offset: 45854},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1319, col: 18, offset: 45861},
								expr: &seqExpr{
									pos: position{line: 1319, col: 19, offset: 45862},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1319, col: 19, offset: 45862},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1319, col: 23, offset: 45866},
											expr: &litMatcher{
												pos:        position{line: 1319, col: 24, offset: 45867},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1320, col: 11, offset: 45883},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1321, col: 11, offset: 45902},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1322, col: 11, offset: 45923},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1323, col: 11, offset: 45947},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1324, col: 11, offset: 45971},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1325, col: 11, offset: 45997},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1326, col: 11, offset: 46014},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1327, col: 11, offset: 46035},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1328, col: 11, offset: 46058},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1329, col: 11, offset: 46075},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 11, offset: 46104},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1331, col: 11, offset: 46136},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 11, offset: 46164},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1334, col: 1, offset: 46204},
			expr: &choiceExpr{
				pos: position{line: 1335, col: 5, offset: 46250},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1335, col: 5, offset: 46250},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1336, col: 7, offset: 46349},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1336, col: 7, offset: 46349},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1336, col: 7, offset: 46349},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1336, col: 11, offset: 46353},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1340, col: 1, offset: 46519},
			expr: &choiceExpr{
				pos: position{line: 1341, col: 5, offset: 46545},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1341, col: 5, offset: 46545},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1341, col: 5, offset: 46545},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1341, col: 5, offset: 46545},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1341, col: 18, offset: 46558},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1341, col: 40, offset: 46580},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1341, col: 45, offset: 46585},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1341, col: 55, offset: 46595},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1341, col: 86, offset: 46626},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1343, col: 9, offset: 46783},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1343, col: 9, offset: 46783},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1343, col: 9, offset: 46783},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1343, col: 22, offset: 46796},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1343, col: 44, offset: 46818},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1343, col: 49, offset: 46823},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1343, col: 59, offset: 46833},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1343, col: 90, offset: 46864},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1346, col: 9, offset: 47064},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1346, col: 9, offset: 47064},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1346, col: 9, offset: 47064},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1346, col: 22, offset: 47077},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1346, col: 44, offset: 47099},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1346, col: 48, offset: 47103},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1346, col: 58, offset: 47113},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1346, col: 89, offset: 47144},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1353, col: 1, offset: 47354},
			expr: &choiceExpr{
				pos: position{line: 1353, col: 18, offset: 47371},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1353, col: 18, offset: 47371},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1353, col: 45, offset: 47398},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1355, col: 1, offset: 47424},
			expr: &actionExpr{
				pos: position{line: 1355, col: 29, offset: 47452},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1355, col: 29, offset: 47452},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1355, col: 29, offset: 47452},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1355, col: 35, offset: 47458},
								expr: &ruleRefExpr{
									pos:  position{line: 1355, col: 36, offset: 47459},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1355, col: 54, offset: 47477},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1355, col: 59, offset: 47482},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1355, col: 69, offset: 47492},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1355, col: 103, offset: 47526},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1359, col: 1, offset: 47663},
			expr: &seqExpr{
				pos: position{line: 1359, col: 37, offset: 47699},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1359, col: 37, offset: 47699},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1359, col: 69, offset: 47731},
						expr: &seqExpr{
							pos: position{line: 1359, col: 70, offset: 47732},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1359, col: 70, offset: 47732},
									expr: &litMatcher{
										pos:        position{line: 1359, col: 72, offset: 47734},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1359, col: 79, offset: 47741},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1359, col: 79, offset: 47741},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1359, col: 87, offset: 47749},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1361, col: 1, offset: 47818},
			expr: &choiceExpr{
				pos: position{line: 1361, col: 36, offset: 47853},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1361, col: 36, offset: 47853},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1362, col: 11, offset: 47868},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1362, col: 11, offset: 47868},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1362, col: 19, offset: 47876},
								expr: &ruleRefExpr{
									pos:  position{line: 1362, col: 20, offset: 47877},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1363, col: 11, offset: 47895},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1364, col: 11, offset: 47912},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1365, col: 11, offset: 47947},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1366, col: 11, offset: 47970},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1367, col: 11, offset: 47989},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1368, col: 11, offset: 48010},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1369, col: 11, offset: 48031},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1370, col: 11, offset: 48055},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1371, col: 11, offset: 48081},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1372, col: 11, offset: 48102},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1373, col: 11, offset: 48124},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1374, col: 11, offset: 48139},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1375, col: 11, offset: 48168},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1376, col: 11, offset: 48196},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1378, col: 1, offset: 48239},
			expr: &choiceExpr{
				pos: position{line: 1379, col: 5, offset: 48288},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1379, col: 5, offset: 48288},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1380, col: 7, offset: 48390},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1380, col: 7, offset: 48390},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1380, col: 7, offset: 48390},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1380, col: 12, offset: 48395},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1384, col: 1, offset: 48563},
			expr: &choiceExpr{
				pos: position{line: 1384, col: 29, offset: 48591},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1384, col: 29, offset: 48591},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1384, col: 29, offset: 48591},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1384, col: 29, offset: 48591},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1384, col: 35, offset: 48597},
										expr: &ruleRefExpr{
											pos:  position{line: 1384, col: 36, offset: 48598},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1384, col: 55, offset: 48617},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1384, col: 55, offset: 48617},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1384, col: 59, offset: 48621},
											expr: &litMatcher{
												pos:        position{line: 1384, col: 60, offset: 48622},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1384, col: 65, offset: 48627},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1384, col: 75, offset: 48637},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1384, col: 109, offset: 48671},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1386, col: 5, offset: 48864},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1386, col: 5, offset: 48864},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1386, col: 5, offset: 48864},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1386, col: 11, offset: 48870},
										expr: &ruleRefExpr{
											pos:  position{line: 1386, col: 12, offset: 48871},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1386, col: 30, offset: 48889},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1386, col: 34, offset: 48893},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1386, col: 44, offset: 48903},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1386, col: 44, offset: 48903},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1386, col: 48, offset: 48907},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1386, col: 82, offset: 48941},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1390, col: 1, offset: 49155},
			expr: &seqExpr{
				pos: position{line: 1390, col: 37, offset: 49191},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1390, col: 37, offset: 49191},
						expr: &ruleRefExpr{
							pos:  position{line: 1390, col: 38, offset: 49192},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1390, col: 44, offset: 49198},
						expr: &ruleRefExpr{
							pos:  position{line: 1390, col: 44, offset: 49198},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1392, col: 1, offset: 49232},
			expr: &choiceExpr{
				pos: position{line: 1392, col: 37, offset: 49268},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1392, col: 37, offset: 49268},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1393, col: 11, offset: 49283},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1393, col: 11, offset: 49283},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1393, col: 19, offset: 49291},
								expr: &ruleRefExpr{
									pos:  position{line: 1393, col: 20, offset: 49292},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1394, col: 11, offset: 49310},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1395, col: 11, offset: 49345},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1396, col: 11, offset: 49368},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1396, col: 11, offset: 49368},
								expr: &ruleRefExpr{
									pos:  position{line: 1396, col: 11, offset: 49368},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1396, col: 18, offset: 49375},
								expr: &seqExpr{
									pos: position{line: 1396, col: 19, offset: 49376},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1396, col: 19, offset: 49376},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1396, col: 23, offset: 49380},
											expr: &litMatcher{
												pos:        position{line: 1396, col: 24, offset: 49381},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1397, col: 11, offset: 49509},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1398, col: 11, offset: 49528},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1399, col: 11, offset: 49549},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1400, col: 11, offset: 49570},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1401, col: 11, offset: 49594},
						name: "SuperscriptText",
					},
					&seqExpr{
						pos: position{line: 1402, col: 11, offset: 49620},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1402, col: 11, offset: 49620},
								expr: &litMatcher{
									pos:        position{line: 1402, col: 12, offset: 49621},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1402, col: 16, offset: 49625},
								name: "Symbol",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1403, col: 11, offset: 49642},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1404, col: 11, offset: 49663},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1405, col: 11, offset: 49686},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1406, col: 11, offset: 49702},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1407, col: 11, offset: 49731},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1408, col: 11, offset: 49763},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1409, col: 11, offset: 49791},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1411, col: 1, offset: 49834},
			expr: &choiceExpr{
				pos: position{line: 1412, col: 5, offset: 49883},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1412, col: 5, offset: 49883},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1413, col: 7, offset: 49985},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1413, col: 7, offset: 49985},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1413, col: 7, offset: 49985},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1413, col: 11, offset: 49989},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1417, col: 1, offset: 50158},
			expr: &choiceExpr{
				pos: position{line: 1418, col: 5, offset: 50187},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1418, col: 5, offset: 50187},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1418, col: 5, offset: 50187},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1418, col: 5, offset: 50187},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1418, col: 18, offset: 50200},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1418, col: 40, offset: 50222},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1418, col: 45, offset: 50227},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1418, col: 55, offset: 50237},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1418, col: 89, offset: 50271},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1420, col: 9, offset: 50428},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1420, col: 9, offset: 50428},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1420, col: 9, offset: 50428},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1420, col: 22, offset: 50441},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1420, col: 44, offset: 50463},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1420, col: 49, offset: 50468},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1420, col: 59, offset: 50478},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1420, col: 93, offset: 50512},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1423, col: 9, offset: 50712},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1423, col: 9, offset: 50712},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1423, col: 9, offset: 50712},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1423, col: 22, offset: 50725},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1423, col: 44, offset: 50747},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1423, col: 48, offset: 50751},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1423, col: 58, offset: 50761},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1423, col: 92, offset: 50795},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1431, col: 1, offset: 51003},
			expr: &choiceExpr{
				pos: position{line: 1431, col: 15, offset: 51017},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1431, col: 15, offset: 51017},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1431, col: 39, offset: 51041},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1433, col: 1, offset: 51064},
			expr: &actionExpr{
				pos: position{line: 1433, col: 26, offset: 51089},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1433, col: 26, offset: 51089},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1433, col: 26, offset: 51089},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1433, col: 32, offset: 51095},
								expr: &ruleRefExpr{
									pos:  position{line: 1433, col: 33, offset: 51096},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1433, col: 51, offset: 51114},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1433, col: 56, offset: 51119},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1433, col: 66, offset: 51129},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1433, col: 97, offset: 51160},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1437, col: 1, offset: 51294},
			expr: &seqExpr{
				pos: position{line: 1437, col: 34, offset: 51327},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1437, col: 34, offset: 51327},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1437, col: 63, offset: 51356},
						expr: &seqExpr{
							pos: position{line: 1437, col: 64, offset: 51357},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1437, col: 64, offset: 51357},
									expr: &litMatcher{
										pos:        position{line: 1437, col: 66, offset: 51359},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1437, col: 73, offset: 51366},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1437, col: 73, offset: 51366},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1437, col: 81, offset: 51374},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1439, col: 1, offset: 51441},
			expr: &choiceExpr{
				pos: position{line: 1439, col: 33, offset: 51473},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1439, col: 33, offset: 51473},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1440, col: 11, offset: 51488},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1441, col: 11, offset: 51520},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1441, col: 11, offset: 51520},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1441, col: 19, offset: 51528},
								expr: &ruleRefExpr{
									pos:  position{line: 1441, col: 20, offset: 51529},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1442, col: 11, offset: 51547},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1443, col: 11, offset: 51570},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1444, col: 11, offset: 51589},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1445, col: 11, offset: 51610},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1446, col: 11, offset: 51634},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1447, col: 11, offset: 51658},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1448, col: 11, offset: 51684},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1449, col: 11, offset: 51701},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1450, col: 11, offset: 51722},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1451, col: 11, offset: 51744},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1452, col: 11, offset: 51759},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1453, col: 11, offset: 51787},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1454, col: 11, offset: 51815},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1456, col: 1, offset: 51855},
			expr: &choiceExpr{
				pos: position{line: 1457, col: 5, offset: 51901},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1457, col: 5, offset: 51901},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1458, col: 7, offset: 52000},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1458, col: 7, offset: 52000},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1458, col: 7, offset: 52000},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1458, col: 12, offset: 52005},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1462, col: 1, offset: 52170},
			expr: &choiceExpr{
				pos: position{line: 1462, col: 26, offset: 52195},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1462, col: 26, offset: 52195},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1462, col: 26, offset: 52195},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1462, col: 26, offset: 52195},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1462, col: 32, offset: 52201},
										expr: &ruleRefExpr{
											pos:  position{line: 1462, col: 33, offset: 52202},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1462, col: 52, offset: 52221},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1462, col: 52, offset: 52221},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1462, col: 56, offset: 52225},
											expr: &litMatcher{
												pos:        position{line: 1462, col: 57, offset: 52226},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1462, col: 62, offset: 52231},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1462, col: 72, offset: 52241},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1462, col: 103, offset: 52272},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1464, col: 5, offset: 52462},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1464, col: 5, offset: 52462},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1464, col: 5, offset: 52462},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1464, col: 11, offset: 52468},
										expr: &ruleRefExpr{
											pos:  position{line: 1464, col: 12, offset: 52469},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1464, col: 30, offset: 52487},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1464, col: 34, offset: 52491},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1464, col: 44, offset: 52501},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1464, col: 44, offset: 52501},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1464, col: 48, offset: 52505},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1464, col: 79, offset: 52536},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1468, col: 1, offset: 52745},
			expr: &seqExpr{
				pos: position{line: 1468, col: 34, offset: 52778},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1468, col: 34, offset: 52778},
						expr: &ruleRefExpr{
							pos:  position{line: 1468, col: 35, offset: 52779},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1468, col: 41, offset: 52785},
						expr: &ruleRefExpr{
							pos:  position{line: 1468, col: 41, offset: 52785},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1470, col: 1, offset: 52816},
			expr: &choiceExpr{
				pos: position{line: 1470, col: 33, offset: 52848},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1470, col: 33, offset: 52848},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1471, col: 11, offset: 52863},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1472, col: 11, offset: 52895},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1472, col: 11, offset: 52895},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1472, col: 19, offset: 52903},
								expr: &ruleRefExpr{
									pos:  position{line: 1472, col: 20, offset: 52904},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1473, col: 11, offset: 52922},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1474, col: 11, offset: 52945},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1474, col: 11, offset: 52945},
								expr: &ruleRefExpr{
									pos:  position{line: 1474, col: 11, offset: 52945},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1474, col: 18, offset: 52952},
								expr: &seqExpr{
									pos: position{line: 1474, col: 19, offset: 52953},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1474, col: 19, offset: 52953},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1474, col: 23, offset: 52957},
											expr: &litMatcher{
												pos:        position{line: 1474, col: 24, offset: 52958},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1475, col: 11, offset: 52974},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1476, col: 11, offset: 52993},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1477, col: 11, offset: 53014},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1478, col: 11, offset: 53038},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1479, col: 11, offset: 53062},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1480, col: 11, offset: 53088},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1481, col: 11, offset: 53105},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1482, col: 11, offset: 53126},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1483, col: 11, offset: 53148},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1484, col: 11, offset: 53163},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1485, col: 11, offset: 53191},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1486, col: 11, offset: 53223},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1487, col: 11, offset: 53251},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1489, col: 1, offset: 53291},
			expr: &choiceExpr{
				pos: position{line: 1490, col: 5, offset: 53337},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1490, col: 5, offset: 53337},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1491, col: 7, offset: 53434},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1491, col: 7, offset: 53434},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1491, col: 7, offset: 53434},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1491, col: 11, offset: 53438},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1495, col: 1, offset: 53601},
			expr: &choiceExpr{
				pos: position{line: 1496, col: 5, offset: 53626},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1496, col: 5, offset: 53626},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1496, col: 5, offset: 53626},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1496, col: 5, offset: 53626},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1496, col: 18, offset: 53639},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1496, col: 40, offset: 53661},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1496, col: 45, offset: 53666},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1496, col: 55, offset: 53676},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1496, col: 86, offset: 53707},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1498, col: 9, offset: 53864},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1498, col: 9, offset: 53864},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1498, col: 9, offset: 53864},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1498, col: 22, offset: 53877},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1498, col: 44, offset: 53899},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1498, col: 49, offset: 53904},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1498, col: 59, offset: 53914},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1498, col: 90, offset: 53945},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1501, col: 9, offset: 54145},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1501, col: 9, offset: 54145},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1501, col: 9, offset: 54145},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1501, col: 22, offset: 54158},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1501, col: 44, offset: 54180},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1501, col: 48, offset: 54184},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1501, col: 58, offset: 54194},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1501, col: 89, offset: 54225},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1506, col: 1, offset: 54375},
			expr: &actionExpr{
				pos: position{line: 1506, col: 18, offset: 54392},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1506, col: 18, offset: 54392},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1506, col: 18, offset: 54392},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1506, col: 24, offset: 54398},
								expr: &ruleRefExpr{
									pos:  position{line: 1506, col: 25, offset: 54399},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1506, col: 43, offset: 54417},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1506, col: 47, offset: 54421},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1506, col: 56, offset: 54430},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1506, col: 78, offset: 54452},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1510, col: 1, offset: 54548},
			expr: &choiceExpr{
				pos: position{line: 1510, col: 25, offset: 54572},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1510, col: 25, offset: 54572},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1510, col: 38, offset: 54585},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1512, col: 1, offset: 54604},
			expr: &actionExpr{
				pos: position{line: 1512, col: 21, offset: 54624},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1512, col: 21, offset: 54624},
					expr: &charClassMatcher{
						pos:        position{line: 1512, col: 21, offset: 54624},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1516, col: 1, offset: 54701},
			expr: &actionExpr{
				pos: position{line: 1516, col: 25, offset: 54725},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1516, col: 25, offset: 54725},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1516, col: 25, offset: 54725},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1516, col: 38, offset: 54738},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1516, col: 60, offset: 54760},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1516, col: 64, offset: 54764},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1516, col: 73, offset: 54773},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1516, col: 95, offset: 54795},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1520, col: 1, offset: 54924},
			expr: &actionExpr{
				pos: position{line: 1520, col: 20, offset: 54943},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1520, col: 20, offset: 54943},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1520, col: 20, offset: 54943},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1520, col: 26, offset: 54949},
								expr: &ruleRefExpr{
									pos:  position{line: 1520, col: 27, offset: 54950},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1520, col: 45, offset: 54968},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1520, col: 49, offset: 54972},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1520, col: 58, offset: 54981},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1520, col: 82, offset: 55005},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1524, col: 1, offset: 55103},
			expr: &choiceExpr{
				pos: position{line: 1524, col: 27, offset: 55129},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1524, col: 27, offset: 55129},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1524, col: 40, offset: 55142},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1526, col: 1, offset: 55163},
			expr: &actionExpr{
				pos: position{line: 1526, col: 23, offset: 55185},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1526, col: 23, offset: 55185},
					expr: &charClassMatcher{
						pos:        position{line: 1526, col: 23, offset: 55185},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1530, col: 1, offset: 55262},
			expr: &actionExpr{
				pos: position{line: 1530, col: 27, offset: 55288},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1530, col: 27, offset: 55288},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1530, col: 27, offset: 55288},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1530, col: 40, offset: 55301},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1530, col: 62, offset: 55323},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1530, col: 66, offset: 55327},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1530, col: 75, offset: 55336},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1530, col: 99, offset: 55360},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1537, col: 1, offset: 55602},
			expr: &choiceExpr{
				pos: position{line: 1537, col: 22, offset: 55623},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1537, col: 22, offset: 55623},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1537, col: 46, offset: 55647},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1537, col: 70, offset: 55671},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1539, col: 1, offset: 55689},
			expr: &litMatcher{
				pos:        position{line: 1539, col: 32, offset: 55720},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1541, col: 1, offset: 55725},
			expr: &actionExpr{
				pos: position{line: 1541, col: 26, offset: 55750},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1541, col: 26, offset: 55750},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1541, col: 26, offset: 55750},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1541, col: 54, offset: 55778},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1541, col: 63, offset: 55787},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1541, col: 93, offset: 55817},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1541, col: 121, offset: 55845},
							expr: &ruleRefExpr{
								pos:  position{line: 1541, col: 122, offset: 55846},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1545, col: 1, offset: 55951},
			expr: &choiceExpr{
				pos: position{line: 1545, col: 33, offset: 55983},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1545, col: 34, offset: 55984},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1545, col: 34, offset: 55984},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1545, col: 35, offset: 55985},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1545, col: 35, offset: 55985},
											expr: &ruleRefExpr{
												pos:  position{line: 1545, col: 36, offset: 55986},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1545, col: 64, offset: 56014},
											expr: &ruleRefExpr{
												pos:  position{line: 1545, col: 65, offset: 56015},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1545, col: 71, offset: 56021},
											expr: &ruleRefExpr{
												pos:  position{line: 1545, col: 72, offset: 56022},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1545, col: 80, offset: 56030,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1545, col: 83, offset: 56033},
									expr: &seqExpr{
										pos: position{line: 1545, col: 84, offset: 56034},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1545, col: 84, offset: 56034},
												expr: &seqExpr{
													pos: position{line: 1545, col: 86, offset: 56036},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1545, col: 86, offset: 56036},
															expr: &ruleRefExpr{
																pos:  position{line: 1545, col: 86, offset: 56036},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1545, col: 93, offset: 56043},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1545, col: 122, offset: 56072},
												expr: &ruleRefExpr{
													pos:  position{line: 1545, col: 123, offset: 56073},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1545, col: 151, offset: 56101},
												expr: &ruleRefExpr{
													pos:  position{line: 1545, col: 152, offset: 56102},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1545, col: 160, offset: 56110,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1547, col: 7, offset: 56252},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1547, col: 8, offset: 56253},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1547, col: 8, offset: 56253},
									expr: &ruleRefExpr{
										pos:  position{line: 1547, col: 9, offset: 56254},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1547, col: 15, offset: 56260},
									expr: &ruleRefExpr{
										pos:  position{line: 1547, col: 16, offset: 56261},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1547, col: 24, offset: 56269},
									expr: &ruleRefExpr{
										pos:  position{line: 1547, col: 25, offset: 56270},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1547, col: 53, offset: 56298,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1551, col: 1, offset: 56380},
			expr: &litMatcher{
				pos:        position{line: 1551, col: 32, offset: 56411},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1553, col: 1, offset: 56418},
			expr: &actionExpr{
				pos: position{line: 1553, col: 26, offset: 56443},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1553, col: 26, offset: 56443},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1553, col: 26, offset: 56443},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1553, col: 54, offset: 56471},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1553, col: 63, offset: 56480},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1553, col: 93, offset: 56510},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1553, col: 121, offset: 56538},
							expr: &ruleRefExpr{
								pos:  position{line: 1553, col: 122, offset: 56539},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1557, col: 1, offset: 56644},
			expr: &choiceExpr{
				pos: position{line: 1557, col: 33, offset: 56676},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1557, col: 34, offset: 56677},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1557, col: 34, offset: 56677},
							expr: &seqExpr{
								pos: position{line: 1557, col: 35, offset: 56678},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1557, col: 35, offset: 56678},
										expr: &ruleRefExpr{
											pos:  position{line: 1557, col: 36, offset: 56679},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1557, col: 64, offset: 56707,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1559, col: 7, offset: 56872},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1559, col: 7, offset: 56872},
							expr: &seqExpr{
								pos: position{line: 1559, col: 8, offset: 56873},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1559, col: 8, offset: 56873},
										expr: &ruleRefExpr{
											pos:  position{line: 1559, col: 9, offset: 56874},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1559, col: 15, offset: 56880},
										expr: &ruleRefExpr{
											pos:  position{line: 1559, col: 16, offset: 56881},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1559, col: 24, offset: 56889},
										expr: &ruleRefExpr{
											pos:  position{line: 1559, col: 25, offset: 56890},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1559, col: 53, offset: 56918,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1563, col: 1, offset: 57001},
			expr: &choiceExpr{
				pos: position{line: 1563, col: 21, offset: 57021},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1563, col: 21, offset: 57021},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1563, col: 21, offset: 57021},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1563, col: 21, offset: 57021},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1563, col: 30, offset: 57030},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1563, col: 38, offset: 57038},
										expr: &ruleRefExpr{
											pos:  position{line: 1563, col: 39, offset: 57039},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1563, col: 67, offset: 57067},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1565, col: 5, offset: 57163},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1565, col: 5, offset: 57163},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1565, col: 5, offset: 57163},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1565, col: 15, offset: 57173},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1565, col: 23, offset: 57181},
										expr: &choiceExpr{
											pos: position{line: 1565, col: 24, offset: 57182},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1565, col: 24, offset: 57182},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1565, col: 37, offset: 57195},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1565, col: 65, offset: 57223},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1569, col: 1, offset: 57319},
			expr: &actionExpr{
				pos: position{line: 1569, col: 30, offset: 57348},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1569, col: 30, offset: 57348},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1576, col: 1, offset: 57521},
			expr: &choiceExpr{
				pos: position{line: 1576, col: 19, offset: 57539},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1576, col: 19, offset: 57539},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1576, col: 44, offset: 57564},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1578, col: 1, offset: 57589},
			expr: &choiceExpr{
				pos: position{line: 1578, col: 27, offset: 57615},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1578, col: 27, offset: 57615},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1578, col: 27, offset: 57615},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1578, col: 27, offset: 57615},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1578, col: 32, offset: 57620},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1578, col: 36, offset: 57624},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1578, col: 40, offset: 57628},
									expr: &ruleRefExpr{
										pos:  position{line: 1578, col: 40, offset: 57628},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1578, col: 47, offset: 57635},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1578, col: 51, offset: 57639},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1578, col: 58, offset: 57646},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1578, col: 79, offset: 57667},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1580, col: 5, offset: 57750},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1580, col: 5, offset: 57750},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1580, col: 5, offset: 57750},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1580, col: 10, offset: 57755},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1580, col: 14, offset: 57759},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1580, col: 18, offset: 57763},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1584, col: 1, offset: 57835},
			expr: &actionExpr{
				pos: position{line: 1584, col: 27, offset: 57861},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1584, col: 27, offset: 57861},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1584, col: 27, offset: 57861},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1584, col: 35, offset: 57869},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1584, col: 40, offset: 57874},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1584, col: 54, offset: 57888},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1584, col: 72, offset: 57906},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1588, col: 1, offset: 58029},
			expr: &ruleRefExpr{
				pos:  position{line: 1588, col: 24, offset: 58052},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1593, col: 1, offset: 58174},
			expr: &choiceExpr{
				pos: position{line: 1593, col: 9, offset: 58182},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1593, col: 9, offset: 58182},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1593, col: 24, offset: 58197},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1596, col: 1, offset: 58278},
			expr: &actionExpr{
				pos: position{line: 1596, col: 17, offset: 58294},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1596, col: 17, offset: 58294},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1596, col: 17, offset: 58294},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1596, col: 25, offset: 58302},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1596, col: 30, offset: 58307},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1596, col: 40, offset: 58317},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1596, col: 58, offset: 58335},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1600, col: 1, offset: 58446},
			expr: &actionExpr{
				pos: position{line: 1600, col: 17, offset: 58462},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1600, col: 17, offset: 58462},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1600, col: 17, offset: 58462},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1600, col: 22, offset: 58467},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1600, col: 42, offset: 58487},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1600, col: 59, offset: 58504},
								expr: &ruleRefExpr{
									pos:  position{line: 1600, col: 60, offset: 58505},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1604, col: 1, offset: 58598},
			expr: &actionExpr{
				pos: position{line: 1604, col: 19, offset: 58616},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1604, col: 19, offset: 58616},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1604, col: 19, offset: 58616},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1604, col: 23, offset: 58620},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1604, col: 33, offset: 58630},
								expr: &ruleRefExpr{
									pos:  position{line: 1604, col: 34, offset: 58631},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1605, col: 5, offset: 58663},
							expr: &ruleRefExpr{
								pos:  position{line: 1605, col: 5, offset: 58663},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1605, col: 12, offset: 58670},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1605, col: 23, offset: 58681},
								expr: &ruleRefExpr{
									pos:  position{line: 1605, col: 24, offset: 58682},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1605, col: 43, offset: 58701},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1609, col: 1, offset: 58818},
			expr: &actionExpr{
				pos: position{line: 1609, col: 30, offset: 58847},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1609, col: 30, offset: 58847},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1611, col: 5, offset: 58898},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1611, col: 6, offset: 58899},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1611, col: 6, offset: 58899},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1611, col: 6, offset: 58899},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1611, col: 11, offset: 58904},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1611, col: 20, offset: 58913},
												expr: &choiceExpr{
													pos: position{line: 1611, col: 21, offset: 58914},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1611, col: 21, offset: 58914},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1611, col: 36, offset: 58929},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1611, col: 49, offset: 58942},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1611, col: 71, offset: 58964},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1611, col: 76, offset: 58969},
											expr: &notExpr{
												pos: position{line: 1611, col: 78, offset: 58971},
												expr: &litMatcher{
													pos:        position{line: 1611, col: 79, offset: 58972},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1611, col: 84, offset: 58977},
											expr: &litMatcher{
												pos:        position{line: 1611, col: 84, offset: 58977},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1615, col: 6, offset: 59104},
								run: (*parser).callonFirstLinkAttributeElement19,
								expr: &seqExpr{
									pos: position{line: 1615, col: 6, offset: 59104},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1615, col: 6, offset: 59104},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1615, col: 15, offset: 59113},
												expr: &choiceExpr{
													pos: position{line: 1615, col: 16, offset: 59114},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1615, col: 16, offset: 59114},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1615, col: 31, offset: 59129},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1615, col: 44, offset: 59142},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1615, col: 68, offset: 59166},
											expr: &notExpr{
												pos: position{line: 1615, col: 70, offset: 59168},
												expr: &litMatcher{
													pos:        position{line: 1615, col: 71, offset: 59169},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1615, col: 76, offset: 59174},
											expr: &litMatcher{
												pos:        position{line: 1615, col: 76, offset: 59174},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1621, col: 1, offset: 59288},
			expr: &actionExpr{
				pos: position{line: 1621, col: 18, offset: 59305},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1621, col: 18, offset: 59305},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1625, col: 1, offset: 59391},
			expr: &actionExpr{
				pos: position{line: 1625, col: 24, offset: 59414},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1625, col: 24, offset: 59414},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1629, col: 1, offset: 59507},
			expr: &actionExpr{
				pos: position{line: 1629, col: 26, offset: 59532},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1629, col: 26, offset: 59532},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1634, col: 1, offset: 59688},
			expr: &actionExpr{
				pos: position{line: 1635, col: 5, offset: 59707},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1635, col: 5, offset: 59707},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1635, col: 5, offset: 59707},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1635, col: 14, offset: 59716},
								expr: &choiceExpr{
									pos: position{line: 1635, col: 15, offset: 59717},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1635, col: 15, offset: 59717},
											name: "Word",
										},
										&ruleRefExpr{
											pos:  position{line: 1636, col: 11, offset: 59732},
											name: "Symbol",
										},
										&oneOrMoreExpr{
											pos: position{line: 1637, col: 11, offset: 59749},
											expr: &ruleRefExpr{
												pos:  position{line: 1637, col: 11, offset: 59749},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1638, col: 11, offset: 59767},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1639, col: 11, offset: 59791},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1640, col: 11, offset: 59813},
											name: "ImpliedApostrophe",
										},
										&ruleRefExpr{
											pos:  position{line: 1641, col: 11, offset: 59841},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1642, col: 11, offset: 59859},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1642, col: 21, offset: 59869},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1646, col: 1, offset: 59939},
			expr: &choiceExpr{
				pos: position{line: 1646, col: 17, offset: 59955},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1646, col: 17, offset: 59955},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1646, col: 40, offset: 59978},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1649, col: 1, offset: 60106},
			expr: &actionExpr{
				pos: position{line: 1649, col: 25, offset: 60130},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1649, col: 25, offset: 60130},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1649, col: 25, offset: 60130},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1649, col: 33, offset: 60138},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1649, col: 38, offset: 60143},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1649, col: 38, offset: 60143},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1649, col: 57, offset: 60162},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1649, col: 79, offset: 60184},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1649, col: 97, offset: 60202},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1653, col: 1, offset: 60313},
			expr: &actionExpr{
				pos: position{line: 1653, col: 25, offset: 60337},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1653, col: 25, offset: 60337},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1653, col: 25, offset: 60337},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1653, col: 30, offset: 60342},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1653, col: 48, offset: 60360},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1653, col: 65, offset: 60377},
								expr: &ruleRefExpr{
									pos:  position{line: 1653, col: 66, offset: 60378},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1660, col: 1, offset: 60573},
			expr: &actionExpr{
				pos: position{line: 1660, col: 15, offset: 60587},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1660, col: 15, offset: 60587},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1660, col: 15, offset: 60587},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1660, col: 26, offset: 60598},
								expr: &ruleRefExpr{
									pos:  position{line: 1660, col: 27, offset: 60599},
									name: "BlockImageAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1660, col: 45, offset: 60617},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1660, col: 55, offset: 60627},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1660, col: 61, offset: 60633},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1660, col: 71, offset: 60643},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1660, col: 84, offset: 60656},
								name: "InlineImageAttrs",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1660, col: 102, offset: 60674},
							expr: &ruleRefExpr{
								pos:  position{line: 1660, col: 102, offset: 60674},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1660, col: 109, offset: 60681},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1664, col: 1, offset: 60788},
			expr: &actionExpr{
				pos: position{line: 1664, col: 16, offset: 60803},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1664, col: 16, offset: 60803},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1664, col: 16, offset: 60803},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1664, col: 25, offset: 60812},
							expr: &litMatcher{
								pos:        position{line: 1664, col: 26, offset: 60813},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1664, col: 30, offset: 60817},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1664, col: 36, offset: 60823},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1664, col: 46, offset: 60833},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1664, col: 59, offset: 60846},
								name: "InlineImageAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttrs",
			pos:  position{line: 1668, col: 1, offset: 60956},
			expr: &actionExpr{
				pos: position{line: 1668, col: 21, offset: 60976},
				run: (*parser).callonInlineImageAttrs1,
				expr: &seqExpr{
					pos: position{line: 1668, col: 21, offset: 60976},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1668, col: 21, offset: 60976},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1668, col: 25, offset: 60980},
							label: "alt",
							expr: &ruleRefExpr{
								pos:  position{line: 1668, col: 29, offset: 60984},
								name: "ImageAltInline",
							},
						},
						&labeledExpr{
							pos:   position{line: 1668, col: 44, offset: 60999},
							label: "w",
							expr: &ruleRefExpr{
								pos:  position{line: 1668, col: 46, offset: 61001},
								name: "ImageWidth",
							},
						},
						&labeledExpr{
							pos:   position{line: 1668, col: 57, offset: 61012},
							label: "h",
							expr: &ruleRefExpr{
								pos:  position{line: 1668, col: 59, offset: 61014},
								name: "ImageHeight",
							},
						},
						&labeledExpr{
							pos:   position{line: 1668, col: 71, offset: 61026},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1668, col: 74, offset: 61029},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1668, col: 85, offset: 61040},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImageAttrs",
			pos:  position{line: 1672, col: 1, offset: 61102},
			expr: &choiceExpr{
				pos: position{line: 1672, col: 20, offset: 61121},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1672, col: 20, offset: 61121},
						name: "ImageAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 1672, col: 36, offset: 61137},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 1672, col: 51, offset: 61152},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1674, col: 1, offset: 61163},
			expr: &actionExpr{
				pos: position{line: 1674, col: 18, offset: 61180},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1674, col: 18, offset: 61180},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1674, col: 18, offset: 61180},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1674, col: 22, offset: 61184},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 1674, col: 29, offset: 61191},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 1674, col: 29, offset: 61191},
										expr: &ruleRefExpr{
											pos:  position{line: 1674, col: 29, offset: 61191},
											name: "ImageAltAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1674, col: 43, offset: 61205},
										expr: &ruleRefExpr{
											pos:  position{line: 1674, col: 43, offset: 61205},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1674, col: 58, offset: 61220},
										expr: &ruleRefExpr{
											pos:  position{line: 1674, col: 58, offset: 61220},
											name: "ImageWidthAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1674, col: 74, offset: 61236},
										expr: &ruleRefExpr{
											pos:  position{line: 1674, col: 74, offset: 61236},
											name: "ImageHeightAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1674, col: 91, offset: 61253},
										expr: &ruleRefExpr{
											pos:  position{line: 1674, col: 91, offset: 61253},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1674, col: 103, offset: 61265},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1674, col: 107, offset: 61269},
							expr: &ruleRefExpr{
								pos:  position{line: 1674, col: 107, offset: 61269},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1674, col: 114, offset: 61276},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageAltInline",
			pos:  position{line: 1678, col: 1, offset: 61330},
			expr: &actionExpr{
				pos: position{line: 1678, col: 19, offset: 61348},
				run: (*parser).callonImageAltInline1,
				expr: &labeledExpr{
					pos:   position{line: 1678, col: 19, offset: 61348},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1678, col: 25, offset: 61354},
						expr: &ruleRefExpr{
							pos:  position{line: 1678, col: 25, offset: 61354},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "ImageWidth",
			pos:  position{line: 1682, col: 1, offset: 61433},
			expr: &actionExpr{
				pos: position{line: 1682, col: 15, offset: 61447},
				run: (*parser).callonImageWidth1,
				expr: &seqExpr{
					pos: position{line: 1682, col: 15, offset: 61447},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1682, col: 15, offset: 61447},
							expr: &litMatcher{
								pos:        position{line: 1682, col: 15, offset: 61447},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1682, col: 20, offset: 61452},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1682, col: 26, offset: 61458},
								expr: &ruleRefExpr{
									pos:  position{line: 1682, col: 26, offset: 61458},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeight",
			pos:  position{line: 1686, col: 1, offset: 61534},
			expr: &actionExpr{
				pos: position{line: 1686, col: 16, offset: 61549},
				run: (*parser).callonImageHeight1,
				expr: &seqExpr{
					pos: position{line: 1686, col: 16, offset: 61549},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1686, col: 16, offset: 61549},
							expr: &litMatcher{
								pos:        position{line: 1686, col: 16, offset: 61549},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1686, col: 21, offset: 61554},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1686, col: 27, offset: 61560},
								expr: &ruleRefExpr{
									pos:  position{line: 1686, col: 27, offset: 61560},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAltAttr",
			pos:  position{line: 1690, col: 1, offset: 61642},
			expr: &actionExpr{
				pos: position{line: 1690, col: 17, offset: 61658},
				run: (*parser).callonImageAltAttr1,
				expr: &seqExpr{
					pos: position{line: 1690, col: 17, offset: 61658},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1690, col: 17, offset: 61658},
							expr: &ruleRefExpr{
								pos:  position{line: 1690, col: 17, offset: 61658},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1690, col: 24, offset: 61665},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1690, col: 30, offset: 61671},
								name: "PositionalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1690, col: 46, offset: 61687},
							expr: &ruleRefExpr{
								pos:  position{line: 1690, col: 46, offset: 61687},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageWidthAttr",
			pos:  position{line: 1694, col: 1, offset: 61772},
			expr: &actionExpr{
				pos: position{line: 1694, col: 19, offset: 61790},
				run: (*parser).callonImageWidthAttr1,
				expr: &seqExpr{
					pos: position{line: 1694, col: 19, offset: 61790},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1694, col: 19, offset: 61790},
							expr: &ruleRefExpr{
								pos:  position{line: 1694, col: 19, offset: 61790},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1694, col: 26, offset: 61797},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1694, col: 30, offset: 61801},
							expr: &ruleRefExpr{
								pos:  position{line: 1694, col: 30, offset: 61801},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1694, col: 37, offset: 61808},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1694, col: 43, offset: 61814},
								expr: &ruleRefExpr{
									pos:  position{line: 1694, col: 43, offset: 61814},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeightAttr",
			pos:  position{line: 1701, col: 1, offset: 61958},
			expr: &actionExpr{
				pos: position{line: 1701, col: 20, offset: 61977},
				run: (*parser).callonImageHeightAttr1,
				expr: &seqExpr{
					pos: position{line: 1701, col: 20, offset: 61977},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1701, col: 20, offset: 61977},
							expr: &ruleRefExpr{
								pos:  position{line: 1701, col: 20, offset: 61977},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1701, col: 27, offset: 61984},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1701, col: 31, offset: 61988},
							expr: &ruleRefExpr{
								pos:  position{line: 1701, col: 31, offset: 61988},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1701, col: 38, offset: 61995},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1701, col: 44, offset: 62001},
								expr: &ruleRefExpr{
									pos:  position{line: 1701, col: 44, offset: 62001},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1712, col: 1, offset: 62344},
			expr: &actionExpr{
				pos: position{line: 1712, col: 15, offset: 62358},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1712, col: 15, offset: 62358},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1712, col: 15, offset: 62358},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1712, col: 23, offset: 62366},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1712, col: 29, offset: 62372},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1712, col: 29, offset: 62372},
									expr: &charClassMatcher{
										pos:        position{line: 1712, col: 29, offset: 62372},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1712, col: 73, offset: 62416},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1712, col: 80, offset: 62423},
								name: "IconAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttrs",
			pos:  position{line: 1716, col: 1, offset: 62505},
			expr: &actionExpr{
				pos: position{line: 1716, col: 14, offset: 62518},
				run: (*parser).callonIconAttrs1,
				expr: &seqExpr{
					pos: position{line: 1716, col: 14, offset: 62518},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1716, col: 14, offset: 62518},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1716, col: 18, offset: 62522},
							label: "size",
							expr: &ruleRefExpr{
								pos:  position{line: 1716, col: 23, offset: 62527},
								name: "IconSize",
							},
						},
						&labeledExpr{
							pos:   position{line: 1716, col: 32, offset: 62536},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1716, col: 35, offset: 62539},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1716, col: 46, offset: 62550},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "IconSize",
			pos:  position{line: 1720, col: 1, offset: 62607},
			expr: &actionExpr{
				pos: position{line: 1720, col: 13, offset: 62619},
				run: (*parser).callonIconSize1,
				expr: &labeledExpr{
					pos:   position{line: 1720, col: 13, offset: 62619},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1720, col: 19, offset: 62625},
						expr: &ruleRefExpr{
							pos:  position{line: 1720, col: 19, offset: 62625},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1727, col: 1, offset: 62901},
			expr: &choiceExpr{
				pos: position{line: 1727, col: 19, offset: 62919},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1727, col: 19, offset: 62919},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1727, col: 19, offset: 62919},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1727, col: 19, offset: 62919},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1727, col: 32, offset: 62932},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1727, col: 41, offset: 62941},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1727, col: 58, offset: 62958},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1729, col: 5, offset: 63026},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1729, col: 5, offset: 63026},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1729, col: 5, offset: 63026},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1729, col: 17, offset: 63038},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1729, col: 22, offset: 63043},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1729, col: 35, offset: 63056},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1729, col: 39, offset: 63060},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1729, col: 47, offset: 63068},
										expr: &ruleRefExpr{
											pos:  position{line: 1729, col: 48, offset: 63069},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1729, col: 66, offset: 63087},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1733, col: 1, offset: 63148},
			expr: &ruleRefExpr{
				pos:  position{line: 1733, col: 16, offset: 63163},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1735, col: 1, offset: 63174},
			expr: &actionExpr{
				pos: position{line: 1735, col: 20, offset: 63193},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1735, col: 20, offset: 63193},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1735, col: 29, offset: 63202},
						expr: &seqExpr{
							pos: position{line: 1735, col: 30, offset: 63203},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1735, col: 30, offset: 63203},
									expr: &litMatcher{
										pos:        position{line: 1735, col: 31, offset: 63204},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1735, col: 35, offset: 63208},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1742, col: 1, offset: 63532},
			expr: &actionExpr{
				pos: position{line: 1742, col: 19, offset: 63550},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1742, col: 19, offset: 63550},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1742, col: 19, offset: 63550},
							expr: &ruleRefExpr{
								pos:  position{line: 1742, col: 20, offset: 63551},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1743, col: 5, offset: 63639},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1743, col: 12, offset: 63646},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1743, col: 12, offset: 63646},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1744, col: 11, offset: 63669},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1745, col: 11, offset: 63693},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1746, col: 11, offset: 63717},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1747, col: 11, offset: 63738},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1748, col: 11, offset: 63761},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1749, col: 11, offset: 63789},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1750, col: 11, offset: 63816},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1751, col: 11, offset: 63832},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1755, col: 1, offset: 63873},
			expr: &choiceExpr{
				pos: position{line: 1755, col: 19, offset: 63891},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1755, col: 19, offset: 63891},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1755, col: 19, offset: 63891},
								expr: &ruleRefExpr{
									pos:  position{line: 1755, col: 21, offset: 63893},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1755, col: 31, offset: 63903},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1756, col: 19, offset: 63974},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1757, col: 19, offset: 64014},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1758, col: 19, offset: 64055},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1759, col: 19, offset: 64096},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1760, col: 19, offset: 64137},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1761, col: 19, offset: 64175},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1762, col: 19, offset: 64215},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "DelimitedBlockRawLine",
			pos:  position{line: 1764, col: 1, offset: 64242},
			expr: &choiceExpr{
				pos: position{line: 1764, col: 26, offset: 64267},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1764, col: 26, offset: 64267},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1764, col: 42, offset: 64283},
						name: "RawLine",
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 1766, col: 1, offset: 64292},
			expr: &actionExpr{
				pos: position{line: 1766, col: 12, offset: 64303},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 1766, col: 12, offset: 64303},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1766, col: 12, offset: 64303},
							expr: &ruleRefExpr{
								pos:  position{line: 1766, col: 13, offset: 64304},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1766, col: 17, offset: 64308},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1766, col: 26, offset: 64317},
								name: "RawLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1766, col: 42, offset: 64333},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawLineContent",
			pos:  position{line: 1770, col: 1, offset: 64413},
			expr: &actionExpr{
				pos: position{line: 1770, col: 19, offset: 64431},
				run: (*parser).callonRawLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1770, col: 19, offset: 64431},
					expr: &charClassMatcher{
						pos:        position{line: 1770, col: 19, offset: 64431},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1774, col: 1, offset: 64478},
			expr: &actionExpr{
				pos: position{line: 1774, col: 20, offset: 64497},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1774, col: 20, offset: 64497},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1774, col: 20, offset: 64497},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1774, col: 25, offset: 64502},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1774, col: 48, offset: 64525},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1774, col: 61, offset: 64538},
								expr: &ruleRefExpr{
									pos:  position{line: 1774, col: 61, offset: 64538},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1778, col: 1, offset: 64635},
			expr: &actionExpr{
				pos: position{line: 1778, col: 26, offset: 64660},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1778, col: 26, offset: 64660},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1778, col: 26, offset: 64660},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1778, col: 30, offset: 64664},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1778, col: 35, offset: 64669},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1778, col: 35, offset: 64669},
									expr: &charClassMatcher{
										pos:        position{line: 1778, col: 35, offset: 64669},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1778, col: 83, offset: 64717},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1778, col: 87, offset: 64721},
							expr: &ruleRefExpr{
								pos:  position{line: 1778, col: 87, offset: 64721},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1785, col: 1, offset: 64948},
			expr: &seqExpr{
				pos: position{line: 1785, col: 25, offset: 64972},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1785, col: 25, offset: 64972},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1785, col: 31, offset: 64978},
						expr: &ruleRefExpr{
							pos:  position{line: 1785, col: 31, offset: 64978},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1785, col: 38, offset: 64985},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1787, col: 1, offset: 65045},
			expr: &seqExpr{
				pos: position{line: 1787, col: 30, offset: 65074},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1787, col: 30, offset: 65074},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1787, col: 36, offset: 65080},
						expr: &ruleRefExpr{
							pos:  position{line: 1787, col: 36, offset: 65080},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1787, col: 43, offset: 65087},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1789, col: 1, offset: 65092},
			expr: &choiceExpr{
				pos: position{line: 1789, col: 28, offset: 65119},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1789, col: 29, offset: 65120},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1789, col: 29, offset: 65120},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1789, col: 35, offset: 65126},
								expr: &ruleRefExpr{
									pos:  position{line: 1789, col: 35, offset: 65126},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1789, col: 42, offset: 65133},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1789, col: 49, offset: 65140},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1791, col: 1, offset: 65145},
			expr: &actionExpr{
				pos: position{line: 1791, col: 16, offset: 65160},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1791, col: 16, offset: 65160},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1791, col: 16, offset: 65160},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1791, col: 27, offset: 65171},
								expr: &ruleRefExpr{
									pos:  position{line: 1791, col: 28, offset: 65172},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1791, col: 41, offset: 65185},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1791, col: 67, offset: 65211},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1791, col: 76, offset: 65220},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1791, col: 99, offset: 65243},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1795, col: 1, offset: 65358},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1795, col: 26, offset: 65383},
				expr: &actionExpr{
					pos: position{line: 1795, col: 27, offset: 65384},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1795, col: 27, offset: 65384},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1795, col: 27, offset: 65384},
								expr: &ruleRefExpr{
									pos:  position{line: 1795, col: 28, offset: 65385},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1795, col: 52, offset: 65409},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1795, col: 58, offset: 65415},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1802, col: 1, offset: 65755},
			expr: &seqExpr{
				pos: position{line: 1802, col: 26, offset: 65780},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1802, col: 26, offset: 65780},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1802, col: 33, offset: 65787},
						expr: &ruleRefExpr{
							pos:  position{line: 1802, col: 33, offset: 65787},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1802, col: 40, offset: 65794},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1804, col: 1, offset: 65799},
			expr: &seqExpr{
				pos: position{line: 1804, col: 31, offset: 65829},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1804, col: 31, offset: 65829},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1804, col: 38, offset: 65836},
						expr: &ruleRefExpr{
							pos:  position{line: 1804, col: 38, offset: 65836},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1804, col: 45, offset: 65843},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1806, col: 1, offset: 65848},
			expr: &choiceExpr{
				pos: position{line: 1806, col: 29, offset: 65876},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1806, col: 30, offset: 65877},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1806, col: 30, offset: 65877},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1806, col: 37, offset: 65884},
								expr: &ruleRefExpr{
									pos:  position{line: 1806, col: 37, offset: 65884},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1806, col: 44, offset: 65891},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1806, col: 51, offset: 65898},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1808, col: 1, offset: 65903},
			expr: &actionExpr{
				pos: position{line: 1808, col: 17, offset: 65919},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1808, col: 17, offset: 65919},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1808, col: 17, offset: 65919},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1808, col: 28, offset: 65930},
								expr: &ruleRefExpr{
									pos:  position{line: 1808, col: 29, offset: 65931},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1808, col: 42, offset: 65944},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1808, col: 69, offset: 65971},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1808, col: 78, offset: 65980},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1808, col: 102, offset: 66004},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1812, col: 1, offset: 66121},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1812, col: 27, offset: 66147},
				expr: &actionExpr{
					pos: position{line: 1812, col: 28, offset: 66148},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1812, col: 28, offset: 66148},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1812, col: 28, offset: 66148},
								expr: &ruleRefExpr{
									pos:  position{line: 1812, col: 29, offset: 66149},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1812, col: 54, offset: 66174},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1812, col: 60, offset: 66180},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1819, col: 1, offset: 66520},
			expr: &seqExpr{
				pos: position{line: 1819, col: 26, offset: 66545},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1819, col: 26, offset: 66545},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1819, col: 33, offset: 66552},
						expr: &ruleRefExpr{
							pos:  position{line: 1819, col: 33, offset: 66552},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1819, col: 40, offset: 66559},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1821, col: 1, offset: 66564},
			expr: &seqExpr{
				pos: position{line: 1821, col: 31, offset: 66594},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1821, col: 31, offset: 66594},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1821, col: 38, offset: 66601},
						expr: &ruleRefExpr{
							pos:  position{line: 1821, col: 38, offset: 66601},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1821, col: 45, offset: 66608},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1823, col: 1, offset: 66613},
			expr: &choiceExpr{
				pos: position{line: 1823, col: 29, offset: 66641},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1823, col: 30, offset: 66642},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1823, col: 30, offset: 66642},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1823, col: 37, offset: 66649},
								expr: &ruleRefExpr{
									pos:  position{line: 1823, col: 37, offset: 66649},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1823, col: 44, offset: 66656},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1823, col: 51, offset: 66663},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1825, col: 1, offset: 66668},
			expr: &actionExpr{
				pos: position{line: 1825, col: 17, offset: 66684},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1825, col: 17, offset: 66684},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1825, col: 17, offset: 66684},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1825, col: 28, offset: 66695},
								expr: &ruleRefExpr{
									pos:  position{line: 1825, col: 29, offset: 66696},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1825, col: 42, offset: 66709},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1825, col: 69, offset: 66736},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1825, col: 78, offset: 66745},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1825, col: 102, offset: 66769},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1829, col: 1, offset: 66886},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1829, col: 27, offset: 66912},
				expr: &actionExpr{
					pos: position{line: 1829, col: 28, offset: 66913},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1829, col: 28, offset: 66913},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1829, col: 28, offset: 66913},
								expr: &ruleRefExpr{
									pos:  position{line: 1829, col: 29, offset: 66914},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1829, col: 54, offset: 66939},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1829, col: 60, offset: 66945},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1836, col: 1, offset: 67283},
			expr: &seqExpr{
				pos: position{line: 1836, col: 24, offset: 67306},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1836, col: 24, offset: 67306},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1836, col: 31, offset: 67313},
						expr: &ruleRefExpr{
							pos:  position{line: 1836, col: 31, offset: 67313},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1836, col: 38, offset: 67320},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1838, col: 1, offset: 67350},
			expr: &seqExpr{
				pos: position{line: 1838, col: 29, offset: 67378},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1838, col: 29, offset: 67378},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1838, col: 36, offset: 67385},
						expr: &ruleRefExpr{
							pos:  position{line: 1838, col: 36, offset: 67385},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1838, col: 43, offset: 67392},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1840, col: 1, offset: 67422},
			expr: &choiceExpr{
				pos: position{line: 1840, col: 27, offset: 67448},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1840, col: 28, offset: 67449},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1840, col: 28, offset: 67449},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1840, col: 35, offset: 67456},
								expr: &ruleRefExpr{
									pos:  position{line: 1840, col: 35, offset: 67456},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1840, col: 42, offset: 67463},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1840, col: 49, offset: 67470},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1842, col: 1, offset: 67500},
			expr: &actionExpr{
				pos: position{line: 1842, col: 15, offset: 67514},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1842, col: 15, offset: 67514},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1842, col: 15, offset: 67514},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1842, col: 26, offset: 67525},
								expr: &ruleRefExpr{
									pos:  position{line: 1842, col: 27, offset: 67526},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1842, col: 40, offset: 67539},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1842, col: 65, offset: 67564},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1842, col: 74, offset: 67573},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1842, col: 101, offset: 67600},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1846, col: 1, offset: 67713},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1846, col: 30, offset: 67742},
				expr: &actionExpr{
					pos: position{line: 1846, col: 31, offset: 67743},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1846, col: 31, offset: 67743},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1846, col: 31, offset: 67743},
								expr: &ruleRefExpr{
									pos:  position{line: 1846, col: 32, offset: 67744},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1846, col: 55, offset: 67767},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1846, col: 61, offset: 67773},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1853, col: 1, offset: 68113},
			expr: &seqExpr{
				pos: position{line: 1853, col: 26, offset: 68138},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1853, col: 26, offset: 68138},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1853, col: 33, offset: 68145},
						expr: &ruleRefExpr{
							pos:  position{line: 1853, col: 33, offset: 68145},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1853, col: 40, offset: 68152},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1855, col: 1, offset: 68157},
			expr: &seqExpr{
				pos: position{line: 1855, col: 31, offset: 68187},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1855, col: 31, offset: 68187},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1855, col: 38, offset: 68194},
						expr: &ruleRefExpr{
							pos:  position{line: 1855, col: 38, offset: 68194},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1855, col: 45, offset: 68201},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1857, col: 1, offset: 68206},
			expr: &choiceExpr{
				pos: position{line: 1857, col: 29, offset: 68234},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1857, col: 30, offset: 68235},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1857, col: 30, offset: 68235},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1857, col: 37, offset: 68242},
								expr: &ruleRefExpr{
									pos:  position{line: 1857, col: 37, offset: 68242},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1857, col: 44, offset: 68249},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1857, col: 51, offset: 68256},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1859, col: 1, offset: 68261},
			expr: &actionExpr{
				pos: position{line: 1859, col: 17, offset: 68277},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1859, col: 17, offset: 68277},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1859, col: 17, offset: 68277},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1859, col: 28, offset: 68288},
								expr: &ruleRefExpr{
									pos:  position{line: 1859, col: 29, offset: 68289},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1859, col: 42, offset: 68302},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1859, col: 69, offset: 68329},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1859, col: 78, offset: 68338},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1859, col: 102, offset: 68362},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1863, col: 1, offset: 68479},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1863, col: 27, offset: 68505},
				expr: &actionExpr{
					pos: position{line: 1863, col: 28, offset: 68506},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1863, col: 28, offset: 68506},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1863, col: 28, offset: 68506},
								expr: &ruleRefExpr{
									pos:  position{line: 1863, col: 29, offset: 68507},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1863, col: 54, offset: 68532},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1863, col: 60, offset: 68538},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1870, col: 1, offset: 68882},
			expr: &seqExpr{
				pos: position{line: 1870, col: 30, offset: 68911},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1870, col: 30, offset: 68911},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1870, col: 37, offset: 68918},
						expr: &ruleRefExpr{
							pos:  position{line: 1870, col: 37, offset: 68918},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1870, col: 44, offset: 68925},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1872, col: 1, offset: 68930},
			expr: &seqExpr{
				pos: position{line: 1872, col: 35, offset: 68964},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1872, col: 35, offset: 68964},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1872, col: 42, offset: 68971},
						expr: &ruleRefExpr{
							pos:  position{line: 1872, col: 42, offset: 68971},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1872, col: 49, offset: 68978},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1874, col: 1, offset: 68983},
			expr: &choiceExpr{
				pos: position{line: 1874, col: 33, offset: 69015},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1874, col: 34, offset: 69016},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1874, col: 34, offset: 69016},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1874, col: 41, offset: 69023},
								expr: &ruleRefExpr{
									pos:  position{line: 1874, col: 41, offset: 69023},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1874, col: 48, offset: 69030},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1874, col: 55, offset: 69037},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1876, col: 1, offset: 69042},
			expr: &actionExpr{
				pos: position{line: 1876, col: 21, offset: 69062},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1876, col: 21, offset: 69062},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1876, col: 21, offset: 69062},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1876, col: 32, offset: 69073},
								expr: &ruleRefExpr{
									pos:  position{line: 1876, col: 33, offset: 69074},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1876, col: 46, offset: 69087},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1876, col: 77, offset: 69118},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1876, col: 86, offset: 69127},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1876, col: 114, offset: 69155},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1880, col: 1, offset: 69280},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1880, col: 31, offset: 69310},
				expr: &actionExpr{
					pos: position{line: 1880, col: 32, offset: 69311},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1880, col: 32, offset: 69311},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1880, col: 32, offset: 69311},
								expr: &ruleRefExpr{
									pos:  position{line: 1880, col: 33, offset: 69312},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1880, col: 62, offset: 69341},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1880, col: 68, offset: 69347},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1885, col: 1, offset: 69509},
			expr: &actionExpr{
				pos: position{line: 1885, col: 18, offset: 69526},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1885, col: 18, offset: 69526},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1885, col: 19, offset: 69527},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1885, col: 19, offset: 69527},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1885, col: 27, offset: 69535},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1885, col: 37, offset: 69545},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1885, col: 45, offset: 69553},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1885, col: 55, offset: 69563},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1885, col: 63, offset: 69571},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1885, col: 72, offset: 69580},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DefaultParagraphContent",
			pos:  position{line: 1895, col: 1, offset: 69962},
			expr: &oneOrMoreExpr{
				pos: position{line: 1896, col: 5, offset: 69996},
				expr: &choiceExpr{
					pos: position{line: 1896, col: 9, offset: 70000},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1896, col: 9, offset: 70000},
							name: "SingleLineComment",
						},
						&seqExpr{
							pos: position{line: 1897, col: 10, offset: 70029},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1897, col: 10, offset: 70029},
									expr: &choiceExpr{
										pos: position{line: 1897, col: 11, offset: 70030},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1897, col: 11, offset: 70030},
												name: "InlineWord",
											},
											&ruleRefExpr{
												pos:  position{line: 1898, col: 11, offset: 70081},
												name: "LineBreak",
											},
											&oneOrMoreExpr{
												pos: position{line: 1899, col: 11, offset: 70126},
												expr: &ruleRefExpr{
													pos:  position{line: 1899, col: 11, offset: 70126},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1900, col: 11, offset: 70144},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 1901, col: 11, offset: 70167},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1902, col: 11, offset: 70188},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 1903, col: 11, offset: 70205},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 1904, col: 11, offset: 70226},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 1905, col: 11, offset: 70249},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 1906, col: 11, offset: 70265},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 1907, col: 11, offset: 70294},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 1908, col: 11, offset: 70320},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 1909, col: 11, offset: 70346},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 1910, col: 11, offset: 70373},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1911, col: 11, offset: 70406},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 1912, col: 11, offset: 70432},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1913, col: 11, offset: 70461},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1914, col: 11, offset: 70481},
												name: "ImpliedApostrophe",
											},
											&ruleRefExpr{
												pos:  position{line: 1915, col: 11, offset: 70509},
												name: "AnyChar",
											},
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1916, col: 12, offset: 70528},
									expr: &ruleRefExpr{
										pos:  position{line: 1916, col: 12, offset: 70528},
										name: "Newline",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContentSubstitution",
			pos:  position{line: 1920, col: 1, offset: 70593},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1920, col: 35, offset: 70627},
				expr: &ruleRefExpr{
					pos:  position{line: 1920, col: 35, offset: 70627},
					name: "NormalElement",
				},
			},
		},
		{
			name: "NormalElement",
			pos:  position{line: 1922, col: 1, offset: 70643},
			expr: &actionExpr{
				pos: position{line: 1923, col: 5, offset: 70665},
				run: (*parser).callonNormalElement1,
				expr: &seqExpr{
					pos: position{line: 1923, col: 5, offset: 70665},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1923, col: 5, offset: 70665},
							expr: &ruleRefExpr{
								pos:  position{line: 1923, col: 6, offset: 70666},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1923, col: 10, offset: 70670},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1923, col: 19, offset: 70679},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1923, col: 19, offset: 70679},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1924, col: 15, offset: 70704},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1925, col: 15, offset: 70732},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1926, col: 15, offset: 70757},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 1927, col: 15, offset: 70785},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1928, col: 15, offset: 70816},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1929, col: 15, offset: 70849},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1930, col: 15, offset: 70880},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1931, col: 15, offset: 70919},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1932, col: 15, offset: 70948},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1933, col: 15, offset: 70976},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1934, col: 15, offset: 71012},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1935, col: 15, offset: 71042},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1936, col: 15, offset: 71083},
										name: "StandaloneAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 1937, col: 15, offset: 71118},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimContentSubstitution",
			pos:  position{line: 1941, col: 1, offset: 71167},
			expr: &ruleRefExpr{
				pos:  position{line: 1941, col: 32, offset: 71198},
				name: "VerbatimLine",
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1943, col: 1, offset: 71212},
			expr: &actionExpr{
				pos: position{line: 1943, col: 17, offset: 71228},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1943, col: 17, offset: 71228},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1943, col: 17, offset: 71228},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1943, col: 26, offset: 71237},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1943, col: 47, offset: 71258},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1943, col: 56, offset: 71267},
								expr: &ruleRefExpr{
									pos:  position{line: 1943, col: 57, offset: 71268},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1943, col: 68, offset: 71279},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1947, col: 1, offset: 71349},
			expr: &actionExpr{
				pos: position{line: 1947, col: 24, offset: 71372},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1947, col: 24, offset: 71372},
					expr: &seqExpr{
						pos: position{line: 1947, col: 25, offset: 71373},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1947, col: 25, offset: 71373},
								expr: &ruleRefExpr{
									pos:  position{line: 1947, col: 26, offset: 71374},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1947, col: 36, offset: 71384},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1947, col: 36, offset: 71384},
										expr: &ruleRefExpr{
											pos:  position{line: 1947, col: 36, offset: 71384},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1947, col: 45, offset: 71393},
										expr: &charClassMatcher{
											pos:        position{line: 1947, col: 45, offset: 71393},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1951, col: 1, offset: 71443},
			expr: &oneOrMoreExpr{
				pos: position{line: 1951, col: 13, offset: 71455},
				expr: &ruleRefExpr{
					pos:  position{line: 1951, col: 13, offset: 71455},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1953, col: 1, offset: 71465},
			expr: &actionExpr{
				pos: position{line: 1953, col: 12, offset: 71476},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1953, col: 12, offset: 71476},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1953, col: 12, offset: 71476},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1953, col: 16, offset: 71480},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1953, col: 21, offset: 71485},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1953, col: 21, offset: 71485},
									expr: &charClassMatcher{
										pos:        position{line: 1953, col: 21, offset: 71485},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1953, col: 69, offset: 71533},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1953, col: 73, offset: 71537},
							expr: &ruleRefExpr{
								pos:  position{line: 1953, col: 73, offset: 71537},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1953, col: 80, offset: 71544},
							expr: &choiceExpr{
								pos: position{line: 1953, col: 82, offset: 71546},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1953, col: 82, offset: 71546},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1953, col: 88, offset: 71552},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextSubstitution",
			pos:  position{line: 1958, col: 1, offset: 71654},
			expr: &actionExpr{
				pos: position{line: 1958, col: 27, offset: 71680},
				run: (*parser).callonQuotedTextSubstitution1,
				expr: &labeledExpr{
					pos:   position{line: 1958, col: 27, offset: 71680},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1958, col: 36, offset: 71689},
						expr: &choiceExpr{
							pos: position{line: 1958, col: 37, offset: 71690},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1958, col: 37, offset: 71690},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1959, col: 11, offset: 71741},
									expr: &ruleRefExpr{
										pos:  position{line: 1959, col: 11, offset: 71741},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1960, col: 11, offset: 71759},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1961, col: 11, offset: 71781},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1962, col: 11, offset: 71799},
									name: "Newline",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMacrosSubstitution",
			pos:  position{line: 1966, col: 1, offset: 71875},
			expr: &actionExpr{
				pos: position{line: 1966, col: 29, offset: 71903},
				run: (*parser).callonInlineMacrosSubstitution1,
				expr: &labeledExpr{
					pos:   position{line: 1966, col: 29, offset: 71903},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1966, col: 38, offset: 71912},
						expr: &choiceExpr{
							pos: position{line: 1966, col: 39, offset: 71913},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1966, col: 39, offset: 71913},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1967, col: 11, offset: 71964},
									expr: &ruleRefExpr{
										pos:  position{line: 1967, col: 11, offset: 71964},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1968, col: 11, offset: 71982},
									name: "InlineIcon",
								},
								&ruleRefExpr{
									pos:  position{line: 1969, col: 11, offset: 72003},
									name: "InlineImage",
								},
								&ruleRefExpr{
									pos:  position{line: 1970, col: 11, offset: 72026},
									name: "Link",
								},
								&ruleRefExpr{
									pos:  position{line: 1971, col: 11, offset: 72042},
									name: "InlinePassthrough",
								},
								&ruleRefExpr{
									pos:  position{line: 1972, col: 11, offset: 72071},
									name: "InlineFootnote",
								},
								&ruleRefExpr{
									pos:  position{line: 1973, col: 11, offset: 72097},
									name: "CrossReference",
								},
								&ruleRefExpr{
									pos:  position{line: 1974, col: 11, offset: 72123},
									name: "InlineUserMacro",
								},
								&ruleRefExpr{
									pos:  position{line: 1975, col: 11, offset: 72150},
									name: "InlineElementID",
								},
								&ruleRefExpr{
									pos:  position{line: 1976, col: 11, offset: 72176},
									name: "ConcealedIndexTerm",
								},
								&ruleRefExpr{
									pos:  position{line: 1977, col: 11, offset: 72205},
									name: "IndexTerm",
								},
								&ruleRefExpr{
									pos:  position{line: 1978, col: 11, offset: 72225},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1979, col: 11, offset: 72243},
									name: "Newline",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributesSubstitution",
			pos:  position{line: 1983, col: 1, offset: 72319},
			expr: &actionExpr{
				pos: position{line: 1983, col: 27, offset: 72345},
				run: (*parser).callonAttributesSubstitution1,
				expr: &labeledExpr{
					pos:   position{line: 1983, col: 27, offset: 72345},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1983, col: 36, offset: 72354},
						expr: &choiceExpr{
							pos: position{line: 1983, col: 37, offset: 72355},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1983, col: 37, offset: 72355},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1984, col: 11, offset: 72406},
									expr: &ruleRefExpr{
										pos:  position{line: 1984, col: 11, offset: 72406},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1985, col: 11, offset: 72424},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 1986, col: 11, offset: 72456},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1987, col: 11, offset: 72474},
									name: "Newline",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NoneSubstitution",
			pos:  position{line: 1991, col: 1, offset: 72549},
			expr: &oneOrMoreExpr{
				pos: position{line: 1991, col: 21, offset: 72569},
				expr: &choiceExpr{
					pos: position{line: 1992, col: 5, offset: 72575},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1992, col: 5, offset: 72575},
							name: "SingleLineComment",
						},
						&actionExpr{
							pos: position{line: 1993, col: 8, offset: 72601},
							run: (*parser).callonNoneSubstitution4,
							expr: &seqExpr{
								pos: position{line: 1993, col: 8, offset: 72601},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1993, col: 8, offset: 72601},
										expr: &charClassMatcher{
											pos:        position{line: 1993, col: 8, offset: 72601},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1993, col: 17, offset: 72610},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContentSubstitution",
			pos:  position{line: 1998, col: 1, offset: 72745},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1998, col: 34, offset: 72778},
				expr: &ruleRefExpr{
					pos:  position{line: 1998, col: 34, offset: 72778},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 2000, col: 1, offset: 72798},
			expr: &actionExpr{
				pos: position{line: 2000, col: 22, offset: 72819},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 2000, col: 22, offset: 72819},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2000, col: 22, offset: 72819},
							expr: &ruleRefExpr{
								pos:  position{line: 2000, col: 23, offset: 72820},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 2000, col: 27, offset: 72824},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2000, col: 36, offset: 72833},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2000, col: 36, offset: 72833},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 2000, col: 48, offset: 72845},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 2004, col: 1, offset: 72895},
			expr: &actionExpr{
				pos: position{line: 2004, col: 24, offset: 72918},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 2004, col: 24, offset: 72918},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 2004, col: 30, offset: 72924},
						expr: &ruleRefExpr{
							pos:  position{line: 2004, col: 31, offset: 72925},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 2008, col: 1, offset: 73015},
			expr: &actionExpr{
				pos: position{line: 2008, col: 28, offset: 73042},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 2008, col: 28, offset: 73042},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2008, col: 28, offset: 73042},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2008, col: 37, offset: 73051},
								expr: &ruleRefExpr{
									pos:  position{line: 2008, col: 38, offset: 73052},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2008, col: 54, offset: 73068},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 2015, col: 1, offset: 73310},
			expr: &actionExpr{
				pos: position{line: 2015, col: 10, offset: 73319},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 2015, col: 10, offset: 73319},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2015, col: 10, offset: 73319},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 2015, col: 16, offset: 73325},
								expr: &zeroOrMoreExpr{
									pos: position{line: 2015, col: 17, offset: 73326},
									expr: &ruleRefExpr{
										pos:  position{line: 2015, col: 17, offset: 73326},
										name: "BlockAttrs",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2015, col: 31, offset: 73340},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2016, col: 5, offset: 73359},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 2016, col: 12, offset: 73366},
								expr: &ruleRefExpr{
									pos:  position{line: 2016, col: 13, offset: 73367},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2017, col: 5, offset: 73389},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2017, col: 11, offset: 73395},
								expr: &ruleRefExpr{
									pos:  position{line: 2017, col: 12, offset: 73396},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2018, col: 6, offset: 73413},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2018, col: 6, offset: 73413},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 2018, col: 23, offset: 73430},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 2022, col: 1, offset: 73540},
			expr: &seqExpr{
				pos: position{line: 2022, col: 23, offset: 73562},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2022, col: 23, offset: 73562},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2022, col: 27, offset: 73566},
						expr: &ruleRefExpr{
							pos:  position{line: 2022, col: 27, offset: 73566},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 2024, col: 1, offset: 73574},
			expr: &seqExpr{
				pos: position{line: 2024, col: 19, offset: 73592},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2024, col: 19, offset: 73592},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2024, col: 26, offset: 73599},
						expr: &ruleRefExpr{
							pos:  position{line: 2024, col: 26, offset: 73599},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2024, col: 33, offset: 73606},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 2027, col: 1, offset: 73674},
			expr: &actionExpr{
				pos: position{line: 2027, col: 20, offset: 73693},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 2027, col: 20, offset: 73693},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2027, col: 20, offset: 73693},
							expr: &ruleRefExpr{
								pos:  position{line: 2027, col: 21, offset: 73694},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2027, col: 36, offset: 73709},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2027, col: 42, offset: 73715},
								expr: &ruleRefExpr{
									pos:  position{line: 2027, col: 43, offset: 73716},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2027, col: 55, offset: 73728},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 2027, col: 59, offset: 73732},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 2031, col: 1, offset: 73800},
			expr: &actionExpr{
				pos: position{line: 2031, col: 14, offset: 73813},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 2031, col: 14, offset: 73813},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2031, col: 14, offset: 73813},
							expr: &ruleRefExpr{
								pos:  position{line: 2031, col: 15, offset: 73814},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2031, col: 30, offset: 73829},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2031, col: 36, offset: 73835},
								expr: &ruleRefExpr{
									pos:  position{line: 2031, col: 37, offset: 73836},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2031, col: 49, offset: 73848},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2031, col: 53, offset: 73852},
							expr: &ruleRefExpr{
								pos:  position{line: 2031, col: 53, offset: 73852},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 2035, col: 1, offset: 73921},
			expr: &actionExpr{
				pos: position{line: 2035, col: 14, offset: 73934},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 2035, col: 14, offset: 73934},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2035, col: 14, offset: 73934},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 2035, col: 33, offset: 73953},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2035, col: 42, offset: 73962},
								expr: &seqExpr{
									pos: position{line: 2035, col: 43, offset: 73963},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2035, col: 43, offset: 73963},
											expr: &ruleRefExpr{
												pos:  position{line: 2035, col: 44, offset: 73964},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 2035, col: 63, offset: 73983},
											expr: &ruleRefExpr{
												pos:  position{line: 2035, col: 64, offset: 73984},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2035, col: 68, offset: 73988},
											expr: &ruleRefExpr{
												pos:  position{line: 2035, col: 68, offset: 73988},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2035, col: 75, offset: 73995},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2035, col: 89, offset: 74009},
											expr: &ruleRefExpr{
												pos:  position{line: 2035, col: 89, offset: 74009},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 2042, col: 1, offset: 74258},
			expr: &seqExpr{
				pos: position{line: 2042, col: 26, offset: 74283},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2042, col: 26, offset: 74283},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2042, col: 33, offset: 74290},
						expr: &ruleRefExpr{
							pos:  position{line: 2042, col: 33, offset: 74290},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2042, col: 40, offset: 74297},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 2044, col: 1, offset: 74302},
			expr: &seqExpr{
				pos: position{line: 2044, col: 31, offset: 74332},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2044, col: 31, offset: 74332},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2044, col: 38, offset: 74339},
						expr: &ruleRefExpr{
							pos:  position{line: 2044, col: 38, offset: 74339},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2044, col: 45, offset: 74346},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 2046, col: 1, offset: 74351},
			expr: &choiceExpr{
				pos: position{line: 2046, col: 29, offset: 74379},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 2046, col: 30, offset: 74380},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2046, col: 30, offset: 74380},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 2046, col: 37, offset: 74387},
								expr: &ruleRefExpr{
									pos:  position{line: 2046, col: 37, offset: 74387},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2046, col: 44, offset: 74394},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2046, col: 51, offset: 74401},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 2048, col: 1, offset: 74406},
			expr: &actionExpr{
				pos: position{line: 2048, col: 17, offset: 74422},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 2048, col: 17, offset: 74422},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2048, col: 17, offset: 74422},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2048, col: 44, offset: 74449},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 2048, col: 53, offset: 74458},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2048, col: 78, offset: 74483},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 2052, col: 1, offset: 74593},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2052, col: 27, offset: 74619},
				expr: &actionExpr{
					pos: position{line: 2052, col: 28, offset: 74620},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 2052, col: 28, offset: 74620},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 2052, col: 28, offset: 74620},
								expr: &ruleRefExpr{
									pos:  position{line: 2052, col: 29, offset: 74621},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 2052, col: 54, offset: 74646},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 2052, col: 60, offset: 74652},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 2056, col: 1, offset: 74796},
			expr: &actionExpr{
				pos: position{line: 2056, col: 22, offset: 74817},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 2056, col: 22, offset: 74817},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2056, col: 22, offset: 74817},
							expr: &ruleRefExpr{
								pos:  position{line: 2056, col: 23, offset: 74818},
								name: "CommentBlockDelimiter",
							},
						},
						&litMatcher{
							pos:        position{line: 2056, col: 45, offset: 74840},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 2056, col: 50, offset: 74845},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 2056, col: 59, offset: 74854},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2056, col: 85, offset: 74880},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 2060, col: 1, offset: 74945},
			expr: &actionExpr{
				pos: position{line: 2060, col: 29, offset: 74973},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 2060, col: 29, offset: 74973},
					expr: &charClassMatcher{
						pos:        position{line: 2060, col: 29, offset: 74973},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 2068, col: 1, offset: 75286},
			expr: &choiceExpr{
				pos: position{line: 2068, col: 17, offset: 75302},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2068, col: 17, offset: 75302},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 2068, col: 49, offset: 75334},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 2068, col: 78, offset: 75363},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 2070, col: 1, offset: 75399},
			expr: &litMatcher{
				pos:        position{line: 2070, col: 26, offset: 75424},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 2073, col: 1, offset: 75496},
			expr: &actionExpr{
				pos: position{line: 2073, col: 31, offset: 75526},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 2073, col: 31, offset: 75526},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2073, col: 31, offset: 75526},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2073, col: 42, offset: 75537},
								expr: &ruleRefExpr{
									pos:  position{line: 2073, col: 43, offset: 75538},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2073, col: 56, offset: 75551},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2073, col: 63, offset: 75558},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 2078, col: 1, offset: 75788},
			expr: &actionExpr{
				pos: position{line: 2079, col: 5, offset: 75828},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 2079, col: 5, offset: 75828},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2079, col: 5, offset: 75828},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 2079, col: 16, offset: 75839},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 2079, col: 16, offset: 75839},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2079, col: 16, offset: 75839},
											expr: &ruleRefExpr{
												pos:  position{line: 2079, col: 16, offset: 75839},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 2079, col: 23, offset: 75846},
											expr: &charClassMatcher{
												pos:        position{line: 2079, col: 23, offset: 75846},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2081, col: 8, offset: 75899},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 2082, col: 5, offset: 75962},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2082, col: 16, offset: 75973},
								expr: &actionExpr{
									pos: position{line: 2083, col: 9, offset: 75983},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 2083, col: 9, offset: 75983},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2083, col: 9, offset: 75983},
												expr: &ruleRefExpr{
													pos:  position{line: 2083, col: 10, offset: 75984},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 2084, col: 9, offset: 76003},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 2084, col: 20, offset: 76014},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 2084, col: 20, offset: 76014},
														expr: &charClassMatcher{
															pos:        position{line: 2084, col: 20, offset: 76014},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 2086, col: 12, offset: 76075},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 2093, col: 1, offset: 76305},
			expr: &actionExpr{
				pos: position{line: 2093, col: 39, offset: 76343},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 2093, col: 39, offset: 76343},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2093, col: 39, offset: 76343},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2093, col: 50, offset: 76354},
								expr: &ruleRefExpr{
									pos:  position{line: 2093, col: 51, offset: 76355},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2094, col: 9, offset: 76376},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2094, col: 31, offset: 76398},
							expr: &ruleRefExpr{
								pos:  position{line: 2094, col: 31, offset: 76398},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2094, col: 38, offset: 76405},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 2094, col: 46, offset: 76413},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2094, col: 53, offset: 76420},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 2094, col: 95, offset: 76462},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2094, col: 96, offset: 76463},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2094, col: 96, offset: 76463},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2094, col: 118, offset: 76485},
											expr: &ruleRefExpr{
												pos:  position{line: 2094, col: 118, offset: 76485},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2094, col: 125, offset: 76492},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2094, col: 132, offset: 76499},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 2099, col: 1, offset: 76658},
			expr: &actionExpr{
				pos: position{line: 2099, col: 44, offset: 76701},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 2099, col: 44, offset: 76701},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2099, col: 50, offset: 76707},
						expr: &ruleRefExpr{
							pos:  position{line: 2099, col: 51, offset: 76708},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 2103, col: 1, offset: 76792},
			expr: &actionExpr{
				pos: position{line: 2104, col: 5, offset: 76847},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 2104, col: 5, offset: 76847},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2104, col: 5, offset: 76847},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2104, col: 11, offset: 76853},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 2104, col: 11, offset: 76853},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2104, col: 11, offset: 76853},
											expr: &ruleRefExpr{
												pos:  position{line: 2104, col: 12, offset: 76854},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2104, col: 34, offset: 76876},
											expr: &charClassMatcher{
												pos:        position{line: 2104, col: 34, offset: 76876},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2106, col: 8, offset: 76929},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 2111, col: 1, offset: 77055},
			expr: &actionExpr{
				pos: position{line: 2112, col: 5, offset: 77093},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2112, col: 5, offset: 77093},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2112, col: 5, offset: 77093},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2112, col: 16, offset: 77104},
								expr: &ruleRefExpr{
									pos:  position{line: 2112, col: 17, offset: 77105},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2113, col: 5, offset: 77122},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2120, col: 5, offset: 77329},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2120, col: 12, offset: 77336},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2124, col: 1, offset: 77486},
			expr: &actionExpr{
				pos: position{line: 2124, col: 16, offset: 77501},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2124, col: 16, offset: 77501},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 2129, col: 1, offset: 77584},
			expr: &actionExpr{
				pos: position{line: 2129, col: 39, offset: 77622},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 2129, col: 39, offset: 77622},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 2129, col: 45, offset: 77628},
						expr: &ruleRefExpr{
							pos:  position{line: 2129, col: 46, offset: 77629},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 2133, col: 1, offset: 77709},
			expr: &actionExpr{
				pos: position{line: 2133, col: 38, offset: 77746},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 2133, col: 38, offset: 77746},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2133, col: 38, offset: 77746},
							expr: &ruleRefExpr{
								pos:  position{line: 2133, col: 39, offset: 77747},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2133, col: 49, offset: 77757},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2133, col: 58, offset: 77766},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2133, col: 58, offset: 77766},
									expr: &charClassMatcher{
										pos:        position{line: 2133, col: 58, offset: 77766},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2135, col: 4, offset: 77811},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2142, col: 1, offset: 77997},
			expr: &actionExpr{
				pos: position{line: 2142, col: 14, offset: 78010},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2142, col: 14, offset: 78010},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2142, col: 14, offset: 78010},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2142, col: 19, offset: 78015},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2142, col: 25, offset: 78021},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2142, col: 43, offset: 78039},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2146, col: 1, offset: 78104},
			expr: &actionExpr{
				pos: position{line: 2146, col: 21, offset: 78124},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2146, col: 21, offset: 78124},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2146, col: 30, offset: 78133},
						expr: &choiceExpr{
							pos: position{line: 2146, col: 31, offset: 78134},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2146, col: 31, offset: 78134},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2146, col: 38, offset: 78141},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2146, col: 53, offset: 78156},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2146, col: 66, offset: 78169},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 2146, col: 74, offset: 78177},
									run: (*parser).callonIndexTermContent9,
									expr: &seqExpr{
										pos: position{line: 2146, col: 75, offset: 78178},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2146, col: 75, offset: 78178},
												expr: &litMatcher{
													pos:        position{line: 2146, col: 76, offset: 78179},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2146, col: 81, offset: 78184,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2152, col: 1, offset: 78290},
			expr: &actionExpr{
				pos: position{line: 2152, col: 23, offset: 78312},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2152, col: 23, offset: 78312},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2152, col: 23, offset: 78312},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2152, col: 29, offset: 78318},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2152, col: 36, offset: 78325},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2153, col: 5, offset: 78357},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2153, col: 11, offset: 78363},
								expr: &actionExpr{
									pos: position{line: 2153, col: 12, offset: 78364},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2153, col: 12, offset: 78364},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2153, col: 12, offset: 78364},
												expr: &ruleRefExpr{
													pos:  position{line: 2153, col: 12, offset: 78364},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2153, col: 19, offset: 78371},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2153, col: 23, offset: 78375},
												expr: &ruleRefExpr{
													pos:  position{line: 2153, col: 23, offset: 78375},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2153, col: 30, offset: 78382},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2153, col: 39, offset: 78391},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2154, col: 5, offset: 78449},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2154, col: 11, offset: 78455},
								expr: &actionExpr{
									pos: position{line: 2154, col: 12, offset: 78456},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2154, col: 12, offset: 78456},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2154, col: 12, offset: 78456},
												expr: &ruleRefExpr{
													pos:  position{line: 2154, col: 12, offset: 78456},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2154, col: 19, offset: 78463},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2154, col: 23, offset: 78467},
												expr: &ruleRefExpr{
													pos:  position{line: 2154, col: 23, offset: 78467},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2154, col: 30, offset: 78474},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2154, col: 39, offset: 78483},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2155, col: 5, offset: 78541},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2159, col: 1, offset: 78620},
			expr: &actionExpr{
				pos: position{line: 2159, col: 30, offset: 78649},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2159, col: 30, offset: 78649},
					expr: &choiceExpr{
						pos: position{line: 2159, col: 31, offset: 78650},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2159, col: 31, offset: 78650},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2159, col: 42, offset: 78661},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2166, col: 1, offset: 78810},
			expr: &actionExpr{
				pos: position{line: 2166, col: 14, offset: 78823},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2166, col: 14, offset: 78823},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2166, col: 14, offset: 78823},
							expr: &ruleRefExpr{
								pos:  position{line: 2166, col: 15, offset: 78824},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2166, col: 19, offset: 78828},
							expr: &ruleRefExpr{
								pos:  position{line: 2166, col: 19, offset: 78828},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2166, col: 26, offset: 78835},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2174, col: 1, offset: 78980},
			expr: &choiceExpr{
				pos: position{line: 2174, col: 11, offset: 78990},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2174, col: 11, offset: 78990},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2174, col: 24, offset: 79003},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2174, col: 36, offset: 79015},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2174, col: 48, offset: 79027},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2174, col: 61, offset: 79040},
						name: "Ellipsis",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2176, col: 1, offset: 79050},
			expr: &actionExpr{
				pos: position{line: 2176, col: 15, offset: 79064},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2176, col: 15, offset: 79064},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2179, col: 1, offset: 79117},
			expr: &actionExpr{
				pos: position{line: 2179, col: 14, offset: 79130},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2179, col: 14, offset: 79130},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2182, col: 1, offset: 79184},
			expr: &actionExpr{
				pos: position{line: 2182, col: 14, offset: 79197},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2182, col: 14, offset: 79197},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2185, col: 1, offset: 79252},
			expr: &actionExpr{
				pos: position{line: 2185, col: 15, offset: 79266},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2185, col: 15, offset: 79266},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2188, col: 1, offset: 79320},
			expr: &actionExpr{
				pos: position{line: 2188, col: 13, offset: 79332},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2188, col: 13, offset: 79332},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2196, col: 1, offset: 79606},
			expr: &actionExpr{
				pos: position{line: 2196, col: 22, offset: 79627},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2196, col: 22, offset: 79627},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2196, col: 22, offset: 79627},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2196, col: 31, offset: 79636},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2196, col: 35, offset: 79640},
							expr: &charClassMatcher{
								pos:        position{line: 2196, col: 36, offset: 79641},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2203, col: 1, offset: 79821},
			expr: &charClassMatcher{
				pos:        position{line: 2203, col: 13, offset: 79833},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2205, col: 1, offset: 79843},
			expr: &choiceExpr{
				pos: position{line: 2205, col: 16, offset: 79858},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2205, col: 16, offset: 79858},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2205, col: 22, offset: 79864},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2205, col: 28, offset: 79870},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2205, col: 34, offset: 79876},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2205, col: 40, offset: 79882},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2205, col: 46, offset: 79888},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2207, col: 1, offset: 79894},
			expr: &actionExpr{
				pos: position{line: 2207, col: 14, offset: 79907},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2207, col: 14, offset: 79907},
					expr: &charClassMatcher{
						pos:        position{line: 2207, col: 14, offset: 79907},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2211, col: 1, offset: 79953},
			expr: &choiceExpr{
				pos: position{line: 2215, col: 5, offset: 80280},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2215, col: 5, offset: 80280},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2215, col: 5, offset: 80280},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2215, col: 5, offset: 80280},
									expr: &charClassMatcher{
										pos:        position{line: 2215, col: 5, offset: 80280},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2215, col: 15, offset: 80290},
									expr: &choiceExpr{
										pos: position{line: 2215, col: 17, offset: 80292},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2215, col: 17, offset: 80292},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2215, col: 30, offset: 80305},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2217, col: 9, offset: 80375},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2217, col: 9, offset: 80375},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2217, col: 9, offset: 80375},
									expr: &charClassMatcher{
										pos:        position{line: 2217, col: 9, offset: 80375},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2217, col: 19, offset: 80385},
									expr: &seqExpr{
										pos: position{line: 2217, col: 20, offset: 80386},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2217, col: 20, offset: 80386},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2217, col: 27, offset: 80393},
												expr: &charClassMatcher{
													pos:        position{line: 2217, col: 27, offset: 80393},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2221, col: 1, offset: 80469},
			expr: &choiceExpr{
				pos: position{line: 2222, col: 5, offset: 80550},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2222, col: 5, offset: 80550},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2222, col: 5, offset: 80550},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2222, col: 5, offset: 80550},
									expr: &charClassMatcher{
										pos:        position{line: 2222, col: 5, offset: 80550},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2222, col: 19, offset: 80564},
									expr: &choiceExpr{
										pos: position{line: 2222, col: 21, offset: 80566},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2222, col: 21, offset: 80566},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2222, col: 31, offset: 80576},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2224, col: 9, offset: 80645},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2227, col: 1, offset: 80745},
			expr: &actionExpr{
				pos: position{line: 2227, col: 12, offset: 80756},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2227, col: 12, offset: 80756},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2231, col: 1, offset: 80821},
			expr: &actionExpr{
				pos: position{line: 2231, col: 17, offset: 80837},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2231, col: 17, offset: 80837},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2231, col: 22, offset: 80842},
						expr: &choiceExpr{
							pos: position{line: 2231, col: 23, offset: 80843},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2231, col: 23, offset: 80843},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 2231, col: 34, offset: 80854},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 2235, col: 1, offset: 80938},
			expr: &actionExpr{
				pos: position{line: 2235, col: 25, offset: 80962},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2235, col: 25, offset: 80962},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2235, col: 30, offset: 80967},
						expr: &charClassMatcher{
							pos:        position{line: 2235, col: 31, offset: 80968},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2239, col: 1, offset: 81040},
			expr: &actionExpr{
				pos: position{line: 2239, col: 13, offset: 81052},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2239, col: 13, offset: 81052},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2239, col: 13, offset: 81052},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2239, col: 20, offset: 81059},
								expr: &ruleRefExpr{
									pos:  position{line: 2239, col: 21, offset: 81060},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2239, col: 34, offset: 81073},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2239, col: 39, offset: 81078},
								expr: &choiceExpr{
									pos: position{line: 2239, col: 40, offset: 81079},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2239, col: 40, offset: 81079},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2239, col: 51, offset: 81090},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2243, col: 1, offset: 81178},
			expr: &actionExpr{
				pos: position{line: 2243, col: 23, offset: 81200},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2243, col: 23, offset: 81200},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2243, col: 23, offset: 81200},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2243, col: 31, offset: 81208},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2243, col: 43, offset: 81220},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2243, col: 48, offset: 81225},
								expr: &choiceExpr{
									pos: position{line: 2243, col: 49, offset: 81226},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2243, col: 49, offset: 81226},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2243, col: 60, offset: 81237},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 2247, col: 1, offset: 81325},
			expr: &oneOrMoreExpr{
				pos: position{line: 2247, col: 13, offset: 81337},
				expr: &charClassMatcher{
					pos:        position{line: 2247, col: 14, offset: 81338},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 2249, col: 1, offset: 81472},
			expr: &actionExpr{
				pos: position{line: 2249, col: 21, offset: 81492},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 2249, col: 21, offset: 81492},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2249, col: 21, offset: 81492},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2249, col: 29, offset: 81500},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2249, col: 41, offset: 81512},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 2249, col: 47, offset: 81518},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 2254, col: 1, offset: 81766},
			expr: &oneOrMoreExpr{
				pos: position{line: 2254, col: 22, offset: 81787},
				expr: &charClassMatcher{
					pos:        position{line: 2254, col: 23, offset: 81788},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 2256, col: 1, offset: 81920},
			expr: &actionExpr{
				pos: position{line: 2256, col: 9, offset: 81928},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2256, col: 9, offset: 81928},
					expr: &charClassMatcher{
						pos:        position{line: 2256, col: 9, offset: 81928},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 2260, col: 1, offset: 81976},
			expr: &choiceExpr{
				pos: position{line: 2260, col: 15, offset: 81990},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2260, col: 15, offset: 81990},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2260, col: 27, offset: 82002},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2260, col: 40, offset: 82015},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2260, col: 51, offset: 82026},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2260, col: 62, offset: 82037},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 2262, col: 1, offset: 82048},
			expr: &actionExpr{
				pos: position{line: 2262, col: 7, offset: 82054},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2262, col: 7, offset: 82054},
					expr: &charClassMatcher{
						pos:        position{line: 2262, col: 7, offset: 82054},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2266, col: 1, offset: 82179},
			expr: &actionExpr{
				pos: position{line: 2266, col: 10, offset: 82188},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2266, col: 10, offset: 82188},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2270, col: 1, offset: 82230},
			expr: &actionExpr{
				pos: position{line: 2270, col: 11, offset: 82240},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2270, col: 11, offset: 82240},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2270, col: 11, offset: 82240},
							expr: &litMatcher{
								pos:        position{line: 2270, col: 11, offset: 82240},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2270, col: 16, offset: 82245},
							expr: &ruleRefExpr{
								pos:  position{line: 2270, col: 16, offset: 82245},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2274, col: 1, offset: 82297},
			expr: &choiceExpr{
				pos: position{line: 2274, col: 10, offset: 82306},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2274, col: 10, offset: 82306},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2274, col: 16, offset: 82312},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2274, col: 16, offset: 82312},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2278, col: 1, offset: 82353},
			expr: &choiceExpr{
				pos: position{line: 2278, col: 12, offset: 82364},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2278, col: 12, offset: 82364},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2278, col: 21, offset: 82373},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2278, col: 28, offset: 82380},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2280, col: 1, offset: 82386},
			expr: &notExpr{
				pos: position{line: 2280, col: 8, offset: 82393},
				expr: &anyMatcher{
					line: 2280, col: 9, offset: 82394,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2282, col: 1, offset: 82397},
			expr: &choiceExpr{
				pos: position{line: 2282, col: 8, offset: 82404},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2282, col: 8, offset: 82404},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2282, col: 18, offset: 82414},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onRawFile1(blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonRawFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawFile1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentRawBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentRawBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentRawBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSub11(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, nil)
}

func (p *parser) callonCounterSub11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub11(stack["name"])
}

func (c *current) onCounterSub21(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSub21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub21(stack["name"])
}

func (c *current) onCounterSubAlpha1(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubAlpha1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha1(stack["name"], stack["start"])
}

func (c *current) onCounterSubAlpha21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, start)
}

func (p *parser) callonCounterSubAlpha21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha21(stack["name"], stack["start"])
}

func (c *current) onCounterSubStart8() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart8()
}

func (c *current) onCounterSubStart1(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, num.(int))
}

func (p *parser) callonCounterSubStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart1(stack["name"], stack["num"])
}

func (c *current) onCounterSubStart28() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart28()
}

func (c *current) onCounterSubStart21(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, num.(int))
}

func (p *parser) callonCounterSubStart21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart21(stack["name"], stack["num"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementShortHandAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attrs"])
}

func (c *current) onBlockAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonBlockAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrList1(stack["attrs"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {
	return types.NewElementStyle(style.(string))
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional2, value.(string))
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional3, value.(string))
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {
	return types.NewElementOption(option.(string))
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {
	return value.(string), nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onNamedAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonNamedAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrs1(stack["attrs"])
}

func (c *current) onNamedAttrPair1(n, v interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(n.(string), v.(string))
}

func (p *parser) callonNamedAttrPair1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrPair1(stack["n"], stack["v"])
}

func (c *current) onAttrEmpty1() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonAttrEmpty1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrEmpty1()
}

func (c *current) onAttrValSQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValSQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQ1(stack["val"])
}

func (c *current) onAttrValSQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValSQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQin1(stack["val"])
}

func (c *current) onAttrValSQEsc1() (interface{}, error) {
	return `'`, nil
}

func (p *parser) callonAttrValSQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQEsc1()
}

func (c *current) onAttrValDQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValDQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQ1(stack["val"])
}

func (c *current) onAttrValDQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValDQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQin1(stack["val"])
}

func (c *current) onAttrValDQEsc1() (interface{}, error) {
	return `"`, nil
}

func (p *parser) callonAttrValDQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQEsc1()
}

func (c *current) onAttrValPosFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValPosFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValPosFB1()
}

func (c *current) onAttrValNamedFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValNamedFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValNamedFB1()
}

func (c *current) onShortHandValuePlain1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1()
}

func (c *current) onNamedAttr1(key, value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(key.(string), value.(string))
}

func (p *parser) callonNamedAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttr1(stack["key"], stack["value"])
}

func (c *current) onNamedAttrKey1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttrKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrKey1()
}

func (c *current) onAttrValuePlain1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttrValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValuePlain1()
}

func (c *current) onAttrValueSingleQuoted1() (interface{}, error) {
	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1()
}

func (c *current) onAttrValueDoubleQuoted1() (interface{}, error) {
	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1()
}

func (c *current) onAttrValueNone1() (interface{}, error) {
	return "", nil
}

func (p *parser) callonAttrValueNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueNone1()
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {
	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attrs, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attrs)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attrs"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attrs, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attrs)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attrs"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attrs, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attrs)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attrs"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph13(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonRawParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph26(stack["attributes"])
}

func (c *current) onRawParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph32(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph32(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine6(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonRawParagraphLine6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine6(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph18(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph18(stack["attributes"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph24(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph24(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onRawVerseParagraph6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonRawVerseParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph6(stack["attributes"])
}

func (c *current) onRawVerseParagraph1(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawVerseParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement19(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement19(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttrs interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttrs.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImage1(path, inlineAttrs interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttrs.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImageAttrs1(alt, w, h, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(alt, w, h, nv)
}

func (p *parser) callonInlineImageAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttrs1(stack["alt"], stack["w"], stack["h"], stack["nv"])
}

func (c *current) onImageAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["attrs"])
}

func (c *current) onImageAltInline1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltInline1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltInline1(stack["value"])
}

func (c *current) onImageWidth1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrWidth, value)
}

func (p *parser) callonImageWidth1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidth1(stack["value"])
}

func (c *current) onImageHeight1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageHeight, value)
}

func (p *parser) callonImageHeight1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeight1(stack["value"])
}

func (c *current) onImageAltAttr1(value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(types.AttrImageAlt, value.(string))
}

func (p *parser) callonImageAltAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltAttr1(stack["value"])
}

func (c *current) onImageWidthAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrWidth, value.(string))
	}
	return nil, nil
}

func (p *parser) callonImageWidthAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidthAttr1(stack["value"])
}

func (c *current) onImageHeightAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrImageHeight, value.(string))
	}
	return nil, nil
}

func (p *parser) callonImageHeightAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeightAttr1(stack["value"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attrs interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attrs.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attrs"])
}

func (c *current) onIconAttrs1(size, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(size, nv)
}

func (p *parser) callonIconAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttrs1(stack["size"], stack["nv"])
}

func (c *current) onIconSize1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrIconSize, value)
}

func (p *parser) callonIconSize1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconSize1(stack["value"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLineContent1()
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["line"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onNormalElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalElement1(stack["element"])
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {
	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onQuotedTextSubstitution1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonQuotedTextSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextSubstitution1(stack["elements"])
}

func (c *current) onInlineMacrosSubstitution1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineMacrosSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacrosSubstitution1(stack["elements"])
}

func (c *current) onAttributesSubstitution1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonAttributesSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesSubstitution1(stack["elements"])
}

func (c *current) onNoneSubstitution4() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneSubstitution4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneSubstitution4()
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attrs, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attrs)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attrs"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {
	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent9()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
