// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocRawDocument",
			pos:  position{line: 17, col: 1, offset: 335},
			expr: &actionExpr{
				pos: position{line: 17, col: 24, offset: 358},
				run: (*parser).callonAsciidocRawDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 24, offset: 358},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 24, offset: 358},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 37, offset: 371},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 37, offset: 371},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 51, offset: 385},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 59, offset: 393},
								name: "AsciidocDocumentRawBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 86, offset: 420},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 22, col: 1, offset: 519},
			expr: &actionExpr{
				pos: position{line: 22, col: 21, offset: 539},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 22, col: 21, offset: 539},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 22, col: 21, offset: 539},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 22, col: 29, offset: 547},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 22, col: 50, offset: 568},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawFile",
			pos:  position{line: 27, col: 1, offset: 686},
			expr: &actionExpr{
				pos: position{line: 27, col: 12, offset: 697},
				run: (*parser).callonRawFile1,
				expr: &seqExpr{
					pos: position{line: 27, col: 12, offset: 697},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 27, col: 12, offset: 697},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 27, col: 20, offset: 705},
								name: "RawFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 27, col: 36, offset: 721},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 33, col: 1, offset: 865},
			expr: &actionExpr{
				pos: position{line: 33, col: 17, offset: 881},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 33, col: 17, offset: 881},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 17, offset: 881},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 33, col: 25, offset: 889},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 33, col: 45, offset: 909},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentRawBlocks",
			pos:  position{line: 40, col: 1, offset: 1090},
			expr: &actionExpr{
				pos: position{line: 40, col: 30, offset: 1119},
				run: (*parser).callonAsciidocDocumentRawBlocks1,
				expr: &seqExpr{
					pos: position{line: 40, col: 30, offset: 1119},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 40, col: 30, offset: 1119},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 40, col: 38, offset: 1127},
								expr: &ruleRefExpr{
									pos:  position{line: 40, col: 38, offset: 1127},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 40, col: 55, offset: 1144},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 40, col: 63, offset: 1152},
								expr: &ruleRefExpr{
									pos:  position{line: 40, col: 63, offset: 1152},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 49, col: 1, offset: 1404},
			expr: &choiceExpr{
				pos: position{line: 50, col: 9, offset: 1433},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 50, col: 9, offset: 1433},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1498},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1519},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1545},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1597},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1615},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1640},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1664},
						name: "RawVerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1692},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1716},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1742},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1771},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 62, col: 11, offset: 1797},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 63, col: 11, offset: 1832},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 64, col: 11, offset: 1856},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 65, col: 11, offset: 1888},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 66, col: 11, offset: 1914},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 11, offset: 1951},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 68, col: 11, offset: 1976},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 69, col: 11, offset: 2007},
						name: "RawParagraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 71, col: 1, offset: 2021},
			expr: &labeledExpr{
				pos:   position{line: 71, col: 47, offset: 2067},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 71, col: 54, offset: 2074},
					expr: &ruleRefExpr{
						pos:  position{line: 71, col: 55, offset: 2075},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 73, col: 1, offset: 2112},
			expr: &actionExpr{
				pos: position{line: 73, col: 38, offset: 2149},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 73, col: 38, offset: 2149},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 73, col: 38, offset: 2149},
							expr: &ruleRefExpr{
								pos:  position{line: 73, col: 39, offset: 2150},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 74, col: 5, offset: 2159},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 75, col: 9, offset: 2175},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 75, col: 9, offset: 2175},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2196},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2221},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2272},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2296},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2324},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 11, offset: 2348},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 11, offset: 2374},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 83, col: 11, offset: 2403},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 84, col: 11, offset: 2429},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 85, col: 11, offset: 2464},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 86, col: 11, offset: 2488},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 87, col: 11, offset: 2520},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 88, col: 11, offset: 2546},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 89, col: 11, offset: 2583},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 90, col: 11, offset: 2608},
										name: "RawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 94, col: 1, offset: 2649},
			expr: &labeledExpr{
				pos:   position{line: 94, col: 23, offset: 2671},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 94, col: 30, offset: 2678},
					expr: &ruleRefExpr{
						pos:  position{line: 94, col: 31, offset: 2679},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 96, col: 1, offset: 2700},
			expr: &actionExpr{
				pos: position{line: 96, col: 22, offset: 2721},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 96, col: 22, offset: 2721},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 96, col: 22, offset: 2721},
							expr: &ruleRefExpr{
								pos:  position{line: 96, col: 23, offset: 2722},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 97, col: 5, offset: 2731},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 97, col: 12, offset: 2738},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 97, col: 12, offset: 2738},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 97, col: 24, offset: 2750},
										name: "RawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 104, col: 1, offset: 2899},
			expr: &ruleRefExpr{
				pos:  position{line: 104, col: 16, offset: 2914},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 106, col: 1, offset: 2932},
			expr: &actionExpr{
				pos: position{line: 106, col: 20, offset: 2951},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 106, col: 20, offset: 2951},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 106, col: 20, offset: 2951},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 106, col: 41, offset: 2972},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 106, col: 49, offset: 2980},
								expr: &ruleRefExpr{
									pos:  position{line: 106, col: 50, offset: 2981},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 106, col: 75, offset: 3006},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 110, col: 1, offset: 3086},
			expr: &seqExpr{
				pos: position{line: 110, col: 26, offset: 3111},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 110, col: 26, offset: 3111},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 110, col: 32, offset: 3117},
						expr: &ruleRefExpr{
							pos:  position{line: 110, col: 32, offset: 3117},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 110, col: 39, offset: 3124},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 112, col: 1, offset: 3129},
			expr: &actionExpr{
				pos: position{line: 112, col: 27, offset: 3155},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 112, col: 27, offset: 3155},
					expr: &oneOrMoreExpr{
						pos: position{line: 112, col: 28, offset: 3156},
						expr: &seqExpr{
							pos: position{line: 112, col: 29, offset: 3157},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 112, col: 29, offset: 3157},
									expr: &ruleRefExpr{
										pos:  position{line: 112, col: 30, offset: 3158},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 112, col: 51, offset: 3179,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 119, col: 1, offset: 3345},
			expr: &actionExpr{
				pos: position{line: 119, col: 19, offset: 3363},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 119, col: 19, offset: 3363},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 119, col: 19, offset: 3363},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 119, col: 23, offset: 3367},
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 23, offset: 3367},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 30, offset: 3374},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 37, offset: 3381},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 52, offset: 3396},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 119, col: 56, offset: 3400},
								expr: &ruleRefExpr{
									pos:  position{line: 119, col: 56, offset: 3400},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 119, col: 74, offset: 3418},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 9, offset: 3430},
							expr: &choiceExpr{
								pos: position{line: 120, col: 10, offset: 3431},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 120, col: 10, offset: 3431},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 120, col: 30, offset: 3451},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 121, col: 9, offset: 3474},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 121, col: 18, offset: 3483},
								expr: &ruleRefExpr{
									pos:  position{line: 121, col: 18, offset: 3483},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 9, offset: 3510},
							expr: &choiceExpr{
								pos: position{line: 122, col: 10, offset: 3511},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 122, col: 10, offset: 3511},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 122, col: 30, offset: 3531},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 123, col: 9, offset: 3554},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 123, col: 19, offset: 3564},
								expr: &ruleRefExpr{
									pos:  position{line: 123, col: 19, offset: 3564},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 127, col: 1, offset: 3665},
			expr: &choiceExpr{
				pos: position{line: 127, col: 20, offset: 3684},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 127, col: 20, offset: 3684},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 127, col: 48, offset: 3712},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 129, col: 1, offset: 3742},
			expr: &actionExpr{
				pos: position{line: 129, col: 30, offset: 3771},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 129, col: 30, offset: 3771},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 30, offset: 3771},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 30, offset: 3771},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 129, col: 37, offset: 3778},
							expr: &litMatcher{
								pos:        position{line: 129, col: 38, offset: 3779},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 42, offset: 3783},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 129, col: 51, offset: 3792},
								expr: &ruleRefExpr{
									pos:  position{line: 129, col: 51, offset: 3792},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 129, col: 68, offset: 3809},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 133, col: 1, offset: 3879},
			expr: &actionExpr{
				pos: position{line: 133, col: 33, offset: 3911},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 133, col: 33, offset: 3911},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 133, col: 33, offset: 3911},
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 33, offset: 3911},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 133, col: 40, offset: 3918},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 133, col: 51, offset: 3929},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 59, offset: 3937},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 133, col: 75, offset: 3953},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 137, col: 1, offset: 4032},
			expr: &actionExpr{
				pos: position{line: 137, col: 19, offset: 4050},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 137, col: 19, offset: 4050},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 19, offset: 4050},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 19, offset: 4050},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 137, col: 26, offset: 4057},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 36, offset: 4067},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 137, col: 56, offset: 4087},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 137, col: 62, offset: 4093},
								expr: &ruleRefExpr{
									pos:  position{line: 137, col: 63, offset: 4094},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 85, offset: 4116},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 85, offset: 4116},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 137, col: 92, offset: 4123},
							expr: &litMatcher{
								pos:        position{line: 137, col: 92, offset: 4123},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 97, offset: 4128},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 97, offset: 4128},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 142, col: 1, offset: 4273},
			expr: &actionExpr{
				pos: position{line: 142, col: 23, offset: 4295},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 142, col: 23, offset: 4295},
					expr: &charClassMatcher{
						pos:        position{line: 142, col: 23, offset: 4295},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 146, col: 1, offset: 4342},
			expr: &actionExpr{
				pos: position{line: 146, col: 24, offset: 4365},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 146, col: 24, offset: 4365},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 146, col: 24, offset: 4365},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 146, col: 28, offset: 4369},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 146, col: 35, offset: 4376},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 146, col: 36, offset: 4377},
									expr: &charClassMatcher{
										pos:        position{line: 146, col: 36, offset: 4377},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 148, col: 4, offset: 4424},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 154, col: 1, offset: 4585},
			expr: &actionExpr{
				pos: position{line: 154, col: 21, offset: 4605},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 154, col: 21, offset: 4605},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 154, col: 21, offset: 4605},
							expr: &ruleRefExpr{
								pos:  position{line: 154, col: 21, offset: 4605},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 154, col: 28, offset: 4612},
							expr: &litMatcher{
								pos:        position{line: 154, col: 29, offset: 4613},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 154, col: 33, offset: 4617},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 155, col: 9, offset: 4636},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 155, col: 10, offset: 4637},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 155, col: 10, offset: 4637},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 155, col: 10, offset: 4637},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 155, col: 21, offset: 4648},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 155, col: 45, offset: 4672},
													expr: &litMatcher{
														pos:        position{line: 155, col: 45, offset: 4672},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 155, col: 50, offset: 4677},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 155, col: 58, offset: 4685},
														expr: &ruleRefExpr{
															pos:  position{line: 155, col: 59, offset: 4686},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 155, col: 82, offset: 4709},
													expr: &litMatcher{
														pos:        position{line: 155, col: 82, offset: 4709},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 155, col: 87, offset: 4714},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 155, col: 97, offset: 4724},
														expr: &ruleRefExpr{
															pos:  position{line: 155, col: 98, offset: 4725},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 157, col: 15, offset: 4842},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 157, col: 15, offset: 4842},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 157, col: 15, offset: 4842},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 157, col: 24, offset: 4851},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 157, col: 46, offset: 4873},
													expr: &litMatcher{
														pos:        position{line: 157, col: 46, offset: 4873},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 157, col: 51, offset: 4878},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 157, col: 61, offset: 4888},
														expr: &ruleRefExpr{
															pos:  position{line: 157, col: 62, offset: 4889},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 159, col: 13, offset: 4998},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 164, col: 1, offset: 5128},
			expr: &choiceExpr{
				pos: position{line: 164, col: 27, offset: 5154},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 164, col: 27, offset: 5154},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 164, col: 27, offset: 5154},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 164, col: 27, offset: 5154},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 164, col: 32, offset: 5159},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 164, col: 39, offset: 5166},
									expr: &charClassMatcher{
										pos:        position{line: 164, col: 39, offset: 5166},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 166, col: 5, offset: 5214},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 166, col: 5, offset: 5214},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 166, col: 5, offset: 5214},
									expr: &litMatcher{
										pos:        position{line: 166, col: 5, offset: 5214},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 166, col: 11, offset: 5220},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 166, col: 18, offset: 5227},
									expr: &charClassMatcher{
										pos:        position{line: 166, col: 18, offset: 5227},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 166, col: 29, offset: 5238},
									expr: &ruleRefExpr{
										pos:  position{line: 166, col: 29, offset: 5238},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 166, col: 36, offset: 5245},
									expr: &litMatcher{
										pos:        position{line: 166, col: 37, offset: 5246},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 170, col: 1, offset: 5286},
			expr: &actionExpr{
				pos: position{line: 170, col: 25, offset: 5310},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 170, col: 25, offset: 5310},
					expr: &charClassMatcher{
						pos:        position{line: 170, col: 25, offset: 5310},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 174, col: 1, offset: 5356},
			expr: &actionExpr{
				pos: position{line: 174, col: 27, offset: 5382},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 174, col: 27, offset: 5382},
					expr: &charClassMatcher{
						pos:        position{line: 174, col: 27, offset: 5382},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 181, col: 1, offset: 5535},
			expr: &actionExpr{
				pos: position{line: 181, col: 25, offset: 5559},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 181, col: 25, offset: 5559},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 181, col: 25, offset: 5559},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 181, col: 29, offset: 5563},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 35, offset: 5569},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 181, col: 50, offset: 5584},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 182, col: 9, offset: 5597},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 182, col: 15, offset: 5603},
								expr: &actionExpr{
									pos: position{line: 182, col: 16, offset: 5604},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 182, col: 17, offset: 5605},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 182, col: 17, offset: 5605},
												expr: &ruleRefExpr{
													pos:  position{line: 182, col: 17, offset: 5605},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 182, col: 24, offset: 5612},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 182, col: 31, offset: 5619},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 184, col: 13, offset: 5693},
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 13, offset: 5693},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 184, col: 20, offset: 5700},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 191, col: 1, offset: 5940},
			expr: &actionExpr{
				pos: position{line: 191, col: 18, offset: 5957},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 191, col: 18, offset: 5957},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 191, col: 18, offset: 5957},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 191, col: 28, offset: 5967},
							expr: &charClassMatcher{
								pos:        position{line: 191, col: 29, offset: 5968},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 195, col: 1, offset: 6016},
			expr: &actionExpr{
				pos: position{line: 195, col: 30, offset: 6045},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 195, col: 30, offset: 6045},
					expr: &charClassMatcher{
						pos:        position{line: 195, col: 30, offset: 6045},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 199, col: 1, offset: 6090},
			expr: &choiceExpr{
				pos: position{line: 199, col: 19, offset: 6108},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 199, col: 19, offset: 6108},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 199, col: 19, offset: 6108},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 199, col: 19, offset: 6108},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 199, col: 24, offset: 6113},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 199, col: 30, offset: 6119},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 199, col: 45, offset: 6134},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 199, col: 49, offset: 6138},
									expr: &ruleRefExpr{
										pos:  position{line: 199, col: 49, offset: 6138},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 199, col: 56, offset: 6145},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 201, col: 5, offset: 6205},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 201, col: 5, offset: 6205},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 201, col: 5, offset: 6205},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 201, col: 9, offset: 6209},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 15, offset: 6215},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 201, col: 30, offset: 6230},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 201, col: 35, offset: 6235},
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 35, offset: 6235},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 201, col: 42, offset: 6242},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 205, col: 1, offset: 6301},
			expr: &actionExpr{
				pos: position{line: 205, col: 26, offset: 6326},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 205, col: 26, offset: 6326},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 205, col: 26, offset: 6326},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 205, col: 30, offset: 6330},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 36, offset: 6336},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 205, col: 51, offset: 6351},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 209, col: 1, offset: 6417},
			expr: &actionExpr{
				pos: position{line: 209, col: 15, offset: 6431},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 209, col: 15, offset: 6431},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 209, col: 15, offset: 6431},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 209, col: 21, offset: 6437},
								expr: &ruleRefExpr{
									pos:  position{line: 209, col: 22, offset: 6438},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 209, col: 41, offset: 6457},
							expr: &ruleRefExpr{
								pos:  position{line: 209, col: 41, offset: 6457},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 213, col: 1, offset: 6527},
			expr: &actionExpr{
				pos: position{line: 213, col: 21, offset: 6547},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 213, col: 21, offset: 6547},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 213, col: 21, offset: 6547},
							expr: &choiceExpr{
								pos: position{line: 213, col: 23, offset: 6549},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 213, col: 23, offset: 6549},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 213, col: 29, offset: 6555},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&litMatcher{
										pos:        position{line: 213, col: 35, offset: 6561},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 214, col: 5, offset: 6637},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 214, col: 11, offset: 6643},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 214, col: 11, offset: 6643},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 215, col: 9, offset: 6664},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 216, col: 9, offset: 6688},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 217, col: 9, offset: 6725},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 218, col: 9, offset: 6753},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 219, col: 9, offset: 6781},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 220, col: 9, offset: 6808},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 221, col: 9, offset: 6835},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 222, col: 9, offset: 6872},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 223, col: 9, offset: 6908},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 227, col: 1, offset: 7011},
			expr: &actionExpr{
				pos: position{line: 227, col: 14, offset: 7024},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 227, col: 14, offset: 7024},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 227, col: 14, offset: 7024},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 227, col: 19, offset: 7029},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 23, offset: 7033},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 227, col: 27, offset: 7037},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 227, col: 32, offset: 7042},
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 32, offset: 7042},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 39, offset: 7049},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 231, col: 1, offset: 7101},
			expr: &actionExpr{
				pos: position{line: 231, col: 20, offset: 7120},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 231, col: 20, offset: 7120},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 231, col: 20, offset: 7120},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 231, col: 25, offset: 7125},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 29, offset: 7129},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 231, col: 33, offset: 7133},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 231, col: 38, offset: 7138},
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 38, offset: 7138},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 237, col: 1, offset: 7415},
			expr: &actionExpr{
				pos: position{line: 237, col: 17, offset: 7431},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 237, col: 17, offset: 7431},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 237, col: 17, offset: 7431},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 237, col: 21, offset: 7435},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 28, offset: 7442},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 237, col: 49, offset: 7463},
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 49, offset: 7463},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 237, col: 56, offset: 7470},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 241, col: 1, offset: 7528},
			expr: &actionExpr{
				pos: position{line: 241, col: 24, offset: 7551},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 241, col: 24, offset: 7551},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 241, col: 24, offset: 7551},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 241, col: 32, offset: 7559},
							expr: &charClassMatcher{
								pos:        position{line: 241, col: 32, offset: 7559},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 247, col: 1, offset: 7812},
			expr: &actionExpr{
				pos: position{line: 247, col: 31, offset: 7842},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 247, col: 31, offset: 7842},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 247, col: 31, offset: 7842},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 247, col: 35, offset: 7846},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 247, col: 42, offset: 7853},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 247, col: 42, offset: 7853},
										expr: &ruleRefExpr{
											pos:  position{line: 247, col: 42, offset: 7853},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 247, col: 57, offset: 7868},
										expr: &ruleRefExpr{
											pos:  position{line: 247, col: 57, offset: 7868},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 247, col: 69, offset: 7880},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 247, col: 73, offset: 7884},
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 73, offset: 7884},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 247, col: 80, offset: 7891},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrs",
			pos:  position{line: 251, col: 1, offset: 7945},
			expr: &choiceExpr{
				pos: position{line: 251, col: 15, offset: 7959},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 251, col: 15, offset: 7959},
						name: "BlockAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 251, col: 31, offset: 7975},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 251, col: 46, offset: 7990},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttrList",
			pos:  position{line: 255, col: 1, offset: 8218},
			expr: &actionExpr{
				pos: position{line: 255, col: 18, offset: 8235},
				run: (*parser).callonBlockAttrList1,
				expr: &seqExpr{
					pos: position{line: 255, col: 18, offset: 8235},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 255, col: 18, offset: 8235},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 255, col: 22, offset: 8239},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 255, col: 29, offset: 8246},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 255, col: 29, offset: 8246},
										expr: &ruleRefExpr{
											pos:  position{line: 255, col: 29, offset: 8246},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 255, col: 45, offset: 8262},
										expr: &ruleRefExpr{
											pos:  position{line: 255, col: 45, offset: 8262},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 255, col: 60, offset: 8277},
										expr: &ruleRefExpr{
											pos:  position{line: 255, col: 60, offset: 8277},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 255, col: 82, offset: 8299},
										expr: &ruleRefExpr{
											pos:  position{line: 255, col: 82, offset: 8299},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 255, col: 104, offset: 8321},
										expr: &ruleRefExpr{
											pos:  position{line: 255, col: 104, offset: 8321},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 255, col: 116, offset: 8333},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 255, col: 120, offset: 8337},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 259, col: 1, offset: 8391},
			expr: &actionExpr{
				pos: position{line: 259, col: 19, offset: 8409},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 259, col: 19, offset: 8409},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 259, col: 25, offset: 8415},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 263, col: 1, offset: 8485},
			expr: &actionExpr{
				pos: position{line: 263, col: 25, offset: 8509},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 263, col: 25, offset: 8509},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 263, col: 25, offset: 8509},
							expr: &ruleRefExpr{
								pos:  position{line: 263, col: 25, offset: 8509},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 263, col: 32, offset: 8516},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 263, col: 36, offset: 8520},
							expr: &ruleRefExpr{
								pos:  position{line: 263, col: 36, offset: 8520},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 263, col: 43, offset: 8527},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 263, col: 49, offset: 8533},
								expr: &ruleRefExpr{
									pos:  position{line: 263, col: 49, offset: 8533},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 270, col: 1, offset: 8683},
			expr: &actionExpr{
				pos: position{line: 270, col: 25, offset: 8707},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 270, col: 25, offset: 8707},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 270, col: 25, offset: 8707},
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 25, offset: 8707},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 270, col: 32, offset: 8714},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 270, col: 36, offset: 8718},
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 36, offset: 8718},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 270, col: 43, offset: 8725},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 270, col: 49, offset: 8731},
								expr: &ruleRefExpr{
									pos:  position{line: 270, col: 49, offset: 8731},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 277, col: 1, offset: 8881},
			expr: &actionExpr{
				pos: position{line: 277, col: 21, offset: 8901},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 277, col: 21, offset: 8901},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 277, col: 21, offset: 8901},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 277, col: 33, offset: 8913},
							expr: &ruleRefExpr{
								pos:  position{line: 277, col: 33, offset: 8913},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 277, col: 40, offset: 8920},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 281, col: 1, offset: 8972},
			expr: &actionExpr{
				pos: position{line: 281, col: 30, offset: 9001},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 281, col: 30, offset: 9001},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 281, col: 30, offset: 9001},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 281, col: 39, offset: 9010},
							expr: &ruleRefExpr{
								pos:  position{line: 281, col: 39, offset: 9010},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 281, col: 46, offset: 9017},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 286, col: 1, offset: 9158},
			expr: &actionExpr{
				pos: position{line: 286, col: 30, offset: 9187},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 286, col: 30, offset: 9187},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 286, col: 30, offset: 9187},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 286, col: 34, offset: 9191},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 37, offset: 9194},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 286, col: 53, offset: 9210},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 286, col: 57, offset: 9214},
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 57, offset: 9214},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 286, col: 64, offset: 9221},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 291, col: 1, offset: 9376},
			expr: &actionExpr{
				pos: position{line: 291, col: 21, offset: 9396},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 291, col: 21, offset: 9396},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 291, col: 21, offset: 9396},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 292, col: 5, offset: 9411},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 292, col: 14, offset: 9420},
								expr: &actionExpr{
									pos: position{line: 292, col: 15, offset: 9421},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 292, col: 15, offset: 9421},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 292, col: 15, offset: 9421},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 292, col: 19, offset: 9425},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 292, col: 24, offset: 9430},
													expr: &ruleRefExpr{
														pos:  position{line: 292, col: 25, offset: 9431},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 293, col: 5, offset: 9486},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 293, col: 12, offset: 9493},
								expr: &actionExpr{
									pos: position{line: 293, col: 13, offset: 9494},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 293, col: 13, offset: 9494},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 293, col: 13, offset: 9494},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 293, col: 17, offset: 9498},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 293, col: 22, offset: 9503},
													expr: &ruleRefExpr{
														pos:  position{line: 293, col: 23, offset: 9504},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 294, col: 5, offset: 9551},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 294, col: 9, offset: 9555},
							expr: &ruleRefExpr{
								pos:  position{line: 294, col: 9, offset: 9555},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 294, col: 16, offset: 9562},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 299, col: 1, offset: 9713},
			expr: &actionExpr{
				pos: position{line: 299, col: 19, offset: 9731},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 299, col: 19, offset: 9731},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 299, col: 19, offset: 9731},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 299, col: 23, offset: 9735},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 299, col: 34, offset: 9746},
								expr: &ruleRefExpr{
									pos:  position{line: 299, col: 35, offset: 9747},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 299, col: 54, offset: 9766},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 299, col: 58, offset: 9770},
							expr: &ruleRefExpr{
								pos:  position{line: 299, col: 58, offset: 9770},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 299, col: 65, offset: 9777},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 303, col: 1, offset: 9849},
			expr: &choiceExpr{
				pos: position{line: 303, col: 21, offset: 9869},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 303, col: 21, offset: 9869},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 303, col: 49, offset: 9897},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 305, col: 1, offset: 9927},
			expr: &actionExpr{
				pos: position{line: 305, col: 30, offset: 9956},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 305, col: 30, offset: 9956},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 305, col: 30, offset: 9956},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 35, offset: 9961},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 305, col: 49, offset: 9975},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 305, col: 53, offset: 9979},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 305, col: 59, offset: 9985},
								expr: &ruleRefExpr{
									pos:  position{line: 305, col: 60, offset: 9986},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 305, col: 77, offset: 10003},
							expr: &litMatcher{
								pos:        position{line: 305, col: 77, offset: 10003},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 305, col: 82, offset: 10008},
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 82, offset: 10008},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 309, col: 1, offset: 10107},
			expr: &actionExpr{
				pos: position{line: 309, col: 33, offset: 10139},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 309, col: 33, offset: 10139},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 309, col: 33, offset: 10139},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 38, offset: 10144},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 309, col: 52, offset: 10158},
							expr: &litMatcher{
								pos:        position{line: 309, col: 52, offset: 10158},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 309, col: 57, offset: 10163},
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 57, offset: 10163},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 313, col: 1, offset: 10251},
			expr: &actionExpr{
				pos: position{line: 313, col: 17, offset: 10267},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 313, col: 17, offset: 10267},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 313, col: 17, offset: 10267},
							expr: &litMatcher{
								pos:        position{line: 313, col: 18, offset: 10268},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 313, col: 26, offset: 10276},
							expr: &litMatcher{
								pos:        position{line: 313, col: 27, offset: 10277},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 313, col: 35, offset: 10285},
							expr: &litMatcher{
								pos:        position{line: 313, col: 36, offset: 10286},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 313, col: 46, offset: 10296},
							expr: &oneOrMoreExpr{
								pos: position{line: 313, col: 48, offset: 10298},
								expr: &ruleRefExpr{
									pos:  position{line: 313, col: 48, offset: 10298},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 313, col: 56, offset: 10306},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 313, col: 61, offset: 10311},
								expr: &charClassMatcher{
									pos:        position{line: 313, col: 61, offset: 10311},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 313, col: 75, offset: 10325},
							expr: &ruleRefExpr{
								pos:  position{line: 313, col: 75, offset: 10325},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 317, col: 1, offset: 10368},
			expr: &actionExpr{
				pos: position{line: 317, col: 19, offset: 10386},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 317, col: 19, offset: 10386},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 317, col: 26, offset: 10393},
						expr: &charClassMatcher{
							pos:        position{line: 317, col: 26, offset: 10393},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 321, col: 1, offset: 10444},
			expr: &actionExpr{
				pos: position{line: 321, col: 29, offset: 10472},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 321, col: 29, offset: 10472},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 321, col: 29, offset: 10472},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 321, col: 36, offset: 10479},
								expr: &charClassMatcher{
									pos:        position{line: 321, col: 36, offset: 10479},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 321, col: 50, offset: 10493},
							expr: &litMatcher{
								pos:        position{line: 321, col: 51, offset: 10494},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 325, col: 1, offset: 10660},
			expr: &actionExpr{
				pos: position{line: 325, col: 20, offset: 10679},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 325, col: 20, offset: 10679},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 325, col: 20, offset: 10679},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 325, col: 29, offset: 10688},
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 29, offset: 10688},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 325, col: 36, offset: 10695},
							expr: &litMatcher{
								pos:        position{line: 325, col: 36, offset: 10695},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 325, col: 41, offset: 10700},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 325, col: 48, offset: 10707},
								expr: &ruleRefExpr{
									pos:  position{line: 325, col: 49, offset: 10708},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 325, col: 66, offset: 10725},
							expr: &litMatcher{
								pos:        position{line: 325, col: 66, offset: 10725},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 325, col: 71, offset: 10730},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 325, col: 77, offset: 10736},
								expr: &ruleRefExpr{
									pos:  position{line: 325, col: 78, offset: 10737},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 325, col: 95, offset: 10754},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 325, col: 99, offset: 10758},
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 99, offset: 10758},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 325, col: 106, offset: 10765},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 329, col: 1, offset: 10834},
			expr: &actionExpr{
				pos: position{line: 329, col: 20, offset: 10853},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 329, col: 20, offset: 10853},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 329, col: 20, offset: 10853},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 329, col: 29, offset: 10862},
							expr: &ruleRefExpr{
								pos:  position{line: 329, col: 29, offset: 10862},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 329, col: 36, offset: 10869},
							expr: &litMatcher{
								pos:        position{line: 329, col: 36, offset: 10869},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 329, col: 41, offset: 10874},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 329, col: 48, offset: 10881},
								expr: &ruleRefExpr{
									pos:  position{line: 329, col: 49, offset: 10882},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 329, col: 66, offset: 10899},
							expr: &litMatcher{
								pos:        position{line: 329, col: 66, offset: 10899},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 329, col: 71, offset: 10904},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 329, col: 77, offset: 10910},
								expr: &ruleRefExpr{
									pos:  position{line: 329, col: 78, offset: 10911},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 329, col: 95, offset: 10928},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 329, col: 99, offset: 10932},
							expr: &ruleRefExpr{
								pos:  position{line: 329, col: 99, offset: 10932},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 329, col: 106, offset: 10939},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 333, col: 1, offset: 11026},
			expr: &actionExpr{
				pos: position{line: 333, col: 19, offset: 11044},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 333, col: 20, offset: 11045},
					expr: &charClassMatcher{
						pos:        position{line: 333, col: 20, offset: 11045},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 337, col: 1, offset: 11094},
			expr: &actionExpr{
				pos: position{line: 337, col: 20, offset: 11113},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &seqExpr{
					pos: position{line: 337, col: 20, offset: 11113},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 337, col: 20, offset: 11113},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 337, col: 24, offset: 11117},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 337, col: 31, offset: 11124},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 337, col: 31, offset: 11124},
										expr: &ruleRefExpr{
											pos:  position{line: 337, col: 31, offset: 11124},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 337, col: 51, offset: 11144},
										expr: &ruleRefExpr{
											pos:  position{line: 337, col: 51, offset: 11144},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 337, col: 66, offset: 11159},
										expr: &ruleRefExpr{
											pos:  position{line: 337, col: 66, offset: 11159},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 337, col: 78, offset: 11171},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 341, col: 1, offset: 11225},
			expr: &actionExpr{
				pos: position{line: 341, col: 23, offset: 11247},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &labeledExpr{
					pos:   position{line: 341, col: 23, offset: 11247},
					label: "role",
					expr: &ruleRefExpr{
						pos:  position{line: 341, col: 28, offset: 11252},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 345, col: 1, offset: 11320},
			expr: &actionExpr{
				pos: position{line: 345, col: 25, offset: 11344},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 345, col: 25, offset: 11344},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 345, col: 25, offset: 11344},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 345, col: 36, offset: 11355},
								expr: &ruleRefExpr{
									pos:  position{line: 345, col: 37, offset: 11356},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 345, col: 56, offset: 11375},
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 56, offset: 11375},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 345, col: 67, offset: 11386},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 349, col: 1, offset: 11494},
			expr: &choiceExpr{
				pos: position{line: 349, col: 18, offset: 11511},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 349, col: 18, offset: 11511},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 349, col: 36, offset: 11529},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 349, col: 58, offset: 11551},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 351, col: 1, offset: 11570},
			expr: &actionExpr{
				pos: position{line: 351, col: 24, offset: 11593},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 351, col: 24, offset: 11593},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 351, col: 24, offset: 11593},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 351, col: 28, offset: 11597},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 351, col: 35, offset: 11604},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 351, col: 50, offset: 11619},
							expr: &charClassMatcher{
								pos:        position{line: 351, col: 51, offset: 11620},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 355, col: 1, offset: 11689},
			expr: &actionExpr{
				pos: position{line: 355, col: 20, offset: 11708},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 355, col: 20, offset: 11708},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 355, col: 20, offset: 11708},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 355, col: 24, offset: 11712},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 27, offset: 11715},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 355, col: 42, offset: 11730},
							expr: &charClassMatcher{
								pos:        position{line: 355, col: 43, offset: 11731},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 359, col: 1, offset: 11792},
			expr: &actionExpr{
				pos: position{line: 359, col: 22, offset: 11813},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 359, col: 22, offset: 11813},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 359, col: 22, offset: 11813},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 359, col: 26, offset: 11817},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 359, col: 31, offset: 11822},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 359, col: 46, offset: 11837},
							expr: &charClassMatcher{
								pos:        position{line: 359, col: 47, offset: 11838},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 364, col: 1, offset: 11947},
			expr: &actionExpr{
				pos: position{line: 364, col: 20, offset: 11966},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 364, col: 20, offset: 11966},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 364, col: 20, offset: 11966},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 364, col: 26, offset: 11972},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 364, col: 41, offset: 11987},
							expr: &charClassMatcher{
								pos:        position{line: 364, col: 42, offset: 11988},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineVal",
			pos:  position{line: 368, col: 1, offset: 12033},
			expr: &choiceExpr{
				pos: position{line: 368, col: 14, offset: 12046},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 368, col: 14, offset: 12046},
						name: "AttrEmpty",
					},
					&ruleRefExpr{
						pos:  position{line: 368, col: 26, offset: 12058},
						name: "AttrValSQ",
					},
					&ruleRefExpr{
						pos:  position{line: 368, col: 38, offset: 12070},
						name: "AttrValDQ",
					},
					&ruleRefExpr{
						pos:  position{line: 368, col: 50, offset: 12082},
						name: "AttrValPosFB",
					},
				},
			},
		},
		{
			name: "NamedAttrs",
			pos:  position{line: 370, col: 1, offset: 12096},
			expr: &actionExpr{
				pos: position{line: 370, col: 15, offset: 12110},
				run: (*parser).callonNamedAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 370, col: 15, offset: 12110},
					label: "attrs",
					expr: &zeroOrMoreExpr{
						pos: position{line: 370, col: 21, offset: 12116},
						expr: &ruleRefExpr{
							pos:  position{line: 370, col: 21, offset: 12116},
							name: "NamedAttrPair",
						},
					},
				},
			},
		},
		{
			name: "NamedAttrPair",
			pos:  position{line: 374, col: 1, offset: 12181},
			expr: &actionExpr{
				pos: position{line: 374, col: 18, offset: 12198},
				run: (*parser).callonNamedAttrPair1,
				expr: &seqExpr{
					pos: position{line: 374, col: 18, offset: 12198},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 374, col: 18, offset: 12198},
							expr: &litMatcher{
								pos:        position{line: 374, col: 18, offset: 12198},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 374, col: 23, offset: 12203},
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 23, offset: 12203},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 374, col: 30, offset: 12210},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 32, offset: 12212},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 374, col: 45, offset: 12225},
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 45, offset: 12225},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 374, col: 52, offset: 12232},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 374, col: 56, offset: 12236},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 374, col: 59, offset: 12239},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 374, col: 59, offset: 12239},
										name: "AttrValDQ",
									},
									&ruleRefExpr{
										pos:  position{line: 374, col: 71, offset: 12251},
										name: "AttrValSQ",
									},
									&ruleRefExpr{
										pos:  position{line: 374, col: 83, offset: 12263},
										name: "AttrValNamedFB",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrEmpty",
			pos:  position{line: 379, col: 1, offset: 12452},
			expr: &actionExpr{
				pos: position{line: 379, col: 14, offset: 12465},
				run: (*parser).callonAttrEmpty1,
				expr: &seqExpr{
					pos: position{line: 379, col: 14, offset: 12465},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 379, col: 14, offset: 12465},
							expr: &charClassMatcher{
								pos:        position{line: 379, col: 14, offset: 12465},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 379, col: 21, offset: 12472},
							expr: &charClassMatcher{
								pos:        position{line: 379, col: 22, offset: 12473},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQ",
			pos:  position{line: 385, col: 1, offset: 12609},
			expr: &actionExpr{
				pos: position{line: 385, col: 14, offset: 12622},
				run: (*parser).callonAttrValSQ1,
				expr: &seqExpr{
					pos: position{line: 385, col: 14, offset: 12622},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 385, col: 14, offset: 12622},
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 14, offset: 12622},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 385, col: 21, offset: 12629},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 385, col: 25, offset: 12633},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 29, offset: 12637},
								name: "AttrValSQin",
							},
						},
						&litMatcher{
							pos:        position{line: 385, col: 41, offset: 12649},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 385, col: 45, offset: 12653},
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 45, offset: 12653},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 385, col: 52, offset: 12660},
							expr: &charClassMatcher{
								pos:        position{line: 385, col: 53, offset: 12661},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQin",
			pos:  position{line: 387, col: 1, offset: 12688},
			expr: &actionExpr{
				pos: position{line: 387, col: 16, offset: 12703},
				run: (*parser).callonAttrValSQin1,
				expr: &labeledExpr{
					pos:   position{line: 387, col: 16, offset: 12703},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 387, col: 20, offset: 12707},
						expr: &choiceExpr{
							pos: position{line: 387, col: 22, offset: 12709},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 387, col: 22, offset: 12709},
									name: "AttrValSQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 387, col: 37, offset: 12724},
									expr: &charClassMatcher{
										pos:        position{line: 387, col: 37, offset: 12724},
										val:        "[^\\r\\n'\\\\]",
										chars:      []rune{'\r', '\n', '\'', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 387, col: 51, offset: 12738},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQEsc",
			pos:  position{line: 389, col: 1, offset: 12778},
			expr: &actionExpr{
				pos: position{line: 389, col: 17, offset: 12794},
				run: (*parser).callonAttrValSQEsc1,
				expr: &litMatcher{
					pos:        position{line: 389, col: 17, offset: 12794},
					val:        "\\'",
					ignoreCase: false,
					want:       "\"\\\\'\"",
				},
			},
		},
		{
			name: "AttrValDQ",
			pos:  position{line: 392, col: 1, offset: 12854},
			expr: &actionExpr{
				pos: position{line: 392, col: 14, offset: 12867},
				run: (*parser).callonAttrValDQ1,
				expr: &seqExpr{
					pos: position{line: 392, col: 14, offset: 12867},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 392, col: 14, offset: 12867},
							expr: &ruleRefExpr{
								pos:  position{line: 392, col: 14, offset: 12867},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 392, col: 21, offset: 12874},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 392, col: 25, offset: 12878},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 392, col: 29, offset: 12882},
								name: "AttrValDQin",
							},
						},
						&litMatcher{
							pos:        position{line: 392, col: 41, offset: 12894},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 392, col: 45, offset: 12898},
							expr: &ruleRefExpr{
								pos:  position{line: 392, col: 45, offset: 12898},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQin",
			pos:  position{line: 394, col: 1, offset: 12926},
			expr: &actionExpr{
				pos: position{line: 394, col: 16, offset: 12941},
				run: (*parser).callonAttrValDQin1,
				expr: &labeledExpr{
					pos:   position{line: 394, col: 16, offset: 12941},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 394, col: 20, offset: 12945},
						expr: &choiceExpr{
							pos: position{line: 394, col: 22, offset: 12947},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 394, col: 22, offset: 12947},
									name: "AttrValDQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 394, col: 37, offset: 12962},
									expr: &charClassMatcher{
										pos:        position{line: 394, col: 37, offset: 12962},
										val:        "[^\\r\\n\"\\\\]",
										chars:      []rune{'\r', '\n', '"', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 394, col: 51, offset: 12976},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQEsc",
			pos:  position{line: 396, col: 1, offset: 13016},
			expr: &actionExpr{
				pos: position{line: 396, col: 17, offset: 13032},
				run: (*parser).callonAttrValDQEsc1,
				expr: &litMatcher{
					pos:        position{line: 396, col: 17, offset: 13032},
					val:        "\\\"",
					ignoreCase: false,
					want:       "\"\\\\\\\"\"",
				},
			},
		},
		{
			name: "AttrValPosFB",
			pos:  position{line: 399, col: 1, offset: 13123},
			expr: &actionExpr{
				pos: position{line: 399, col: 17, offset: 13139},
				run: (*parser).callonAttrValPosFB1,
				expr: &seqExpr{
					pos: position{line: 399, col: 17, offset: 13139},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 399, col: 17, offset: 13139},
							expr: &charClassMatcher{
								pos:        position{line: 399, col: 17, offset: 13139},
								val:        "[^,=\\r\\n\\]]",
								chars:      []rune{',', '=', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 399, col: 30, offset: 13152},
							expr: &charClassMatcher{
								pos:        position{line: 399, col: 31, offset: 13153},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValNamedFB",
			pos:  position{line: 402, col: 1, offset: 13264},
			expr: &actionExpr{
				pos: position{line: 402, col: 19, offset: 13282},
				run: (*parser).callonAttrValNamedFB1,
				expr: &seqExpr{
					pos: position{line: 402, col: 19, offset: 13282},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 402, col: 19, offset: 13282},
							expr: &charClassMatcher{
								pos:        position{line: 402, col: 19, offset: 13282},
								val:        "[^,\\r\\n\\]]",
								chars:      []rune{',', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 402, col: 31, offset: 13294},
							expr: &charClassMatcher{
								pos:        position{line: 402, col: 32, offset: 13295},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePositionalValue",
			pos:  position{line: 405, col: 1, offset: 13402},
			expr: &actionExpr{
				pos: position{line: 405, col: 26, offset: 13427},
				run: (*parser).callonInlinePositionalValue1,
				expr: &seqExpr{
					pos: position{line: 405, col: 26, offset: 13427},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 405, col: 26, offset: 13427},
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 26, offset: 13427},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 405, col: 33, offset: 13434},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 405, col: 40, offset: 13441},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 405, col: 40, offset: 13441},
										name: "InlineValuePlain",
									},
									&ruleRefExpr{
										pos:  position{line: 405, col: 59, offset: 13460},
										name: "AttrValueSingleQuoted",
									},
									&ruleRefExpr{
										pos:  position{line: 405, col: 83, offset: 13484},
										name: "AttrValueDoubleQuoted",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 405, col: 106, offset: 13507},
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 106, offset: 13507},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 405, col: 113, offset: 13514},
							expr: &charClassMatcher{
								pos:        position{line: 405, col: 114, offset: 13515},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineValuePlain",
			pos:  position{line: 411, col: 1, offset: 13703},
			expr: &actionExpr{
				pos: position{line: 411, col: 21, offset: 13723},
				run: (*parser).callonInlineValuePlain1,
				expr: &seqExpr{
					pos: position{line: 411, col: 21, offset: 13723},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 411, col: 21, offset: 13723},
							val:        "[^,\\r\\n\"' \\t=\\]]",
							chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '=', ']'},
							ignoreCase: false,
							inverted:   true,
						},
						&zeroOrMoreExpr{
							pos: position{line: 411, col: 39, offset: 13741},
							expr: &choiceExpr{
								pos: position{line: 411, col: 40, offset: 13742},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 411, col: 40, offset: 13742},
										val:        "[^, \\t\\r\\n\"'=\\]]",
										chars:      []rune{',', ' ', '\t', '\r', '\n', '"', '\'', '=', ']'},
										ignoreCase: false,
										inverted:   true,
									},
									&seqExpr{
										pos: position{line: 411, col: 59, offset: 13761},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 411, col: 59, offset: 13761},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 411, col: 64, offset: 13766},
												val:        "[^, \\t\\r\\n\"'=\\]]",
												chars:      []rune{',', ' ', '\t', '\r', '\n', '"', '\'', '=', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 415, col: 1, offset: 13821},
			expr: &choiceExpr{
				pos: position{line: 415, col: 19, offset: 13839},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 415, col: 19, offset: 13839},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 415, col: 41, offset: 13861},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 415, col: 65, offset: 13885},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 419, col: 1, offset: 14083},
			expr: &actionExpr{
				pos: position{line: 419, col: 24, offset: 14106},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 419, col: 24, offset: 14106},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 419, col: 24, offset: 14106},
							val:        "[^,\\r\\n\"' \\t.#%=\\]]",
							chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
							ignoreCase: false,
							inverted:   true,
						},
						&zeroOrMoreExpr{
							pos: position{line: 419, col: 45, offset: 14127},
							expr: &choiceExpr{
								pos: position{line: 419, col: 46, offset: 14128},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 419, col: 46, offset: 14128},
										val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
										chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
										ignoreCase: false,
										inverted:   true,
									},
									&seqExpr{
										pos: position{line: 419, col: 68, offset: 14150},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 419, col: 68, offset: 14150},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 419, col: 73, offset: 14155},
												val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
												chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttr",
			pos:  position{line: 423, col: 1, offset: 14213},
			expr: &actionExpr{
				pos: position{line: 423, col: 13, offset: 14225},
				run: (*parser).callonNamedAttr1,
				expr: &seqExpr{
					pos: position{line: 423, col: 13, offset: 14225},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 423, col: 13, offset: 14225},
							expr: &seqExpr{
								pos: position{line: 423, col: 15, offset: 14227},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 423, col: 15, offset: 14227},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 423, col: 19, offset: 14231},
										expr: &ruleRefExpr{
											pos:  position{line: 423, col: 19, offset: 14231},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 423, col: 29, offset: 14241},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 33, offset: 14245},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 423, col: 46, offset: 14258},
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 46, offset: 14258},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 423, col: 53, offset: 14265},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 423, col: 57, offset: 14269},
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 57, offset: 14269},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 423, col: 64, offset: 14276},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 70, offset: 14282},
								name: "NamedAttrValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 423, col: 85, offset: 14297},
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 85, offset: 14297},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrKey",
			pos:  position{line: 428, col: 1, offset: 14487},
			expr: &actionExpr{
				pos: position{line: 428, col: 17, offset: 14503},
				run: (*parser).callonNamedAttrKey1,
				expr: &seqExpr{
					pos: position{line: 428, col: 17, offset: 14503},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 428, col: 17, offset: 14503},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 428, col: 26, offset: 14512},
							expr: &charClassMatcher{
								pos:        position{line: 428, col: 26, offset: 14512},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrValue",
			pos:  position{line: 432, col: 1, offset: 14560},
			expr: &choiceExpr{
				pos: position{line: 432, col: 19, offset: 14578},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 432, col: 19, offset: 14578},
						name: "AttrValueNone",
					},
					&ruleRefExpr{
						pos:  position{line: 432, col: 35, offset: 14594},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 432, col: 59, offset: 14618},
						name: "AttrValueDoubleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 432, col: 83, offset: 14642},
						name: "AttrValuePlain",
					},
				},
			},
		},
		{
			name: "AttrValuePlain",
			pos:  position{line: 434, col: 1, offset: 14658},
			expr: &actionExpr{
				pos: position{line: 434, col: 19, offset: 14676},
				run: (*parser).callonAttrValuePlain1,
				expr: &oneOrMoreExpr{
					pos: position{line: 434, col: 19, offset: 14676},
					expr: &charClassMatcher{
						pos:        position{line: 434, col: 19, offset: 14676},
						val:        "[^,\\r\\n\"' \\t\\]]",
						chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 438, col: 1, offset: 14729},
			expr: &actionExpr{
				pos: position{line: 438, col: 26, offset: 14754},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 438, col: 26, offset: 14754},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 438, col: 26, offset: 14754},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 438, col: 30, offset: 14758},
							expr: &charClassMatcher{
								pos:        position{line: 438, col: 30, offset: 14758},
								val:        "[^'\\r\\n]",
								chars:      []rune{'\'', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 438, col: 40, offset: 14768},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 442, col: 1, offset: 14825},
			expr: &actionExpr{
				pos: position{line: 442, col: 26, offset: 14850},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 442, col: 26, offset: 14850},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 442, col: 26, offset: 14850},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 442, col: 31, offset: 14855},
							expr: &charClassMatcher{
								pos:        position{line: 442, col: 31, offset: 14855},
								val:        "[^\"\\r\\n]",
								chars:      []rune{'"', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 442, col: 41, offset: 14865},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueNone",
			pos:  position{line: 448, col: 1, offset: 15120},
			expr: &actionExpr{
				pos: position{line: 448, col: 18, offset: 15137},
				run: (*parser).callonAttrValueNone1,
				expr: &litMatcher{
					pos:        position{line: 448, col: 18, offset: 15137},
					val:        "None",
					ignoreCase: false,
					want:       "\"None\"",
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 456, col: 1, offset: 15319},
			expr: &choiceExpr{
				pos: position{line: 456, col: 17, offset: 15335},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 456, col: 17, offset: 15335},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 456, col: 38, offset: 15356},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 458, col: 1, offset: 15376},
			expr: &actionExpr{
				pos: position{line: 458, col: 23, offset: 15398},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 458, col: 23, offset: 15398},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 458, col: 23, offset: 15398},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 458, col: 46, offset: 15421},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 458, col: 55, offset: 15430},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 458, col: 82, offset: 15457},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 462, col: 1, offset: 15561},
			expr: &actionExpr{
				pos: position{line: 462, col: 31, offset: 15591},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 462, col: 31, offset: 15591},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 462, col: 41, offset: 15601},
						expr: &ruleRefExpr{
							pos:  position{line: 462, col: 41, offset: 15601},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 466, col: 1, offset: 15679},
			expr: &seqExpr{
				pos: position{line: 466, col: 27, offset: 15705},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 466, col: 27, offset: 15705},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 466, col: 32, offset: 15710},
						expr: &charClassMatcher{
							pos:        position{line: 466, col: 33, offset: 15711},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 468, col: 1, offset: 15722},
			expr: &litMatcher{
				pos:        position{line: 468, col: 25, offset: 15746},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 471, col: 1, offset: 15834},
			expr: &actionExpr{
				pos: position{line: 471, col: 30, offset: 15863},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 471, col: 30, offset: 15863},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 472, col: 9, offset: 15881},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 472, col: 9, offset: 15881},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 472, col: 9, offset: 15881},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 472, col: 19, offset: 15891},
										expr: &ruleRefExpr{
											pos:  position{line: 472, col: 20, offset: 15892},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 473, col: 11, offset: 15948},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 473, col: 11, offset: 15948},
										expr: &ruleRefExpr{
											pos:  position{line: 473, col: 11, offset: 15948},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 473, col: 18, offset: 15955},
										expr: &ruleRefExpr{
											pos:  position{line: 473, col: 19, offset: 15956},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 474, col: 11, offset: 15987},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 474, col: 11, offset: 15987},
										expr: &litMatcher{
											pos:        position{line: 474, col: 12, offset: 15988},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 474, col: 16, offset: 15992},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 475, col: 11, offset: 16040},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 476, col: 11, offset: 16061},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 477, col: 11, offset: 16083},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 478, col: 11, offset: 16108},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 479, col: 11, offset: 16136},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 480, col: 11, offset: 16151},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 481, col: 11, offset: 16183},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 482, col: 11, offset: 16202},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 483, col: 11, offset: 16223},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 484, col: 11, offset: 16244},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 485, col: 11, offset: 16268},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 486, col: 11, offset: 16294},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 486, col: 11, offset: 16294},
										expr: &litMatcher{
											pos:        position{line: 486, col: 12, offset: 16295},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 486, col: 17, offset: 16300},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 487, col: 11, offset: 16324},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 488, col: 11, offset: 16353},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 489, col: 11, offset: 16381},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 493, col: 1, offset: 16447},
			expr: &choiceExpr{
				pos: position{line: 493, col: 41, offset: 16487},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 493, col: 41, offset: 16487},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 493, col: 55, offset: 16501},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 493, col: 55, offset: 16501},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 493, col: 55, offset: 16501},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 493, col: 59, offset: 16505},
									expr: &litMatcher{
										pos:        position{line: 493, col: 60, offset: 16506},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 497, col: 1, offset: 16565},
			expr: &actionExpr{
				pos: position{line: 497, col: 23, offset: 16587},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 497, col: 23, offset: 16587},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 497, col: 23, offset: 16587},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 497, col: 46, offset: 16610},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 497, col: 55, offset: 16619},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 497, col: 82, offset: 16646},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 501, col: 1, offset: 16750},
			expr: &actionExpr{
				pos: position{line: 501, col: 31, offset: 16780},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 501, col: 31, offset: 16780},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 501, col: 41, offset: 16790},
						expr: &ruleRefExpr{
							pos:  position{line: 501, col: 41, offset: 16790},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 506, col: 1, offset: 16950},
			expr: &actionExpr{
				pos: position{line: 506, col: 30, offset: 16979},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 506, col: 30, offset: 16979},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 507, col: 9, offset: 16997},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 507, col: 9, offset: 16997},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 507, col: 9, offset: 16997},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 507, col: 19, offset: 17007},
										expr: &ruleRefExpr{
											pos:  position{line: 507, col: 20, offset: 17008},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 508, col: 11, offset: 17064},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 508, col: 11, offset: 17064},
										expr: &ruleRefExpr{
											pos:  position{line: 508, col: 11, offset: 17064},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 508, col: 18, offset: 17071},
										expr: &ruleRefExpr{
											pos:  position{line: 508, col: 19, offset: 17072},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 509, col: 11, offset: 17103},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 510, col: 11, offset: 17120},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 511, col: 11, offset: 17141},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 512, col: 11, offset: 17163},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 513, col: 11, offset: 17188},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 514, col: 11, offset: 17216},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 515, col: 11, offset: 17231},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 516, col: 11, offset: 17263},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 517, col: 11, offset: 17282},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 518, col: 11, offset: 17303},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 519, col: 11, offset: 17324},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 520, col: 11, offset: 17348},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 521, col: 11, offset: 17374},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 521, col: 11, offset: 17374},
										expr: &litMatcher{
											pos:        position{line: 521, col: 12, offset: 17375},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 521, col: 18, offset: 17381},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 522, col: 11, offset: 17405},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 523, col: 11, offset: 17434},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 524, col: 11, offset: 17462},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 528, col: 1, offset: 17536},
			expr: &seqExpr{
				pos: position{line: 528, col: 27, offset: 17562},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 528, col: 27, offset: 17562},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 528, col: 33, offset: 17568},
						expr: &charClassMatcher{
							pos:        position{line: 528, col: 34, offset: 17569},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 530, col: 1, offset: 17580},
			expr: &litMatcher{
				pos:        position{line: 530, col: 25, offset: 17604},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 532, col: 1, offset: 17611},
			expr: &actionExpr{
				pos: position{line: 532, col: 41, offset: 17651},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 532, col: 42, offset: 17652},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 532, col: 42, offset: 17652},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 532, col: 56, offset: 17666},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 532, col: 56, offset: 17666},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 532, col: 60, offset: 17670},
									expr: &litMatcher{
										pos:        position{line: 532, col: 61, offset: 17671},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 539, col: 1, offset: 17836},
			expr: &actionExpr{
				pos: position{line: 539, col: 12, offset: 17847},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 539, col: 12, offset: 17847},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 539, col: 12, offset: 17847},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 539, col: 23, offset: 17858},
								expr: &ruleRefExpr{
									pos:  position{line: 539, col: 24, offset: 17859},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 540, col: 5, offset: 17876},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 540, col: 12, offset: 17883},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 540, col: 12, offset: 17883},
									expr: &litMatcher{
										pos:        position{line: 540, col: 13, offset: 17884},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 544, col: 5, offset: 17975},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 548, col: 5, offset: 18127},
							expr: &ruleRefExpr{
								pos:  position{line: 548, col: 5, offset: 18127},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 548, col: 12, offset: 18134},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 548, col: 19, offset: 18141},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 548, col: 34, offset: 18156},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 548, col: 38, offset: 18160},
								expr: &ruleRefExpr{
									pos:  position{line: 548, col: 38, offset: 18160},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 548, col: 56, offset: 18178},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 552, col: 1, offset: 18284},
			expr: &actionExpr{
				pos: position{line: 552, col: 18, offset: 18301},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 552, col: 18, offset: 18301},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 552, col: 27, offset: 18310},
						expr: &seqExpr{
							pos: position{line: 552, col: 28, offset: 18311},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 552, col: 28, offset: 18311},
									expr: &ruleRefExpr{
										pos:  position{line: 552, col: 29, offset: 18312},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 552, col: 37, offset: 18320},
									expr: &ruleRefExpr{
										pos:  position{line: 552, col: 38, offset: 18321},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 552, col: 54, offset: 18337},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 556, col: 1, offset: 18458},
			expr: &actionExpr{
				pos: position{line: 556, col: 17, offset: 18474},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 556, col: 17, offset: 18474},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 556, col: 26, offset: 18483},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 556, col: 26, offset: 18483},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 557, col: 11, offset: 18498},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 558, col: 11, offset: 18543},
								expr: &ruleRefExpr{
									pos:  position{line: 558, col: 11, offset: 18543},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 559, col: 11, offset: 18561},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 560, col: 11, offset: 18586},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 561, col: 11, offset: 18614},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 562, col: 11, offset: 18635},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 563, col: 11, offset: 18657},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 564, col: 11, offset: 18672},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 565, col: 11, offset: 18697},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 566, col: 11, offset: 18720},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 567, col: 11, offset: 18741},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 568, col: 11, offset: 18758},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 569, col: 11, offset: 18790},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 570, col: 11, offset: 18818},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 577, col: 1, offset: 18969},
			expr: &seqExpr{
				pos: position{line: 577, col: 31, offset: 18999},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 577, col: 31, offset: 18999},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 577, col: 41, offset: 19009},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 582, col: 1, offset: 19120},
			expr: &actionExpr{
				pos: position{line: 582, col: 19, offset: 19138},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 582, col: 19, offset: 19138},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 582, col: 19, offset: 19138},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 582, col: 25, offset: 19144},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 582, col: 40, offset: 19159},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 582, col: 45, offset: 19164},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 582, col: 52, offset: 19171},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 582, col: 68, offset: 19187},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 582, col: 75, offset: 19194},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 586, col: 1, offset: 19309},
			expr: &actionExpr{
				pos: position{line: 586, col: 20, offset: 19328},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 586, col: 20, offset: 19328},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 586, col: 20, offset: 19328},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 586, col: 26, offset: 19334},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 586, col: 41, offset: 19349},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 586, col: 45, offset: 19353},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 586, col: 52, offset: 19360},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 586, col: 68, offset: 19376},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 586, col: 75, offset: 19383},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 590, col: 1, offset: 19499},
			expr: &actionExpr{
				pos: position{line: 590, col: 18, offset: 19516},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 590, col: 19, offset: 19517},
					expr: &charClassMatcher{
						pos:        position{line: 590, col: 19, offset: 19517},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 594, col: 1, offset: 19566},
			expr: &actionExpr{
				pos: position{line: 594, col: 19, offset: 19584},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 594, col: 19, offset: 19584},
					expr: &charClassMatcher{
						pos:        position{line: 594, col: 19, offset: 19584},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 598, col: 1, offset: 19632},
			expr: &actionExpr{
				pos: position{line: 598, col: 24, offset: 19655},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 598, col: 24, offset: 19655},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 598, col: 24, offset: 19655},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 598, col: 28, offset: 19659},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 598, col: 34, offset: 19665},
								expr: &ruleRefExpr{
									pos:  position{line: 598, col: 35, offset: 19666},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 598, col: 54, offset: 19685},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 605, col: 1, offset: 19867},
			expr: &actionExpr{
				pos: position{line: 605, col: 18, offset: 19884},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 605, col: 18, offset: 19884},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 605, col: 18, offset: 19884},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 605, col: 24, offset: 19890},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 605, col: 24, offset: 19890},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 605, col: 24, offset: 19890},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 605, col: 36, offset: 19902},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 605, col: 42, offset: 19908},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 605, col: 56, offset: 19922},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 605, col: 74, offset: 19940},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 607, col: 8, offset: 20087},
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 8, offset: 20087},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 607, col: 15, offset: 20094},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 611, col: 1, offset: 20146},
			expr: &actionExpr{
				pos: position{line: 611, col: 26, offset: 20171},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 611, col: 26, offset: 20171},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 611, col: 26, offset: 20171},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 611, col: 30, offset: 20175},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 611, col: 36, offset: 20181},
								expr: &choiceExpr{
									pos: position{line: 611, col: 37, offset: 20182},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 611, col: 37, offset: 20182},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 611, col: 59, offset: 20204},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 611, col: 80, offset: 20225},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 611, col: 99, offset: 20244},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 615, col: 1, offset: 20316},
			expr: &actionExpr{
				pos: position{line: 615, col: 24, offset: 20339},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 615, col: 24, offset: 20339},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 615, col: 24, offset: 20339},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 615, col: 33, offset: 20348},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 615, col: 40, offset: 20355},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 615, col: 66, offset: 20381},
							expr: &litMatcher{
								pos:        position{line: 615, col: 66, offset: 20381},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 619, col: 1, offset: 20440},
			expr: &actionExpr{
				pos: position{line: 619, col: 29, offset: 20468},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 619, col: 29, offset: 20468},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 619, col: 29, offset: 20468},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 619, col: 36, offset: 20475},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 619, col: 36, offset: 20475},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 620, col: 11, offset: 20592},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 621, col: 11, offset: 20628},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 622, col: 11, offset: 20654},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 623, col: 11, offset: 20686},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 624, col: 11, offset: 20718},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 625, col: 11, offset: 20745},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 625, col: 31, offset: 20765},
							expr: &ruleRefExpr{
								pos:  position{line: 625, col: 31, offset: 20765},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 625, col: 39, offset: 20773},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 625, col: 39, offset: 20773},
									expr: &litMatcher{
										pos:        position{line: 625, col: 40, offset: 20774},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 625, col: 46, offset: 20780},
									expr: &litMatcher{
										pos:        position{line: 625, col: 47, offset: 20781},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 629, col: 1, offset: 20813},
			expr: &actionExpr{
				pos: position{line: 629, col: 23, offset: 20835},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 629, col: 23, offset: 20835},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 629, col: 23, offset: 20835},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 629, col: 30, offset: 20842},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 629, col: 30, offset: 20842},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 629, col: 47, offset: 20859},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 630, col: 5, offset: 20881},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 630, col: 12, offset: 20888},
								expr: &actionExpr{
									pos: position{line: 630, col: 13, offset: 20889},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 630, col: 13, offset: 20889},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 630, col: 13, offset: 20889},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 630, col: 17, offset: 20893},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 630, col: 24, offset: 20900},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 630, col: 24, offset: 20900},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 630, col: 41, offset: 20917},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 636, col: 1, offset: 21055},
			expr: &actionExpr{
				pos: position{line: 636, col: 29, offset: 21083},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 636, col: 29, offset: 21083},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 636, col: 29, offset: 21083},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 636, col: 34, offset: 21088},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 636, col: 41, offset: 21095},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 636, col: 41, offset: 21095},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 636, col: 58, offset: 21112},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 637, col: 5, offset: 21134},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 637, col: 12, offset: 21141},
								expr: &actionExpr{
									pos: position{line: 637, col: 13, offset: 21142},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 637, col: 13, offset: 21142},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 637, col: 13, offset: 21142},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 637, col: 17, offset: 21146},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 637, col: 24, offset: 21153},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 637, col: 24, offset: 21153},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 637, col: 41, offset: 21170},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 639, col: 9, offset: 21223},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 643, col: 1, offset: 21313},
			expr: &actionExpr{
				pos: position{line: 643, col: 19, offset: 21331},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 643, col: 19, offset: 21331},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 643, col: 19, offset: 21331},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 26, offset: 21338},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 643, col: 34, offset: 21346},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 643, col: 39, offset: 21351},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 44, offset: 21356},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 647, col: 1, offset: 21444},
			expr: &actionExpr{
				pos: position{line: 647, col: 25, offset: 21468},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 647, col: 25, offset: 21468},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 647, col: 25, offset: 21468},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 647, col: 30, offset: 21473},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 37, offset: 21480},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 647, col: 45, offset: 21488},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 647, col: 50, offset: 21493},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 55, offset: 21498},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 647, col: 63, offset: 21506},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 651, col: 1, offset: 21591},
			expr: &actionExpr{
				pos: position{line: 651, col: 20, offset: 21610},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 651, col: 20, offset: 21610},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 651, col: 32, offset: 21622},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 655, col: 1, offset: 21717},
			expr: &actionExpr{
				pos: position{line: 655, col: 26, offset: 21742},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 655, col: 26, offset: 21742},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 655, col: 26, offset: 21742},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 655, col: 31, offset: 21747},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 655, col: 43, offset: 21759},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 655, col: 51, offset: 21767},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 659, col: 1, offset: 21859},
			expr: &actionExpr{
				pos: position{line: 659, col: 23, offset: 21881},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 659, col: 23, offset: 21881},
					expr: &charClassMatcher{
						pos:        position{line: 659, col: 23, offset: 21881},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 663, col: 1, offset: 21926},
			expr: &actionExpr{
				pos: position{line: 663, col: 23, offset: 21948},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 663, col: 23, offset: 21948},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 663, col: 24, offset: 21949},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 663, col: 24, offset: 21949},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 663, col: 34, offset: 21959},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 663, col: 42, offset: 21967},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 663, col: 48, offset: 21973},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 663, col: 73, offset: 21998},
							expr: &litMatcher{
								pos:        position{line: 663, col: 73, offset: 21998},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 667, col: 1, offset: 22147},
			expr: &actionExpr{
				pos: position{line: 667, col: 28, offset: 22174},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 667, col: 28, offset: 22174},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 667, col: 28, offset: 22174},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 667, col: 35, offset: 22181},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 667, col: 54, offset: 22200},
							expr: &ruleRefExpr{
								pos:  position{line: 667, col: 54, offset: 22200},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 667, col: 62, offset: 22208},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 667, col: 62, offset: 22208},
									expr: &litMatcher{
										pos:        position{line: 667, col: 63, offset: 22209},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 667, col: 69, offset: 22215},
									expr: &litMatcher{
										pos:        position{line: 667, col: 70, offset: 22216},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 671, col: 1, offset: 22248},
			expr: &actionExpr{
				pos: position{line: 671, col: 22, offset: 22269},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 671, col: 22, offset: 22269},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 671, col: 22, offset: 22269},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 671, col: 29, offset: 22276},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 672, col: 5, offset: 22290},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 672, col: 12, offset: 22297},
								expr: &actionExpr{
									pos: position{line: 672, col: 13, offset: 22298},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 672, col: 13, offset: 22298},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 672, col: 13, offset: 22298},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 672, col: 17, offset: 22302},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 672, col: 24, offset: 22309},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 678, col: 1, offset: 22440},
			expr: &choiceExpr{
				pos: position{line: 678, col: 13, offset: 22452},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 678, col: 13, offset: 22452},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 678, col: 13, offset: 22452},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 678, col: 18, offset: 22457},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 678, col: 18, offset: 22457},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 678, col: 30, offset: 22469},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 680, col: 5, offset: 22537},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 680, col: 5, offset: 22537},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 680, col: 5, offset: 22537},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 680, col: 9, offset: 22541},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 680, col: 14, offset: 22546},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 680, col: 14, offset: 22546},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 680, col: 26, offset: 22558},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 684, col: 1, offset: 22626},
			expr: &actionExpr{
				pos: position{line: 684, col: 16, offset: 22641},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 684, col: 16, offset: 22641},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 684, col: 16, offset: 22641},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 684, col: 23, offset: 22648},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 684, col: 23, offset: 22648},
									expr: &litMatcher{
										pos:        position{line: 684, col: 24, offset: 22649},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 687, col: 5, offset: 22703},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 695, col: 1, offset: 22883},
			expr: &actionExpr{
				pos: position{line: 695, col: 21, offset: 22903},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 695, col: 21, offset: 22903},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 695, col: 21, offset: 22903},
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 22, offset: 22904},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 695, col: 26, offset: 22908},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 695, col: 35, offset: 22917},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 695, col: 35, offset: 22917},
									expr: &charClassMatcher{
										pos:        position{line: 695, col: 35, offset: 22917},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 697, col: 12, offset: 22979},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawFileContent",
			pos:  position{line: 702, col: 1, offset: 23126},
			expr: &zeroOrMoreExpr{
				pos: position{line: 702, col: 19, offset: 23144},
				expr: &choiceExpr{
					pos: position{line: 702, col: 20, offset: 23145},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 702, col: 20, offset: 23145},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 702, col: 36, offset: 23161},
							name: "RawLine",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 708, col: 1, offset: 23308},
			expr: &actionExpr{
				pos: position{line: 708, col: 21, offset: 23328},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 708, col: 21, offset: 23328},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 708, col: 21, offset: 23328},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 708, col: 29, offset: 23336},
								expr: &choiceExpr{
									pos: position{line: 708, col: 30, offset: 23337},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 708, col: 30, offset: 23337},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 708, col: 53, offset: 23360},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 708, col: 74, offset: 23381},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 708, col: 74, offset: 23381,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 708, col: 107, offset: 23414},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 712, col: 1, offset: 23485},
			expr: &actionExpr{
				pos: position{line: 712, col: 25, offset: 23509},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 712, col: 25, offset: 23509},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 712, col: 25, offset: 23509},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 712, col: 33, offset: 23517},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 712, col: 38, offset: 23522},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 712, col: 38, offset: 23522},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 712, col: 78, offset: 23562},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 716, col: 1, offset: 23627},
			expr: &actionExpr{
				pos: position{line: 716, col: 23, offset: 23649},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 716, col: 23, offset: 23649},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 716, col: 23, offset: 23649},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 716, col: 31, offset: 23657},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 716, col: 36, offset: 23662},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 716, col: 36, offset: 23662},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 716, col: 76, offset: 23702},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 723, col: 1, offset: 23866},
			expr: &choiceExpr{
				pos: position{line: 723, col: 18, offset: 23883},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 723, col: 18, offset: 23883},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 723, col: 18, offset: 23883},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 723, col: 27, offset: 23892},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 725, col: 9, offset: 23949},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 725, col: 9, offset: 23949},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 725, col: 15, offset: 23955},
								expr: &ruleRefExpr{
									pos:  position{line: 725, col: 16, offset: 23956},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 729, col: 1, offset: 24048},
			expr: &actionExpr{
				pos: position{line: 729, col: 22, offset: 24069},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 729, col: 22, offset: 24069},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 729, col: 22, offset: 24069},
							expr: &ruleRefExpr{
								pos:  position{line: 729, col: 23, offset: 24070},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 730, col: 5, offset: 24078},
							expr: &ruleRefExpr{
								pos:  position{line: 730, col: 6, offset: 24079},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 731, col: 5, offset: 24094},
							expr: &ruleRefExpr{
								pos:  position{line: 731, col: 6, offset: 24095},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 732, col: 5, offset: 24117},
							expr: &ruleRefExpr{
								pos:  position{line: 732, col: 6, offset: 24118},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 733, col: 5, offset: 24144},
							expr: &ruleRefExpr{
								pos:  position{line: 733, col: 6, offset: 24145},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 734, col: 5, offset: 24173},
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 6, offset: 24174},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 735, col: 5, offset: 24200},
							expr: &ruleRefExpr{
								pos:  position{line: 735, col: 6, offset: 24201},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 736, col: 5, offset: 24226},
							expr: &ruleRefExpr{
								pos:  position{line: 736, col: 6, offset: 24227},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 737, col: 5, offset: 24248},
							expr: &ruleRefExpr{
								pos:  position{line: 737, col: 6, offset: 24249},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 738, col: 5, offset: 24268},
							expr: &ruleRefExpr{
								pos:  position{line: 738, col: 6, offset: 24269},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 739, col: 5, offset: 24296},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 739, col: 11, offset: 24302},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 739, col: 11, offset: 24302},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 739, col: 20, offset: 24311},
										expr: &ruleRefExpr{
											pos:  position{line: 739, col: 21, offset: 24312},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 741, col: 12, offset: 24411},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 745, col: 1, offset: 24450},
			expr: &seqExpr{
				pos: position{line: 745, col: 25, offset: 24474},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 745, col: 25, offset: 24474},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 745, col: 29, offset: 24478},
						expr: &ruleRefExpr{
							pos:  position{line: 745, col: 29, offset: 24478},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 745, col: 36, offset: 24485},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 747, col: 1, offset: 24557},
			expr: &actionExpr{
				pos: position{line: 747, col: 29, offset: 24585},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 747, col: 29, offset: 24585},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 747, col: 29, offset: 24585},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 747, col: 50, offset: 24606},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 58, offset: 24614},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 751, col: 1, offset: 24720},
			expr: &actionExpr{
				pos: position{line: 751, col: 29, offset: 24748},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 751, col: 29, offset: 24748},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 751, col: 29, offset: 24748},
							expr: &ruleRefExpr{
								pos:  position{line: 751, col: 30, offset: 24749},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 752, col: 5, offset: 24758},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 752, col: 14, offset: 24767},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 752, col: 14, offset: 24767},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 753, col: 11, offset: 24792},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 754, col: 11, offset: 24816},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 755, col: 11, offset: 24837},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 756, col: 11, offset: 24865},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 757, col: 11, offset: 24889},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 758, col: 11, offset: 24916},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 759, col: 11, offset: 24945},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 761, col: 11, offset: 25010},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 762, col: 11, offset: 25061},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 763, col: 11, offset: 25085},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 764, col: 11, offset: 25117},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 765, col: 11, offset: 25143},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 766, col: 11, offset: 25180},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 767, col: 11, offset: 25205},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 774, col: 1, offset: 25371},
			expr: &actionExpr{
				pos: position{line: 774, col: 20, offset: 25390},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 774, col: 20, offset: 25390},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 774, col: 20, offset: 25390},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 774, col: 26, offset: 25396},
								expr: &ruleRefExpr{
									pos:  position{line: 774, col: 27, offset: 25397},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 774, col: 40, offset: 25410},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 774, col: 48, offset: 25418},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 774, col: 71, offset: 25441},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 774, col: 80, offset: 25450},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 778, col: 1, offset: 25585},
			expr: &actionExpr{
				pos: position{line: 779, col: 5, offset: 25615},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 779, col: 5, offset: 25615},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 779, col: 5, offset: 25615},
							expr: &ruleRefExpr{
								pos:  position{line: 779, col: 5, offset: 25615},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 779, col: 12, offset: 25622},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 781, col: 9, offset: 25685},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 781, col: 9, offset: 25685},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 781, col: 9, offset: 25685},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 781, col: 9, offset: 25685},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 781, col: 16, offset: 25692},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 781, col: 16, offset: 25692},
															expr: &litMatcher{
																pos:        position{line: 781, col: 17, offset: 25693},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 785, col: 9, offset: 25793},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 804, col: 11, offset: 26510},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 804, col: 11, offset: 26510},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 804, col: 11, offset: 26510},
													expr: &charClassMatcher{
														pos:        position{line: 804, col: 12, offset: 26511},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 804, col: 20, offset: 26519},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 806, col: 13, offset: 26630},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 806, col: 13, offset: 26630},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 806, col: 14, offset: 26631},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 806, col: 21, offset: 26638},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 808, col: 13, offset: 26752},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 808, col: 13, offset: 26752},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 808, col: 14, offset: 26753},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 808, col: 21, offset: 26760},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 810, col: 13, offset: 26874},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 810, col: 13, offset: 26874},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 810, col: 13, offset: 26874},
													expr: &charClassMatcher{
														pos:        position{line: 810, col: 14, offset: 26875},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 810, col: 22, offset: 26883},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 812, col: 13, offset: 26997},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 812, col: 13, offset: 26997},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 812, col: 13, offset: 26997},
													expr: &charClassMatcher{
														pos:        position{line: 812, col: 14, offset: 26998},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 812, col: 22, offset: 27006},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 814, col: 12, offset: 27119},
							expr: &ruleRefExpr{
								pos:  position{line: 814, col: 12, offset: 27119},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 818, col: 1, offset: 27154},
			expr: &actionExpr{
				pos: position{line: 818, col: 27, offset: 27180},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 818, col: 27, offset: 27180},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 818, col: 37, offset: 27190},
						expr: &ruleRefExpr{
							pos:  position{line: 818, col: 37, offset: 27190},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 825, col: 1, offset: 27390},
			expr: &actionExpr{
				pos: position{line: 825, col: 22, offset: 27411},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 825, col: 22, offset: 27411},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 825, col: 22, offset: 27411},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 825, col: 28, offset: 27417},
								expr: &ruleRefExpr{
									pos:  position{line: 825, col: 29, offset: 27418},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 825, col: 42, offset: 27431},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 825, col: 50, offset: 27439},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 825, col: 75, offset: 27464},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 825, col: 86, offset: 27475},
								expr: &ruleRefExpr{
									pos:  position{line: 825, col: 87, offset: 27476},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 825, col: 117, offset: 27506},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 825, col: 126, offset: 27515},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 829, col: 1, offset: 27668},
			expr: &actionExpr{
				pos: position{line: 830, col: 5, offset: 27700},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 830, col: 5, offset: 27700},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 830, col: 5, offset: 27700},
							expr: &ruleRefExpr{
								pos:  position{line: 830, col: 5, offset: 27700},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 830, col: 12, offset: 27707},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 830, col: 20, offset: 27715},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 832, col: 9, offset: 27772},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 832, col: 9, offset: 27772},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 832, col: 9, offset: 27772},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 832, col: 16, offset: 27779},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 832, col: 16, offset: 27779},
															expr: &litMatcher{
																pos:        position{line: 832, col: 17, offset: 27780},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 836, col: 9, offset: 27880},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 853, col: 14, offset: 28587},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 853, col: 21, offset: 28594},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 853, col: 22, offset: 28595},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 855, col: 13, offset: 28681},
							expr: &ruleRefExpr{
								pos:  position{line: 855, col: 13, offset: 28681},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 859, col: 1, offset: 28717},
			expr: &actionExpr{
				pos: position{line: 859, col: 32, offset: 28748},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 859, col: 32, offset: 28748},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 859, col: 32, offset: 28748},
							expr: &litMatcher{
								pos:        position{line: 859, col: 33, offset: 28749},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 859, col: 37, offset: 28753},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 860, col: 7, offset: 28767},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 860, col: 7, offset: 28767},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 860, col: 7, offset: 28767},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 861, col: 7, offset: 28812},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 861, col: 7, offset: 28812},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 862, col: 7, offset: 28855},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 862, col: 7, offset: 28855},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 863, col: 7, offset: 28897},
							expr: &ruleRefExpr{
								pos:  position{line: 863, col: 7, offset: 28897},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 867, col: 1, offset: 28939},
			expr: &actionExpr{
				pos: position{line: 867, col: 29, offset: 28967},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 867, col: 29, offset: 28967},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 867, col: 39, offset: 28977},
						expr: &ruleRefExpr{
							pos:  position{line: 867, col: 39, offset: 28977},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 874, col: 1, offset: 29293},
			expr: &actionExpr{
				pos: position{line: 874, col: 20, offset: 29312},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 874, col: 20, offset: 29312},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 874, col: 20, offset: 29312},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 874, col: 26, offset: 29318},
								expr: &ruleRefExpr{
									pos:  position{line: 874, col: 27, offset: 29319},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 874, col: 40, offset: 29332},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 874, col: 46, offset: 29338},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 874, col: 75, offset: 29367},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 874, col: 86, offset: 29378},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 874, col: 112, offset: 29404},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 874, col: 124, offset: 29416},
								expr: &ruleRefExpr{
									pos:  position{line: 874, col: 125, offset: 29417},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 878, col: 1, offset: 29558},
			expr: &seqExpr{
				pos: position{line: 878, col: 26, offset: 29583},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 878, col: 26, offset: 29583},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 878, col: 54, offset: 29611},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 880, col: 1, offset: 29637},
			expr: &choiceExpr{
				pos: position{line: 880, col: 33, offset: 29669},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 880, col: 33, offset: 29669},
						expr: &charClassMatcher{
							pos:        position{line: 880, col: 33, offset: 29669},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 880, col: 45, offset: 29681},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 880, col: 45, offset: 29681},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 880, col: 49, offset: 29685},
								expr: &litMatcher{
									pos:        position{line: 880, col: 50, offset: 29686},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 881, col: 1, offset: 29690},
			expr: &actionExpr{
				pos: position{line: 881, col: 32, offset: 29721},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 881, col: 32, offset: 29721},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 881, col: 42, offset: 29731},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 881, col: 42, offset: 29731},
							expr: &ruleRefExpr{
								pos:  position{line: 881, col: 42, offset: 29731},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 887, col: 1, offset: 29886},
			expr: &actionExpr{
				pos: position{line: 887, col: 24, offset: 29909},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 887, col: 24, offset: 29909},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 887, col: 33, offset: 29918},
						expr: &seqExpr{
							pos: position{line: 887, col: 34, offset: 29919},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 887, col: 34, offset: 29919},
									expr: &ruleRefExpr{
										pos:  position{line: 887, col: 35, offset: 29920},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 887, col: 43, offset: 29928},
									expr: &litMatcher{
										pos:        position{line: 887, col: 44, offset: 29929},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 887, col: 49, offset: 29934},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 891, col: 1, offset: 30061},
			expr: &actionExpr{
				pos: position{line: 891, col: 31, offset: 30091},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 891, col: 31, offset: 30091},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 891, col: 40, offset: 30100},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 891, col: 40, offset: 30100},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 892, col: 11, offset: 30115},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 893, col: 11, offset: 30164},
								expr: &ruleRefExpr{
									pos:  position{line: 893, col: 11, offset: 30164},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 894, col: 11, offset: 30182},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 895, col: 11, offset: 30207},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 896, col: 11, offset: 30236},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 897, col: 11, offset: 30256},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 898, col: 11, offset: 30284},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 899, col: 11, offset: 30305},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 900, col: 11, offset: 30328},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 901, col: 11, offset: 30343},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 902, col: 11, offset: 30368},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 903, col: 11, offset: 30391},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 904, col: 11, offset: 30412},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 905, col: 11, offset: 30429},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 906, col: 11, offset: 30461},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 907, col: 11, offset: 30489},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 911, col: 1, offset: 30528},
			expr: &actionExpr{
				pos: position{line: 912, col: 5, offset: 30561},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 912, col: 5, offset: 30561},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 912, col: 5, offset: 30561},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 912, col: 16, offset: 30572},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 912, col: 16, offset: 30572},
									expr: &litMatcher{
										pos:        position{line: 912, col: 17, offset: 30573},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 915, col: 5, offset: 30631},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 919, col: 6, offset: 30807},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 919, col: 6, offset: 30807},
									expr: &choiceExpr{
										pos: position{line: 919, col: 7, offset: 30808},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 919, col: 7, offset: 30808},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 919, col: 15, offset: 30816},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 919, col: 27, offset: 30828},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 923, col: 1, offset: 30868},
			expr: &actionExpr{
				pos: position{line: 923, col: 31, offset: 30898},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 923, col: 31, offset: 30898},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 923, col: 40, offset: 30907},
						expr: &ruleRefExpr{
							pos:  position{line: 923, col: 41, offset: 30908},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 930, col: 1, offset: 31099},
			expr: &choiceExpr{
				pos: position{line: 930, col: 19, offset: 31117},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 930, col: 19, offset: 31117},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 930, col: 19, offset: 31117},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 932, col: 9, offset: 31163},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 932, col: 9, offset: 31163},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 934, col: 9, offset: 31211},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 934, col: 9, offset: 31211},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 936, col: 9, offset: 31269},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 936, col: 9, offset: 31269},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 938, col: 9, offset: 31323},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 938, col: 9, offset: 31323},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 949, col: 1, offset: 31639},
			expr: &choiceExpr{
				pos: position{line: 951, col: 5, offset: 31689},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 951, col: 5, offset: 31689},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 951, col: 5, offset: 31689},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 951, col: 5, offset: 31689},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 951, col: 16, offset: 31700},
										expr: &ruleRefExpr{
											pos:  position{line: 951, col: 17, offset: 31701},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 951, col: 30, offset: 31714},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 951, col: 33, offset: 31717},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 951, col: 49, offset: 31733},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 951, col: 54, offset: 31738},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 951, col: 60, offset: 31744},
										expr: &ruleRefExpr{
											pos:  position{line: 951, col: 61, offset: 31745},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 955, col: 5, offset: 31928},
						run: (*parser).callonRawParagraph13,
						expr: &seqExpr{
							pos: position{line: 955, col: 5, offset: 31928},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 955, col: 5, offset: 31928},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 955, col: 16, offset: 31939},
										expr: &ruleRefExpr{
											pos:  position{line: 955, col: 17, offset: 31940},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 955, col: 30, offset: 31953},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 955, col: 35, offset: 31958},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 955, col: 44, offset: 31967},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 959, col: 5, offset: 32157},
						run: (*parser).callonRawParagraph21,
						expr: &seqExpr{
							pos: position{line: 959, col: 5, offset: 32157},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 959, col: 5, offset: 32157},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 959, col: 16, offset: 32168},
										expr: &ruleRefExpr{
											pos:  position{line: 959, col: 17, offset: 32169},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 959, col: 30, offset: 32182},
									run: (*parser).callonRawParagraph26,
								},
								&notExpr{
									pos: position{line: 966, col: 7, offset: 32461},
									expr: &ruleRefExpr{
										pos:  position{line: 966, col: 8, offset: 32462},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 966, col: 23, offset: 32477},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 966, col: 31, offset: 32485},
										expr: &ruleRefExpr{
											pos:  position{line: 966, col: 32, offset: 32486},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 970, col: 5, offset: 32669},
						run: (*parser).callonRawParagraph32,
						expr: &seqExpr{
							pos: position{line: 970, col: 5, offset: 32669},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 970, col: 5, offset: 32669},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 970, col: 16, offset: 32680},
										expr: &ruleRefExpr{
											pos:  position{line: 970, col: 17, offset: 32681},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 970, col: 30, offset: 32694},
									expr: &ruleRefExpr{
										pos:  position{line: 970, col: 31, offset: 32695},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 970, col: 46, offset: 32710},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 970, col: 52, offset: 32716},
										expr: &ruleRefExpr{
											pos:  position{line: 970, col: 53, offset: 32717},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 974, col: 1, offset: 32815},
			expr: &oneOrMoreExpr{
				pos: position{line: 974, col: 33, offset: 32847},
				expr: &actionExpr{
					pos: position{line: 974, col: 34, offset: 32848},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 974, col: 34, offset: 32848},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 974, col: 34, offset: 32848},
								expr: &ruleRefExpr{
									pos:  position{line: 974, col: 35, offset: 32849},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 974, col: 45, offset: 32859},
								expr: &litMatcher{
									pos:        position{line: 974, col: 45, offset: 32859},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 974, col: 51, offset: 32865},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 974, col: 60, offset: 32874},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 978, col: 1, offset: 33007},
			expr: &actionExpr{
				pos: position{line: 978, col: 21, offset: 33027},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 978, col: 21, offset: 33027},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 978, col: 21, offset: 33027},
							expr: &ruleRefExpr{
								pos:  position{line: 978, col: 22, offset: 33028},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 978, col: 32, offset: 33038},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 978, col: 41, offset: 33047},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 978, col: 66, offset: 33072},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 982, col: 1, offset: 33127},
			expr: &actionExpr{
				pos: position{line: 982, col: 28, offset: 33154},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 982, col: 28, offset: 33154},
					expr: &charClassMatcher{
						pos:        position{line: 982, col: 28, offset: 33154},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 988, col: 1, offset: 33353},
			expr: &choiceExpr{
				pos: position{line: 990, col: 5, offset: 33400},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 990, col: 5, offset: 33400},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 990, col: 5, offset: 33400},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 990, col: 5, offset: 33400},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 990, col: 16, offset: 33411},
										expr: &ruleRefExpr{
											pos:  position{line: 990, col: 17, offset: 33412},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 990, col: 30, offset: 33425},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 990, col: 33, offset: 33428},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 990, col: 49, offset: 33444},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 990, col: 54, offset: 33449},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 990, col: 60, offset: 33455},
										expr: &ruleRefExpr{
											pos:  position{line: 990, col: 61, offset: 33456},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 994, col: 5, offset: 33642},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 994, col: 5, offset: 33642},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 994, col: 5, offset: 33642},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 994, col: 16, offset: 33653},
										expr: &ruleRefExpr{
											pos:  position{line: 994, col: 17, offset: 33654},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 994, col: 30, offset: 33667},
									run: (*parser).callonParagraph18,
								},
								&notExpr{
									pos: position{line: 1001, col: 7, offset: 33946},
									expr: &ruleRefExpr{
										pos:  position{line: 1001, col: 8, offset: 33947},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 1001, col: 23, offset: 33962},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 1001, col: 31, offset: 33970},
										expr: &ruleRefExpr{
											pos:  position{line: 1001, col: 32, offset: 33971},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1005, col: 5, offset: 34151},
						run: (*parser).callonParagraph24,
						expr: &seqExpr{
							pos: position{line: 1005, col: 5, offset: 34151},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1005, col: 5, offset: 34151},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1005, col: 16, offset: 34162},
										expr: &ruleRefExpr{
											pos:  position{line: 1005, col: 17, offset: 34163},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 1005, col: 30, offset: 34176},
									expr: &ruleRefExpr{
										pos:  position{line: 1005, col: 31, offset: 34177},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 1005, col: 46, offset: 34192},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 1005, col: 52, offset: 34198},
										expr: &ruleRefExpr{
											pos:  position{line: 1005, col: 53, offset: 34199},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLine",
			pos:  position{line: 1009, col: 1, offset: 34294},
			expr: &ruleRefExpr{
				pos:  position{line: 1009, col: 18, offset: 34311},
				name: "InlineElements",
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 1011, col: 1, offset: 34327},
			expr: &actionExpr{
				pos: position{line: 1011, col: 34, offset: 34360},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 1011, col: 34, offset: 34360},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1011, col: 34, offset: 34360},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 1011, col: 40, offset: 34366},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 1011, col: 48, offset: 34374},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1011, col: 49, offset: 34375},
									expr: &charClassMatcher{
										pos:        position{line: 1011, col: 49, offset: 34375},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1013, col: 8, offset: 34425},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 1017, col: 1, offset: 34457},
			expr: &oneOrMoreExpr{
				pos: position{line: 1017, col: 36, offset: 34492},
				expr: &actionExpr{
					pos: position{line: 1017, col: 37, offset: 34493},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 1017, col: 37, offset: 34493},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1017, col: 37, offset: 34493},
								expr: &ruleRefExpr{
									pos:  position{line: 1017, col: 38, offset: 34494},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 1017, col: 48, offset: 34504},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1017, col: 57, offset: 34513},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 1022, col: 1, offset: 34724},
			expr: &actionExpr{
				pos: position{line: 1022, col: 20, offset: 34743},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 1022, col: 20, offset: 34743},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1022, col: 20, offset: 34743},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1022, col: 31, offset: 34754},
								expr: &ruleRefExpr{
									pos:  position{line: 1022, col: 32, offset: 34755},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1023, col: 5, offset: 34773},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 1031, col: 5, offset: 35059},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1031, col: 16, offset: 35070},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1032, col: 5, offset: 35096},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1032, col: 16, offset: 35107},
								expr: &ruleRefExpr{
									pos:  position{line: 1032, col: 17, offset: 35108},
									name: "OtherParagraphRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 1036, col: 1, offset: 35245},
			expr: &actionExpr{
				pos: position{line: 1037, col: 5, offset: 35275},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 1037, col: 5, offset: 35275},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1037, col: 5, offset: 35275},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1037, col: 14, offset: 35284},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 1037, col: 14, offset: 35284},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1037, col: 14, offset: 35284},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 1037, col: 23, offset: 35293},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1037, col: 28, offset: 35298},
											expr: &charClassMatcher{
												pos:        position{line: 1037, col: 28, offset: 35298},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1037, col: 68, offset: 35338},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphRawLine",
			pos:  position{line: 1041, col: 1, offset: 35394},
			expr: &ruleRefExpr{
				pos:  position{line: 1041, col: 26, offset: 35419},
				name: "RawParagraphLine",
			},
		},
		{
			name: "NormalParagraphContent",
			pos:  position{line: 1044, col: 1, offset: 35515},
			expr: &oneOrMoreExpr{
				pos: position{line: 1044, col: 27, offset: 35541},
				expr: &ruleRefExpr{
					pos:  position{line: 1044, col: 27, offset: 35541},
					name: "InlineElements",
				},
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 1051, col: 1, offset: 35752},
			expr: &choiceExpr{
				pos: position{line: 1053, col: 5, offset: 35811},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1053, col: 5, offset: 35811},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 1053, col: 5, offset: 35811},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1053, col: 5, offset: 35811},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1053, col: 16, offset: 35822},
										expr: &ruleRefExpr{
											pos:  position{line: 1053, col: 17, offset: 35823},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1053, col: 30, offset: 35836},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 1053, col: 33, offset: 35839},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 1053, col: 49, offset: 35855},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 1053, col: 54, offset: 35860},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 1053, col: 61, offset: 35867},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1057, col: 5, offset: 36070},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 1057, col: 5, offset: 36070},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1057, col: 5, offset: 36070},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1057, col: 16, offset: 36081},
										expr: &ruleRefExpr{
											pos:  position{line: 1057, col: 17, offset: 36082},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1057, col: 30, offset: 36095},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 1057, col: 37, offset: 36102},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 1061, col: 1, offset: 36206},
			expr: &actionExpr{
				pos: position{line: 1061, col: 31, offset: 36236},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 1061, col: 31, offset: 36236},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1061, col: 31, offset: 36236},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1061, col: 42, offset: 36247},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1061, col: 65, offset: 36270},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1061, col: 76, offset: 36281},
								expr: &seqExpr{
									pos: position{line: 1061, col: 77, offset: 36282},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1061, col: 77, offset: 36282},
											expr: &ruleRefExpr{
												pos:  position{line: 1061, col: 78, offset: 36283},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1061, col: 99, offset: 36304},
											name: "OtherParagraphRawLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawVerseParagraph",
			pos:  position{line: 1069, col: 1, offset: 36526},
			expr: &actionExpr{
				pos: position{line: 1070, col: 5, offset: 36552},
				run: (*parser).callonRawVerseParagraph1,
				expr: &seqExpr{
					pos: position{line: 1070, col: 5, offset: 36552},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1070, col: 5, offset: 36552},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1070, col: 16, offset: 36563},
								expr: &ruleRefExpr{
									pos:  position{line: 1070, col: 17, offset: 36564},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1071, col: 5, offset: 36581},
							run: (*parser).callonRawVerseParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 1078, col: 5, offset: 36786},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 1078, col: 11, offset: 36792},
								expr: &ruleRefExpr{
									pos:  position{line: 1078, col: 12, offset: 36793},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 1086, col: 1, offset: 36999},
			expr: &actionExpr{
				pos: position{line: 1086, col: 19, offset: 37017},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 1086, col: 19, offset: 37017},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1086, col: 19, offset: 37017},
							expr: &ruleRefExpr{
								pos:  position{line: 1086, col: 20, offset: 37018},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1087, col: 5, offset: 37032},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 1087, col: 15, offset: 37042},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1087, col: 15, offset: 37042},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 1087, col: 15, offset: 37042},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 1087, col: 24, offset: 37051},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 1089, col: 9, offset: 37143},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 1089, col: 9, offset: 37143},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1089, col: 9, offset: 37143},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 1089, col: 18, offset: 37152},
														expr: &ruleRefExpr{
															pos:  position{line: 1089, col: 19, offset: 37153},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1089, col: 35, offset: 37169},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1095, col: 1, offset: 37286},
			expr: &actionExpr{
				pos: position{line: 1096, col: 5, offset: 37309},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1096, col: 5, offset: 37309},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1096, col: 14, offset: 37318},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1096, col: 14, offset: 37318},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 1097, col: 11, offset: 37369},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 1098, col: 11, offset: 37414},
								expr: &ruleRefExpr{
									pos:  position{line: 1098, col: 11, offset: 37414},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 1099, col: 11, offset: 37432},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1099, col: 11, offset: 37432},
										expr: &ruleRefExpr{
											pos:  position{line: 1099, col: 12, offset: 37433},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 1100, col: 13, offset: 37451},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1100, col: 13, offset: 37451},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 1101, col: 15, offset: 37478},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1102, col: 15, offset: 37503},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 1103, col: 15, offset: 37524},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 1104, col: 15, offset: 37549},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 1105, col: 15, offset: 37576},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 1106, col: 15, offset: 37596},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 1107, col: 15, offset: 37629},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 1108, col: 15, offset: 37659},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 1109, col: 15, offset: 37689},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 1110, col: 15, offset: 37720},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1111, col: 15, offset: 37757},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 1112, col: 15, offset: 37787},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1113, col: 15, offset: 37820},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1114, col: 15, offset: 37844},
												name: "ImpliedApostrophe",
											},
											&ruleRefExpr{
												pos:  position{line: 1115, col: 15, offset: 37876},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1122, col: 1, offset: 38099},
			expr: &actionExpr{
				pos: position{line: 1122, col: 14, offset: 38112},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1122, col: 14, offset: 38112},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1122, col: 14, offset: 38112},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 1122, col: 20, offset: 38118},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1122, col: 24, offset: 38122},
							expr: &ruleRefExpr{
								pos:  position{line: 1122, col: 24, offset: 38122},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1122, col: 31, offset: 38129},
							expr: &ruleRefExpr{
								pos:  position{line: 1122, col: 32, offset: 38130},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1129, col: 1, offset: 38414},
			expr: &choiceExpr{
				pos: position{line: 1129, col: 15, offset: 38428},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1129, col: 15, offset: 38428},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1129, col: 41, offset: 38454},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1129, col: 65, offset: 38478},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1131, col: 1, offset: 38497},
			expr: &choiceExpr{
				pos: position{line: 1131, col: 32, offset: 38528},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1131, col: 32, offset: 38528},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1131, col: 32, offset: 38528},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1131, col: 36, offset: 38532},
								expr: &litMatcher{
									pos:        position{line: 1131, col: 37, offset: 38533},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1131, col: 43, offset: 38539},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1131, col: 43, offset: 38539},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1131, col: 47, offset: 38543},
								expr: &litMatcher{
									pos:        position{line: 1131, col: 48, offset: 38544},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1131, col: 54, offset: 38550},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1131, col: 54, offset: 38550},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1131, col: 58, offset: 38554},
								expr: &litMatcher{
									pos:        position{line: 1131, col: 59, offset: 38555},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1131, col: 65, offset: 38561},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1131, col: 65, offset: 38561},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1131, col: 69, offset: 38565},
								expr: &litMatcher{
									pos:        position{line: 1131, col: 70, offset: 38566},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1133, col: 1, offset: 38571},
			expr: &choiceExpr{
				pos: position{line: 1133, col: 34, offset: 38604},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1133, col: 34, offset: 38604},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1133, col: 41, offset: 38611},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1133, col: 48, offset: 38618},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1133, col: 55, offset: 38625},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1133, col: 62, offset: 38632},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1133, col: 68, offset: 38638},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1135, col: 1, offset: 38643},
			expr: &actionExpr{
				pos: position{line: 1135, col: 26, offset: 38668},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1135, col: 26, offset: 38668},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1135, col: 32, offset: 38674},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1135, col: 32, offset: 38674},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1136, col: 15, offset: 38709},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1137, col: 15, offset: 38745},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1138, col: 15, offset: 38781},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1139, col: 15, offset: 38821},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1140, col: 15, offset: 38850},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1141, col: 15, offset: 38881},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1145, col: 1, offset: 39035},
			expr: &choiceExpr{
				pos: position{line: 1145, col: 28, offset: 39062},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1145, col: 28, offset: 39062},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 15, offset: 39096},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1147, col: 15, offset: 39132},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1148, col: 15, offset: 39168},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1150, col: 1, offset: 39194},
			expr: &choiceExpr{
				pos: position{line: 1150, col: 22, offset: 39215},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1150, col: 22, offset: 39215},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1151, col: 15, offset: 39246},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1152, col: 15, offset: 39278},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1153, col: 15, offset: 39310},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1154, col: 15, offset: 39346},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1155, col: 15, offset: 39382},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1157, col: 1, offset: 39406},
			expr: &choiceExpr{
				pos: position{line: 1157, col: 33, offset: 39438},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1157, col: 33, offset: 39438},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1157, col: 39, offset: 39444},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1157, col: 39, offset: 39444},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1161, col: 1, offset: 39577},
			expr: &actionExpr{
				pos: position{line: 1161, col: 25, offset: 39601},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1161, col: 25, offset: 39601},
					expr: &litMatcher{
						pos:        position{line: 1161, col: 25, offset: 39601},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1165, col: 1, offset: 39642},
			expr: &actionExpr{
				pos: position{line: 1165, col: 25, offset: 39666},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1165, col: 25, offset: 39666},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1165, col: 25, offset: 39666},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1165, col: 30, offset: 39671},
							expr: &litMatcher{
								pos:        position{line: 1165, col: 30, offset: 39671},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1173, col: 1, offset: 39768},
			expr: &choiceExpr{
				pos: position{line: 1173, col: 13, offset: 39780},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1173, col: 13, offset: 39780},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1173, col: 35, offset: 39802},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1175, col: 1, offset: 39869},
			expr: &actionExpr{
				pos: position{line: 1175, col: 24, offset: 39892},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1175, col: 24, offset: 39892},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1175, col: 24, offset: 39892},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1175, col: 30, offset: 39898},
								expr: &ruleRefExpr{
									pos:  position{line: 1175, col: 31, offset: 39899},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1175, col: 49, offset: 39917},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1175, col: 54, offset: 39922},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1175, col: 64, offset: 39932},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1175, col: 93, offset: 39961},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1179, col: 1, offset: 40048},
			expr: &seqExpr{
				pos: position{line: 1179, col: 32, offset: 40079},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1179, col: 32, offset: 40079},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1179, col: 59, offset: 40106},
						expr: &seqExpr{
							pos: position{line: 1179, col: 60, offset: 40107},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1179, col: 60, offset: 40107},
									expr: &litMatcher{
										pos:        position{line: 1179, col: 62, offset: 40109},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1179, col: 69, offset: 40116},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1179, col: 69, offset: 40116},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1179, col: 77, offset: 40124},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1181, col: 1, offset: 40189},
			expr: &choiceExpr{
				pos: position{line: 1181, col: 31, offset: 40219},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1181, col: 31, offset: 40219},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1182, col: 11, offset: 40234},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1182, col: 11, offset: 40234},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1182, col: 19, offset: 40242},
								expr: &ruleRefExpr{
									pos:  position{line: 1182, col: 20, offset: 40243},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1183, col: 11, offset: 40261},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1184, col: 11, offset: 40291},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1185, col: 11, offset: 40314},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1186, col: 11, offset: 40335},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1187, col: 11, offset: 40356},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1188, col: 11, offset: 40380},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1189, col: 11, offset: 40404},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1190, col: 11, offset: 40430},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1191, col: 11, offset: 40447},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1192, col: 11, offset: 40468},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1193, col: 11, offset: 40490},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1194, col: 11, offset: 40505},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1195, col: 11, offset: 40533},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1196, col: 11, offset: 40565},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1197, col: 11, offset: 40593},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1200, col: 1, offset: 40632},
			expr: &choiceExpr{
				pos: position{line: 1201, col: 5, offset: 40676},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1201, col: 5, offset: 40676},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1202, col: 7, offset: 40773},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1202, col: 7, offset: 40773},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1202, col: 7, offset: 40773},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1202, col: 12, offset: 40778},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1206, col: 1, offset: 40941},
			expr: &choiceExpr{
				pos: position{line: 1206, col: 24, offset: 40964},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1206, col: 24, offset: 40964},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1206, col: 24, offset: 40964},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1206, col: 24, offset: 40964},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1206, col: 30, offset: 40970},
										expr: &ruleRefExpr{
											pos:  position{line: 1206, col: 31, offset: 40971},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1206, col: 51, offset: 40991},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1206, col: 51, offset: 40991},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1206, col: 55, offset: 40995},
											expr: &litMatcher{
												pos:        position{line: 1206, col: 56, offset: 40996},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1206, col: 61, offset: 41001},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1206, col: 71, offset: 41011},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1206, col: 100, offset: 41040},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1206, col: 104, offset: 41044},
									expr: &notExpr{
										pos: position{line: 1206, col: 106, offset: 41046},
										expr: &ruleRefExpr{
											pos:  position{line: 1206, col: 107, offset: 41047},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1208, col: 5, offset: 41241},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1208, col: 5, offset: 41241},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1208, col: 5, offset: 41241},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1208, col: 11, offset: 41247},
										expr: &ruleRefExpr{
											pos:  position{line: 1208, col: 12, offset: 41248},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1208, col: 30, offset: 41266},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1208, col: 34, offset: 41270},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1208, col: 44, offset: 41280},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1208, col: 44, offset: 41280},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1208, col: 48, offset: 41284},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1208, col: 77, offset: 41313},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1212, col: 1, offset: 41519},
			expr: &seqExpr{
				pos: position{line: 1212, col: 32, offset: 41550},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1212, col: 32, offset: 41550},
						expr: &ruleRefExpr{
							pos:  position{line: 1212, col: 33, offset: 41551},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1212, col: 39, offset: 41557},
						expr: &ruleRefExpr{
							pos:  position{line: 1212, col: 39, offset: 41557},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1214, col: 1, offset: 41586},
			expr: &choiceExpr{
				pos: position{line: 1214, col: 31, offset: 41616},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1214, col: 31, offset: 41616},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1215, col: 11, offset: 41631},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1215, col: 11, offset: 41631},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1215, col: 19, offset: 41639},
								expr: &ruleRefExpr{
									pos:  position{line: 1215, col: 20, offset: 41640},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1216, col: 11, offset: 41658},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1217, col: 11, offset: 41688},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1218, col: 11, offset: 41711},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1218, col: 11, offset: 41711},
								expr: &ruleRefExpr{
									pos:  position{line: 1218, col: 11, offset: 41711},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1218, col: 18, offset: 41718},
								expr: &seqExpr{
									pos: position{line: 1218, col: 19, offset: 41719},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1218, col: 19, offset: 41719},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1218, col: 23, offset: 41723},
											expr: &litMatcher{
												pos:        position{line: 1218, col: 24, offset: 41724},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1219, col: 11, offset: 41740},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1220, col: 11, offset: 41761},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1221, col: 11, offset: 41782},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1222, col: 11, offset: 41806},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1223, col: 11, offset: 41830},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1224, col: 11, offset: 41856},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1225, col: 11, offset: 41873},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1226, col: 11, offset: 41894},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1227, col: 11, offset: 41917},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1228, col: 11, offset: 41934},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1229, col: 11, offset: 41962},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1230, col: 11, offset: 41994},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1231, col: 11, offset: 42022},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1233, col: 1, offset: 42060},
			expr: &choiceExpr{
				pos: position{line: 1234, col: 5, offset: 42104},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1234, col: 5, offset: 42104},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1235, col: 7, offset: 42201},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1235, col: 7, offset: 42201},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1235, col: 7, offset: 42201},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1235, col: 11, offset: 42205},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1239, col: 1, offset: 42368},
			expr: &choiceExpr{
				pos: position{line: 1240, col: 5, offset: 42392},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1240, col: 5, offset: 42392},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1240, col: 5, offset: 42392},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1240, col: 5, offset: 42392},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1240, col: 18, offset: 42405},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1240, col: 40, offset: 42427},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1240, col: 45, offset: 42432},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1240, col: 55, offset: 42442},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1240, col: 84, offset: 42471},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1242, col: 9, offset: 42628},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1242, col: 9, offset: 42628},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1242, col: 9, offset: 42628},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1242, col: 22, offset: 42641},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1242, col: 44, offset: 42663},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1242, col: 49, offset: 42668},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1242, col: 59, offset: 42678},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1242, col: 88, offset: 42707},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1245, col: 9, offset: 42907},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1245, col: 9, offset: 42907},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1245, col: 9, offset: 42907},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1245, col: 22, offset: 42920},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1245, col: 44, offset: 42942},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1245, col: 48, offset: 42946},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1245, col: 58, offset: 42956},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1245, col: 87, offset: 42985},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1253, col: 1, offset: 43193},
			expr: &choiceExpr{
				pos: position{line: 1253, col: 15, offset: 43207},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1253, col: 15, offset: 43207},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1253, col: 39, offset: 43231},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1255, col: 1, offset: 43254},
			expr: &actionExpr{
				pos: position{line: 1255, col: 26, offset: 43279},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1255, col: 26, offset: 43279},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1255, col: 26, offset: 43279},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1255, col: 32, offset: 43285},
								expr: &ruleRefExpr{
									pos:  position{line: 1255, col: 33, offset: 43286},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1255, col: 51, offset: 43304},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1255, col: 56, offset: 43309},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1255, col: 66, offset: 43319},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1255, col: 97, offset: 43350},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1259, col: 1, offset: 43484},
			expr: &seqExpr{
				pos: position{line: 1259, col: 34, offset: 43517},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1259, col: 34, offset: 43517},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1259, col: 63, offset: 43546},
						expr: &seqExpr{
							pos: position{line: 1259, col: 64, offset: 43547},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1259, col: 64, offset: 43547},
									expr: &litMatcher{
										pos:        position{line: 1259, col: 66, offset: 43549},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1259, col: 73, offset: 43556},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1259, col: 73, offset: 43556},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1259, col: 81, offset: 43564},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1261, col: 1, offset: 43631},
			expr: &choiceExpr{
				pos: position{line: 1261, col: 33, offset: 43663},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1261, col: 33, offset: 43663},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1262, col: 11, offset: 43678},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1262, col: 11, offset: 43678},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1262, col: 19, offset: 43686},
								expr: &ruleRefExpr{
									pos:  position{line: 1262, col: 20, offset: 43687},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1263, col: 11, offset: 43705},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1264, col: 11, offset: 43737},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 11, offset: 43760},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1266, col: 11, offset: 43779},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1267, col: 11, offset: 43800},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1268, col: 11, offset: 43824},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1269, col: 11, offset: 43848},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1270, col: 11, offset: 43874},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1271, col: 11, offset: 43891},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1272, col: 11, offset: 43912},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1273, col: 11, offset: 43935},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1274, col: 11, offset: 43951},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1275, col: 11, offset: 43979},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1276, col: 11, offset: 44007},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1278, col: 1, offset: 44047},
			expr: &choiceExpr{
				pos: position{line: 1279, col: 5, offset: 44093},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1279, col: 5, offset: 44093},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1280, col: 7, offset: 44192},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1280, col: 7, offset: 44192},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1280, col: 7, offset: 44192},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1280, col: 12, offset: 44197},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1284, col: 1, offset: 44362},
			expr: &choiceExpr{
				pos: position{line: 1284, col: 26, offset: 44387},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1284, col: 26, offset: 44387},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1284, col: 26, offset: 44387},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1284, col: 26, offset: 44387},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1284, col: 32, offset: 44393},
										expr: &ruleRefExpr{
											pos:  position{line: 1284, col: 33, offset: 44394},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1284, col: 52, offset: 44413},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1284, col: 52, offset: 44413},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1284, col: 56, offset: 44417},
											expr: &litMatcher{
												pos:        position{line: 1284, col: 57, offset: 44418},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1284, col: 62, offset: 44423},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1284, col: 72, offset: 44433},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1284, col: 103, offset: 44464},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1286, col: 5, offset: 44654},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1286, col: 5, offset: 44654},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1286, col: 5, offset: 44654},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1286, col: 11, offset: 44660},
										expr: &ruleRefExpr{
											pos:  position{line: 1286, col: 12, offset: 44661},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1286, col: 30, offset: 44679},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1286, col: 34, offset: 44683},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1286, col: 44, offset: 44693},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1286, col: 44, offset: 44693},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1286, col: 48, offset: 44697},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1286, col: 79, offset: 44728},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1290, col: 1, offset: 44938},
			expr: &seqExpr{
				pos: position{line: 1290, col: 34, offset: 44971},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1290, col: 34, offset: 44971},
						expr: &ruleRefExpr{
							pos:  position{line: 1290, col: 35, offset: 44972},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1290, col: 41, offset: 44978},
						expr: &ruleRefExpr{
							pos:  position{line: 1290, col: 41, offset: 44978},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1292, col: 1, offset: 45009},
			expr: &choiceExpr{
				pos: position{line: 1292, col: 33, offset: 45041},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1292, col: 33, offset: 45041},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1293, col: 11, offset: 45056},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1293, col: 11, offset: 45056},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1293, col: 19, offset: 45064},
								expr: &ruleRefExpr{
									pos:  position{line: 1293, col: 20, offset: 45065},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1294, col: 11, offset: 45083},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1295, col: 11, offset: 45115},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1296, col: 11, offset: 45138},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1296, col: 11, offset: 45138},
								expr: &ruleRefExpr{
									pos:  position{line: 1296, col: 11, offset: 45138},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1296, col: 18, offset: 45145},
								expr: &seqExpr{
									pos: position{line: 1296, col: 19, offset: 45146},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1296, col: 19, offset: 45146},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1296, col: 23, offset: 45150},
											expr: &litMatcher{
												pos:        position{line: 1296, col: 24, offset: 45151},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1297, col: 11, offset: 45167},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1298, col: 11, offset: 45186},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 11, offset: 45207},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1300, col: 11, offset: 45231},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1301, col: 11, offset: 45255},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1302, col: 11, offset: 45281},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1303, col: 11, offset: 45298},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1304, col: 11, offset: 45319},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1305, col: 11, offset: 45342},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1306, col: 11, offset: 45359},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1307, col: 11, offset: 45388},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1308, col: 11, offset: 45420},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1309, col: 11, offset: 45448},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1311, col: 1, offset: 45488},
			expr: &choiceExpr{
				pos: position{line: 1312, col: 5, offset: 45534},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1312, col: 5, offset: 45534},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1313, col: 7, offset: 45633},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1313, col: 7, offset: 45633},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1313, col: 7, offset: 45633},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1313, col: 11, offset: 45637},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1317, col: 1, offset: 45803},
			expr: &choiceExpr{
				pos: position{line: 1318, col: 5, offset: 45829},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1318, col: 5, offset: 45829},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1318, col: 5, offset: 45829},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1318, col: 5, offset: 45829},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1318, col: 18, offset: 45842},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1318, col: 40, offset: 45864},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1318, col: 45, offset: 45869},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1318, col: 55, offset: 45879},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1318, col: 86, offset: 45910},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1320, col: 9, offset: 46067},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1320, col: 9, offset: 46067},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1320, col: 9, offset: 46067},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1320, col: 22, offset: 46080},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1320, col: 44, offset: 46102},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1320, col: 49, offset: 46107},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1320, col: 59, offset: 46117},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1320, col: 90, offset: 46148},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1323, col: 9, offset: 46348},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1323, col: 9, offset: 46348},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1323, col: 9, offset: 46348},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1323, col: 22, offset: 46361},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1323, col: 44, offset: 46383},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1323, col: 48, offset: 46387},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1323, col: 58, offset: 46397},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1323, col: 89, offset: 46428},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1330, col: 1, offset: 46638},
			expr: &choiceExpr{
				pos: position{line: 1330, col: 18, offset: 46655},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1330, col: 18, offset: 46655},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 45, offset: 46682},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1332, col: 1, offset: 46708},
			expr: &actionExpr{
				pos: position{line: 1332, col: 29, offset: 46736},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1332, col: 29, offset: 46736},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1332, col: 29, offset: 46736},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1332, col: 35, offset: 46742},
								expr: &ruleRefExpr{
									pos:  position{line: 1332, col: 36, offset: 46743},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1332, col: 54, offset: 46761},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1332, col: 59, offset: 46766},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1332, col: 69, offset: 46776},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1332, col: 103, offset: 46810},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1336, col: 1, offset: 46947},
			expr: &seqExpr{
				pos: position{line: 1336, col: 37, offset: 46983},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1336, col: 37, offset: 46983},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1336, col: 69, offset: 47015},
						expr: &seqExpr{
							pos: position{line: 1336, col: 70, offset: 47016},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1336, col: 70, offset: 47016},
									expr: &litMatcher{
										pos:        position{line: 1336, col: 72, offset: 47018},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1336, col: 79, offset: 47025},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1336, col: 79, offset: 47025},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1336, col: 87, offset: 47033},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1338, col: 1, offset: 47102},
			expr: &choiceExpr{
				pos: position{line: 1338, col: 36, offset: 47137},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1338, col: 36, offset: 47137},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1339, col: 11, offset: 47152},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1339, col: 11, offset: 47152},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1339, col: 19, offset: 47160},
								expr: &ruleRefExpr{
									pos:  position{line: 1339, col: 20, offset: 47161},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1340, col: 11, offset: 47179},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1341, col: 11, offset: 47196},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1342, col: 11, offset: 47231},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1343, col: 11, offset: 47254},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1344, col: 11, offset: 47273},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1345, col: 11, offset: 47294},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1346, col: 11, offset: 47315},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1347, col: 11, offset: 47339},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1348, col: 11, offset: 47365},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1349, col: 11, offset: 47386},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1350, col: 11, offset: 47408},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1351, col: 11, offset: 47423},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 11, offset: 47452},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1353, col: 11, offset: 47480},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1355, col: 1, offset: 47523},
			expr: &choiceExpr{
				pos: position{line: 1356, col: 5, offset: 47572},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1356, col: 5, offset: 47572},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1357, col: 7, offset: 47674},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1357, col: 7, offset: 47674},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1357, col: 7, offset: 47674},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1357, col: 12, offset: 47679},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1361, col: 1, offset: 47847},
			expr: &choiceExpr{
				pos: position{line: 1361, col: 29, offset: 47875},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1361, col: 29, offset: 47875},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1361, col: 29, offset: 47875},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1361, col: 29, offset: 47875},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1361, col: 35, offset: 47881},
										expr: &ruleRefExpr{
											pos:  position{line: 1361, col: 36, offset: 47882},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1361, col: 55, offset: 47901},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1361, col: 55, offset: 47901},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1361, col: 59, offset: 47905},
											expr: &litMatcher{
												pos:        position{line: 1361, col: 60, offset: 47906},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1361, col: 65, offset: 47911},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1361, col: 75, offset: 47921},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1361, col: 109, offset: 47955},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1363, col: 5, offset: 48148},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1363, col: 5, offset: 48148},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1363, col: 5, offset: 48148},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1363, col: 11, offset: 48154},
										expr: &ruleRefExpr{
											pos:  position{line: 1363, col: 12, offset: 48155},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1363, col: 30, offset: 48173},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1363, col: 34, offset: 48177},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1363, col: 44, offset: 48187},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1363, col: 44, offset: 48187},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1363, col: 48, offset: 48191},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1363, col: 82, offset: 48225},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1367, col: 1, offset: 48439},
			expr: &seqExpr{
				pos: position{line: 1367, col: 37, offset: 48475},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1367, col: 37, offset: 48475},
						expr: &ruleRefExpr{
							pos:  position{line: 1367, col: 38, offset: 48476},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1367, col: 44, offset: 48482},
						expr: &ruleRefExpr{
							pos:  position{line: 1367, col: 44, offset: 48482},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1369, col: 1, offset: 48516},
			expr: &choiceExpr{
				pos: position{line: 1369, col: 37, offset: 48552},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1369, col: 37, offset: 48552},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1370, col: 11, offset: 48567},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1370, col: 11, offset: 48567},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1370, col: 19, offset: 48575},
								expr: &ruleRefExpr{
									pos:  position{line: 1370, col: 20, offset: 48576},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1371, col: 11, offset: 48594},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1372, col: 11, offset: 48629},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1373, col: 11, offset: 48652},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1373, col: 11, offset: 48652},
								expr: &ruleRefExpr{
									pos:  position{line: 1373, col: 11, offset: 48652},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1373, col: 18, offset: 48659},
								expr: &seqExpr{
									pos: position{line: 1373, col: 19, offset: 48660},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1373, col: 19, offset: 48660},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1373, col: 23, offset: 48664},
											expr: &litMatcher{
												pos:        position{line: 1373, col: 24, offset: 48665},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1374, col: 11, offset: 48793},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1375, col: 11, offset: 48812},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1376, col: 11, offset: 48833},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1377, col: 11, offset: 48854},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1378, col: 11, offset: 48878},
						name: "SuperscriptText",
					},
					&seqExpr{
						pos: position{line: 1379, col: 11, offset: 48904},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1379, col: 11, offset: 48904},
								expr: &litMatcher{
									pos:        position{line: 1379, col: 12, offset: 48905},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1379, col: 16, offset: 48909},
								name: "Symbol",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1380, col: 11, offset: 48926},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1381, col: 11, offset: 48947},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1382, col: 11, offset: 48970},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1383, col: 11, offset: 48986},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1384, col: 11, offset: 49015},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1385, col: 11, offset: 49047},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1386, col: 11, offset: 49075},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1388, col: 1, offset: 49118},
			expr: &choiceExpr{
				pos: position{line: 1389, col: 5, offset: 49167},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1389, col: 5, offset: 49167},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1390, col: 7, offset: 49269},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1390, col: 7, offset: 49269},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1390, col: 7, offset: 49269},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1390, col: 11, offset: 49273},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1394, col: 1, offset: 49442},
			expr: &choiceExpr{
				pos: position{line: 1395, col: 5, offset: 49471},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1395, col: 5, offset: 49471},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1395, col: 5, offset: 49471},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1395, col: 5, offset: 49471},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1395, col: 18, offset: 49484},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1395, col: 40, offset: 49506},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1395, col: 45, offset: 49511},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1395, col: 55, offset: 49521},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1395, col: 89, offset: 49555},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1397, col: 9, offset: 49712},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1397, col: 9, offset: 49712},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1397, col: 9, offset: 49712},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1397, col: 22, offset: 49725},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1397, col: 44, offset: 49747},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1397, col: 49, offset: 49752},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1397, col: 59, offset: 49762},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1397, col: 93, offset: 49796},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1400, col: 9, offset: 49996},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1400, col: 9, offset: 49996},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1400, col: 9, offset: 49996},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1400, col: 22, offset: 50009},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1400, col: 44, offset: 50031},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1400, col: 48, offset: 50035},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1400, col: 58, offset: 50045},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1400, col: 92, offset: 50079},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1408, col: 1, offset: 50287},
			expr: &choiceExpr{
				pos: position{line: 1408, col: 15, offset: 50301},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1408, col: 15, offset: 50301},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1408, col: 39, offset: 50325},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1410, col: 1, offset: 50348},
			expr: &actionExpr{
				pos: position{line: 1410, col: 26, offset: 50373},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1410, col: 26, offset: 50373},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1410, col: 26, offset: 50373},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1410, col: 32, offset: 50379},
								expr: &ruleRefExpr{
									pos:  position{line: 1410, col: 33, offset: 50380},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1410, col: 51, offset: 50398},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1410, col: 56, offset: 50403},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1410, col: 66, offset: 50413},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1410, col: 97, offset: 50444},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1414, col: 1, offset: 50578},
			expr: &seqExpr{
				pos: position{line: 1414, col: 34, offset: 50611},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1414, col: 34, offset: 50611},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1414, col: 63, offset: 50640},
						expr: &seqExpr{
							pos: position{line: 1414, col: 64, offset: 50641},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1414, col: 64, offset: 50641},
									expr: &litMatcher{
										pos:        position{line: 1414, col: 66, offset: 50643},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1414, col: 73, offset: 50650},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1414, col: 73, offset: 50650},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1414, col: 81, offset: 50658},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1416, col: 1, offset: 50725},
			expr: &choiceExpr{
				pos: position{line: 1416, col: 33, offset: 50757},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1416, col: 33, offset: 50757},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1417, col: 11, offset: 50772},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1418, col: 11, offset: 50804},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1418, col: 11, offset: 50804},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1418, col: 19, offset: 50812},
								expr: &ruleRefExpr{
									pos:  position{line: 1418, col: 20, offset: 50813},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1419, col: 11, offset: 50831},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1420, col: 11, offset: 50854},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1421, col: 11, offset: 50873},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1422, col: 11, offset: 50894},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1423, col: 11, offset: 50918},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1424, col: 11, offset: 50942},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1425, col: 11, offset: 50968},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1426, col: 11, offset: 50985},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1427, col: 11, offset: 51006},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1428, col: 11, offset: 51028},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1429, col: 11, offset: 51043},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1430, col: 11, offset: 51071},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1431, col: 11, offset: 51099},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1433, col: 1, offset: 51139},
			expr: &choiceExpr{
				pos: position{line: 1434, col: 5, offset: 51185},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1434, col: 5, offset: 51185},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1435, col: 7, offset: 51284},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1435, col: 7, offset: 51284},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1435, col: 7, offset: 51284},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1435, col: 12, offset: 51289},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1439, col: 1, offset: 51454},
			expr: &choiceExpr{
				pos: position{line: 1439, col: 26, offset: 51479},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1439, col: 26, offset: 51479},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1439, col: 26, offset: 51479},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1439, col: 26, offset: 51479},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1439, col: 32, offset: 51485},
										expr: &ruleRefExpr{
											pos:  position{line: 1439, col: 33, offset: 51486},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1439, col: 52, offset: 51505},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1439, col: 52, offset: 51505},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1439, col: 56, offset: 51509},
											expr: &litMatcher{
												pos:        position{line: 1439, col: 57, offset: 51510},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1439, col: 62, offset: 51515},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1439, col: 72, offset: 51525},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1439, col: 103, offset: 51556},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1441, col: 5, offset: 51746},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1441, col: 5, offset: 51746},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1441, col: 5, offset: 51746},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1441, col: 11, offset: 51752},
										expr: &ruleRefExpr{
											pos:  position{line: 1441, col: 12, offset: 51753},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1441, col: 30, offset: 51771},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1441, col: 34, offset: 51775},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1441, col: 44, offset: 51785},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1441, col: 44, offset: 51785},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1441, col: 48, offset: 51789},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1441, col: 79, offset: 51820},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1445, col: 1, offset: 52029},
			expr: &seqExpr{
				pos: position{line: 1445, col: 34, offset: 52062},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1445, col: 34, offset: 52062},
						expr: &ruleRefExpr{
							pos:  position{line: 1445, col: 35, offset: 52063},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1445, col: 41, offset: 52069},
						expr: &ruleRefExpr{
							pos:  position{line: 1445, col: 41, offset: 52069},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1447, col: 1, offset: 52100},
			expr: &choiceExpr{
				pos: position{line: 1447, col: 33, offset: 52132},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1447, col: 33, offset: 52132},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1448, col: 11, offset: 52147},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1449, col: 11, offset: 52179},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1449, col: 11, offset: 52179},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1449, col: 19, offset: 52187},
								expr: &ruleRefExpr{
									pos:  position{line: 1449, col: 20, offset: 52188},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1450, col: 11, offset: 52206},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1451, col: 11, offset: 52229},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1451, col: 11, offset: 52229},
								expr: &ruleRefExpr{
									pos:  position{line: 1451, col: 11, offset: 52229},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1451, col: 18, offset: 52236},
								expr: &seqExpr{
									pos: position{line: 1451, col: 19, offset: 52237},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1451, col: 19, offset: 52237},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1451, col: 23, offset: 52241},
											expr: &litMatcher{
												pos:        position{line: 1451, col: 24, offset: 52242},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1452, col: 11, offset: 52258},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1453, col: 11, offset: 52277},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1454, col: 11, offset: 52298},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1455, col: 11, offset: 52322},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1456, col: 11, offset: 52346},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1457, col: 11, offset: 52372},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1458, col: 11, offset: 52389},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1459, col: 11, offset: 52410},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1460, col: 11, offset: 52432},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1461, col: 11, offset: 52447},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1462, col: 11, offset: 52475},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1463, col: 11, offset: 52507},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1464, col: 11, offset: 52535},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1466, col: 1, offset: 52575},
			expr: &choiceExpr{
				pos: position{line: 1467, col: 5, offset: 52621},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1467, col: 5, offset: 52621},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1468, col: 7, offset: 52718},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1468, col: 7, offset: 52718},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1468, col: 7, offset: 52718},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1468, col: 11, offset: 52722},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1472, col: 1, offset: 52885},
			expr: &choiceExpr{
				pos: position{line: 1473, col: 5, offset: 52910},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1473, col: 5, offset: 52910},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1473, col: 5, offset: 52910},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1473, col: 5, offset: 52910},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1473, col: 18, offset: 52923},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1473, col: 40, offset: 52945},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1473, col: 45, offset: 52950},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1473, col: 55, offset: 52960},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1473, col: 86, offset: 52991},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1475, col: 9, offset: 53148},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1475, col: 9, offset: 53148},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1475, col: 9, offset: 53148},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1475, col: 22, offset: 53161},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1475, col: 44, offset: 53183},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1475, col: 49, offset: 53188},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1475, col: 59, offset: 53198},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1475, col: 90, offset: 53229},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1478, col: 9, offset: 53429},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1478, col: 9, offset: 53429},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1478, col: 9, offset: 53429},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1478, col: 22, offset: 53442},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1478, col: 44, offset: 53464},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1478, col: 48, offset: 53468},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1478, col: 58, offset: 53478},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1478, col: 89, offset: 53509},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1483, col: 1, offset: 53659},
			expr: &actionExpr{
				pos: position{line: 1483, col: 18, offset: 53676},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1483, col: 18, offset: 53676},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1483, col: 18, offset: 53676},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1483, col: 24, offset: 53682},
								expr: &ruleRefExpr{
									pos:  position{line: 1483, col: 25, offset: 53683},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1483, col: 43, offset: 53701},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1483, col: 47, offset: 53705},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1483, col: 56, offset: 53714},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1483, col: 78, offset: 53736},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1487, col: 1, offset: 53832},
			expr: &choiceExpr{
				pos: position{line: 1487, col: 25, offset: 53856},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1487, col: 25, offset: 53856},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1487, col: 38, offset: 53869},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1489, col: 1, offset: 53888},
			expr: &actionExpr{
				pos: position{line: 1489, col: 21, offset: 53908},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1489, col: 21, offset: 53908},
					expr: &charClassMatcher{
						pos:        position{line: 1489, col: 21, offset: 53908},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1493, col: 1, offset: 53985},
			expr: &actionExpr{
				pos: position{line: 1493, col: 25, offset: 54009},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1493, col: 25, offset: 54009},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1493, col: 25, offset: 54009},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1493, col: 38, offset: 54022},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1493, col: 60, offset: 54044},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1493, col: 64, offset: 54048},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1493, col: 73, offset: 54057},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1493, col: 95, offset: 54079},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1497, col: 1, offset: 54208},
			expr: &actionExpr{
				pos: position{line: 1497, col: 20, offset: 54227},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1497, col: 20, offset: 54227},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1497, col: 20, offset: 54227},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1497, col: 26, offset: 54233},
								expr: &ruleRefExpr{
									pos:  position{line: 1497, col: 27, offset: 54234},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1497, col: 45, offset: 54252},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1497, col: 49, offset: 54256},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1497, col: 58, offset: 54265},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1497, col: 82, offset: 54289},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1501, col: 1, offset: 54387},
			expr: &choiceExpr{
				pos: position{line: 1501, col: 27, offset: 54413},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1501, col: 27, offset: 54413},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1501, col: 40, offset: 54426},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1503, col: 1, offset: 54447},
			expr: &actionExpr{
				pos: position{line: 1503, col: 23, offset: 54469},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1503, col: 23, offset: 54469},
					expr: &charClassMatcher{
						pos:        position{line: 1503, col: 23, offset: 54469},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1507, col: 1, offset: 54546},
			expr: &actionExpr{
				pos: position{line: 1507, col: 27, offset: 54572},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1507, col: 27, offset: 54572},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1507, col: 27, offset: 54572},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1507, col: 40, offset: 54585},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1507, col: 62, offset: 54607},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1507, col: 66, offset: 54611},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1507, col: 75, offset: 54620},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1507, col: 99, offset: 54644},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1514, col: 1, offset: 54886},
			expr: &choiceExpr{
				pos: position{line: 1514, col: 22, offset: 54907},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1514, col: 22, offset: 54907},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1514, col: 46, offset: 54931},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1514, col: 70, offset: 54955},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1516, col: 1, offset: 54973},
			expr: &litMatcher{
				pos:        position{line: 1516, col: 32, offset: 55004},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1518, col: 1, offset: 55009},
			expr: &actionExpr{
				pos: position{line: 1518, col: 26, offset: 55034},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1518, col: 26, offset: 55034},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1518, col: 26, offset: 55034},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1518, col: 54, offset: 55062},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1518, col: 63, offset: 55071},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1518, col: 93, offset: 55101},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1518, col: 121, offset: 55129},
							expr: &ruleRefExpr{
								pos:  position{line: 1518, col: 122, offset: 55130},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1522, col: 1, offset: 55235},
			expr: &choiceExpr{
				pos: position{line: 1522, col: 33, offset: 55267},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1522, col: 34, offset: 55268},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1522, col: 34, offset: 55268},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1522, col: 35, offset: 55269},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1522, col: 35, offset: 55269},
											expr: &ruleRefExpr{
												pos:  position{line: 1522, col: 36, offset: 55270},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1522, col: 64, offset: 55298},
											expr: &ruleRefExpr{
												pos:  position{line: 1522, col: 65, offset: 55299},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1522, col: 71, offset: 55305},
											expr: &ruleRefExpr{
												pos:  position{line: 1522, col: 72, offset: 55306},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1522, col: 80, offset: 55314,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1522, col: 83, offset: 55317},
									expr: &seqExpr{
										pos: position{line: 1522, col: 84, offset: 55318},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1522, col: 84, offset: 55318},
												expr: &seqExpr{
													pos: position{line: 1522, col: 86, offset: 55320},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1522, col: 86, offset: 55320},
															expr: &ruleRefExpr{
																pos:  position{line: 1522, col: 86, offset: 55320},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1522, col: 93, offset: 55327},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1522, col: 122, offset: 55356},
												expr: &ruleRefExpr{
													pos:  position{line: 1522, col: 123, offset: 55357},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1522, col: 151, offset: 55385},
												expr: &ruleRefExpr{
													pos:  position{line: 1522, col: 152, offset: 55386},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1522, col: 160, offset: 55394,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1524, col: 7, offset: 55536},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1524, col: 8, offset: 55537},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1524, col: 8, offset: 55537},
									expr: &ruleRefExpr{
										pos:  position{line: 1524, col: 9, offset: 55538},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1524, col: 15, offset: 55544},
									expr: &ruleRefExpr{
										pos:  position{line: 1524, col: 16, offset: 55545},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1524, col: 24, offset: 55553},
									expr: &ruleRefExpr{
										pos:  position{line: 1524, col: 25, offset: 55554},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1524, col: 53, offset: 55582,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1528, col: 1, offset: 55664},
			expr: &litMatcher{
				pos:        position{line: 1528, col: 32, offset: 55695},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1530, col: 1, offset: 55702},
			expr: &actionExpr{
				pos: position{line: 1530, col: 26, offset: 55727},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1530, col: 26, offset: 55727},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1530, col: 26, offset: 55727},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1530, col: 54, offset: 55755},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1530, col: 63, offset: 55764},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1530, col: 93, offset: 55794},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1530, col: 121, offset: 55822},
							expr: &ruleRefExpr{
								pos:  position{line: 1530, col: 122, offset: 55823},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1534, col: 1, offset: 55928},
			expr: &choiceExpr{
				pos: position{line: 1534, col: 33, offset: 55960},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1534, col: 34, offset: 55961},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1534, col: 34, offset: 55961},
							expr: &seqExpr{
								pos: position{line: 1534, col: 35, offset: 55962},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1534, col: 35, offset: 55962},
										expr: &ruleRefExpr{
											pos:  position{line: 1534, col: 36, offset: 55963},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1534, col: 64, offset: 55991,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1536, col: 7, offset: 56156},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1536, col: 7, offset: 56156},
							expr: &seqExpr{
								pos: position{line: 1536, col: 8, offset: 56157},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1536, col: 8, offset: 56157},
										expr: &ruleRefExpr{
											pos:  position{line: 1536, col: 9, offset: 56158},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1536, col: 15, offset: 56164},
										expr: &ruleRefExpr{
											pos:  position{line: 1536, col: 16, offset: 56165},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1536, col: 24, offset: 56173},
										expr: &ruleRefExpr{
											pos:  position{line: 1536, col: 25, offset: 56174},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1536, col: 53, offset: 56202,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1540, col: 1, offset: 56285},
			expr: &choiceExpr{
				pos: position{line: 1540, col: 21, offset: 56305},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1540, col: 21, offset: 56305},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1540, col: 21, offset: 56305},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1540, col: 21, offset: 56305},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1540, col: 30, offset: 56314},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1540, col: 38, offset: 56322},
										expr: &ruleRefExpr{
											pos:  position{line: 1540, col: 39, offset: 56323},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1540, col: 67, offset: 56351},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1542, col: 5, offset: 56447},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1542, col: 5, offset: 56447},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1542, col: 5, offset: 56447},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1542, col: 15, offset: 56457},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1542, col: 23, offset: 56465},
										expr: &choiceExpr{
											pos: position{line: 1542, col: 24, offset: 56466},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1542, col: 24, offset: 56466},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1542, col: 37, offset: 56479},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1542, col: 65, offset: 56507},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1546, col: 1, offset: 56603},
			expr: &actionExpr{
				pos: position{line: 1546, col: 30, offset: 56632},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1546, col: 30, offset: 56632},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1553, col: 1, offset: 56805},
			expr: &choiceExpr{
				pos: position{line: 1553, col: 19, offset: 56823},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1553, col: 19, offset: 56823},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1553, col: 44, offset: 56848},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1555, col: 1, offset: 56873},
			expr: &choiceExpr{
				pos: position{line: 1555, col: 27, offset: 56899},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1555, col: 27, offset: 56899},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1555, col: 27, offset: 56899},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1555, col: 27, offset: 56899},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1555, col: 32, offset: 56904},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1555, col: 36, offset: 56908},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1555, col: 40, offset: 56912},
									expr: &ruleRefExpr{
										pos:  position{line: 1555, col: 40, offset: 56912},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1555, col: 47, offset: 56919},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1555, col: 51, offset: 56923},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1555, col: 58, offset: 56930},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1555, col: 79, offset: 56951},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1557, col: 5, offset: 57034},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1557, col: 5, offset: 57034},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1557, col: 5, offset: 57034},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1557, col: 10, offset: 57039},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1557, col: 14, offset: 57043},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1557, col: 18, offset: 57047},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1561, col: 1, offset: 57119},
			expr: &actionExpr{
				pos: position{line: 1561, col: 27, offset: 57145},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1561, col: 27, offset: 57145},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1561, col: 27, offset: 57145},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1561, col: 35, offset: 57153},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1561, col: 40, offset: 57158},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1561, col: 54, offset: 57172},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1561, col: 72, offset: 57190},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1565, col: 1, offset: 57313},
			expr: &ruleRefExpr{
				pos:  position{line: 1565, col: 24, offset: 57336},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1570, col: 1, offset: 57458},
			expr: &choiceExpr{
				pos: position{line: 1570, col: 9, offset: 57466},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1570, col: 9, offset: 57466},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1570, col: 24, offset: 57481},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1573, col: 1, offset: 57562},
			expr: &actionExpr{
				pos: position{line: 1573, col: 17, offset: 57578},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1573, col: 17, offset: 57578},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1573, col: 17, offset: 57578},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1573, col: 25, offset: 57586},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1573, col: 30, offset: 57591},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1573, col: 40, offset: 57601},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1573, col: 58, offset: 57619},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1577, col: 1, offset: 57730},
			expr: &actionExpr{
				pos: position{line: 1577, col: 17, offset: 57746},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1577, col: 17, offset: 57746},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1577, col: 17, offset: 57746},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1577, col: 22, offset: 57751},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1577, col: 42, offset: 57771},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1577, col: 59, offset: 57788},
								expr: &ruleRefExpr{
									pos:  position{line: 1577, col: 60, offset: 57789},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1581, col: 1, offset: 57882},
			expr: &actionExpr{
				pos: position{line: 1581, col: 19, offset: 57900},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1581, col: 19, offset: 57900},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1581, col: 19, offset: 57900},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1581, col: 23, offset: 57904},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1581, col: 33, offset: 57914},
								expr: &ruleRefExpr{
									pos:  position{line: 1581, col: 34, offset: 57915},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1582, col: 5, offset: 57947},
							expr: &ruleRefExpr{
								pos:  position{line: 1582, col: 5, offset: 57947},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1582, col: 12, offset: 57954},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1582, col: 23, offset: 57965},
								expr: &ruleRefExpr{
									pos:  position{line: 1582, col: 24, offset: 57966},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1582, col: 43, offset: 57985},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1586, col: 1, offset: 58102},
			expr: &actionExpr{
				pos: position{line: 1586, col: 30, offset: 58131},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1586, col: 30, offset: 58131},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1588, col: 5, offset: 58182},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1588, col: 6, offset: 58183},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1588, col: 6, offset: 58183},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1588, col: 6, offset: 58183},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1588, col: 11, offset: 58188},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1588, col: 20, offset: 58197},
												expr: &choiceExpr{
													pos: position{line: 1588, col: 21, offset: 58198},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1588, col: 21, offset: 58198},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1588, col: 36, offset: 58213},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1588, col: 49, offset: 58226},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1588, col: 71, offset: 58248},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1588, col: 76, offset: 58253},
											expr: &notExpr{
												pos: position{line: 1588, col: 78, offset: 58255},
												expr: &litMatcher{
													pos:        position{line: 1588, col: 79, offset: 58256},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1588, col: 84, offset: 58261},
											expr: &litMatcher{
												pos:        position{line: 1588, col: 84, offset: 58261},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1592, col: 6, offset: 58388},
								run: (*parser).callonFirstLinkAttributeElement19,
								expr: &seqExpr{
									pos: position{line: 1592, col: 6, offset: 58388},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1592, col: 6, offset: 58388},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1592, col: 15, offset: 58397},
												expr: &choiceExpr{
													pos: position{line: 1592, col: 16, offset: 58398},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1592, col: 16, offset: 58398},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1592, col: 31, offset: 58413},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1592, col: 44, offset: 58426},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1592, col: 68, offset: 58450},
											expr: &notExpr{
												pos: position{line: 1592, col: 70, offset: 58452},
												expr: &litMatcher{
													pos:        position{line: 1592, col: 71, offset: 58453},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1592, col: 76, offset: 58458},
											expr: &litMatcher{
												pos:        position{line: 1592, col: 76, offset: 58458},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1598, col: 1, offset: 58572},
			expr: &actionExpr{
				pos: position{line: 1598, col: 18, offset: 58589},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1598, col: 18, offset: 58589},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1602, col: 1, offset: 58675},
			expr: &actionExpr{
				pos: position{line: 1602, col: 24, offset: 58698},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1602, col: 24, offset: 58698},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1606, col: 1, offset: 58791},
			expr: &actionExpr{
				pos: position{line: 1606, col: 26, offset: 58816},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1606, col: 26, offset: 58816},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1611, col: 1, offset: 58972},
			expr: &actionExpr{
				pos: position{line: 1612, col: 5, offset: 58991},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1612, col: 5, offset: 58991},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1612, col: 5, offset: 58991},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1612, col: 14, offset: 59000},
								expr: &choiceExpr{
									pos: position{line: 1612, col: 15, offset: 59001},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1612, col: 15, offset: 59001},
											name: "Word",
										},
										&ruleRefExpr{
											pos:  position{line: 1613, col: 11, offset: 59016},
											name: "Symbol",
										},
										&oneOrMoreExpr{
											pos: position{line: 1614, col: 11, offset: 59033},
											expr: &ruleRefExpr{
												pos:  position{line: 1614, col: 11, offset: 59033},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1615, col: 11, offset: 59051},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1616, col: 11, offset: 59075},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1617, col: 11, offset: 59097},
											name: "ImpliedApostrophe",
										},
										&ruleRefExpr{
											pos:  position{line: 1618, col: 11, offset: 59125},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1619, col: 11, offset: 59143},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1619, col: 21, offset: 59153},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1623, col: 1, offset: 59223},
			expr: &choiceExpr{
				pos: position{line: 1623, col: 17, offset: 59239},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1623, col: 17, offset: 59239},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1623, col: 40, offset: 59262},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1626, col: 1, offset: 59390},
			expr: &actionExpr{
				pos: position{line: 1626, col: 25, offset: 59414},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1626, col: 25, offset: 59414},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1626, col: 25, offset: 59414},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1626, col: 33, offset: 59422},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1626, col: 38, offset: 59427},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1626, col: 38, offset: 59427},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1626, col: 57, offset: 59446},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1626, col: 79, offset: 59468},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1626, col: 97, offset: 59486},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1630, col: 1, offset: 59597},
			expr: &actionExpr{
				pos: position{line: 1630, col: 25, offset: 59621},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1630, col: 25, offset: 59621},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1630, col: 25, offset: 59621},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1630, col: 30, offset: 59626},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1630, col: 48, offset: 59644},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1630, col: 65, offset: 59661},
								expr: &ruleRefExpr{
									pos:  position{line: 1630, col: 66, offset: 59662},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1637, col: 1, offset: 59857},
			expr: &actionExpr{
				pos: position{line: 1637, col: 15, offset: 59871},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1637, col: 15, offset: 59871},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1637, col: 15, offset: 59871},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1637, col: 26, offset: 59882},
								expr: &ruleRefExpr{
									pos:  position{line: 1637, col: 27, offset: 59883},
									name: "BlockImageAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1637, col: 45, offset: 59901},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1637, col: 55, offset: 59911},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1637, col: 61, offset: 59917},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1637, col: 71, offset: 59927},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1637, col: 84, offset: 59940},
								name: "InlineImageAttrs",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1637, col: 102, offset: 59958},
							expr: &ruleRefExpr{
								pos:  position{line: 1637, col: 102, offset: 59958},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1637, col: 109, offset: 59965},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1641, col: 1, offset: 60072},
			expr: &actionExpr{
				pos: position{line: 1641, col: 16, offset: 60087},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1641, col: 16, offset: 60087},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1641, col: 16, offset: 60087},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1641, col: 25, offset: 60096},
							expr: &litMatcher{
								pos:        position{line: 1641, col: 26, offset: 60097},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1641, col: 30, offset: 60101},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1641, col: 36, offset: 60107},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1641, col: 46, offset: 60117},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1641, col: 59, offset: 60130},
								name: "InlineImageAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttrs",
			pos:  position{line: 1645, col: 1, offset: 60240},
			expr: &actionExpr{
				pos: position{line: 1645, col: 21, offset: 60260},
				run: (*parser).callonInlineImageAttrs1,
				expr: &seqExpr{
					pos: position{line: 1645, col: 21, offset: 60260},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1645, col: 21, offset: 60260},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1645, col: 25, offset: 60264},
							label: "alt",
							expr: &ruleRefExpr{
								pos:  position{line: 1645, col: 29, offset: 60268},
								name: "ImageAltInline",
							},
						},
						&labeledExpr{
							pos:   position{line: 1645, col: 44, offset: 60283},
							label: "w",
							expr: &ruleRefExpr{
								pos:  position{line: 1645, col: 46, offset: 60285},
								name: "ImageWidth",
							},
						},
						&labeledExpr{
							pos:   position{line: 1645, col: 57, offset: 60296},
							label: "h",
							expr: &ruleRefExpr{
								pos:  position{line: 1645, col: 59, offset: 60298},
								name: "ImageHeight",
							},
						},
						&labeledExpr{
							pos:   position{line: 1645, col: 71, offset: 60310},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1645, col: 74, offset: 60313},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1645, col: 85, offset: 60324},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImageAttrs",
			pos:  position{line: 1649, col: 1, offset: 60386},
			expr: &choiceExpr{
				pos: position{line: 1649, col: 20, offset: 60405},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1649, col: 20, offset: 60405},
						name: "ImageAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 1649, col: 36, offset: 60421},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 1649, col: 51, offset: 60436},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1651, col: 1, offset: 60447},
			expr: &actionExpr{
				pos: position{line: 1651, col: 18, offset: 60464},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1651, col: 18, offset: 60464},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1651, col: 18, offset: 60464},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1651, col: 22, offset: 60468},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 1651, col: 29, offset: 60475},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 1651, col: 29, offset: 60475},
										expr: &ruleRefExpr{
											pos:  position{line: 1651, col: 29, offset: 60475},
											name: "ImageAltAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1651, col: 43, offset: 60489},
										expr: &ruleRefExpr{
											pos:  position{line: 1651, col: 43, offset: 60489},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1651, col: 58, offset: 60504},
										expr: &ruleRefExpr{
											pos:  position{line: 1651, col: 58, offset: 60504},
											name: "ImageWidthAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1651, col: 74, offset: 60520},
										expr: &ruleRefExpr{
											pos:  position{line: 1651, col: 74, offset: 60520},
											name: "ImageHeightAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1651, col: 91, offset: 60537},
										expr: &ruleRefExpr{
											pos:  position{line: 1651, col: 91, offset: 60537},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1651, col: 103, offset: 60549},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1651, col: 107, offset: 60553},
							expr: &ruleRefExpr{
								pos:  position{line: 1651, col: 107, offset: 60553},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1651, col: 114, offset: 60560},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageAltInline",
			pos:  position{line: 1655, col: 1, offset: 60614},
			expr: &actionExpr{
				pos: position{line: 1655, col: 19, offset: 60632},
				run: (*parser).callonImageAltInline1,
				expr: &labeledExpr{
					pos:   position{line: 1655, col: 19, offset: 60632},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1655, col: 25, offset: 60638},
						expr: &ruleRefExpr{
							pos:  position{line: 1655, col: 25, offset: 60638},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "ImageWidth",
			pos:  position{line: 1659, col: 1, offset: 60717},
			expr: &actionExpr{
				pos: position{line: 1659, col: 15, offset: 60731},
				run: (*parser).callonImageWidth1,
				expr: &seqExpr{
					pos: position{line: 1659, col: 15, offset: 60731},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1659, col: 15, offset: 60731},
							expr: &litMatcher{
								pos:        position{line: 1659, col: 15, offset: 60731},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1659, col: 20, offset: 60736},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1659, col: 26, offset: 60742},
								expr: &ruleRefExpr{
									pos:  position{line: 1659, col: 26, offset: 60742},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeight",
			pos:  position{line: 1663, col: 1, offset: 60818},
			expr: &actionExpr{
				pos: position{line: 1663, col: 16, offset: 60833},
				run: (*parser).callonImageHeight1,
				expr: &seqExpr{
					pos: position{line: 1663, col: 16, offset: 60833},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1663, col: 16, offset: 60833},
							expr: &litMatcher{
								pos:        position{line: 1663, col: 16, offset: 60833},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1663, col: 21, offset: 60838},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1663, col: 27, offset: 60844},
								expr: &ruleRefExpr{
									pos:  position{line: 1663, col: 27, offset: 60844},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAltAttr",
			pos:  position{line: 1667, col: 1, offset: 60926},
			expr: &actionExpr{
				pos: position{line: 1667, col: 17, offset: 60942},
				run: (*parser).callonImageAltAttr1,
				expr: &seqExpr{
					pos: position{line: 1667, col: 17, offset: 60942},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1667, col: 17, offset: 60942},
							expr: &ruleRefExpr{
								pos:  position{line: 1667, col: 17, offset: 60942},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1667, col: 24, offset: 60949},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1667, col: 30, offset: 60955},
								name: "PositionalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1667, col: 46, offset: 60971},
							expr: &ruleRefExpr{
								pos:  position{line: 1667, col: 46, offset: 60971},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageWidthAttr",
			pos:  position{line: 1671, col: 1, offset: 61056},
			expr: &actionExpr{
				pos: position{line: 1671, col: 19, offset: 61074},
				run: (*parser).callonImageWidthAttr1,
				expr: &seqExpr{
					pos: position{line: 1671, col: 19, offset: 61074},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1671, col: 19, offset: 61074},
							expr: &ruleRefExpr{
								pos:  position{line: 1671, col: 19, offset: 61074},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1671, col: 26, offset: 61081},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1671, col: 30, offset: 61085},
							expr: &ruleRefExpr{
								pos:  position{line: 1671, col: 30, offset: 61085},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1671, col: 37, offset: 61092},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1671, col: 43, offset: 61098},
								expr: &ruleRefExpr{
									pos:  position{line: 1671, col: 43, offset: 61098},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeightAttr",
			pos:  position{line: 1678, col: 1, offset: 61242},
			expr: &actionExpr{
				pos: position{line: 1678, col: 20, offset: 61261},
				run: (*parser).callonImageHeightAttr1,
				expr: &seqExpr{
					pos: position{line: 1678, col: 20, offset: 61261},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1678, col: 20, offset: 61261},
							expr: &ruleRefExpr{
								pos:  position{line: 1678, col: 20, offset: 61261},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1678, col: 27, offset: 61268},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1678, col: 31, offset: 61272},
							expr: &ruleRefExpr{
								pos:  position{line: 1678, col: 31, offset: 61272},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1678, col: 38, offset: 61279},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1678, col: 44, offset: 61285},
								expr: &ruleRefExpr{
									pos:  position{line: 1678, col: 44, offset: 61285},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1689, col: 1, offset: 61628},
			expr: &actionExpr{
				pos: position{line: 1689, col: 15, offset: 61642},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1689, col: 15, offset: 61642},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1689, col: 15, offset: 61642},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1689, col: 23, offset: 61650},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1689, col: 29, offset: 61656},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1689, col: 29, offset: 61656},
									expr: &charClassMatcher{
										pos:        position{line: 1689, col: 29, offset: 61656},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1689, col: 73, offset: 61700},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1689, col: 80, offset: 61707},
								name: "IconAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttrs",
			pos:  position{line: 1693, col: 1, offset: 61789},
			expr: &actionExpr{
				pos: position{line: 1693, col: 14, offset: 61802},
				run: (*parser).callonIconAttrs1,
				expr: &seqExpr{
					pos: position{line: 1693, col: 14, offset: 61802},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1693, col: 14, offset: 61802},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1693, col: 18, offset: 61806},
							label: "size",
							expr: &ruleRefExpr{
								pos:  position{line: 1693, col: 23, offset: 61811},
								name: "IconSize",
							},
						},
						&labeledExpr{
							pos:   position{line: 1693, col: 32, offset: 61820},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1693, col: 35, offset: 61823},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1693, col: 46, offset: 61834},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "IconSize",
			pos:  position{line: 1697, col: 1, offset: 61891},
			expr: &actionExpr{
				pos: position{line: 1697, col: 13, offset: 61903},
				run: (*parser).callonIconSize1,
				expr: &labeledExpr{
					pos:   position{line: 1697, col: 13, offset: 61903},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1697, col: 19, offset: 61909},
						expr: &ruleRefExpr{
							pos:  position{line: 1697, col: 19, offset: 61909},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1704, col: 1, offset: 62185},
			expr: &choiceExpr{
				pos: position{line: 1704, col: 19, offset: 62203},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1704, col: 19, offset: 62203},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1704, col: 19, offset: 62203},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1704, col: 19, offset: 62203},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1704, col: 32, offset: 62216},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1704, col: 41, offset: 62225},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1704, col: 58, offset: 62242},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1706, col: 5, offset: 62310},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1706, col: 5, offset: 62310},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1706, col: 5, offset: 62310},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1706, col: 17, offset: 62322},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1706, col: 22, offset: 62327},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1706, col: 35, offset: 62340},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1706, col: 39, offset: 62344},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1706, col: 47, offset: 62352},
										expr: &ruleRefExpr{
											pos:  position{line: 1706, col: 48, offset: 62353},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1706, col: 66, offset: 62371},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1710, col: 1, offset: 62432},
			expr: &ruleRefExpr{
				pos:  position{line: 1710, col: 16, offset: 62447},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1712, col: 1, offset: 62458},
			expr: &actionExpr{
				pos: position{line: 1712, col: 20, offset: 62477},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1712, col: 20, offset: 62477},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1712, col: 29, offset: 62486},
						expr: &seqExpr{
							pos: position{line: 1712, col: 30, offset: 62487},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1712, col: 30, offset: 62487},
									expr: &litMatcher{
										pos:        position{line: 1712, col: 31, offset: 62488},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1712, col: 35, offset: 62492},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1719, col: 1, offset: 62816},
			expr: &actionExpr{
				pos: position{line: 1719, col: 19, offset: 62834},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1719, col: 19, offset: 62834},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1719, col: 19, offset: 62834},
							expr: &ruleRefExpr{
								pos:  position{line: 1719, col: 20, offset: 62835},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1720, col: 5, offset: 62923},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1720, col: 12, offset: 62930},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1720, col: 12, offset: 62930},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1721, col: 11, offset: 62953},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1722, col: 11, offset: 62977},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1723, col: 11, offset: 63001},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1724, col: 11, offset: 63022},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1725, col: 11, offset: 63045},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1726, col: 11, offset: 63073},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1727, col: 11, offset: 63100},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1728, col: 11, offset: 63116},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1732, col: 1, offset: 63157},
			expr: &choiceExpr{
				pos: position{line: 1732, col: 19, offset: 63175},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1732, col: 19, offset: 63175},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1732, col: 19, offset: 63175},
								expr: &ruleRefExpr{
									pos:  position{line: 1732, col: 21, offset: 63177},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1732, col: 31, offset: 63187},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1733, col: 19, offset: 63258},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1734, col: 19, offset: 63298},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1735, col: 19, offset: 63339},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1736, col: 19, offset: 63380},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1737, col: 19, offset: 63421},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1738, col: 19, offset: 63459},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1739, col: 19, offset: 63499},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "DelimitedBlockRawLine",
			pos:  position{line: 1741, col: 1, offset: 63526},
			expr: &choiceExpr{
				pos: position{line: 1741, col: 26, offset: 63551},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1741, col: 26, offset: 63551},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1741, col: 42, offset: 63567},
						name: "RawLine",
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 1743, col: 1, offset: 63576},
			expr: &actionExpr{
				pos: position{line: 1743, col: 12, offset: 63587},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 1743, col: 12, offset: 63587},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1743, col: 12, offset: 63587},
							expr: &ruleRefExpr{
								pos:  position{line: 1743, col: 13, offset: 63588},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1743, col: 17, offset: 63592},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1743, col: 26, offset: 63601},
								name: "RawLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1743, col: 42, offset: 63617},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawLineContent",
			pos:  position{line: 1747, col: 1, offset: 63697},
			expr: &actionExpr{
				pos: position{line: 1747, col: 19, offset: 63715},
				run: (*parser).callonRawLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1747, col: 19, offset: 63715},
					expr: &charClassMatcher{
						pos:        position{line: 1747, col: 19, offset: 63715},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1751, col: 1, offset: 63762},
			expr: &ruleRefExpr{
				pos:  position{line: 1751, col: 20, offset: 63781},
				name: "VerbatimLine",
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1753, col: 1, offset: 63795},
			expr: &actionExpr{
				pos: position{line: 1753, col: 17, offset: 63811},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1753, col: 17, offset: 63811},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1753, col: 17, offset: 63811},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1753, col: 26, offset: 63820},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1753, col: 47, offset: 63841},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1753, col: 56, offset: 63850},
								expr: &ruleRefExpr{
									pos:  position{line: 1753, col: 57, offset: 63851},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1753, col: 68, offset: 63862},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1757, col: 1, offset: 63932},
			expr: &actionExpr{
				pos: position{line: 1757, col: 24, offset: 63955},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1757, col: 24, offset: 63955},
					expr: &seqExpr{
						pos: position{line: 1757, col: 25, offset: 63956},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1757, col: 25, offset: 63956},
								expr: &ruleRefExpr{
									pos:  position{line: 1757, col: 26, offset: 63957},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1757, col: 36, offset: 63967},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1757, col: 36, offset: 63967},
										expr: &ruleRefExpr{
											pos:  position{line: 1757, col: 36, offset: 63967},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1757, col: 45, offset: 63976},
										expr: &charClassMatcher{
											pos:        position{line: 1757, col: 45, offset: 63976},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1761, col: 1, offset: 64026},
			expr: &oneOrMoreExpr{
				pos: position{line: 1761, col: 13, offset: 64038},
				expr: &ruleRefExpr{
					pos:  position{line: 1761, col: 13, offset: 64038},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1763, col: 1, offset: 64048},
			expr: &actionExpr{
				pos: position{line: 1763, col: 12, offset: 64059},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1763, col: 12, offset: 64059},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1763, col: 12, offset: 64059},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1763, col: 16, offset: 64063},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1763, col: 21, offset: 64068},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1763, col: 21, offset: 64068},
									expr: &charClassMatcher{
										pos:        position{line: 1763, col: 21, offset: 64068},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1763, col: 69, offset: 64116},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1763, col: 73, offset: 64120},
							expr: &ruleRefExpr{
								pos:  position{line: 1763, col: 73, offset: 64120},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1763, col: 80, offset: 64127},
							expr: &choiceExpr{
								pos: position{line: 1763, col: 82, offset: 64129},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1763, col: 82, offset: 64129},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1763, col: 88, offset: 64135},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1767, col: 1, offset: 64188},
			expr: &actionExpr{
				pos: position{line: 1767, col: 20, offset: 64207},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1767, col: 20, offset: 64207},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1767, col: 20, offset: 64207},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1767, col: 25, offset: 64212},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1767, col: 48, offset: 64235},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1767, col: 61, offset: 64248},
								expr: &ruleRefExpr{
									pos:  position{line: 1767, col: 61, offset: 64248},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1771, col: 1, offset: 64345},
			expr: &actionExpr{
				pos: position{line: 1771, col: 26, offset: 64370},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1771, col: 26, offset: 64370},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1771, col: 26, offset: 64370},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1771, col: 30, offset: 64374},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1771, col: 35, offset: 64379},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1771, col: 35, offset: 64379},
									expr: &charClassMatcher{
										pos:        position{line: 1771, col: 35, offset: 64379},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1771, col: 83, offset: 64427},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1771, col: 87, offset: 64431},
							expr: &ruleRefExpr{
								pos:  position{line: 1771, col: 87, offset: 64431},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1778, col: 1, offset: 64658},
			expr: &seqExpr{
				pos: position{line: 1778, col: 25, offset: 64682},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1778, col: 25, offset: 64682},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1778, col: 31, offset: 64688},
						expr: &ruleRefExpr{
							pos:  position{line: 1778, col: 31, offset: 64688},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1778, col: 38, offset: 64695},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1780, col: 1, offset: 64755},
			expr: &seqExpr{
				pos: position{line: 1780, col: 30, offset: 64784},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1780, col: 30, offset: 64784},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1780, col: 36, offset: 64790},
						expr: &ruleRefExpr{
							pos:  position{line: 1780, col: 36, offset: 64790},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1780, col: 43, offset: 64797},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1782, col: 1, offset: 64802},
			expr: &choiceExpr{
				pos: position{line: 1782, col: 28, offset: 64829},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1782, col: 29, offset: 64830},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1782, col: 29, offset: 64830},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1782, col: 35, offset: 64836},
								expr: &ruleRefExpr{
									pos:  position{line: 1782, col: 35, offset: 64836},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1782, col: 42, offset: 64843},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1782, col: 49, offset: 64850},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1784, col: 1, offset: 64855},
			expr: &actionExpr{
				pos: position{line: 1784, col: 16, offset: 64870},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1784, col: 16, offset: 64870},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1784, col: 16, offset: 64870},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1784, col: 27, offset: 64881},
								expr: &ruleRefExpr{
									pos:  position{line: 1784, col: 28, offset: 64882},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1784, col: 41, offset: 64895},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1784, col: 67, offset: 64921},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1784, col: 76, offset: 64930},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1784, col: 99, offset: 64953},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1788, col: 1, offset: 65068},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1788, col: 26, offset: 65093},
				expr: &actionExpr{
					pos: position{line: 1788, col: 27, offset: 65094},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1788, col: 27, offset: 65094},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1788, col: 27, offset: 65094},
								expr: &ruleRefExpr{
									pos:  position{line: 1788, col: 28, offset: 65095},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1788, col: 52, offset: 65119},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1788, col: 58, offset: 65125},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1795, col: 1, offset: 65465},
			expr: &seqExpr{
				pos: position{line: 1795, col: 26, offset: 65490},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1795, col: 26, offset: 65490},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1795, col: 33, offset: 65497},
						expr: &ruleRefExpr{
							pos:  position{line: 1795, col: 33, offset: 65497},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1795, col: 40, offset: 65504},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1797, col: 1, offset: 65509},
			expr: &seqExpr{
				pos: position{line: 1797, col: 31, offset: 65539},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1797, col: 31, offset: 65539},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1797, col: 38, offset: 65546},
						expr: &ruleRefExpr{
							pos:  position{line: 1797, col: 38, offset: 65546},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1797, col: 45, offset: 65553},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1799, col: 1, offset: 65558},
			expr: &choiceExpr{
				pos: position{line: 1799, col: 29, offset: 65586},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1799, col: 30, offset: 65587},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1799, col: 30, offset: 65587},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1799, col: 37, offset: 65594},
								expr: &ruleRefExpr{
									pos:  position{line: 1799, col: 37, offset: 65594},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1799, col: 44, offset: 65601},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1799, col: 51, offset: 65608},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1801, col: 1, offset: 65613},
			expr: &actionExpr{
				pos: position{line: 1801, col: 17, offset: 65629},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1801, col: 17, offset: 65629},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1801, col: 17, offset: 65629},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1801, col: 28, offset: 65640},
								expr: &ruleRefExpr{
									pos:  position{line: 1801, col: 29, offset: 65641},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1801, col: 42, offset: 65654},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1801, col: 69, offset: 65681},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1801, col: 78, offset: 65690},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1801, col: 102, offset: 65714},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1805, col: 1, offset: 65831},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1805, col: 27, offset: 65857},
				expr: &actionExpr{
					pos: position{line: 1805, col: 28, offset: 65858},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1805, col: 28, offset: 65858},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1805, col: 28, offset: 65858},
								expr: &ruleRefExpr{
									pos:  position{line: 1805, col: 29, offset: 65859},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1805, col: 54, offset: 65884},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1805, col: 60, offset: 65890},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1812, col: 1, offset: 66230},
			expr: &seqExpr{
				pos: position{line: 1812, col: 26, offset: 66255},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1812, col: 26, offset: 66255},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1812, col: 33, offset: 66262},
						expr: &ruleRefExpr{
							pos:  position{line: 1812, col: 33, offset: 66262},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1812, col: 40, offset: 66269},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1814, col: 1, offset: 66274},
			expr: &seqExpr{
				pos: position{line: 1814, col: 31, offset: 66304},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1814, col: 31, offset: 66304},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1814, col: 38, offset: 66311},
						expr: &ruleRefExpr{
							pos:  position{line: 1814, col: 38, offset: 66311},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1814, col: 45, offset: 66318},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1816, col: 1, offset: 66323},
			expr: &choiceExpr{
				pos: position{line: 1816, col: 29, offset: 66351},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1816, col: 30, offset: 66352},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1816, col: 30, offset: 66352},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1816, col: 37, offset: 66359},
								expr: &ruleRefExpr{
									pos:  position{line: 1816, col: 37, offset: 66359},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1816, col: 44, offset: 66366},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1816, col: 51, offset: 66373},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1818, col: 1, offset: 66378},
			expr: &actionExpr{
				pos: position{line: 1818, col: 17, offset: 66394},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1818, col: 17, offset: 66394},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1818, col: 17, offset: 66394},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1818, col: 28, offset: 66405},
								expr: &ruleRefExpr{
									pos:  position{line: 1818, col: 29, offset: 66406},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1818, col: 42, offset: 66419},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1818, col: 69, offset: 66446},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1818, col: 78, offset: 66455},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1818, col: 102, offset: 66479},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1822, col: 1, offset: 66596},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1822, col: 27, offset: 66622},
				expr: &actionExpr{
					pos: position{line: 1822, col: 28, offset: 66623},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1822, col: 28, offset: 66623},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1822, col: 28, offset: 66623},
								expr: &ruleRefExpr{
									pos:  position{line: 1822, col: 29, offset: 66624},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1822, col: 54, offset: 66649},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1822, col: 60, offset: 66655},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1829, col: 1, offset: 66993},
			expr: &seqExpr{
				pos: position{line: 1829, col: 24, offset: 67016},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1829, col: 24, offset: 67016},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1829, col: 31, offset: 67023},
						expr: &ruleRefExpr{
							pos:  position{line: 1829, col: 31, offset: 67023},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1829, col: 38, offset: 67030},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1831, col: 1, offset: 67060},
			expr: &seqExpr{
				pos: position{line: 1831, col: 29, offset: 67088},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1831, col: 29, offset: 67088},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1831, col: 36, offset: 67095},
						expr: &ruleRefExpr{
							pos:  position{line: 1831, col: 36, offset: 67095},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1831, col: 43, offset: 67102},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1833, col: 1, offset: 67132},
			expr: &choiceExpr{
				pos: position{line: 1833, col: 27, offset: 67158},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1833, col: 28, offset: 67159},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1833, col: 28, offset: 67159},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1833, col: 35, offset: 67166},
								expr: &ruleRefExpr{
									pos:  position{line: 1833, col: 35, offset: 67166},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1833, col: 42, offset: 67173},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1833, col: 49, offset: 67180},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1835, col: 1, offset: 67210},
			expr: &actionExpr{
				pos: position{line: 1835, col: 15, offset: 67224},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1835, col: 15, offset: 67224},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1835, col: 15, offset: 67224},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1835, col: 26, offset: 67235},
								expr: &ruleRefExpr{
									pos:  position{line: 1835, col: 27, offset: 67236},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1835, col: 40, offset: 67249},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1835, col: 65, offset: 67274},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1835, col: 74, offset: 67283},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1835, col: 101, offset: 67310},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1839, col: 1, offset: 67423},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1839, col: 30, offset: 67452},
				expr: &actionExpr{
					pos: position{line: 1839, col: 31, offset: 67453},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1839, col: 31, offset: 67453},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1839, col: 31, offset: 67453},
								expr: &ruleRefExpr{
									pos:  position{line: 1839, col: 32, offset: 67454},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1839, col: 55, offset: 67477},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1839, col: 61, offset: 67483},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1846, col: 1, offset: 67823},
			expr: &seqExpr{
				pos: position{line: 1846, col: 26, offset: 67848},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1846, col: 26, offset: 67848},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1846, col: 33, offset: 67855},
						expr: &ruleRefExpr{
							pos:  position{line: 1846, col: 33, offset: 67855},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1846, col: 40, offset: 67862},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1848, col: 1, offset: 67867},
			expr: &seqExpr{
				pos: position{line: 1848, col: 31, offset: 67897},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1848, col: 31, offset: 67897},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1848, col: 38, offset: 67904},
						expr: &ruleRefExpr{
							pos:  position{line: 1848, col: 38, offset: 67904},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1848, col: 45, offset: 67911},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1850, col: 1, offset: 67916},
			expr: &choiceExpr{
				pos: position{line: 1850, col: 29, offset: 67944},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1850, col: 30, offset: 67945},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1850, col: 30, offset: 67945},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1850, col: 37, offset: 67952},
								expr: &ruleRefExpr{
									pos:  position{line: 1850, col: 37, offset: 67952},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1850, col: 44, offset: 67959},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1850, col: 51, offset: 67966},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1852, col: 1, offset: 67971},
			expr: &actionExpr{
				pos: position{line: 1852, col: 17, offset: 67987},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1852, col: 17, offset: 67987},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1852, col: 17, offset: 67987},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1852, col: 28, offset: 67998},
								expr: &ruleRefExpr{
									pos:  position{line: 1852, col: 29, offset: 67999},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1852, col: 42, offset: 68012},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1852, col: 69, offset: 68039},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1852, col: 78, offset: 68048},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1852, col: 102, offset: 68072},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1856, col: 1, offset: 68189},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1856, col: 27, offset: 68215},
				expr: &actionExpr{
					pos: position{line: 1856, col: 28, offset: 68216},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1856, col: 28, offset: 68216},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1856, col: 28, offset: 68216},
								expr: &ruleRefExpr{
									pos:  position{line: 1856, col: 29, offset: 68217},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1856, col: 54, offset: 68242},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1856, col: 60, offset: 68248},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1863, col: 1, offset: 68592},
			expr: &seqExpr{
				pos: position{line: 1863, col: 30, offset: 68621},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1863, col: 30, offset: 68621},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1863, col: 37, offset: 68628},
						expr: &ruleRefExpr{
							pos:  position{line: 1863, col: 37, offset: 68628},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1863, col: 44, offset: 68635},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1865, col: 1, offset: 68640},
			expr: &seqExpr{
				pos: position{line: 1865, col: 35, offset: 68674},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1865, col: 35, offset: 68674},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1865, col: 42, offset: 68681},
						expr: &ruleRefExpr{
							pos:  position{line: 1865, col: 42, offset: 68681},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1865, col: 49, offset: 68688},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1867, col: 1, offset: 68693},
			expr: &choiceExpr{
				pos: position{line: 1867, col: 33, offset: 68725},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1867, col: 34, offset: 68726},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1867, col: 34, offset: 68726},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1867, col: 41, offset: 68733},
								expr: &ruleRefExpr{
									pos:  position{line: 1867, col: 41, offset: 68733},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1867, col: 48, offset: 68740},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1867, col: 55, offset: 68747},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1869, col: 1, offset: 68752},
			expr: &actionExpr{
				pos: position{line: 1869, col: 21, offset: 68772},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1869, col: 21, offset: 68772},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1869, col: 21, offset: 68772},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1869, col: 32, offset: 68783},
								expr: &ruleRefExpr{
									pos:  position{line: 1869, col: 33, offset: 68784},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1869, col: 46, offset: 68797},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1869, col: 77, offset: 68828},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1869, col: 86, offset: 68837},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1869, col: 114, offset: 68865},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1873, col: 1, offset: 68990},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1873, col: 31, offset: 69020},
				expr: &actionExpr{
					pos: position{line: 1873, col: 32, offset: 69021},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1873, col: 32, offset: 69021},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1873, col: 32, offset: 69021},
								expr: &ruleRefExpr{
									pos:  position{line: 1873, col: 33, offset: 69022},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1873, col: 62, offset: 69051},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1873, col: 68, offset: 69057},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1878, col: 1, offset: 69219},
			expr: &actionExpr{
				pos: position{line: 1878, col: 18, offset: 69236},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1878, col: 18, offset: 69236},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1878, col: 19, offset: 69237},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1878, col: 19, offset: 69237},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1878, col: 27, offset: 69245},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1878, col: 37, offset: 69255},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1878, col: 45, offset: 69263},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1878, col: 55, offset: 69273},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1878, col: 63, offset: 69281},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1878, col: 72, offset: 69290},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1887, col: 1, offset: 69587},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1887, col: 23, offset: 69609},
				expr: &ruleRefExpr{
					pos:  position{line: 1887, col: 23, offset: 69609},
					name: "NormalElement",
				},
			},
		},
		{
			name: "NormalElement",
			pos:  position{line: 1889, col: 1, offset: 69625},
			expr: &actionExpr{
				pos: position{line: 1890, col: 5, offset: 69647},
				run: (*parser).callonNormalElement1,
				expr: &seqExpr{
					pos: position{line: 1890, col: 5, offset: 69647},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1890, col: 5, offset: 69647},
							expr: &ruleRefExpr{
								pos:  position{line: 1890, col: 6, offset: 69648},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1890, col: 10, offset: 69652},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1890, col: 19, offset: 69661},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1890, col: 19, offset: 69661},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1891, col: 15, offset: 69686},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1892, col: 15, offset: 69714},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1893, col: 15, offset: 69739},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 1894, col: 15, offset: 69767},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1895, col: 15, offset: 69798},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1896, col: 15, offset: 69831},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1897, col: 15, offset: 69862},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1898, col: 15, offset: 69901},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1899, col: 15, offset: 69930},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1900, col: 15, offset: 69958},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1901, col: 15, offset: 69994},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1902, col: 15, offset: 70024},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1903, col: 15, offset: 70065},
										name: "StandaloneAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 1904, col: 15, offset: 70100},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1909, col: 1, offset: 70213},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1909, col: 22, offset: 70234},
				expr: &ruleRefExpr{
					pos:  position{line: 1909, col: 22, offset: 70234},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1911, col: 1, offset: 70254},
			expr: &actionExpr{
				pos: position{line: 1911, col: 22, offset: 70275},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1911, col: 22, offset: 70275},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1911, col: 22, offset: 70275},
							expr: &ruleRefExpr{
								pos:  position{line: 1911, col: 23, offset: 70276},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1911, col: 27, offset: 70280},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1911, col: 36, offset: 70289},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1911, col: 36, offset: 70289},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1911, col: 48, offset: 70301},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1915, col: 1, offset: 70351},
			expr: &actionExpr{
				pos: position{line: 1915, col: 24, offset: 70374},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1915, col: 24, offset: 70374},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1915, col: 30, offset: 70380},
						expr: &ruleRefExpr{
							pos:  position{line: 1915, col: 31, offset: 70381},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1919, col: 1, offset: 70471},
			expr: &actionExpr{
				pos: position{line: 1919, col: 28, offset: 70498},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1919, col: 28, offset: 70498},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1919, col: 28, offset: 70498},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1919, col: 37, offset: 70507},
								expr: &ruleRefExpr{
									pos:  position{line: 1919, col: 38, offset: 70508},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1919, col: 54, offset: 70524},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1926, col: 1, offset: 70766},
			expr: &actionExpr{
				pos: position{line: 1926, col: 10, offset: 70775},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1926, col: 10, offset: 70775},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1926, col: 10, offset: 70775},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1926, col: 16, offset: 70781},
								expr: &zeroOrMoreExpr{
									pos: position{line: 1926, col: 17, offset: 70782},
									expr: &ruleRefExpr{
										pos:  position{line: 1926, col: 17, offset: 70782},
										name: "BlockAttrs",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1926, col: 31, offset: 70796},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1927, col: 5, offset: 70815},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1927, col: 12, offset: 70822},
								expr: &ruleRefExpr{
									pos:  position{line: 1927, col: 13, offset: 70823},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1928, col: 5, offset: 70845},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1928, col: 11, offset: 70851},
								expr: &ruleRefExpr{
									pos:  position{line: 1928, col: 12, offset: 70852},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1929, col: 6, offset: 70869},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1929, col: 6, offset: 70869},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1929, col: 23, offset: 70886},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1933, col: 1, offset: 70996},
			expr: &seqExpr{
				pos: position{line: 1933, col: 23, offset: 71018},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1933, col: 23, offset: 71018},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1933, col: 27, offset: 71022},
						expr: &ruleRefExpr{
							pos:  position{line: 1933, col: 27, offset: 71022},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1935, col: 1, offset: 71030},
			expr: &seqExpr{
				pos: position{line: 1935, col: 19, offset: 71048},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1935, col: 19, offset: 71048},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1935, col: 26, offset: 71055},
						expr: &ruleRefExpr{
							pos:  position{line: 1935, col: 26, offset: 71055},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1935, col: 33, offset: 71062},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1938, col: 1, offset: 71130},
			expr: &actionExpr{
				pos: position{line: 1938, col: 20, offset: 71149},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1938, col: 20, offset: 71149},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1938, col: 20, offset: 71149},
							expr: &ruleRefExpr{
								pos:  position{line: 1938, col: 21, offset: 71150},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1938, col: 36, offset: 71165},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1938, col: 42, offset: 71171},
								expr: &ruleRefExpr{
									pos:  position{line: 1938, col: 43, offset: 71172},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1938, col: 55, offset: 71184},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1938, col: 59, offset: 71188},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1942, col: 1, offset: 71256},
			expr: &actionExpr{
				pos: position{line: 1942, col: 14, offset: 71269},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1942, col: 14, offset: 71269},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1942, col: 14, offset: 71269},
							expr: &ruleRefExpr{
								pos:  position{line: 1942, col: 15, offset: 71270},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1942, col: 30, offset: 71285},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1942, col: 36, offset: 71291},
								expr: &ruleRefExpr{
									pos:  position{line: 1942, col: 37, offset: 71292},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1942, col: 49, offset: 71304},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1942, col: 53, offset: 71308},
							expr: &ruleRefExpr{
								pos:  position{line: 1942, col: 53, offset: 71308},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1946, col: 1, offset: 71377},
			expr: &actionExpr{
				pos: position{line: 1946, col: 14, offset: 71390},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1946, col: 14, offset: 71390},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1946, col: 14, offset: 71390},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1946, col: 33, offset: 71409},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1946, col: 42, offset: 71418},
								expr: &seqExpr{
									pos: position{line: 1946, col: 43, offset: 71419},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1946, col: 43, offset: 71419},
											expr: &ruleRefExpr{
												pos:  position{line: 1946, col: 44, offset: 71420},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1946, col: 63, offset: 71439},
											expr: &ruleRefExpr{
												pos:  position{line: 1946, col: 64, offset: 71440},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1946, col: 68, offset: 71444},
											expr: &ruleRefExpr{
												pos:  position{line: 1946, col: 68, offset: 71444},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1946, col: 75, offset: 71451},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1946, col: 89, offset: 71465},
											expr: &ruleRefExpr{
												pos:  position{line: 1946, col: 89, offset: 71465},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1953, col: 1, offset: 71714},
			expr: &seqExpr{
				pos: position{line: 1953, col: 26, offset: 71739},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1953, col: 26, offset: 71739},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1953, col: 33, offset: 71746},
						expr: &ruleRefExpr{
							pos:  position{line: 1953, col: 33, offset: 71746},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1953, col: 40, offset: 71753},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1955, col: 1, offset: 71758},
			expr: &seqExpr{
				pos: position{line: 1955, col: 31, offset: 71788},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1955, col: 31, offset: 71788},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1955, col: 38, offset: 71795},
						expr: &ruleRefExpr{
							pos:  position{line: 1955, col: 38, offset: 71795},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1955, col: 45, offset: 71802},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1957, col: 1, offset: 71807},
			expr: &choiceExpr{
				pos: position{line: 1957, col: 29, offset: 71835},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1957, col: 30, offset: 71836},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1957, col: 30, offset: 71836},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1957, col: 37, offset: 71843},
								expr: &ruleRefExpr{
									pos:  position{line: 1957, col: 37, offset: 71843},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1957, col: 44, offset: 71850},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1957, col: 51, offset: 71857},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1959, col: 1, offset: 71862},
			expr: &actionExpr{
				pos: position{line: 1959, col: 17, offset: 71878},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1959, col: 17, offset: 71878},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1959, col: 17, offset: 71878},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1959, col: 44, offset: 71905},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1959, col: 53, offset: 71914},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1959, col: 78, offset: 71939},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 1963, col: 1, offset: 72049},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1963, col: 27, offset: 72075},
				expr: &actionExpr{
					pos: position{line: 1963, col: 28, offset: 72076},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1963, col: 28, offset: 72076},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1963, col: 28, offset: 72076},
								expr: &ruleRefExpr{
									pos:  position{line: 1963, col: 29, offset: 72077},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1963, col: 54, offset: 72102},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1963, col: 60, offset: 72108},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1967, col: 1, offset: 72252},
			expr: &actionExpr{
				pos: position{line: 1967, col: 22, offset: 72273},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1967, col: 22, offset: 72273},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1967, col: 22, offset: 72273},
							expr: &ruleRefExpr{
								pos:  position{line: 1967, col: 23, offset: 72274},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1967, col: 45, offset: 72296},
							expr: &ruleRefExpr{
								pos:  position{line: 1967, col: 45, offset: 72296},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1967, col: 52, offset: 72303},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1967, col: 57, offset: 72308},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1967, col: 66, offset: 72317},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1967, col: 92, offset: 72343},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1971, col: 1, offset: 72408},
			expr: &actionExpr{
				pos: position{line: 1971, col: 29, offset: 72436},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1971, col: 29, offset: 72436},
					expr: &charClassMatcher{
						pos:        position{line: 1971, col: 29, offset: 72436},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1979, col: 1, offset: 72749},
			expr: &choiceExpr{
				pos: position{line: 1979, col: 17, offset: 72765},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1979, col: 17, offset: 72765},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1979, col: 49, offset: 72797},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1979, col: 78, offset: 72826},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1981, col: 1, offset: 72862},
			expr: &litMatcher{
				pos:        position{line: 1981, col: 26, offset: 72887},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1984, col: 1, offset: 72959},
			expr: &actionExpr{
				pos: position{line: 1984, col: 31, offset: 72989},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1984, col: 31, offset: 72989},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1984, col: 31, offset: 72989},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1984, col: 42, offset: 73000},
								expr: &ruleRefExpr{
									pos:  position{line: 1984, col: 43, offset: 73001},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1984, col: 56, offset: 73014},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1984, col: 63, offset: 73021},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1989, col: 1, offset: 73251},
			expr: &actionExpr{
				pos: position{line: 1990, col: 5, offset: 73291},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1990, col: 5, offset: 73291},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1990, col: 5, offset: 73291},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1990, col: 16, offset: 73302},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1990, col: 16, offset: 73302},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1990, col: 16, offset: 73302},
											expr: &ruleRefExpr{
												pos:  position{line: 1990, col: 16, offset: 73302},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1990, col: 23, offset: 73309},
											expr: &charClassMatcher{
												pos:        position{line: 1990, col: 23, offset: 73309},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1992, col: 8, offset: 73362},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1993, col: 5, offset: 73425},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1993, col: 16, offset: 73436},
								expr: &actionExpr{
									pos: position{line: 1994, col: 9, offset: 73446},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 1994, col: 9, offset: 73446},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1994, col: 9, offset: 73446},
												expr: &ruleRefExpr{
													pos:  position{line: 1994, col: 10, offset: 73447},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1995, col: 9, offset: 73466},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1995, col: 20, offset: 73477},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 1995, col: 20, offset: 73477},
														expr: &charClassMatcher{
															pos:        position{line: 1995, col: 20, offset: 73477},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1997, col: 12, offset: 73538},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 2004, col: 1, offset: 73768},
			expr: &actionExpr{
				pos: position{line: 2004, col: 39, offset: 73806},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 2004, col: 39, offset: 73806},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2004, col: 39, offset: 73806},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2004, col: 50, offset: 73817},
								expr: &ruleRefExpr{
									pos:  position{line: 2004, col: 51, offset: 73818},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2005, col: 9, offset: 73839},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2005, col: 31, offset: 73861},
							expr: &ruleRefExpr{
								pos:  position{line: 2005, col: 31, offset: 73861},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2005, col: 38, offset: 73868},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 2005, col: 46, offset: 73876},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2005, col: 53, offset: 73883},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 2005, col: 95, offset: 73925},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2005, col: 96, offset: 73926},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2005, col: 96, offset: 73926},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2005, col: 118, offset: 73948},
											expr: &ruleRefExpr{
												pos:  position{line: 2005, col: 118, offset: 73948},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2005, col: 125, offset: 73955},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2005, col: 132, offset: 73962},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 2010, col: 1, offset: 74121},
			expr: &actionExpr{
				pos: position{line: 2010, col: 44, offset: 74164},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 2010, col: 44, offset: 74164},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2010, col: 50, offset: 74170},
						expr: &ruleRefExpr{
							pos:  position{line: 2010, col: 51, offset: 74171},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 2014, col: 1, offset: 74255},
			expr: &actionExpr{
				pos: position{line: 2015, col: 5, offset: 74310},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 2015, col: 5, offset: 74310},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2015, col: 5, offset: 74310},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2015, col: 11, offset: 74316},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 2015, col: 11, offset: 74316},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2015, col: 11, offset: 74316},
											expr: &ruleRefExpr{
												pos:  position{line: 2015, col: 12, offset: 74317},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2015, col: 34, offset: 74339},
											expr: &charClassMatcher{
												pos:        position{line: 2015, col: 34, offset: 74339},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2017, col: 8, offset: 74392},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 2022, col: 1, offset: 74518},
			expr: &actionExpr{
				pos: position{line: 2023, col: 5, offset: 74556},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2023, col: 5, offset: 74556},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2023, col: 5, offset: 74556},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2023, col: 16, offset: 74567},
								expr: &ruleRefExpr{
									pos:  position{line: 2023, col: 17, offset: 74568},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2024, col: 5, offset: 74585},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2031, col: 5, offset: 74792},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2031, col: 12, offset: 74799},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2035, col: 1, offset: 74949},
			expr: &actionExpr{
				pos: position{line: 2035, col: 16, offset: 74964},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2035, col: 16, offset: 74964},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 2040, col: 1, offset: 75047},
			expr: &actionExpr{
				pos: position{line: 2040, col: 39, offset: 75085},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 2040, col: 39, offset: 75085},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 2040, col: 45, offset: 75091},
						expr: &ruleRefExpr{
							pos:  position{line: 2040, col: 46, offset: 75092},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 2044, col: 1, offset: 75172},
			expr: &actionExpr{
				pos: position{line: 2044, col: 38, offset: 75209},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 2044, col: 38, offset: 75209},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2044, col: 38, offset: 75209},
							expr: &ruleRefExpr{
								pos:  position{line: 2044, col: 39, offset: 75210},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2044, col: 49, offset: 75220},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2044, col: 58, offset: 75229},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2044, col: 58, offset: 75229},
									expr: &charClassMatcher{
										pos:        position{line: 2044, col: 58, offset: 75229},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2046, col: 4, offset: 75274},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2053, col: 1, offset: 75460},
			expr: &actionExpr{
				pos: position{line: 2053, col: 14, offset: 75473},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2053, col: 14, offset: 75473},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2053, col: 14, offset: 75473},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2053, col: 19, offset: 75478},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2053, col: 25, offset: 75484},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2053, col: 43, offset: 75502},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2057, col: 1, offset: 75567},
			expr: &actionExpr{
				pos: position{line: 2057, col: 21, offset: 75587},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2057, col: 21, offset: 75587},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2057, col: 30, offset: 75596},
						expr: &choiceExpr{
							pos: position{line: 2057, col: 31, offset: 75597},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2057, col: 31, offset: 75597},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2057, col: 38, offset: 75604},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2057, col: 53, offset: 75619},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2057, col: 66, offset: 75632},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 2057, col: 74, offset: 75640},
									run: (*parser).callonIndexTermContent9,
									expr: &seqExpr{
										pos: position{line: 2057, col: 75, offset: 75641},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2057, col: 75, offset: 75641},
												expr: &litMatcher{
													pos:        position{line: 2057, col: 76, offset: 75642},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2057, col: 81, offset: 75647,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2063, col: 1, offset: 75753},
			expr: &actionExpr{
				pos: position{line: 2063, col: 23, offset: 75775},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2063, col: 23, offset: 75775},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2063, col: 23, offset: 75775},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2063, col: 29, offset: 75781},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2063, col: 36, offset: 75788},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2064, col: 5, offset: 75820},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2064, col: 11, offset: 75826},
								expr: &actionExpr{
									pos: position{line: 2064, col: 12, offset: 75827},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2064, col: 12, offset: 75827},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2064, col: 12, offset: 75827},
												expr: &ruleRefExpr{
													pos:  position{line: 2064, col: 12, offset: 75827},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2064, col: 19, offset: 75834},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2064, col: 23, offset: 75838},
												expr: &ruleRefExpr{
													pos:  position{line: 2064, col: 23, offset: 75838},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2064, col: 30, offset: 75845},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2064, col: 39, offset: 75854},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2065, col: 5, offset: 75912},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2065, col: 11, offset: 75918},
								expr: &actionExpr{
									pos: position{line: 2065, col: 12, offset: 75919},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2065, col: 12, offset: 75919},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2065, col: 12, offset: 75919},
												expr: &ruleRefExpr{
													pos:  position{line: 2065, col: 12, offset: 75919},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2065, col: 19, offset: 75926},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2065, col: 23, offset: 75930},
												expr: &ruleRefExpr{
													pos:  position{line: 2065, col: 23, offset: 75930},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2065, col: 30, offset: 75937},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2065, col: 39, offset: 75946},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2066, col: 5, offset: 76004},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2070, col: 1, offset: 76083},
			expr: &actionExpr{
				pos: position{line: 2070, col: 30, offset: 76112},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2070, col: 30, offset: 76112},
					expr: &choiceExpr{
						pos: position{line: 2070, col: 31, offset: 76113},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2070, col: 31, offset: 76113},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2070, col: 42, offset: 76124},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2077, col: 1, offset: 76273},
			expr: &actionExpr{
				pos: position{line: 2077, col: 14, offset: 76286},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2077, col: 14, offset: 76286},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2077, col: 14, offset: 76286},
							expr: &ruleRefExpr{
								pos:  position{line: 2077, col: 15, offset: 76287},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2077, col: 19, offset: 76291},
							expr: &ruleRefExpr{
								pos:  position{line: 2077, col: 19, offset: 76291},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2077, col: 26, offset: 76298},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2085, col: 1, offset: 76443},
			expr: &choiceExpr{
				pos: position{line: 2085, col: 11, offset: 76453},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2085, col: 11, offset: 76453},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2085, col: 24, offset: 76466},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2085, col: 36, offset: 76478},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2085, col: 48, offset: 76490},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2085, col: 61, offset: 76503},
						name: "Ellipsis",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2087, col: 1, offset: 76513},
			expr: &actionExpr{
				pos: position{line: 2087, col: 15, offset: 76527},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2087, col: 15, offset: 76527},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2090, col: 1, offset: 76580},
			expr: &actionExpr{
				pos: position{line: 2090, col: 14, offset: 76593},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2090, col: 14, offset: 76593},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2093, col: 1, offset: 76647},
			expr: &actionExpr{
				pos: position{line: 2093, col: 14, offset: 76660},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2093, col: 14, offset: 76660},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2096, col: 1, offset: 76715},
			expr: &actionExpr{
				pos: position{line: 2096, col: 15, offset: 76729},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2096, col: 15, offset: 76729},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2099, col: 1, offset: 76783},
			expr: &actionExpr{
				pos: position{line: 2099, col: 13, offset: 76795},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2099, col: 13, offset: 76795},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2107, col: 1, offset: 77070},
			expr: &actionExpr{
				pos: position{line: 2107, col: 22, offset: 77091},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2107, col: 22, offset: 77091},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2107, col: 22, offset: 77091},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2107, col: 31, offset: 77100},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2107, col: 35, offset: 77104},
							expr: &charClassMatcher{
								pos:        position{line: 2107, col: 36, offset: 77105},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2114, col: 1, offset: 77285},
			expr: &charClassMatcher{
				pos:        position{line: 2114, col: 13, offset: 77297},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2116, col: 1, offset: 77307},
			expr: &choiceExpr{
				pos: position{line: 2116, col: 16, offset: 77322},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2116, col: 16, offset: 77322},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2116, col: 22, offset: 77328},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2116, col: 28, offset: 77334},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2116, col: 34, offset: 77340},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2116, col: 40, offset: 77346},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2116, col: 46, offset: 77352},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2118, col: 1, offset: 77358},
			expr: &actionExpr{
				pos: position{line: 2118, col: 14, offset: 77371},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2118, col: 14, offset: 77371},
					expr: &charClassMatcher{
						pos:        position{line: 2118, col: 14, offset: 77371},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2122, col: 1, offset: 77417},
			expr: &choiceExpr{
				pos: position{line: 2126, col: 5, offset: 77744},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2126, col: 5, offset: 77744},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2126, col: 5, offset: 77744},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2126, col: 5, offset: 77744},
									expr: &charClassMatcher{
										pos:        position{line: 2126, col: 5, offset: 77744},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2126, col: 15, offset: 77754},
									expr: &choiceExpr{
										pos: position{line: 2126, col: 17, offset: 77756},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2126, col: 17, offset: 77756},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2126, col: 30, offset: 77769},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2128, col: 9, offset: 77839},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2128, col: 9, offset: 77839},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2128, col: 9, offset: 77839},
									expr: &charClassMatcher{
										pos:        position{line: 2128, col: 9, offset: 77839},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2128, col: 19, offset: 77849},
									expr: &seqExpr{
										pos: position{line: 2128, col: 20, offset: 77850},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2128, col: 20, offset: 77850},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2128, col: 27, offset: 77857},
												expr: &charClassMatcher{
													pos:        position{line: 2128, col: 27, offset: 77857},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2132, col: 1, offset: 77933},
			expr: &choiceExpr{
				pos: position{line: 2133, col: 5, offset: 78014},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2133, col: 5, offset: 78014},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2133, col: 5, offset: 78014},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2133, col: 5, offset: 78014},
									expr: &charClassMatcher{
										pos:        position{line: 2133, col: 5, offset: 78014},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2133, col: 19, offset: 78028},
									expr: &choiceExpr{
										pos: position{line: 2133, col: 21, offset: 78030},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2133, col: 21, offset: 78030},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2133, col: 31, offset: 78040},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2135, col: 9, offset: 78109},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2138, col: 1, offset: 78209},
			expr: &actionExpr{
				pos: position{line: 2138, col: 12, offset: 78220},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2138, col: 12, offset: 78220},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2142, col: 1, offset: 78285},
			expr: &actionExpr{
				pos: position{line: 2142, col: 17, offset: 78301},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2142, col: 17, offset: 78301},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2142, col: 22, offset: 78306},
						expr: &choiceExpr{
							pos: position{line: 2142, col: 23, offset: 78307},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2142, col: 23, offset: 78307},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 2142, col: 34, offset: 78318},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 2146, col: 1, offset: 78402},
			expr: &actionExpr{
				pos: position{line: 2146, col: 25, offset: 78426},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2146, col: 25, offset: 78426},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2146, col: 30, offset: 78431},
						expr: &charClassMatcher{
							pos:        position{line: 2146, col: 31, offset: 78432},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2150, col: 1, offset: 78504},
			expr: &actionExpr{
				pos: position{line: 2150, col: 13, offset: 78516},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2150, col: 13, offset: 78516},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2150, col: 13, offset: 78516},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2150, col: 20, offset: 78523},
								expr: &ruleRefExpr{
									pos:  position{line: 2150, col: 21, offset: 78524},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2150, col: 34, offset: 78537},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2150, col: 39, offset: 78542},
								expr: &choiceExpr{
									pos: position{line: 2150, col: 40, offset: 78543},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2150, col: 40, offset: 78543},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2150, col: 51, offset: 78554},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2154, col: 1, offset: 78642},
			expr: &actionExpr{
				pos: position{line: 2154, col: 23, offset: 78664},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2154, col: 23, offset: 78664},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2154, col: 23, offset: 78664},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2154, col: 31, offset: 78672},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2154, col: 43, offset: 78684},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2154, col: 48, offset: 78689},
								expr: &choiceExpr{
									pos: position{line: 2154, col: 49, offset: 78690},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2154, col: 49, offset: 78690},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2154, col: 60, offset: 78701},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 2158, col: 1, offset: 78789},
			expr: &oneOrMoreExpr{
				pos: position{line: 2158, col: 13, offset: 78801},
				expr: &charClassMatcher{
					pos:        position{line: 2158, col: 14, offset: 78802},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 2160, col: 1, offset: 78936},
			expr: &actionExpr{
				pos: position{line: 2160, col: 21, offset: 78956},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 2160, col: 21, offset: 78956},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2160, col: 21, offset: 78956},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2160, col: 29, offset: 78964},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2160, col: 41, offset: 78976},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 2160, col: 47, offset: 78982},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 2165, col: 1, offset: 79230},
			expr: &oneOrMoreExpr{
				pos: position{line: 2165, col: 22, offset: 79251},
				expr: &charClassMatcher{
					pos:        position{line: 2165, col: 23, offset: 79252},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 2167, col: 1, offset: 79384},
			expr: &actionExpr{
				pos: position{line: 2167, col: 9, offset: 79392},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2167, col: 9, offset: 79392},
					expr: &charClassMatcher{
						pos:        position{line: 2167, col: 9, offset: 79392},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 2171, col: 1, offset: 79440},
			expr: &choiceExpr{
				pos: position{line: 2171, col: 15, offset: 79454},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2171, col: 15, offset: 79454},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2171, col: 27, offset: 79466},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2171, col: 40, offset: 79479},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2171, col: 51, offset: 79490},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2171, col: 62, offset: 79501},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 2173, col: 1, offset: 79512},
			expr: &actionExpr{
				pos: position{line: 2173, col: 7, offset: 79518},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2173, col: 7, offset: 79518},
					expr: &charClassMatcher{
						pos:        position{line: 2173, col: 7, offset: 79518},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2177, col: 1, offset: 79643},
			expr: &actionExpr{
				pos: position{line: 2177, col: 10, offset: 79652},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2177, col: 10, offset: 79652},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2181, col: 1, offset: 79694},
			expr: &actionExpr{
				pos: position{line: 2181, col: 11, offset: 79704},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2181, col: 11, offset: 79704},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2181, col: 11, offset: 79704},
							expr: &litMatcher{
								pos:        position{line: 2181, col: 11, offset: 79704},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2181, col: 16, offset: 79709},
							expr: &ruleRefExpr{
								pos:  position{line: 2181, col: 16, offset: 79709},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2185, col: 1, offset: 79761},
			expr: &choiceExpr{
				pos: position{line: 2185, col: 10, offset: 79770},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2185, col: 10, offset: 79770},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2185, col: 16, offset: 79776},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2185, col: 16, offset: 79776},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2189, col: 1, offset: 79817},
			expr: &choiceExpr{
				pos: position{line: 2189, col: 12, offset: 79828},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2189, col: 12, offset: 79828},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2189, col: 21, offset: 79837},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2189, col: 28, offset: 79844},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2191, col: 1, offset: 79850},
			expr: &notExpr{
				pos: position{line: 2191, col: 8, offset: 79857},
				expr: &anyMatcher{
					line: 2191, col: 9, offset: 79858,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2193, col: 1, offset: 79861},
			expr: &choiceExpr{
				pos: position{line: 2193, col: 8, offset: 79868},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2193, col: 8, offset: 79868},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2193, col: 18, offset: 79878},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onRawFile1(blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonRawFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawFile1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentRawBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentRawBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentRawBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["name"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementShortHandAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attrs"])
}

func (c *current) onBlockAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonBlockAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrList1(stack["attrs"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {
	return types.NewElementStyle(style.(string))
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional2, value.(string))
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional3, value.(string))
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {
	return types.NewElementOption(option.(string))
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {
	return value.(string), nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onNamedAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonNamedAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrs1(stack["attrs"])
}

func (c *current) onNamedAttrPair1(n, v interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(n.(string), v.(string))
}

func (p *parser) callonNamedAttrPair1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrPair1(stack["n"], stack["v"])
}

func (c *current) onAttrEmpty1() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonAttrEmpty1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrEmpty1()
}

func (c *current) onAttrValSQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValSQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQ1(stack["val"])
}

func (c *current) onAttrValSQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValSQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQin1(stack["val"])
}

func (c *current) onAttrValSQEsc1() (interface{}, error) {
	return `'`, nil
}

func (p *parser) callonAttrValSQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQEsc1()
}

func (c *current) onAttrValDQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValDQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQ1(stack["val"])
}

func (c *current) onAttrValDQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValDQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQin1(stack["val"])
}

func (c *current) onAttrValDQEsc1() (interface{}, error) {
	return `"`, nil
}

func (p *parser) callonAttrValDQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQEsc1()
}

func (c *current) onAttrValPosFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValPosFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValPosFB1()
}

func (c *current) onAttrValNamedFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValNamedFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValNamedFB1()
}

func (c *current) onInlinePositionalValue1(value interface{}) (interface{}, error) {
	return value.(string), nil
}

func (p *parser) callonInlinePositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePositionalValue1(stack["value"])
}

func (c *current) onInlineValuePlain1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineValuePlain1()
}

func (c *current) onShortHandValuePlain1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1()
}

func (c *current) onNamedAttr1(key, value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(key.(string), value.(string))
}

func (p *parser) callonNamedAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttr1(stack["key"], stack["value"])
}

func (c *current) onNamedAttrKey1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttrKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrKey1()
}

func (c *current) onAttrValuePlain1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttrValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValuePlain1()
}

func (c *current) onAttrValueSingleQuoted1() (interface{}, error) {
	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1()
}

func (c *current) onAttrValueDoubleQuoted1() (interface{}, error) {
	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1()
}

func (c *current) onAttrValueNone1() (interface{}, error) {
	return "", nil
}

func (p *parser) callonAttrValueNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueNone1()
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {
	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attrs, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attrs)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attrs"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attrs, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attrs)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attrs"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attrs, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attrs)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attrs"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph13(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonRawParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph26(stack["attributes"])
}

func (c *current) onRawParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph32(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph32(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))
}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph18(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph18(stack["attributes"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph24(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph24(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onRawVerseParagraph6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonRawVerseParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph6(stack["attributes"])
}

func (c *current) onRawVerseParagraph1(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawVerseParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement19(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement19(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttrs interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttrs.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImage1(path, inlineAttrs interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttrs.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImageAttrs1(alt, w, h, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(alt, w, h, nv)
}

func (p *parser) callonInlineImageAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttrs1(stack["alt"], stack["w"], stack["h"], stack["nv"])
}

func (c *current) onImageAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["attrs"])
}

func (c *current) onImageAltInline1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltInline1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltInline1(stack["value"])
}

func (c *current) onImageWidth1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrWidth, value)
}

func (p *parser) callonImageWidth1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidth1(stack["value"])
}

func (c *current) onImageHeight1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageHeight, value)
}

func (p *parser) callonImageHeight1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeight1(stack["value"])
}

func (c *current) onImageAltAttr1(value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(types.AttrImageAlt, value.(string))
}

func (p *parser) callonImageAltAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltAttr1(stack["value"])
}

func (c *current) onImageWidthAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrWidth, value.(string))
	}
	return nil, nil
}

func (p *parser) callonImageWidthAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidthAttr1(stack["value"])
}

func (c *current) onImageHeightAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrImageHeight, value.(string))
	}
	return nil, nil
}

func (p *parser) callonImageHeightAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeightAttr1(stack["value"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attrs interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attrs.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attrs"])
}

func (c *current) onIconAttrs1(size, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(size, nv)
}

func (p *parser) callonIconAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttrs1(stack["size"], stack["nv"])
}

func (c *current) onIconSize1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrIconSize, value)
}

func (p *parser) callonIconSize1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconSize1(stack["value"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLineContent1()
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {
	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["line"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onNormalElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attrs, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attrs)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attrs"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {
	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent9()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
